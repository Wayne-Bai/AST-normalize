// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.ux3.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ActionBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.ux3.ActionBarRenderer");

/**
 * Static initializer. Creates and empty ActionBarRenderer instance.
 * 
 * @class ActionBar renderer. 
 * @static
 */
sap.ui.ux3.ActionBarRenderer = {
};



/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ActionBarRenderer.render = function(oRenderManager, oControl){ 
	// convenience variable
	var rm = oRenderManager;
	
	// render ActionBar
	// result: <div id=​"<id>" data-sap-ui=​"<id>" class=​"sapUiUx3ActionBar" role=​"toolbar">​
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3ActionBar");
	rm.writeClasses();
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute('role', 'toolbar');
	} 
	rm.write(">");
	
	// render list for social actions
	rm.write("<ul");
	rm.writeAttribute('id', oControl.getId() + "-socialActions");
	rm.addClass("sapUiUx3ActionBarSocialActions");
	rm.writeClasses();
	
	rm.addStyle("min-width", oControl._getSocialActionListMinWidth () + "px");
	rm.writeStyles();    
	
	rm.write(">");
	this.renderSocialActions(rm, oControl);
	rm.write("</ul>");
	
	// render list for business actions
	rm.write("<ul  id='" + oControl.getId() + "-businessActions' class='sapUiUx3ActionBarBusinessActions'>");
	this.renderBusinessActionButtons(rm, oControl);
	rm.write("</ul>");
	
	// closing tag for toolbar
	rm.write("</div>");
	
};

/**
 * Renders the HTML for toolbar buttons of business actions
 *
 * @param {sap.ui.core.RenderManager}
 *			rm the RenderManager that can be used for writing to
 *			the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *			oControl an object representation of the control that should be
 *			rendered
 */;
sap.ui.ux3.ActionBarRenderer.renderBusinessActionButtons = function(rm, oControl) {

	var actionButtons = oControl._getBusinessActionButtons();
	var oMoreMenuButton = oControl._getMoreMenuButton();
	
	if(actionButtons && actionButtons.length > 0) {
		//Render list for business action buttons
		//Do not write attribue tabindex in list element because this is
		//already contained in the buttons control. If you write it twice,
		//both arrow and tab will work, which is wrong
		for ( var i = 0; i < actionButtons.length; i++) {
			var oButton = actionButtons[i];
			rm.write("<li");
			rm.addClass("sapUiUx3ActionBarItemRight");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oButton);
			rm.write("</li>");
		}
		this._renderMoreMenuButton(rm, oMoreMenuButton);
	} else if (oMoreMenuButton){
		//There may be business actions which have to be displayed in the "More Menu"
		this._renderMoreMenuButton(rm, oMoreMenuButton);
	}
}

/**
 * Renders "More" menu button if present
 *
 * @param {sap.ui.core.RenderManager}
 *			rm the RenderManager that can be used for writing to
 *			the Render-Output-Buffer
 * @param {sap.ui.commons.MenuButton}
 *			oMoreMenuButton menu button to be rendered, may be null
 * @private
 */;
sap.ui.ux3.ActionBarRenderer._renderMoreMenuButton = function (rm, oMoreMenuButton) {
	
	if(oMoreMenuButton) {
		rm.write("<li");
		rm.addClass("sapUiUx3ActionBarItemRight");
		rm.addClass("sapUiUx3ActionBarMoreButton");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oMoreMenuButton);
		rm.write("</li>");
	}
};



/**
 * Renders the HTML for sap.ui.ux3.Actionbar: social actions in a specified order:
 * 1. Update (Feed)
 * 2. Follow
 * 3. Flag
 * 4. Favorite
 * 5. Open
 *
 * They are rendered only if they are present in action bar's 'mActionMap' though.
 *
 * @param {sap.ui.core.RenderManager}
 *			rm the RenderManager that can be used for writing to
 *			the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *			oControl an object representation of the control that should be
 *			rendered
 */;
 sap.ui.ux3.ActionBarRenderer.renderSocialActions = function(rm, oControl) {

	var mMap = oControl.mActionMap;
	var mKeys = oControl.mActionKeys;
	
	
	if(mMap[mKeys.Update]) {
		this._renderSocialActionListItem(rm, oControl, mMap[mKeys.Update]);
	}
	if(mMap[mKeys.Follow]) {
		this._renderSocialActionListItem(rm, oControl, mMap[mKeys.Follow]);
	}
	if(mMap[mKeys.Flag]) {
		this._renderSocialActionListItem(rm, oControl, mMap[mKeys.Flag]);
	}
	if(mMap[mKeys.Favorite]) {
		this._renderSocialActionListItem(rm, oControl, mMap[mKeys.Favorite]);
	}
	if(mMap[mKeys.Open]) {
		this._renderSocialActionListItem(rm, oControl, mMap[mKeys.Open]);
	}
	//Render social actions, which might have been added by an application
	//developer to aggregation 'socialActions' manually and which are not contained
	//in the predefined list of social actions Update, Follow, Flag, Favorite, Open
	for (var sKey in  mMap) {
		if(!sKey in sap.ui.ux3.ActionBarSocialActions) {
			this._renderSocialActionListItem(rm, oControl, mMap[sKey]);
		}
	}
 };
 
 /**
  * Renders the HTML for sap.ui.ux3.Actionbar: single social action list item
  *
  * @param {sap.ui.core.RenderManager}
  *			rm the RenderManager that can be used for writing to
  *			the Render-Output-Buffer
  * @param {sap.ui.core.Control}
  *			oControl an object representation of the control that should be
  *			rendered
  * @param {sap.ui.ux3.ThingAction}
  *			action an object representation of the control that should be
  *			rendered
  *  @private
  */;
  sap.ui.ux3.ActionBarRenderer._renderSocialActionListItem = function(rm, oControl, action) {
 	if(action && ! action.hide) {
 		rm.write("<li");
 		rm.addClass("sapUiUx3ActionBarItem");
 		rm.writeClasses();
 		rm.write(">");
 		this._renderSocialAction(rm, oControl, action);
 		rm.write("</li>");
 	}
  };
 
 
 /**
 * Renders the HTML for sap.ui.ux3.Actionbar: single social action
 *
 * @param {sap.ui.core.RenderManager}
 *			rm the RenderManager that can be used for writing to
 *			the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *			oControl an object representation of the control that should be
 *			rendered
 * @param {sap.ui.ux3.ThingAction}
 *			action an object representation of the control that should be
 *			rendered
 *  @private
 */;
 sap.ui.ux3.ActionBarRenderer._renderSocialAction = function(rm, oControl, action) {
	if (action.isMenu && action.isMenu(oControl)) {
		rm.write("<a role=\"button\" aria-disabled=\"false\" aria-haspopup=\"true\"");
	} else {
		rm.write("<a  role=\"button\" aria-disabled=\"false\" aria-haspopup=\"false\"");
	}
	rm.writeAttribute("tabindex", "0");
	rm.writeElementData(action);
	rm.addClass(action.cssClass);
	if (action.fnCalculateState) {
		rm.addClass(action.fnCalculateState(oControl));
	}
	rm.addClass("sapUiUx3ActionBarAction");
	rm.writeClasses();	
	
	if (action.getTooltip()) {
		rm.writeAttributeEscaped("title", action.getTooltip());
	}
	if (action.text) {
		rm.writeAttributeEscaped("text", oControl.getLocalizedText(action.getText()));
	}
	rm.write("></a>");
 };
 

 
 

}; // end of sap/ui/ux3/ActionBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.CollectionInspectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.Collection
jQuery.sap.declare("sap.ui.ux3.CollectionInspectorRenderer");

/**
 * @class Collection renderer.
 * @static
 */
sap.ui.ux3.CollectionInspectorRenderer = {}

/**
 * Renders the Collection
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.CollectionInspectorRenderer.render = function(oRenderManager,
		oControl) {
	// convenience variable
	var rm = oRenderManager;

	rm.write("<div");
	rm.addClass("sapUiUx3CI");
	if (oControl.getSidebarVisible()) {
		rm.addClass("sapUiUx3CISidebarOpened");
	} else {
		rm.addClass("sapUiUx3CISidebarClosed");
	}
	if (oControl.getFitParent()) {
		rm.addClass("sapUiUx3CIFitParent");
	}
	rm.writeClasses();
	rm.writeControlData(oControl);
	rm.write(">");

	rm.write("<div");
	rm.addClass("sapUiUx3CIToolBar");
	rm.writeClasses();
	rm.write(">");

	this.renderToggleButton(rm, oControl);
	this.renderCollectionSelector(rm, oControl);

	rm.write("</div>");
	
	rm.write('<div');
	rm.addClass("sapUiUx3CISidebar");
	rm.writeClasses();
	rm.writeAttribute("id", oControl.getId() + "-sidebar");
	rm.write(">");
	this.renderSidebar(rm, oControl);
	rm.write("</div>");

	rm.write("<div");
	rm.addClass("sapUiUx3CIContent");
	rm.writeAttribute("id", oControl.getId() + "-content");
	rm.writeClasses();
	rm.write(">");
	this.renderContent(rm, oControl);
	rm.write("</div>");
	rm.write("<div");
	rm.addClass("sapUiUx3CIClear");
	rm.writeClasses();
	rm.write(">");
	rm.write("</div>");
	rm.write("</div>");
};

/**
 * Renders the ToggleButton to open and close the sidebar
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.CollectionInspectorRenderer.renderToggleButton = function(rm, oControl) {
	// render Togglebutton
	if (oControl.getToggleButton()) {
		rm.write("<div");
		rm.writeAttribute("id", oControl.getId() + "-togglebutton");
		rm.addClass("sapUiUx3CIToggleButton");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oControl.getToggleButton());
		rm.write("</div>");
	}
};

/**
 * Renders the collection selector which selects the current collection
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.CollectionInspectorRenderer.renderCollectionSelector = function(rm, oControl) {
	// render collection selector
	if (oControl.getCollectionSelector()) {
		rm.write("<div");
		rm.addClass("sapUiUx3CICollectionSelector");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oControl.getCollectionSelector());
		rm.write("</div>");
	}
};

/**
 * Renders the Sidebar which displays all collections
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.CollectionInspectorRenderer.renderSidebar = function(rm, oControl) {
	rm.write("<div");
	rm.addClass("sapUiUx3CICollectionListContainer");
	rm.writeClasses();
	rm.write(">");
	rm.write('<ul tabindex="-1"');
	rm.addClass("sapUiUx3CICollectionList");
	rm.writeClasses();
	var oCollection = sap.ui.getCore().byId(oControl.getSelectedCollection());

	//ARIA
	if (oControl.getSelectedCollection()) {
		rm.writeAccessibilityState(oCollection, {
			role: "listbox",
			multiselectable: oCollection.getMultiSelection()
		});
	}
	rm.write(">");
	if (oControl.getSelectedCollection()) {
		var iItemCount = oCollection.getItems().length;
		jQuery.each(oCollection.getItems(), function(iIndex, oCollectionItem) {
			rm.write('<li tabindex="-1"');
			rm.writeElementData(oCollectionItem);
			rm.writeAttributeEscaped("title",oCollectionItem.getText());
			rm.addClass("sapUiUx3CICollectionListItem");
			rm.writeClasses();

			// ARIA
			rm.writeAccessibilityState(oCollectionItem, {
				role: "option",
				selected: (jQuery.inArray(oCollectionItem.getId(),oCollection.getSelectedItems()) >= 0),
				setsize: iItemCount,
				posinset: iIndex
			});

			rm.write(">");
			rm.writeEscaped(oCollectionItem.getText());
			rm.write("</li>");
		});
	}
	rm.write("</ul></div>");
	rm.renderControl(oControl.getEditButton());
};

/**
 * Renders the Content that is displayed
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.CollectionInspectorRenderer.renderContent = function(rm, oControl) {
	jQuery.each(oControl.getContent(), function(iIndex, oContent) {
		rm.renderControl(oContent);
	});
};
}; // end of sap/ui/ux3/CollectionInspectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSetRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.DataSet
jQuery.sap.declare("sap.ui.ux3.DataSetRenderer");

/**
 * @class DataSet renderer.
 * @static
 */
sap.ui.ux3.DataSetRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
 */
sap.ui.ux3.DataSetRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager,
		oView = null,
		oSwitch, aViewSwitches;

	oControl.prepareRendering();

	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3DS");
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");
	rm.write("<div id='" + oControl.getId() + "-toolbar'");
	rm.addClass('sapUiUx3DSToolbar');
	if (!oControl.getShowToolbar()) { 
		rm.addClass('noPadding');
	}
	rm.writeClasses();
	rm.write(">");
	this.renderToolbar(rm,oControl);
	rm.write("</div>");
	rm.write("<div id='" + oControl.getId() + "-filter'");
	rm.addClass('sapUiUx3DSFilterArea');
	if (!oControl.getShowFilter()) { 
		rm.addClass('noPadding');
	}
	rm.writeClasses();
	rm.write(">");
	this.renderFilterArea(rm,oControl);
	rm.write("</div>");
	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "-items");
	rm.addClass("sapUiUx3DSItems");
	rm.writeClasses();
	rm.write(">");
	oView = sap.ui.getCore().byId(oControl.getSelectedView());
	rm.renderControl(oView);
	rm.write("</div>");
	rm.write("</div>");
};

/**
 * Renders the HTML for the DataSet Toolbar
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager The RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl An object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.DataSetRenderer.renderToolbar = function(oRenderManager,oControl) {
	var rm = oRenderManager;
	if (oControl.getShowToolbar()) {
		rm.renderControl(oControl._getToolbar());
	}
};

/**
 * Renders the HTML for the DataSet FilterArea
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager The RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl An object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.DataSetRenderer.renderFilterArea = function(oRenderManager,oControl) {
	var rm = oRenderManager, aFilter = oControl.getFilter();
	if (oControl.getShowFilter()) {
		jQuery.each(aFilter,function(i, oFilter){
			rm.renderControl(oFilter);
		});
	}
};

}; // end of sap/ui/ux3/DataSetRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSetSimpleViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

 // Provides default renderer for the sap.ui.ux3.DataSetSimpleView
jQuery.sap.declare("sap.ui.ux3.DataSetSimpleViewRenderer");

/**
 * @class DataSetSimpleView renderer.
 * @static
 */
sap.ui.ux3.DataSetSimpleViewRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.DataSetSimpleViewRenderer.render = function(oRenderManager, oControl){
     // convenience variable
	var rm = oRenderManager;
	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3DSSV");
	if(oControl.getFloating()){
		if(oControl.getResponsive()){
			rm.addClass("sapUiUx3DSSVResponsive");
		}else{
			rm.addClass("sapUiUx3DSSVFloating");
		}
	}else{
		rm.addClass("sapUiUx3DSSVSingleRow");
	}
	if (oControl.getHeight()) {
		rm.addStyle("height", oControl.getHeight());
		rm.addClass("sapUiUx3DSSVSA");
	}
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">"); // SPAN element
	if( oControl.items) {
		for(var i = 0; i < oControl.items.length; i++) {
			this.renderItem(rm, oControl, oControl.items[i]);
		}
	}
	rm.write("</div>");
};

sap.ui.ux3.DataSetSimpleViewRenderer.renderItem = function(rm, oControl, oItem){
	rm.write("<div");
	rm.addClass("sapUiUx3DSSVItem");
	if(oControl.getFloating()) {
		rm.addClass("sapUiUx3DSSVFlow");
		if(oControl.getItemMinWidth() > 0){
			rm.writeAttribute("style","min-width:"+oControl.getItemMinWidth()+"px");
		}
	}
	if (oControl.isItemSelected(oItem)) {
		rm.addClass("sapUiUx3DSSVSelected");
	}
	rm.writeClasses();
	rm.writeElementData(oItem);
	rm.write(">");
	rm.renderControl(oItem.getAggregation("_template"));
	rm.write("</div>");
};

}; // end of sap/ui/ux3/DataSetSimpleViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactAreaRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.ExactArea
jQuery.sap.declare("sap.ui.ux3.ExactAreaRenderer");

/**
 * @class ExactArea renderer.
 * @static
 */
sap.ui.ux3.ExactAreaRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ExactAreaRenderer.render = function(oRenderManager, oControl){
	var rm = oRenderManager;

	if(!oControl.getVisible()) {
		return;
	}

	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3ExactArea");
	rm.writeClasses();
	rm.write(">");
	if(oControl.getToolbarVisible()){
		rm.write("<div id=\""+oControl.getId()+"-tb\" class=\"sapUiTb sapUiTbDesignFlat sapUiTbStandalone\" role=\"toolbar\">");
		rm.write("<div class=\"sapUiTbCont\"><div class=\"sapUiTbInner\">");
		var aToolbarItems = oControl.getToolbarItems();
		for(var idx=0; idx<aToolbarItems.length; idx++){
			var oToolbarItem = aToolbarItems[idx];
			if (oToolbarItem instanceof sap.ui.commons.ToolbarSeparator) {
				sap.ui.commons.ToolbarRenderer.renderSeparator(rm, oToolbarItem);
			} else if (oToolbarItem instanceof sap.ui.ux3.ExactAreaToolbarTitle) {
				rm.write("<div class=\"sapUiUx3ExactAreaTbTitle\">"+jQuery.sap.escapeHTML(oToolbarItem.getText())+"</div>");
			} else {
				rm.renderControl(oToolbarItem);
			}
		}
		rm.write("</div></div></div>");
	}
	rm.write("<div id=\""+oControl.getId()+"-ct\" class=\"sapUiUx3ExactAreaCont\">");
	var aChildren = oControl.getContent();
	for(var idx=0; idx<aChildren.length; idx++){
		rm.renderControl(aChildren[idx]);
	}
	rm.write("</div>");
	rm.write("</div>");
};
}; // end of sap/ui/ux3/ExactAreaRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactBrowserRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.ExactBrowser
jQuery.sap.declare("sap.ui.ux3.ExactBrowserRenderer");

/**
 * @class ExactBrowser renderer.
 * @static
 */
sap.ui.ux3.ExactBrowserRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ExactBrowserRenderer.render = function(oRenderManager, oControl){
	if(!oControl.getVisible()) {
		return;
	}
	
	var rm = oRenderManager;
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3ExactBrwsr");
	rm.writeClasses();
	rm.writeAttribute("role", "region");
	if(oControl.getShowHeader()){
		rm.writeAttribute("aria-labelledby", oControl.getId()+"-hdtitle");
	}
	if(oControl.getFollowUpControl()){
		rm.writeAttribute("aria-controls", oControl.getFollowUpControl());
	}

	var sTooltip = oControl.getTooltip_AsString();
	if(sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");

	if(oControl.getShowHeader()){
		rm.write("<div class=\"sapUiUx3ExactBrwsrHd\"><h2 id=\""+oControl.getId()+"-hdtitle\">");
		rm.write(jQuery.sap.escapeHTML(oControl.getHeaderTitle()));
		rm.write("</h2><div class=\"sapUiUx3ExactBrwsrHdTool\" role=\"toolbar\">");
		if(oControl.getEnableSave()){
			rm.renderControl(oControl._saveButton);
		}
		if(oControl.getEnableReset()){
			rm.renderControl(oControl._resetButton);
		}
		rm.write("</div></div>");
	}
	rm.renderControl(oControl._rootList);
	rm.write("</div>");
};
}; // end of sap/ui/ux3/ExactBrowserRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.ExactListRenderer
jQuery.sap.declare("sap.ui.ux3.ExactListRenderer");

/**
 * @class ExactList renderer.
 * @static
 */
sap.ui.ux3.ExactListRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ExactListRenderer.render = function(oRenderManager, oControl){

	var rm = oRenderManager;
	var aSubLists = oControl.getSubLists();
	var oAttribute = oControl._getAtt();
	
	if(!oAttribute){
		return; //No Attribute attached to this list -> ignore rendering
	}
	
	var bIsTop = oControl._isTop();

	// render the root tag
    rm.write("<div");
    rm.writeControlData(oControl);
    rm.addClass("sapUiUx3ExactLst");
    var bActiveTitle = false;
    
    var bTopListHidden = false;
    
    if(bIsTop){
    	var oBrowser = oControl.getParent();
    	if(oBrowser) {
    		if(oBrowser.hasOptionsMenu) {
    			bActiveTitle = oBrowser.hasOptionsMenu();
    			if(bActiveTitle){
    				rm.addClass("sapUiUx3ExactLstTopActive");
    			}
    		}
    		if(oBrowser.getShowTopList && !oBrowser.getShowTopList()) {
    			rm.addClass("sapUiUx3ExactLstTopHidden");
    			bTopListHidden = true;
    		}
    	}
    	
		rm.addClass("sapUiUx3ExactLstTop");
		rm.addStyle("height", oControl.getTopHeight()+"px");
    }
    if(oControl._bCollapsed){
		rm.addClass("sapUiUx3ExactLstCollapsed");
    }
    
    rm.addClass("sapUiUx3ExactLstLvl_" + oControl._iLevel);

    rm.writeClasses();
    rm.writeStyles();
    rm.write(">");
    
    if(bTopListHidden){
    	rm.write("<div id=\"" + oControl.getId() + "-foc\" class=\"sapUiUx3ExactLstFoc\" tabindex=\"0\"></div>");
    }

    if(!oControl._bPopupOpened){
		// render the list area with the used listbox
		rm.write("<div id=\"" + oControl.getId() + "-lst\" class=\"sapUiUx3ExactLstLst\"");
    	if(oControl._bCollapsed && oControl._oCollapseStyles && oControl._oCollapseStyles["lst"]){
    		rm.write(" style=\""+oControl._oCollapseStyles["lst"]+"\"");
    	}
    	
    	rm.write(">");
		rm.renderControl(oControl._lb);
		rm.write("<a id=\"" + oControl.getId() + "-exp\" class=\"sapUiUx3ExactLstExp\">"+this.getExpanderSymbol(false, false)+"</a>");
		rm.write("</div>");
    }else{
    	oControl._bRefreshList = true;
    }

    // render the content area with the sub lists
    rm.write("<div id=\"" + oControl.getId() + "-cntnt\" ");
    rm.write("class=\"sapUiUx3ExactLstCntnt");
    if(aSubLists.length == 0){
		rm.write(" sapUiUx3ExactLstCntntEmpty");
    }
    rm.write("\"");
    if(oControl._bCollapsed && oControl._oCollapseStyles && oControl._oCollapseStyles["cntnt"]){
    	rm.write(" style=\""+oControl._oCollapseStyles["cntnt"]+"\"");
    }
    rm.write(">");
    for(var i=0; i<aSubLists.length; i++){
		rm.renderControl(aSubLists[i]);
    }
    rm.write("</div>");

    // render the header
    rm.write("<header id=\"" + oControl.getId() + "-head\" class=\"sapUiUx3ExactLstHead\"");
    if(bIsTop && bActiveTitle){
    	rm.write(" role=\"button\" aria-haspopup=\"true\"");
    }
    if(!bIsTop && oControl._bCollapsed && oAttribute){
    	rm.writeAttribute("role", "region");
    	rm.writeAttribute("aria-expanded", "false");
    	rm.writeAttributeEscaped("aria-label", oControl._rb.getText("EXACT_LST_LIST_COLL_ARIA_LABEL", [oControl._iLevel, oAttribute.getText()]));
    }
    rm.write(" tabindex=\""+(bIsTop ? "0" : "-1")+"\">");
    if(bIsTop){
		// render the header content for top list
		rm.write("<h3 id=\"" + oControl.getId() + "-head-txt\" class=\"sapUiUx3ExactLstHeadTopTxt\"><span class=\"sapUiUx3ExactLstHeadTopTxtTxt\">");
		if(oControl.getTopTitle()){
			rm.writeEscaped(oControl.getTopTitle());
		}
		rm.write("</span>");
		if(bActiveTitle){
			rm.write("<span class=\"sapUiUx3ExactLstHeadTopIco\"></span>");
		}
		rm.write("</span></h3>");
    }else{
		// render the header content for non-top list
		rm.write("<h3 id=\"" + oControl.getId() + "-head-txt\" class=\"sapUiUx3ExactLstHeadTxt\"");
		if (oAttribute && oAttribute.getTooltip_AsString()) {
			rm.writeAttributeEscaped("title", oAttribute.getTooltip_AsString());
		}else if (oAttribute && oAttribute.getText()) {
			rm.writeAttributeEscaped("title", oAttribute.getText());
		}
		if(oControl._bCollapsed && oControl._oCollapseStyles && oControl._oCollapseStyles["head-txt"]){
	    	rm.write(" style=\""+oControl._oCollapseStyles["head-txt"]+"\"");
	    }
		rm.write(">");
		if(oAttribute){
			rm.writeEscaped(oAttribute.getText());
		}
		rm.write("</h3>");

		// render header actions
		rm.write("<div id=\"" + oControl.getId() + "-head-action\" class=\"sapUiUx3ExactLstHeadAct"+(oControl.getShowClose() ? "" : " sapUiUx3ExactLstHeadActNoClose")+"\">");
		rm.write("<a id=\"" + oControl.getId() + "-hide\" class=\"sapUiUx3ExactLstHide\" role=\"presentation\"");
		rm.writeAttributeEscaped("title", oControl._rb.getText(oControl._bCollapsed ? "EXACT_LST_LIST_EXPAND" : "EXACT_LST_LIST_COLLAPSE"));
		rm.write(">", this.getExpanderSymbol(!oControl._bCollapsed, true), "</a>");
		rm.write("<a id=\"" + oControl.getId() + "-close\" role=\"presentation\" class=\"sapUiUx3ExactLstClose\"");
		rm.writeAttributeEscaped("title", oControl._rb.getText("EXACT_LST_LIST_CLOSE"));
		rm.write(">X</a>");
		rm.write("</div>");
    }
    rm.write("</header>");

    // render resize bar
    rm.write("<div id=\"" + oControl.getId() + "-rsz\" class=\"sapUiUx3ExactLstRSz\"></div>");

	// close the root tag
    rm.write("</div>");
};


/**
 * Returns the symbol for the vertical or horizontal expander depending on the given expand state.
 * @private
 */
sap.ui.ux3.ExactListRenderer.getExpanderSymbol = function(bExpanded, bHorizontal){
	if(bHorizontal){
		if(sap.ui.getCore().getConfiguration().getRTL()){
			return bExpanded ? "&#9654;" : "&#9664;";
		}else{
			return bExpanded ? "&#9664;" : "&#9654;";
		}
	}else{
		return bExpanded ? "&#9650;" : "&#9660;";
	}
};

}; // end of sap/ui/ux3/ExactListRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.Exact
jQuery.sap.declare("sap.ui.ux3.ExactRenderer");

/**
 * @class Exact renderer.
 * @static
 */
sap.ui.ux3.ExactRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ExactRenderer.render = function(oRenderManager, oControl){
	var rm = oRenderManager;
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3Exact");
	rm.writeClasses();
	var sTooltip = oControl.getTooltip_AsString();
	if(sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	rm.renderControl(oControl._searchArea);
	if(oControl._bDetailsVisible){
		rm.renderControl(oControl._browser);
		rm.renderControl(oControl._resultText);
		rm.renderControl(oControl._resultArea);
	}
	rm.write("</div>");
};
}; // end of sap/ui/ux3/ExactRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FacetFilterListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.FacetFilterListRenderer
jQuery.sap.declare("sap.ui.ux3.FacetFilterListRenderer");

/**
 * @class FacetFilterList renderer.
 * @static
 */
sap.ui.ux3.FacetFilterListRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.FacetFilterListRenderer.render = function(oRenderManager, oControl) {

	var rm = oRenderManager;

	rm.write("<div ");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3FFLst");
	rm.writeClasses();
	rm.writeAttribute("style", "width:" + oControl.sWidth);
	rm.write(">");

	/*Header*/
	rm.write("<header id=\"" + oControl.getId() + "-head\"  class=\"sapUiUx3FFLstHead\"");
	if(oControl.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
	}
	rm.write(">");
	rm.write("<h3 id=\"" + oControl.getId() + "-head-txt\"  class=\"sapUiUx3FFLstHeadTxt\">");
	if (oControl.getTitle()) {
		rm.writeEscaped(oControl.getTitle());
	}
	rm.write("</h3>");
	rm.write("</header>");

	// render the list area with the used listbox
	rm.renderControl(oControl._oListBox);

	rm.write("</div>");
};

}; // end of sap/ui/ux3/FacetFilterListRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FacetFilterRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.FacetFilter
jQuery.sap.declare("sap.ui.ux3.FacetFilterRenderer");

/**
 * @class FacetFilter renderer.
 * @static
 */
sap.ui.ux3.FacetFilterRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.FacetFilterRenderer.render = function(oRenderManager, oControl) {
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	var rm = oRenderManager;
	var bFullHeight = (oControl.getVisibleItemCountMode() === sap.ui.ux3.VisibleItemCountMode.Auto); // "Auto"
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3FacetFilter");
	rm.writeClasses();
	if (bFullHeight){
		rm.writeAttribute("style", "height:100%");
	}
	rm.write(">");
	var aLists = oControl.getLists();
	if (aLists) {
		for(var i = 0; i < aLists.length; i++) {
			aLists[i].sWidth = 100/aLists.length + "%";
			aLists[i].bFullHeight = bFullHeight;
			rm.renderControl(aLists[i]);
		}
	}
	rm.write("</div>");
};
}; // end of sap/ui/ux3/FacetFilterRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FeedChunkRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.FeedChunk
jQuery.sap.declare("sap.ui.ux3.FeedChunkRenderer");

/**
 * @class FeedChunk renderer.
 * @static
 */
sap.ui.ux3.FeedChunkRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.FeedChunkRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;
	var oChunk = oControl;
	// check if chunk is a comment (child) of an other chunk
	if (oChunk.getParent() instanceof sap.ui.ux3.FeedChunk) {
		oChunk.bComment = true;
	} else{
		oChunk.bComment = false;
	}
	var sMyId = oChunk.getId();

	rm.write('<ARTICLE');
    rm.writeControlData(oChunk);
	rm.addClass('sapUiFeedChunk');
	if (oChunk.bComment) {
		rm.addClass('sapUiFeedChunkComment');
	}

	rm.writeClasses();
    rm.write('>');

    // thumbnail
	rm.write('<img id=' + sMyId + '-thumb');
	var sThumbnail = oChunk.getThumbnailSrc();
	if(!sThumbnail){
		sThumbnail = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sap.ui.core.theming.Parameters.get('sapUiFeedPersonPlaceholder');
	}
	rm.writeAttributeEscaped('src', sThumbnail);
	rm.writeAttributeEscaped('alt', oChunk.getSender());
	rm.writeClasses();
	rm.write('>');

    // text (starting with sender)
    rm.write('<DIV class= "sapUiFeedChunkText" >');
	rm.write('<a id=' + sMyId + '-sender ');
	rm.writeAttribute('href', 'javascript:void(0);');
	rm.write('>');
	rm.writeEscaped(oChunk.getSender());
	rm.write('</a> ');

	// HCM action MenuButton
	if (oChunk.oHCMMenuButton) {
		rm.renderControl(oChunk.oHCMMenuButton);
	}

	this.renderText(rm, oChunk);
	rm.write('</DIV>');

	// status icons
	if(!oChunk.bComment){
		rm.write('<UL class= "sapUiFeedChunkStatusIcons" >');
		if (oChunk.getFlagged()) {
			rm.write('<LI class= "sapUiFeedChunkFlagged" title="' + oChunk.rb.getText('FEED_FLAGGED') + '" >&#9873</LI>');
		}
		if (oChunk.getFavorite()) {
			rm.write('<LI class= "sapUiFeedChunkFavorite" title="' + oChunk.rb.getText('FEED_FAVORITE') + '" >&#9733</LI>');
		}
		if (oChunk.getShared()) {
			rm.write('<LI class= "sapUiFeedChunkShared" title="' + oChunk.rb.getText('FEED_SHARED') + '" >&#8635</LI>');
		}
		rm.write('</UL>');
	}

	// date
    rm.write('<SPAN class= "sapUiFeedChunkByline" >');
	rm.writeEscaped(oChunk.getTimestamp());
	rm.write('</SPAN>');

	if(!oChunk.bComment){
		// action buttons (only if exists)
		if (oChunk.oToolsButton){
			rm.renderControl(oChunk.oToolsButton);
		}
		if (oChunk.getEnableShare()) {
			rm.write('<BUTTON type = "button" id='+ sMyId + '-ActShare class= "sapUiFeedChunkAct sapUiFeedChunkActShare" title="' + oChunk.rb.getText('FEED_ACT_SHARE') + '" >&#8635</BUTTON>');
		}
		if (oChunk.getEnableInspect()) {
			rm.write('<BUTTON type = "button" id='+ sMyId + '-ActInspect class= "sapUiFeedChunkAct sapUiFeedChunkActInspect" title="' + oChunk.rb.getText('FEED_ACT_INSPECT') + '" >i</BUTTON>');
		}
		if (oChunk.getEnableFavorite()) {
			rm.write('<BUTTON type = "button" id='+ sMyId + '-ActFavorite class= "sapUiFeedChunkAct sapUiFeedChunkActFavorite" title="' + oChunk.rb.getText('FEED_ACT_FAVORITE') + '" >&#9733</BUTTON>');
		}
		if (oChunk.getEnableFlag()) {
			rm.write('<BUTTON type = "button" id='+ sMyId + '-ActFlag class= "sapUiFeedChunkAct sapUiFeedChunkActFlag" title="' + oChunk.rb.getText('FEED_ACT_FAVORITE') + '" >&#9873</BUTTON>');
		}
		if (oChunk.getEnableComment()) {
			rm.write('<BUTTON type = "button" id='+ sMyId + '-ActComment class= "sapUiFeedChunkAct sapUiFeedChunkActComment" title="' + oChunk.rb.getText('FEED_ACT_COMMENT') + '" >C</BUTTON>');
		}
	}

    // delete button
    if(oChunk.getDeletionAllowed() && oChunk.bComment){
		rm.write('<BUTTON type = "button" id='+ sMyId + '-delete class= "sapUiFeedChunkDel" title="' + oChunk.rb.getText('FEED_DELETE') + '" >X</BUTTON>');
    }

    // comments
    if(oChunk.getComments().length > 0 || oChunk.showCommentFeeder){
		rm.write("<SECTION>");
		this.renderComments(rm, oChunk);
		rm.write("</SECTION>");
    }

    rm.write('</ARTICLE>');
};

/*
 *	Render text with @References
 */
sap.ui.ux3.FeedChunkRenderer.renderText = function(rm, oChunk){

	var sText = oChunk.getText();
	var i = 0;

	do{
		var iPos = sText.search(/\s/);
		var sSpace = "",
			sWord = "";

		if(iPos < 0){
			// only 1 word
			sWord = sText;
		}else{
			sWord = sText.slice(0, iPos);
			sSpace = sText.slice(iPos, iPos + 1);
			sText = sText.slice(iPos + 1);
		}

		// check for special strings
		if (/^@/.test(sWord)) {
			// @-reference
			rm.write('<a id=' + oChunk.getId() + '-Ref' + i);
			rm.writeAttribute('href', 'javascript:void(0);');
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>', sSpace);
			i++;
		}else if (/^(https?|ftp):\/\//i.test(sWord) && jQuery.sap.validateUrl(sWord)) {
			// web link - valid URL
			rm.write('<a');
			rm.writeAttribute('href', jQuery.sap.encodeHTML(sWord));
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>',sSpace);
		}else if (/^(www\.)/i.test(sWord) && jQuery.sap.validateUrl("http://"+sWord)) {
			// web link without protocol -> use HTTP - valid URL
			rm.write('<a');
			rm.writeAttribute('href', jQuery.sap.encodeHTML("http://"+sWord));
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>',sSpace);
		}else if (/^[\w\.=-]+@[\w\.-]+\.[\w]{2,5}$/.test(sWord)) {
			//email - not 100% validity check and validation missing
			rm.write('<a');
			rm.writeAttribute('href', "mailto:"+jQuery.sap.encodeHTML(sWord));
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>',sSpace);
		}else{
			// normal word
			rm.writeEscaped(sWord + sSpace, true);
		}
	}while(iPos >= 0);

};

/*
 *	Render comment section content
 */
sap.ui.ux3.FeedChunkRenderer.renderComments = function(rm, oChunk){

	var oComments = oChunk.getComments();
	var iLength = oComments.length;

	// number of comments
	rm.write('<HEADER class= "sapUiFeedChunkComments" >');
	if(oChunk.rb) {
		rm.write(oChunk.rb.getText('FEED_NO_COMMENTS', [iLength]));

		if (iLength > oChunk.maxComments){
			rm.write('<a id=' + oChunk.getId() + '-all ');
			rm.writeAttribute('href', 'javascript:void(0);');
			rm.write('>');
			if (!oChunk.allComments) {
				rm.write(oChunk.rb.getText('FEED_ALL_COMMENTS'));
			} else {
				rm.write(oChunk.rb.getText('FEED_MAX_COMMENTS'));
			}
			rm.write('</a>');
		}
	}
	rm.write("</HEADER>");

	// comments are sorted from old to new. Newest comment is on the bottom
	var iNumberChunks = iLength;
	if (!oChunk.allComments && oChunk.maxComments < iNumberChunks) {
		iNumberChunks = oChunk.maxComments;
	}

	for ( var i = 0; i < iNumberChunks; i++) {
		rm.renderControl(oComments[iLength - iNumberChunks + i]);
	}

	// comment feeder
	if (oChunk.oCommentFeeder) {
		rm.renderControl(oChunk.oCommentFeeder);
	}

};

/*
 *	Render expand button
 */
sap.ui.ux3.FeedChunkRenderer.renderExpander = function(oChunk){

	if (oChunk.expanded) {
		return "<button id= '" + oChunk.getId() + "-exp' class='sapUiFeedChunkCollapse' title='" + oChunk.rb.getText("FEED_COLLAPS") + "'>&#9660</button>";
	} else {
		return "<button id= '" + oChunk.getId() + "-exp' class='sapUiFeedChunkExpand' title='" + oChunk.rb.getText("FEED_EXPAND") + "'>&#9660</button>";
	}

};
}; // end of sap/ui/ux3/FeedChunkRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FeedRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.ux3.FeedRenderer");

/**
 * @class Feed renderer.
 * @static
 */
sap.ui.ux3.FeedRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.FeedRenderer.render = function(oRenderManager, oControl){
    // convenience variable
	var rm = oRenderManager;
	var oFeed = oControl;
	var sMyId = oFeed.getId();

	// write the HTML into the render manager
    rm.write('<DIV');
    rm.writeControlData(oFeed);
	rm.addClass('sapUiFeed');
	rm.writeClasses();
    rm.write('>');

    //feeder
	rm.renderControl(oFeed.oFeeder);

    rm.write('<HEADER class=sapUiFeedTitle ><H4>');
    //titlebar
    var sTitle = oFeed.getTitle();
    if (!sTitle || sTitle == "") {
		// use default title
		sTitle = oFeed.rb.getText('FEED_TITLE');
	}
	rm.writeEscaped(sTitle);
	//menu button (only if exist)
	if(oFeed.oToolsButton){
		rm.renderControl(oFeed.oToolsButton);
	}
    //live-button (alsways must exist)
	rm.renderControl(oFeed.oLiveButton);
    rm.write('</H4>');

    //toolbar
    rm.write('<DIV class="sapUiFeedToolbar" >');
	rm.renderControl(oFeed.oFilter);
	rm.renderControl(oFeed.oSearchField);

    rm.write('</DIV>');
    rm.write('</HEADER>');

    //Chunks
    rm.write('<SECTION>');
    for ( var i = 0; i < oFeed.getChunks().length; i++) {
		var oChunk = oFeed.getChunks()[i];
		rm.renderControl(oChunk);
	}

    rm.write('</SECTION>');

    rm.write('</DIV>');

};

}; // end of sap/ui/ux3/FeedRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FeederRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.Feeder
jQuery.sap.declare("sap.ui.ux3.FeederRenderer");

/**
 * @class Feeder renderer.
 * @static
 */
sap.ui.ux3.FeederRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.FeederRenderer.render = function(oRenderManager, oControl){
    // convenience variable
	var rm = oRenderManager;
	var oFeeder = oControl;

	// write the HTML into the render manager
    rm.write('<DIV');
    rm.writeControlData(oFeeder);
	rm.addClass('sapUiFeeder');

	switch (oFeeder.getType()){
	case( sap.ui.ux3.FeederType.Medium):
		rm.addClass('sapUiFeederMedium');
	break;
	case( sap.ui.ux3.FeederType.Comment):
		rm.addClass('sapUiFeederComment');
	break;
	default: // large feeder is default
		rm.addClass('sapUiFeederLarge');
	break;
	}

	rm.writeClasses();
    rm.write('>');

    // thumbnail
	rm.write('<img id=' + oFeeder.getId() + '-thumb');
	var sThumbnail = oFeeder.getThumbnailSrc();
	if(!sThumbnail){
		sThumbnail = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sap.ui.core.theming.Parameters.get('sapUiFeedPersonPlaceholder');
	}
	rm.writeAttributeEscaped('src', sThumbnail);

//	rm.writeAttributeEscaped('alt', oChunk.getSender());
	rm.writeClasses();
	rm.write('>');

	// input area as editable DIV because of dynamic content
    rm.write('<DIV id=' + oFeeder.getId() + '-input contenteditable="true" class="sapUiFeederInput" >');

    // text
    if(oFeeder.getText() == ''){
		rm.write(this.getEmptyTextInfo( oFeeder ));
    }else{
		rm.writeEscaped(oFeeder.getText(), true);
    }

    rm.write('</DIV>');

    //send button
    oFeeder.initSendButton();
    rm.renderControl(oFeeder.oSendButton);

    rm.write('</DIV>');
};

sap.ui.ux3.FeederRenderer.getEmptyTextInfo = function( oFeeder ){
	return "<span class='sapUiFeederEmptyText'>" + jQuery.sap.encodeHTML(oFeeder.getPlaceholderText() || oFeeder.rb.getText("FEED_EMPTY_FEEDER")) + "</span>";
};

}; // end of sap/ui/ux3/FeederRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.NavigationBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.NavigationBar
jQuery.sap.declare("sap.ui.ux3.NavigationBarRenderer");

/**
 * @class NavigationBar renderer.
 * @static
 */
sap.ui.ux3.NavigationBarRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.NavigationBarRenderer.render = function(oRenderManager, oControl) {

	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	// convenience variable
	var rm = oRenderManager;
	var sId = oControl.getId();

	// write the HTML into the render manager
	rm.addClass("sapUiUx3NavBar");
	if (oControl.getToplevelVariant()) {
		rm.addClass("sapUiUx3NavBarToplevel");
	}
	
	rm.write("<nav");
	rm.writeControlData(oControl);
	rm.writeClasses();
	rm.write(" role='navigation'><ul id='" + sId + "-list' role='menubar' class='sapUiUx3NavBarList'>");
	sap.ui.ux3.NavigationBarRenderer.renderItems(rm, oControl);
	rm.write("</ul>");
	rm.write("<a id='" + sId + "-ofb' tabindex='-1' role='presentation' class='sapUiUx3NavBarBack' href='javascript:void(0)'>&lt;&lt;</a>");
	rm.write("<a id='" + sId + "-off' tabindex='-1' role='presentation' class='sapUiUx3NavBarForward' href='javascript:void(0)'>&gt;&gt;</a>");
	rm.write("<a id='" + sId + "-ofl' tabindex='-1' role='presentation' class='sapUiUx3NavBarOverflowBtn' href='javascript:void(0)'>");
	rm.writeIcon("sap-icon://overflow", [], { id : sId + "-oflt" });
	rm.write("</a>");
	rm.write("</nav>");
};



sap.ui.ux3.NavigationBarRenderer.renderItems = function(oRm, oControl) {
	var aItems = oControl.getItems();
	var bNeedToGetInstances = false;
	if (!aItems || aItems.length == 0) { // use the association instead, if the aggregation is empty
		aItems = oControl.getAssociatedItems();
		bNeedToGetInstances = true; // avoid type checks in the loop
	}
	
	var iNoOfItems = aItems.length;

	// dummy item to avoid jumping while animating
	oRm.write("<li><a id='" + oControl.getId() + "-dummyItem' class='sapUiUx3NavBarDummyItem sapUiUx3NavBarItem'>&nbsp;</a></li>");
	var selId = oControl.getSelectedItem();
	
	for (var i = 0; i < iNoOfItems; i++) {
		var item = bNeedToGetInstances ? sap.ui.getCore().byId(aItems[i]) : aItems[i];
		if (item.getVisible()) {
			var itemId = item.getId();
			var bIsSelected = itemId == selId;
			oRm.write("<li");
			if (bIsSelected) {
				oRm.write(" class='sapUiUx3NavBarItemSel'");
			}
			
			oRm.write("><a ");
			
			// Psssst. This is not right. Don't tell anyone, because it works like this.
			// The element data should be written into the li-element so that it is removed
			// automatically on destroy. Since when removing items an invalidate is called the list
			// is built up from scratch anyway, so it does not cause any problems. If this leads
			// to any problems, the onclick/userActivation code must be changed to reflect this
			// change. 
			// TL;DR: Not correct, won't fix - because it works and things might depend on the DOM
			//        being this way.
			oRm.writeElementData(item);
			oRm.writeAttributeEscaped("href", item.getHref() || "javascript:void(0);");
			oRm.write(" aria-setsize='" + iNoOfItems + "' aria-posinset='" + (i+1) + "' role='menuitemradio' class='sapUiUx3NavBarItem'");
			if (bIsSelected) {
				oRm.write(" tabindex='0'");
			}
			oRm.write(" aria-checked='" + (bIsSelected ? "true" : "false") + "'");
			
			var tooltip = item.getTooltip_AsString();
			if (tooltip) {
				oRm.write(" title='" + jQuery.sap.escapeHTML(tooltip) + "'");
			}
		
			oRm.write(">");
			oRm.write(jQuery.sap.escapeHTML(item.getText()));
			oRm.write("</a></li>");
		}
	}

	var arrowPos;
	if (oControl._bRtl) {
		arrowPos = "right:" + oControl._iLastArrowPos;
	} else {
		arrowPos = "left:" + oControl._iLastArrowPos;
	}
	oRm.write("<span id='" + oControl.getId() + "-arrow' style='" + arrowPos + "px;");
	if ((aItems.length == 1) && !oControl.getToplevelVariant() && !!sap.ui.Device.browser.internet_explorer && (sap.ui.Device.browser.version == 8 || sap.ui.Device.browser.version == 7)) { // IE8 workaround; other browsers understand nth-child, see Base-CSS
		oRm.write("display:none;"); // hide arrow when there is only one item
	}
	oRm.write("' class='sapUiUx3NavBarArrow'></span>");
};

}; // end of sap/ui/ux3/NavigationBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.NotificationBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.ux3.NotificationBarRenderer");
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/**
 * @class NotificationBar renderer.
 * @static
 */
sap.ui.ux3.NotificationBarRenderer = {};

/*
 * Set all methods into a close to prevent any abuse of helping methods
 */
(function() {
	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the
	 *            render output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should
	 *            be rendered
	 */
	sap.ui.ux3.NotificationBarRenderer.render = function(oRm, oControl) {
		fnWriteHeader(oRm, oControl);
		fnWriteItems(oRm, oControl);
		fnWriteFooter(oRm, oControl);
	};

	/**
	 * @private
	 */
	var fnWriteHeader = function(oRm, oControl) {

		oRm.write("<div");
		oRm.writeControlData(oControl);

		if (oControl.getVisibleStatus() === sap.ui.ux3.NotificationBarStatus.None) {
			if (oControl.$().length > 0) {
				// if NotiBar is already rendered
				if (oControl._resizeFrom) {
					oControl.$().stop().animate({
						height : 0
					}, "fast", function() {
						oControl.$().css("display", "none");

						oRm.addStyle("display", "none");
						oRm.writeAttribute("aria-hidden", "true");
					});
				} else {
					oRm.addStyle("display", "none");
					oRm.writeAttribute("aria-hidden", "true");
				}
			} else {
				/*
				 * setting the display attribute prevents the bar from
				 * flickering when the bar is initially loaded
				 */
				oRm.addStyle("display", "none");
				oRm.writeAttribute("aria-hidden", "true");
			}
		} else {
			oRm.writeAttribute("aria-hidden", "false");
			oRm.addStyle("display", "block");
		}
		oRm.writeStyles();

		oRm.addClass("sapUiNotificationBar");
		/*
		 * This ensures the maximize and minimize animation
		 */
		if (oControl._resizeTo) {
			if (oControl._resizeFrom == sap.ui.ux3.NotificationBarStatus.Max) {
				if (oControl._resizeTo == sap.ui.ux3.NotificationBarStatus.Default) {
					// Resizing from maximize back to default (class will be
					// removed in 'afterRendering')
					oRm.addClass("sapUiNotificationBarMaximized");
				}
			}
		}

		oRm.writeClasses();

		oRm.write(">"); // div element

		/*
		 * Rendering the hover element that helps to indicate if the bar is
		 * hovered. It is important that this element is within the root element
		 * of the NotificationBar since outside is strictly forbidden!
		 */
		fnRenderHoverItem(oRm, oControl);
	};

	var fnRenderToggler = function(oRm, oControl) {
		var sStatus = oControl.getVisibleStatus();
		if (sStatus !== "None") {
			var sId = oControl.getId() + "-toggler";

			oRm.write("<div");
			oRm.writeAttribute("id", sId);

			oRm.addClass("sapUiBarToggle");
			if (sStatus !== "Min") {
				oRm.addClass("sapUiBarToggleWide");
			}

			oRm.writeClasses();

			// set toggler always to visible if running on a mobile device
			if (sap.ui.Device.browser.mobile) {
				oRm.addStyle("display", "block");
				oRm.writeStyles();
			}

			oRm.write(">");

			fRenderToggleItem(oRm, oControl, "ArrowUp");
			fRenderToggleItem(oRm, oControl, "ArrowDown");
			fRenderToggleItem(oRm, oControl, "BarUp");
			fRenderToggleItem(oRm, oControl, "BarDown");

			oRm.write("</div>"); // div Toggler
		} else {
			if (sap.ui.Device.browser.mobile) {
				oRm.addStyle("display", "none");
				oRm.writeStyles();
			}
		}
	};

	var fRenderToggleItem = function(oRm, oControl, sItemType) {
		oRm.write("<div");

		var sId = oControl.getId() + "-" + sItemType;
		oRm.writeAttribute("id", sId);

		var sStatus = oControl.getVisibleStatus();
		var bHide = true;

		var sTitle = "";

		switch (sItemType) {
		case "ArrowUp":
			if (sStatus === "Default") {
				bHide = false;
			}
			sTitle = oControl._oResBundle.getText("NOTIBAR_TITLE_ENLARGE");
			break;

		case "ArrowDown":
			if (sStatus === "Max") {
				bHide = false;
			}
			sTitle = oControl._oResBundle.getText("NOTIBAR_TITLE_MINIMIZE");
			break;

		case "BarUp":
			if (sStatus === "Min") {
				bHide = false;
			}
			sTitle = oControl._oResBundle.getText("NOTIBAR_TITLE_BAR_UP");
			break;

		case "BarDown":
			if (sStatus === "Max" || sStatus === "Default") {
				bHide = false;
			}
			sTitle = oControl._oResBundle.getText("NOTIBAR_TITLE_BAR_DOWN");
			break;

		}
		oRm.writeAttributeEscaped("title", sTitle);

		if (bHide) {
			oRm.addClass("sapUiBarToggleHide");
		}

		oRm.addClass("sapUiBarToggle" + sItemType);
		oRm.addClass("sapUiBarToggleItem");

		oRm.writeClasses();
		oRm.write(">");

		oRm.write("</div>");
	};

	var fnRenderHoverItem = function(oRm, oControl) {
		oRm.write("<div");
		var sId = oControl.getId() + "-hoverItem";
		oRm.writeAttribute("id", "" + sId);

		var sStatus = oControl.getVisibleStatus();
		if (sStatus === "Min") {
			oRm.addStyle("top", "-" + sap.ui.ux3.NotificationBar.HOVER_ITEM_HEIGHT + "px");
			oRm.addStyle("display", "block");
		} else {
			oRm.addStyle("display", "none");
		}
		if (oControl.getDomRef()) {
			var $domRef = jQuery(oControl.getDomRef());
			var sWidth = $domRef.width() + "px";
			oRm.addStyle("width", sWidth);
		}
		oRm.writeStyles();

		oRm.addClass("sapUiNotiHover");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("</div>"); // div hover item
	};

	/**
	 * Renders all notifiers
	 */
	var fnWriteItems = function(oRm, oControl) {
		if (oControl.getResizeEnabled()) {
			fnRenderToggler(oRm, oControl);
		}

		if (oControl.hasItems()) {
			if (oControl.getVisibleStatus() == sap.ui.ux3.NotificationBarStatus.Max) {
				fnWriteItemsMaximized(oRm, oControl);
			} else {
				fnWriteItemsDefault(oRm, oControl);
			}
		}
	};

	var fnWriteItemsMaximized = function(oRm, oControl) {
		var aNotifiers = oControl.getNotifiers();
		var oMessageNotifier = oControl.getMessageNotifier();
		var sId = "";

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-containers");

		oRm.addClass("sapUiNotifierContainers");
		oRm.writeClasses();
		oRm.write(">");

		// suppress any invalidate since we are already rendering ;-)
		if (oMessageNotifier && oMessageNotifier.hasItems()) {
			oMessageNotifier.destroyAggregation("views", true);

			sId = oMessageNotifier.getId() + "-messageNotifierView";

			var oMNView = fnCreateNotifierViewMaximized(sId, oMessageNotifier);
			oMessageNotifier.addAggregation("views", oMNView, true);

			oRm.renderControl(oMNView);
		}

		if (aNotifiers.length > 0) {
			for ( var i = 0; i < aNotifiers.length; i++) {
				if (aNotifiers[i].hasItems()) {
					aNotifiers[i].destroyAggregation("views", true);

					sId = aNotifiers[i].getId() + "-notifierView";

					var oView = fnCreateNotifierViewMaximized(sId, aNotifiers[i]);
					aNotifiers[i].addAggregation("views", oView, true);

					oRm.renderControl(oView);
				}
			}
		}

		oRm.write("</div");
	};

	var fnWriteItemsDefault = function(oRm, oControl) {
		var aNotifiers = oControl.getNotifiers();
		var oMN = oControl.getMessageNotifier();

		oRm.write("<ul");
		oRm.writeAttribute("id", oControl.getId() + "-notifiers");
		oRm.addClass("sapUiNotifiers");
		oRm.writeClasses();
		oRm.write(">");

		/*
		 * Check if there is something wrong in the neighborhood... so call the
		 * Ghostbusters. If there is something to monitor/messages show it.
		 */
		var bMonitoring = false;
		for ( var i = 0; i < aNotifiers.length; i++) {
			if (aNotifiers[i].hasItems()) {
				bMonitoring = true;
				break;
			}
		}

		var bMessage = (oMN && oMN.hasItems()) ? true : false;

		if (bMonitoring) {
			fnRenderNotifiers(oRm, aNotifiers);
		}

		if (bMonitoring && bMessage) {
			/*
			 * Add separator between monitor controls and notification controls.
			 * The separator is only needed if monitoring controls and messages
			 * are available.
			 */
			oRm.write("<li");
			oRm.addClass("sapUiNotifierSeparator");
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("&nbsp;");
			oRm.write("</li>");
		}

		if (bMessage) {
			fnRenderMessageNotifier(oRm, oMN, oControl);
		}

		oRm.write("</ul>");
	};

	var fnWriteFooter = function(oRm, oControl) {
		oRm.write("</div>");
	};

	/**
	 * Renders a single notifier
	 */
	var fnRenderNotifier = function(oRm, oNotifier, bMessageNotifier) {
		var sId = oNotifier.getId();

		oRm.write("<li");
		oRm.writeElementData(oNotifier);
		oRm.addClass("sapUiNotifier");
		oRm.writeClasses();

		// ItemNavigation can only handle focusable items
		oRm.writeAttribute("tabindex", "-1");
		oRm.writeAttribute("aria-describedby", sId + '-description>');
		oRm.write(">"); // li element

		fnWriteNotifierIcon(oRm, oNotifier.getIcon(), bMessageNotifier);

		// adding an element to enable a
		oRm.write('<div id="' + sId + '-description"');
		oRm.addStyle("display", "none");
		oRm.writeStyles();
		oRm.write(">");

		oRm.write("</div>");

		var iCount = oNotifier.getMessages().length;
		if (iCount > 0) {
			// opening the div with corresponding classes
			oRm.write('<div id="' + sId + '-counter" role="tooltip"');
			oRm.addClass("sapUiNotifierMessageCount");
			if (bMessageNotifier) {
				oRm.addClass("sapUiMessage");
			}
			oRm.writeClasses();
			oRm.write(">");

			// write the div's content
			if (iCount > 99) {
				iCount = ">99";
			}
			oRm.write(iCount);

			// closing the div
			oRm.write("</div>");
		}

		oRm.write("</li>"); // li element
	};

	var fnCreateNotifierViewMaximized = function(sId, oNotifier) {
		var oNotifierView = new sap.ui.ux3.NotificationBar.NotifierView(sId, {
			title : oNotifier.getTitle(),
			renderMode : "maximized"
		});

		if (oNotifier._bEnableMessageSelect) {
			oNotifierView.addStyleClass("sapUiNotifierSelectable");
		}

		var aMessages = oNotifier.getMessages();
		for ( var i = 0; i < aMessages.length; i++) {
			var oMessage = aMessages[i];
			var oMessageView = new sap.ui.ux3.NotificationBar.MessageView(sId + "-messageView-" + oMessage.getId(), {
				text : oMessage.getText(),
				timestamp : oMessage.getTimestamp()
			});
			oMessageView._message = oMessage;
			oMessageView.setIcon(oMessage.getIcon() || oMessage.getDefaultIcon("32x32"));

			oNotifierView.addMessage(oMessageView);
		}

		return oNotifierView;
	};

	/**
	 * Renders given map of notifiers
	 */
	var fnRenderNotifiers = function(oRm, aNotifiers) {
		for ( var i = 0; i < aNotifiers.length; i++) {
			fnRenderNotifier(oRm, aNotifiers[i], false);
		}
	};

	/**
	 * Renders the notifier's icon. If there is no icon set a default icon is
	 * used
	 */
	var fnWriteNotifierIcon = function(oRm, sUri, bMessageNotifier) {
		oRm.write("<img alt=\"\"");
		oRm.addClass("sapUiNotifierIcon");
		oRm.writeClasses();

		var iconUrl = "";

		if (sUri == null || sUri == "") {
			if (bMessageNotifier) {
				iconUrl = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme()
						+ "/img/notification_bar/alert_white_24.png";
			} else {
				iconUrl = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme()
						+ "/img/notification_bar/notification_24.png";
			}
		} else {
			iconUrl = sUri;
		}

		oRm.writeAttributeEscaped("src", iconUrl);
		oRm.write(">");

		oRm.write("</img>");
	};

	/**
	 * This renders a given message notifier and its message area next to the
	 * notifier icon
	 */
	var fnRenderMessageNotifier = function(oRm, oNotifier, oNotiBar) {
		fnRenderNotifier(oRm, oNotifier, true);
		fnRenderMessageNotifierMessageArea(oRm, oNotifier, oNotiBar);
	};

	/**
	 * Renders the message area next to a message notifier
	 */
	var fnRenderMessageNotifierMessageArea = function(oRm, oMessageNotifier, oNotiBar) {
		if (oMessageNotifier.hasItems()) {
			var aMessages = oMessageNotifier.getMessages();
			var lastItem = aMessages[aMessages.length - 1];

			var oMA = oMessageNotifier._oMessageArea;
			// this ensures that this message is selectable from the bar
			oMA._message = lastItem;
			var sId = oNotiBar.getId() + "-inplaceMessage-" + oMA._message.getId();

			oRm.write("<li");
			oRm.writeAttribute("id", sId);
			oRm.addClass("sapUiInPlaceMessage");
			oRm.writeClasses();

			if (oNotiBar._gapMessageArea) {
				var sMargin = oNotiBar._gapMessageArea + "px";
				oRm.addStyle("margin-left", sMargin);
				oRm.writeStyles();
			}
			oRm.write(">");

			// oRm.renderControl(oMA);
			if (lastItem.getText() != "") {
				oRm.write("<div");
				oRm.writeControlData(oMA);
				// enable inplace message for item navigation
				oRm.writeAttribute("tabindex", "-1");
				oRm.addClass("sapUiNotifierMessageText");
				oRm.addClass("sapUiInPlaceMessage");
				// if the latest message is read-only don't provide a visual selectable link
				if (oMessageNotifier._bEnableMessageSelect && !oMA._message.getReadOnly()) {
					// if there is an event handler show the inplace message
					// clickable
					oRm.addClass("sapUiInPlaceMessageSelectable");
				}
				oRm.writeClasses();
				oRm.write(">");
				oRm.writeEscaped(lastItem.getText());
				oRm.write("</div>"); // Text
			}

			if (lastItem.getTimestamp() != "") {
				oRm.write("<div");
				oRm.addClass("sapUiNotifierMessageTimestamp");
				oRm.addClass("sapUiInPlaceMessage");
				oRm.writeClasses();
				oRm.write(">");
				oRm.writeEscaped(lastItem.getTimestamp());
				oRm.write("</div>"); // Timestamp
			}

			oRm.write("</li>");
		}
	};
}());

}; // end of sap/ui/ux3/NotificationBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.OverlayRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.Overlay
jQuery.sap.declare("sap.ui.ux3.OverlayRenderer");

/**
 * @class Overlay renderer.
 * @static
 */
sap.ui.ux3.OverlayRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.OverlayRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3Overlay");

	if (this.addRootClasses) {
		this.addRootClasses(rm, oControl);
	}

	rm.writeClasses();
	rm.write(">");

	rm.write("<div role='presentation'");
	rm.addClass("sapUiUx3OverlayOverlay");

	if (this.addOverlayClasses) {
		this.addOverlayClasses(rm, oControl);
	}

	rm.writeClasses();
	rm.write(">");
	rm.write("</div>");
	rm.write("<span class='sapUiUx3OverlayFocusDummyPane' id='" + oControl.getId() + "-firstFocusDummyPaneFw'></span>");
	rm.write("<span class='sapUiUx3OverlayFocusDummyPane' id='" + oControl.getId() + "-firstFocusDummyPaneBw'></span>");
	//render open & close button
	if (oControl.getOpenButtonVisible()) {
	rm.write("<a role=\"button\" aria-disabled=\"false\" class='sapUiUx3OverlayOpenButton' id='" + oControl.getId()
			+ "-openNew' tabindex=\"0\" title=\""+oControl._getText("OVERLAY_OPEN_BUTTON_TOOLTIP") +"\">"+oControl._getText("OVERLAY_OPEN_BUTTON_TEXT")+"</a>");
			}
	if (oControl.getCloseButtonVisible()) {
	rm.write("<a role=\"button\" aria-disabled=\"false\" class='sapUiUx3OverlayCloseButton' id='" + oControl.getId()
			+ "-close' tabindex=\"0\" title=\""+oControl._getText("OVERLAY_CLOSE_BUTTON_TOOLTIP") +"\"></a>");
	}
	if (this.renderContent) {
		this.renderContent(rm, oControl);
	}
	rm.write("<span class='sapUiUx3OverlayFocusDummyPane' id='" + oControl.getId() + "-LastFocusDummyPane'></span>");
	rm.write("</div>");

};

}; // end of sap/ui/ux3/OverlayRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.QuickViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.ux3.QuickViewRenderer");
jQuery.sap.require('sap.ui.commons.CalloutBaseRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class QuickView renderer. 
 * @static
 */
sap.ui.ux3.QuickViewRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.CalloutBaseRenderer);


/**
 * Renders the HTML for the CalloutBase content, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.QuickViewRenderer.renderContent = function(oRenderManager, oControl){ 

	var rm = oRenderManager;

	// accessibility
	var bAcc = sap.ui.getCore().getConfiguration().getAccessibility();

	// control properties
	var sType	= oControl.getType(),
		sName	= oControl.getFirstTitle(),
		sHref	= oControl.getFirstTitleHref(),
		sIcon	= oControl.getIcon(),
		sDesc	= oControl.getSecondTitle(),
		sWidth	= oControl.getWidth(),
		sId = oControl.getId(),
		tooltip = oControl.getTooltip_AsString();

	// container for the QuickView header and content
	rm.write("<div");
	if(tooltip){
		rm.writeAttributeEscaped("title", tooltip);
	}
	if(bAcc){
		rm.writeAttribute("role", "dialog");
		rm.writeAttribute("aria-labelledby",sId + "-title");
	}
	rm.addClass("sapUiUx3QV");
	rm.writeClasses();
	if(sWidth){
		rm.addStyle("width", sWidth);
		rm.writeStyles();
	}
	rm.write(">")

	//header (Thing Type) is mandatory
	rm.write("<div");
	rm.writeAttribute("id", sId + "-title");
	rm.writeAttribute("tabindex", "-1"); // ItemNavigation can only handle focusable items
	rm.addClass("sapUiUx3QVHeader");
	rm.writeClasses();
	rm.write(">")
	rm.writeEscaped(sType);
	rm.write("</div>");

	//heading: icon, title1, title2
	if(sIcon || sName || sDesc){
		rm.write("<div");
		if(bAcc){
			rm.writeAttribute("role", "heading");
		}
		rm.addClass("sapUiUx3QVHeading");
		rm.writeClasses();
		rm.write(">")

		//icon
		if(sIcon){
			rm.write("<img alt=\"\"");
			rm.addClass("sapUiUx3QVIcon");
			rm.writeClasses();
			rm.writeAttributeEscaped("src", sIcon);
			rm.writeAttributeEscaped("title", sName);
			if(bAcc){
				// ARIA - icon is decorative
				rm.writeAttribute("role", "presentation");
			}
			rm.write(" tabindex=\"-1\"");
			rm.write("></img>"); 
		}

		//name 
		rm.write("<span");
		rm.writeAttribute("id", sId + "-name");
		if(bAcc && sDesc){
			rm.writeAttribute("aria-describedby",sId + "-descr");
		}
		rm.addClass("sapUiUx3QVTitle1");
		rm.writeClasses();
		rm.write(">");
		if(sHref){
			rm.write("<a");
			rm.writeAttribute("id", sId + "-link");
			rm.writeAttributeEscaped("href", sHref);
			rm.writeAttribute("tabindex", "-1"); // ItemNavigation can only handle focusable items
			rm.write(">");
		}
		rm.writeEscaped(sName || "");
		if(sHref){
			rm.write("</a>");
		}
		rm.write("</span>");

		//title2
		if(sDesc){
			rm.write("<br><span");
			rm.writeAttribute("id", sId + "-descr");
			rm.writeAttribute("tabindex", "-1"); // ItemNavigation can only handle focusable items
			rm.addClass("sapUiUx3QVTitle2");
			rm.writeClasses();
			rm.write(">");
			rm.writeEscaped(sDesc);
			rm.write("</span>");
		}
		rm.write("</div>"); // heading
	}

	// content
	// render Header Content
	rm.write("<div id=\"" + sId + "-content\">");
	this.renderBody(rm, oControl);
	rm.write("</div>");

	rm.write("</div>"); // container

	// render the action bar 
	if(oControl.getShowActionBar() && oControl.getActionBar()){
		rm.renderControl(oControl.getActionBar());
	}

};

/**
 * Renders the HTML for the QuickView body content (form or )
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.QuickViewRenderer.renderBody = function(rm, oControl) {
	var aContent = oControl.getContent();
	for ( var i = 0; i < aContent.length; i++) {
		rm.write("<div class=\"sapUiUx3QVBody\">");
		if(aContent[i] instanceof sap.ui.core.Control){
			rm.renderControl(aContent[i]);
		} else if(aContent[i].getContent && typeof aContent[i].getContent == "function"){
			// ThingGroups with own content are also allowed
			var aChildContent = aContent[i].getContent();
			for(var j = 0; j < aChildContent.length; j++){
				if(aChildContent[j] instanceof sap.ui.core.Control){
					rm.renderControl(aChildContent[j]); 
				}
			}
		}
		rm.write("</div>");
	}
};


}; // end of sap/ui/ux3/QuickViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ShellColorPicker') ) {
/**
 * EXPERIMENTAL!  DO NOT USE!
 */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the class sap.ui.ux3.ShellColorPicker
jQuery.sap.declare("sap.ui.ux3.ShellColorPicker");
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained




sap.ui.base.EventProvider.extend("sap.ui.ux3.ShellColorPicker", {
	constructor: function(id) {
		sap.ui.base.EventProvider.apply(this);
		this.id = id;
	}
});


/*  EVENT HANDLING */

sap.ui.ux3.ShellColorPicker.M_EVENTS = {liveChange: "liveChange"};

sap.ui.ux3.ShellColorPicker.prototype.attachLiveChange = function(fFunction, oListener) {
	this.attachEvent(sap.ui.ux3.ShellColorPicker.M_EVENTS.liveChange, fFunction, oListener);
};

sap.ui.ux3.ShellColorPicker.prototype.detachLiveChange = function(fFunction, oListener) {
	this.detachEvent(sap.ui.ux3.ShellColorPicker.M_EVENTS.liveChange, fFunction, oListener);
};

sap.ui.ux3.ShellColorPicker.prototype.fireLiveChange = function(oColor) {
	var mParameters = {cssColor:sap.ui.ux3.ShellColorPicker.hslToCss(oColor)};
	this.fireEvent(sap.ui.ux3.ShellColorPicker.M_EVENTS.liveChange, mParameters);
};



/* API METHODS */

/**
 * @public
 */
sap.ui.ux3.ShellColorPicker.prototype.isOpen = function() {
	return (this.oPopup && this.oPopup.isOpen());
};


/**
 *
 * @param oColor a hsl-based color object, as returned by parseCssRgbString()
 *
 * @public
 */
sap.ui.ux3.ShellColorPicker.prototype.open = function(oColor, iDuration, my, at, of, offset, collision) {
	if (this.oPopup && this.oPopup.isOpen()) {
		return;
	}

	this.oSlider = new sap.ui.commons.Slider({width: "225px",liveChange:[this.handleSlider, this]});
	this.oOkBtn = new sap.ui.commons.Button({text:"OK",press:[this.handleOk, this]});
	this.oCancelBtn = new sap.ui.commons.Button({text:"Cancel",press:[this.handleCancel, this]});

	this.oInitialColor = oColor;
	this.oCurrentColor = jQuery.extend({}, this.oInitialColor);

	this.oSlider.setValue(this.oCurrentColor.l);
	var rm = sap.ui.getCore().createRenderManager();
	var dummyDiv = document.createElement("div");
	var statArea = sap.ui.getCore().getStaticAreaRef();
	statArea.appendChild(dummyDiv);
	this.renderHtml(rm);
	rm.flush(dummyDiv);
	rm.destroy;
	this.oPopup = new sap.ui.core.Popup(dummyDiv.firstChild, false, true, true).attachClosed(this.handleClose, this);
	this.oPopup.setAutoCloseAreas([dummyDiv.firstChild]);
	this.oPopup.open(iDuration, my, at, of, offset, collision);
	statArea.removeChild(dummyDiv);
	dummyDiv = null;

	jQuery.sap.byId(this.id).bind("mousedown", jQuery.proxy(this.handleGeneralMouseDown, this));
	jQuery.sap.byId(this.id + "-img").bind("mousedown", jQuery.proxy(this.handleMouseDown, this));
	jQuery.sap.byId(this.id + "-marker").bind("mousedown", jQuery.proxy(this.handleMouseDown, this));
	this._imgOffset = jQuery.sap.byId(this.id + "-img").offset();

	this.adaptSliderBar(this.oCurrentColor);
	this.markColorOnImage(this.oCurrentColor);
	this.adaptPreview(this.oCurrentColor);
};


/**
 * Returns the oColor object (hsl-based) for the given CSS string that is built like this: "rgb(127,0,1)"
 * @param sRgbString
 */
sap.ui.ux3.ShellColorPicker.parseCssRgbString = function(sRgbString) {
	sRgbString = jQuery.trim(sRgbString.replace(/rgb\(/, "").replace(/\)/, ""));
	var aRgb = sRgbString.split(",");
	var oRgbColor = {r:parseInt(aRgb[0], 10), g:parseInt(aRgb[1], 10), b:parseInt(aRgb[2], 10)};
	return sap.ui.ux3.ShellColorPicker.rgbToHsl(oRgbColor);
};

/* INTERNALS */

sap.ui.ux3.ShellColorPicker.prototype.renderHtml = function(rm) {
	rm.write("<div id='" + this.id + "' class='sapUiUx3ShellColorPicker'>");
	rm.write("<img id='" + this.id + "-img' src='" + sap.ui.resource('sap.ui.ux3', 'img/colors-h.png') + "' />");
	rm.renderControl(this.oSlider);
	rm.write("<div id='" + this.id + "-grad' class='sapUiUx3ShellColorPickerGradient'></div>");
	rm.write("<div id='" + this.id + "-marker' class='sapUiUx3ShellColorPickerMarker'></div>");
	rm.write("<div id='" + this.id + "-preview' class='sapUiUx3ShellColorPickerPreview'></div>");
	rm.renderControl(this.oOkBtn);
	rm.renderControl(this.oCancelBtn);
	rm.write("</div>");
};// TODO: remove HTML on close

sap.ui.ux3.ShellColorPicker.prototype.markColorOnImage = function(oColor) {
	var x = oColor.h * 225;
	var y = (1-oColor.s) * 75;
	jQuery.sap.byId(this.id + "-marker").css("left", x + 10).css("top", y + 10);
};

sap.ui.ux3.ShellColorPicker.prototype.markColorOnSlider = function(oColor) {
	this.oSlider.setValue(oColor.l);
};

sap.ui.ux3.ShellColorPicker.prototype.adaptSliderBar = function(oColor) {
	var gradient = "";
	var oMediumColor = jQuery.extend({},oColor);
	oMediumColor.l = 50;
	var color = sap.ui.ux3.ShellColorPicker.hslToCss(oMediumColor);
	if (!!sap.ui.Device.browser.firefox) {
		gradient = "-moz-linear-gradient(left, black, " + color + ", white)";
	} else if (!!sap.ui.Device.browser.webkit) {
		gradient = "-webkit-gradient(linear, left center, right center, from(#000), color-stop(0.5, " + color + "), to(#FFF))";
	}
	jQuery.sap.byId(this.id + "-grad").css("background-image", gradient);
};

sap.ui.ux3.ShellColorPicker.prototype.adaptPreview = function(oColor) {
	jQuery.sap.byId(this.id + "-preview").css("background-color", sap.ui.ux3.ShellColorPicker.hslToCss(oColor));
};



sap.ui.ux3.ShellColorPicker.prototype.handleSlider = function(e) {
	var l = e.getParameter("value");
	this.oCurrentColor.l = l;
	this.adaptPreview(this.oCurrentColor);
	this.fireLiveChange(this.oCurrentColor);
};

sap.ui.ux3.ShellColorPicker.prototype.handleGeneralMouseDown = function(e) {
	e.preventDefault(); // no autoclose!
};

sap.ui.ux3.ShellColorPicker.prototype.handleMouseDown = function(e) {
	this.handleMousePos(e);
	e.preventDefault(); // no drag&drop of the color image!
	jQuery(document)
		.bind("mousemove", jQuery.proxy(this.handleMousePos, this))
		.bind("mouseup", jQuery.proxy(this.handleMouseUp, this));
};

sap.ui.ux3.ShellColorPicker.prototype.handleMouseUp = function(e) {
	this.handleMousePos(e);
	jQuery(document)
		.unbind("mousemove", this.handleMousePos)
		.unbind("mouseup", this.handleMouseUp);
};

sap.ui.ux3.ShellColorPicker.prototype.handleMousePos = function(e) {
	var x = e.pageX - this._imgOffset.left;
	var y = e.pageY - this._imgOffset.top;
	x = Math.min(Math.max(x, 0), 225);
	y = Math.min(Math.max(y, 0), 75);
	var hue = x/225; // TODO: hardcoded!
	var sat = 1 - y/75; // TODO: hardcoded!
	this.oCurrentColor.h = hue;
	this.oCurrentColor.s = sat;
	this.adaptSliderBar(this.oCurrentColor);
	this.markColorOnImage(this.oCurrentColor);
	this.adaptPreview(this.oCurrentColor);
	this.fireLiveChange(this.oCurrentColor);
};

sap.ui.ux3.ShellColorPicker.prototype.handleOk = function() {
	this.fireLiveChange(this.oCurrentColor);
	this.oPopup.close();
};

sap.ui.ux3.ShellColorPicker.prototype.handleCancel = function() {
	this.fireLiveChange(this.oInitialColor);
	this.oPopup.close();
};


sap.ui.ux3.ShellColorPicker.prototype.handleClose = function() {
	// clean up event handlers, DOM, child controls and popup
	jQuery.sap.byId(this.id + "-img")
		.unbind("mousedown", this.handleMouseDown);
	jQuery.sap.byId(this.id + "-marker")
		.unbind("mousedown", this.handleMouseDown);
	jQuery(document)
		.unbind("mousemove", this.handleMousePos)
		.unbind("mouseup", this.handleMouseUp);
	jQuery.sap.byId(this.id)
		.unbind("mousedown", this.handleGeneralMouseDown);

	this.oSlider.destroy();
	this.oSlider = null;
	this.oOkBtn.destroy();
	this.oOkBtn = null;
	this.oCancelBtn.destroy();
	this.oCancelBtn = null;

	var domRef = jQuery.sap.domById(this.id);
	domRef.parentNode.removeChild(domRef);

	this.oPopup.destroy();
	this.oPopup = null;
};


/**
 * rgb values are 0..255
 */
sap.ui.ux3.ShellColorPicker.rgbToHsl = function(oColor) {
	var r = oColor.r/255,
			g = oColor.g/255,
			b = oColor.b/255;
	var max = Math.max(r, g, b);
	var min = Math.min(r, g, b);
	var h, s, l = (max + min) / 2;

	if (max == min) {
		h = s = 0; // all colors equally strong -> no saturation
	} else {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		switch(max){
			case r: h = (g - b) / d + (g < b ? 6 : 0); break;
			case g: h = (b - r) / d + 2; break;
			case b: h = (r - g) / d + 4; break;
		}
		h /= 6;
	}
	return {h:h,s:s,l:l*100};
};

/**
 * hs values are 0..1, l is 0..100
 */
sap.ui.ux3.ShellColorPicker.hslToRgb = function(oColor) {
	var r, g, b;
	var l = oColor.l/100;

	if (oColor.s == 0) {
		r = g = b = l; // all colors equally strong -> all equal to lightness
	} else {
		var q = l < 0.5 ? l * (1 + oColor.s) : l + oColor.s - l * oColor.s;
		var p = 2 * l - q;
		r = sap.ui.ux3.ShellColorPicker.hueToRgb(p, q, oColor.h + 1/3);
		g = sap.ui.ux3.ShellColorPicker.hueToRgb(p, q, oColor.h);
		b = sap.ui.ux3.ShellColorPicker.hueToRgb(p, q, oColor.h - 1/3);
	}

	return [r * 255, g * 255, b * 255];
};

sap.ui.ux3.ShellColorPicker.hueToRgb = function(p, q, t) {
  if(t < 0) {
	t += 1;
  }
  if(t > 1) {
	t -= 1;
  }
  if(t < 1/6) {
	return p + (q - p) * 6 * t;
  }
  if(t < 1/2) {
	return q;
  }
  if(t < 2/3) {
	return p + (q - p) * (2/3 - t) * 6;
  }
  return p;
};

sap.ui.ux3.ShellColorPicker.hslToCss = function(oColor) {
	var rgbColor = sap.ui.ux3.ShellColorPicker.hslToRgb(oColor);
	return "rgb(" + Math.round(rgbColor[0]) + "," + Math.round(rgbColor[1]) + "," + Math.round(rgbColor[2]) + ")";
};
}; // end of sap/ui/ux3/ShellColorPicker.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ShellPersonalization') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the class sap.ui.ux3.ShellPersonalization
jQuery.sap.declare("sap.ui.ux3.ShellPersonalization");
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Dialog'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained




/**
 * Experimental implementation of visual Ux3 Shell personalization / branding.
 *
 * DO NOT USE PRODUCTIVELY!!!
 *
 *
 * Being completely non-generic as of now, this is supposed to facilitate discussions with Ux
 * about the personalization capabilities. Once that concept is more final, we can go for a cleaner implementation,
 * considering the number of configurable properties etc.
 *
 * @param oShell
 * @public
 * @experimental Since 1.0. The Shell-features Personalization, Color Picker and “Inspect”-Tool are only experimental work and might change or disappear in future versions.
 * @name sap.ui.ux3.ShellPersonalization
 */
sap.ui.base.EventProvider.extend("sap.ui.ux3.ShellPersonalization", {
	constructor: function(oShell) {
		sap.ui.base.EventProvider.apply(this);
		this.shell = oShell;
	
		this.oSettings = {}; // TODO: read user config from somewhere/server/app
	}
});

/**
 * Makes the personalization use the given settings.
 *
 * @param oSettings
 * @public
 */
sap.ui.ux3.ShellPersonalization.prototype.initializeSettings = function(oSettings) {
	this.oSettings = jQuery.extend({}, oSettings);
	if (this.shell.getDomRef()) {
		this.applySettings(oSettings);
	}
};



/*  EVENT HANDLING */

sap.ui.ux3.ShellPersonalization.M_EVENTS = {personalizationChange: "personalizationChange"};

sap.ui.ux3.ShellPersonalization.prototype.attachPersonalizationChange = function(fFunction, oListener) {
	this.attachEvent(sap.ui.ux3.ShellPersonalization.M_EVENTS.personalizationChange, fFunction, oListener);
};

sap.ui.ux3.ShellPersonalization.prototype.detachPersonalizationChange = function(fFunction, oListener) {
	this.detachEvent(sap.ui.ux3.ShellPersonalization.M_EVENTS.personalizationChange, fFunction, oListener);
};

sap.ui.ux3.ShellPersonalization.prototype.firePersonalizationChange = function(mParameters) {
	this.fireEvent(sap.ui.ux3.ShellPersonalization.M_EVENTS.personalizationChange, mParameters);
};



/**
 * The default settings
 */
sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS = {
		bByDStyle: false,

		sBgColor: "rgb(17,17,17)",
		sBgCssImg: null, // updated later
		sBgImgSrc: null,
		sBgImgPos: "tile",
		fBgImgOpacity: 1,

		fSidebarOpacity: 1,
		sLineColor:"rgb(239,170,0)",

		sLogoImageSrc: null,
		sLogoAlign: "left",
		bUseLogoSize: false
};

sap.ui.ux3.ShellPersonalization.TRANSPARENT_1x1 = sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif');

sap.ui.ux3.ShellPersonalization.IMAGE_FOLDER_PATH = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/shell/";

sap.ui.ux3.ShellPersonalization.getOriginalSettings = function() {
	// buffer the settings
	if (!sap.ui.ux3.ShellPersonalization._bOriginalSettingsInitialized) {
		sap.ui.ux3.ShellPersonalization._bOriginalSettingsInitialized = true;
		
		jQuery.sap.require("sap.ui.core.theming.Parameters"); 
		var mAllParameters = sap.ui.core.theming.Parameters.get(); 
		var gradientTop = mAllParameters["sap.ui.ux3.Shell:sapUiUx3ShellGradientTop"];
		var gradientBottom = mAllParameters["sap.ui.ux3.Shell:sapUiUx3ShellGradientBottom"];

		if (!!sap.ui.Device.browser.firefox) {
			sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.sBgCssImg = "-moz-linear-gradient(top, " + gradientTop + " 0, " + gradientBottom + " 108px, " + gradientBottom + ")";
		} else if (!!sap.ui.Device.browser.internet_explorer) {
			if (sap.ui.Device.browser.version == 7 || sap.ui.Device.browser.version == 8 || sap.ui.Device.browser.version == 9) {
				sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.sBgCssImg = "url("
					+ sap.ui.ux3.ShellPersonalization.IMAGE_FOLDER_PATH
					+ "Workset_bg.png)";
			} else { // IE10+
				sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.sBgCssImg = "-ms-linear-gradient(top, " + gradientTop + " 0, " + gradientBottom + " 108px, " + gradientBottom + ")";
			}
		} else if (!!sap.ui.Device.browser.webkit) {
			sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.sBgCssImg = "-webkit-linear-gradient(top, " + gradientTop + " 0, " + gradientBottom + " 108px, " + gradientBottom + ")";
		}
	}
	
	return sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS;
};



/**
 * Returns whether there are any personalization changes
 *
 * @returns {boolean}
 * @public
 */
sap.ui.ux3.ShellPersonalization.prototype.hasChanges = function() {
	var iSettings = 0;
	for (var key in this.oSettings) {
		iSettings++;
	}
	return (iSettings > 0);
};


/**
 * Applies the given personalization settings to the DOM.
 *
 * @param oSettings
 */
sap.ui.ux3.ShellPersonalization.prototype.applySettings = function(oSettings) {
	// copy fallback settings and mix in the given settings
	var oActualSettings = jQuery.extend({}, sap.ui.ux3.ShellPersonalization.getOriginalSettings());
	oActualSettings = jQuery.extend(oActualSettings, oSettings);

	// apply the settings
	this.applyByDStyle(oActualSettings.bByDStyle);

	this.applyBgColor(oActualSettings.sBgColor);
	this.applyBgImage(oActualSettings.sBgCssImg, oActualSettings.sBgImgSrc);


	// TODO: bgImgPos
	this.applyBgImageOpacity(oActualSettings.fBgImgOpacity);

	if (oActualSettings.sHeaderImageSrc) {
		this.applyHeaderImage(oActualSettings.sHeaderImageSrc);
	} else {
		this.shell.getDomRef("hdr").style.backgroundImage = "";
	}
	this.applySidebarOpacity(oActualSettings.fSidebarOpacity);

	this.applyBgColor(oActualSettings.sBgColor);
	this.applyLineColor(oActualSettings.sLineColor);

	this.applyLogoImage(oActualSettings.sLogoImageSrc);
	this.applyLogoAlign(oActualSettings.sLogoAlign);
	this.applyUseLogoSize(oActualSettings.bUseLogoSize);
};


/**
 * Opens the personalization Dialog. This can be called from wherever the application wants to offer branding changes.
 *
 * @public
 */
sap.ui.ux3.ShellPersonalization.prototype.openDialog = function() {
	if (this.oDialog && this._getDialog().isOpen()) {
		return;
	} // first check is important because if !this.oDialog, the getter builds the Dialog and relies on the existence of this.oSettings!
															// but on the other hand, this.oSettings must not be initialized when the Dialog is already open
	this.oTransientSettings = jQuery.extend({}, this.oSettings);

	this._getDialog().open();

	// drag&drop for images with local file API
	this._bindDragAndDrop("bg");
	this._bindDragAndDrop("hdr");
	this._bindDragAndDrop("logo");
};


sap.ui.ux3.ShellPersonalization.prototype.getTransientSettingsWithDefaults = function() {
	return jQuery.extend(jQuery.extend({}, sap.ui.ux3.ShellPersonalization.getOriginalSettings()), this.oTransientSettings);
};


sap.ui.ux3.ShellPersonalization.prototype._bindDragAndDrop = function(sPrefix) {
	if (window.FileReader) {
		var sId = this.shell.getId() + "-p13n_";
		jQuery.sap.byId(sId + sPrefix + "ImageImg")
			.bind('dragover', jQuery.proxy(this._handleDragover, this))
			.bind('dragend',jQuery.proxy(this._handleDragend, this))
			.bind('drop', jQuery.proxy(this._handleDrop, this));
		jQuery.sap.byId(sId + sPrefix + "ImageHolder")
			.bind('dragover', jQuery.proxy(this._handleDragover, this))
			.bind('dragend',jQuery.proxy(this._handleDragend, this))
			.bind('drop', jQuery.proxy(this._handleDrop, this));
	}
};
sap.ui.ux3.ShellPersonalization.prototype._unbindDragAndDrop = function(sPrefix) {
	if (window.FileReader) {
		var sId = this.shell.getId() + "-p13n_";
		jQuery.sap.byId(sId + "hdrImageImg")
			.unbind('dragover', this._handleDragover)
			.unbind('dragend', this._handleDragend)
			.unbind('drop', this._handleDrop);
		jQuery.sap.byId(sId + "hdrImageHolder")
			.unbind('dragover', this._handleDragover)
			.unbind('dragend', this._handleDragend)
			.unbind('drop', this._handleDrop);
	}
};


/**
 * Returns and - if necessary - constructs the Dialog
 *
 * @returns {sap.ui.commons.Dialog}
 */
sap.ui.ux3.ShellPersonalization.prototype._getDialog = function() {
	if (!this.oDialog) {
		jQuery.sap.require("sap.ui.ux3.ShellColorPicker");

		var sId = this.shell.getId() + "-p13n_";
		var oSettingsWithDefaults = jQuery.extend(jQuery.extend({}, sap.ui.ux3.ShellPersonalization.getOriginalSettings()), this.oSettings);
		var c = sap.ui.commons;
		var that = this;


		/* build the Dialog */

		var d = new c.Dialog({title:"Shell Personalization",width:"544px",height:"560px",showCloseButton:false,resizable:false,closed:[function(){
			// drag&drop for images with local file API
			this._unbindDragAndDrop("bg");
			this._unbindDragAndDrop("hdr");
			this._unbindDragAndDrop("logo");
			this.oTransientSettings = null;
		},this]}).addStyleClass("sapUiUx3ShellP13n");


		/* build the tabstrip */

		var tabs = new c.TabStrip({width:"100%",height:"100%",select:jQuery.proxy(function(oParams){
			var oControl = sap.ui.getCore().byId(oParams.getParameter("id"));
			if (oControl) {
				var index = oParams.getParameter("index");
				oControl.setSelectedIndex(index);
				var that = this;
				if (index == 0) {
					// apply the current settings to the plain HTML parts
					window.setTimeout(function(){that.shell.$("bgColor").css("background-color", that.getTransientSettingsWithDefaults().sBgColor);},1);

					// bind the drop event handlers
					window.setTimeout(jQuery.proxy(function(){
						this._bindDragAndDrop("bg");
					}, this), 0);

				} else if (index == 1) {
					// apply the current settings to the plain HTML parts
					window.setTimeout(function(){that.shell.$("lineColor").css("background-color", that.getTransientSettingsWithDefaults().sLineColor);},1);

					// bind the drop event handlers
					window.setTimeout(jQuery.proxy(function(){
						this._bindDragAndDrop("hdr");
					}, this), 0);

				} else if (index == 2) {
					// bind the drop event handlers
					window.setTimeout(jQuery.proxy(function(){
						this._bindDragAndDrop("logo");
					}, this), 0);
				}
			}
		}, this)});


		/* build the first tab */

		this.oBgImgHtml = new sap.ui.core.HTML(sId + "bgImageHolder", {
			preferDOM:true,
			content:"<div id='" + sId + "bgImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "bgImageImg' src='"
			+ (this.oTransientSettings.sBackgroundImageSrc ? this.oTransientSettings.sBackgroundImageSrc :sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>"}
		);

		this.oBgImgOpacitySlider = new c.Slider({
			value:(this.oTransientSettings.fBgImgOpacity !== undefined ? 100 - this.oTransientSettings.fBgImgOpacity * 100 : 100 - sap.ui.ux3.ShellPersonalization.getOriginalSettings().fBgImgOpacity * 100),
			liveChange:jQuery.proxy(this._handleBgImageOpacitySliderChange,this)
		});
		this.oSidebarOpacitySlider = new c.Slider({
			value:(this.oTransientSettings.fSidebarOpacity !== undefined ? 100 - this.oTransientSettings.fSidebarOpacity * 100 : 100 - sap.ui.ux3.ShellPersonalization.getOriginalSettings().fSidebarOpacity * 100),
			liveChange:jQuery.proxy(this._handleSidebarOpacitySliderChange,this)
		});

		this.oBgColorPicker = new sap.ui.ux3.ShellColorPicker(sId + "bgColorPicker");
		this.oBgColorPicker.attachLiveChange(function(oEvent){
			that._handleBgColorChange(oEvent);
		});
		var oBgColorBtn = new c.Button({text:"Change..."});
		var that = this;
		oBgColorBtn.attachPress(function(){
			if (!that.oBgColorPicker.isOpen()) {
				that.oBgColorPicker.open(sap.ui.ux3.ShellColorPicker.parseCssRgbString(that.getTransientSettingsWithDefaults().sBgColor), sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom, that.shell.getDomRef("bgColor"));
			}
		});
		this.oBgPreviewHtml = new sap.ui.core.HTML({preferDom:true,content:"<div id='" + this.shell.getId() + "-bgColor' style='background-color:" + oSettingsWithDefaults.sBgColor + "' class='sapUiUx3ShellColorPickerPreview'></div>"});

		var oBgTab = new sap.ui.commons.Tab().setText("Background").addContent(new c.layout.MatrixLayout({layoutFixed:false})
			.createRow(new c.Label({text:"Background Image:"}), this.oBgImgHtml)
			.createRow(new c.Label({text:"Image Transparency:"}), this.oBgImgOpacitySlider)
			.createRow(new c.Label({text:"Background Color:"}), new c.layout.MatrixLayoutCell().addContent(this.oBgPreviewHtml).addContent(oBgColorBtn))
			.createRow(null)
			.createRow(new c.Label({text:"Sidebar Transparency:"}), this.oSidebarOpacitySlider)
		);
		tabs.addTab(oBgTab);


		/* build the second tab */

		this.oByDStyleCb = new c.CheckBox({text:"ByDesign-style Header Bar",checked:this.oTransientSettings.bByDStyle,change:jQuery.proxy(this._handleByDStyleChange,this)});
		this.oHdrImgHtml = new sap.ui.core.HTML(sId + "hdrImageHolder", {
			preferDOM:true,
			content:"<div id='" + sId + "hdrImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "hdrImageImg' src='"
			+ (this.oTransientSettings.sHeaderImageSrc ? this.oTransientSettings.sHeaderImageSrc :sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>"}
		);

		this.oLineColorPicker = new sap.ui.ux3.ShellColorPicker(sId + "lineColorPicker");
		this.oLineColorPicker.attachLiveChange(function(oEvent){
			that._handleLineColorChange(oEvent);
		});
		var oLineColorBtn = new c.Button({text:"Change..."});
		var that = this;
		oLineColorBtn.attachPress(function(){
			if (!that.oLineColorPicker.isOpen()) {
				that.oLineColorPicker.open(sap.ui.ux3.ShellColorPicker.parseCssRgbString(that.getTransientSettingsWithDefaults().sLineColor), sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom, that.shell.getDomRef("lineColor"));
			}
		});
		this.oLinePreviewHtml = new sap.ui.core.HTML({preferDom:true,content:"<div id='" + this.shell.getId() + "-lineColor' style='background-color:" + oSettingsWithDefaults.sLineColor + "' class='sapUiUx3ShellColorPickerPreview'></div>"});

		var oHdrTab = new sap.ui.commons.Tab().setText("Header Bar").addContent(new c.layout.MatrixLayout({layoutFixed:false})
			//.createRow(this.oByDStyleCb)
			.createRow(new c.Label({text:"Line Color (ByD-style only):"}), new c.layout.MatrixLayoutCell().addContent(this.oLinePreviewHtml).addContent(oLineColorBtn))
			.createRow(null)
			.createRow(new c.Label({text:"Header Image:"}),	this.oHdrImgHtml)
		);
		tabs.addTab(oHdrTab);


		/* build the third tab */

		this.oLogoImgHtml = new sap.ui.core.HTML(sId + "logoImageHolder", {
			preferDOM:true,
			content:"<div id='" + sId + "logoImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "logoImageImg' src='"
			+ (this.oTransientSettings.sLogoImageSrc ? this.oTransientSettings.sLogoImageSrc : sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>"}
		);
		this.oLogoRbg = new c.RadioButtonGroup()
			.addItem(new sap.ui.core.Item({text:"Left",key:"left"}))
			.addItem(new sap.ui.core.Item({text:"Center",key:"center"}))
			.attachSelect(this._handleLogoAlignChange, this);
		this.oUseLogoSizeCb = new c.CheckBox({text:"Use original image size",checked:this.oTransientSettings.bUseLogoSize,change:jQuery.proxy(this._handleUseLogoSizeChange,this)});
		var oLogoTab = new sap.ui.commons.Tab().setText("Logo").addContent(new c.layout.MatrixLayout({layoutFixed:false})
			.createRow(new c.Label({text:"Logo Image:"}), this.oLogoImgHtml)
			.createRow(new c.Label({text:"Position:"}), this.oLogoRbg)
			.createRow(this.oUseLogoSizeCb)
		);
		tabs.addTab(oLogoTab);
		d.addContent(tabs);


		/* finish building the Dialog */

		var that = this;
		d.addButton(new c.Button({text:"Reset All",press:function(){
			that.applySettings(jQuery.extend({}, sap.ui.ux3.ShellPersonalization.getOriginalSettings()));
			that.oSettings = {};
			that.oTransientSettings = {};
			that.updateDialog();
			that._bindDragAndDrop("bg");
			that._bindDragAndDrop("hdr");
			that._bindDragAndDrop("logo");
			that.firePersonalizationChange({settings:{}});
		}}));
		d.addButton(new c.Button({text:"OK",press:function(){
			that.oSettings = jQuery.extend({}, that.oTransientSettings); // settings are already applied
			that.firePersonalizationChange({settings:that.oSettings});
			d.close();
		}}));
		d.addButton(new c.Button({text:"Cancel",press:function(){
			// that.applySettings(that.oSettings);
			// that.updateDialog();
			d.close();
		}}));
		this.oDialog = d;
	}
	return this.oDialog;
};


sap.ui.ux3.ShellPersonalization.prototype.updateDialog = function() {
	var oActualSettings = jQuery.extend({}, sap.ui.ux3.ShellPersonalization.getOriginalSettings());
	oActualSettings = jQuery.extend(oActualSettings, this.oSettings);
	var sId = this.shell.getId() + "-p13n_";

	this.oBgImgHtml.setContent("<div id='" + sId + "bgImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "bgImageImg' src='"
			+ (oActualSettings.sBackgroundImageSrc ? oActualSettings.sBackgroundImageSrc :sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>");
	this.oBgImgOpacitySlider.setValue(100 - oActualSettings.fBgImgOpacity * 100);
	this.oSidebarOpacitySlider.setValue(100 - oActualSettings.fSidebarOpacity * 100);

	this.oByDStyleCb.setChecked(oActualSettings.bByDStyle);
	this.oHdrImgHtml.setContent("<div id='" + sId + "hdrImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "hdrImageImg' src='"
			+ (oActualSettings.sHeaderImageSrc ? oActualSettings.sHeaderImageSrc : sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>");

	this.oLogoRbg.setSelectedIndex((oActualSettings.sLogoAlign == "center") ? 1 : 0);
	this.oUseLogoSizeCb.setChecked(oActualSettings.bUseLogoSize);
	this.oLogoImgHtml.setContent("<div id='" + sId + "logoImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "logoImageImg' src='"
			+ (oActualSettings.sLogoImageSrc ? oActualSettings.sLogoImageSrc : sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>");
};




/* property change handlers and code to apply each setting to the UI */


sap.ui.ux3.ShellPersonalization.prototype._handleByDStyleChange = function(oEvent) {
	var bChecked = oEvent.getParameter("checked");
	this.oTransientSettings.bByDStyle = bChecked;
	this.applyByDStyle(bChecked);
};
sap.ui.ux3.ShellPersonalization.prototype.applyByDStyle = function(bByDStyle) {
	this.shell.$().toggleClass("sapUiUx3ShellByD", bByDStyle);
};

sap.ui.ux3.ShellPersonalization.prototype._handleBgColorChange = function(oEvent) {
	var cssColor = oEvent.getParameter("cssColor");
	this.oTransientSettings.sBgColor = cssColor;
	this.applyBgColor(cssColor);
};
sap.ui.ux3.ShellPersonalization.prototype.applyBgColor = function(sCssColor) {
	this.shell.$("bg").css("background-color", sCssColor);
	this.shell.$("bgColor").css("background-color", sCssColor);
};

sap.ui.ux3.ShellPersonalization.prototype._handleBackgroundImageChange = function(url, bPersistImmediately) {
	var tile = true; // TODO
	if (bPersistImmediately) {
		if (tile) {
			this.oSettings.sBgCssImg = "url(" + url + ")";
			this.oSettings.sBgImgSrc = null;
		} else {
			this.oSettings.sBgCssImg = null;
			this.oSettings.sBgImgSrc = url;
		}
		this.applyBgImage(this.oSettings.sBgCssImg, this.oSettings.sBgImgSrc);
		this.firePersonalizationChange({settings:this.oSettings});
	} else {
		if (tile) {
			this.oTransientSettings.sBgCssImg = "url(" + url + ")";
			this.oTransientSettings.sBgImgSrc = null;
		} else {
			this.oTransientSettings.sBgCssImg = null;
			this.oTransientSettings.sBgImgSrc = url;
		}
		this.applyBgImage(this.oTransientSettings.sBgCssImg, this.oTransientSettings.sBgImgSrc);
	}
};

sap.ui.ux3.ShellPersonalization.prototype.applyBgImage = function(sBgCssImg, sBgImgSrc) {
	var sForcedImgSrc = sBgImgSrc ? sBgImgSrc : sBgCssImg.substring(4, sBgCssImg.length-1);
	sBgCssImg = sBgCssImg ? sBgCssImg : "";
	sBgImgSrc = sBgImgSrc ? sBgImgSrc : sap.ui.ux3.ShellPersonalization.TRANSPARENT_1x1;

	var oBgImgRef = this.shell.getDomRef("bgImg");
	var oBgImgPreviewRef = this.shell.getDomRef("p13n_bgImageImg");

	oBgImgRef.style.backgroundImage = sBgCssImg;
	oBgImgRef.src = sBgImgSrc;

	if (oBgImgPreviewRef) {
		// TODO: understand why this code exists   oBgImgPreviewRef.src = sForcedImgSrc;
	}
};

sap.ui.ux3.ShellPersonalization.prototype._handleHeaderImageChange = function(dataUrl, bPersistImmediately) {
	if (bPersistImmediately) {
		this.oSettings.sHeaderImageSrc = dataUrl;
		this.firePersonalizationChange({settings:this.oSettings});
	} else {
		this.oTransientSettings.sHeaderImageSrc = dataUrl;
	}
	this.applyHeaderImage(dataUrl);
};
sap.ui.ux3.ShellPersonalization.prototype.applyHeaderImage = function(dataUrl) {
	this.shell.$("hdr").css("background-image", "url(" + dataUrl + ")");
	if (this.oDialog && this.oDialog.isOpen()) {
		this.shell.$("p13n_hdrImageImg").attr("src", dataUrl);
	}
};

sap.ui.ux3.ShellPersonalization.prototype._handleLineColorChange = function(oEvent) {
	var cssColor = oEvent.getParameter("cssColor");
	this.oTransientSettings.sLineColor = cssColor;
	this.applyLineColor(cssColor);
};
sap.ui.ux3.ShellPersonalization.prototype.applyLineColor = function(sCssColor) {
	this.shell.$("hdr").find("hr").css("background-color", sCssColor);
	this.shell.$("lineColor").css("background-color", sCssColor);
};

sap.ui.ux3.ShellPersonalization.prototype._handleBgImageOpacitySliderChange = function(oEvent) {
	var value = (100 - oEvent.getParameter("value"))/100;
	this.oTransientSettings.fBgImgOpacity = value;
	this.applyBgImageOpacity(value);
};
sap.ui.ux3.ShellPersonalization.prototype.applyBgImageOpacity = function(fValue) {
	this.shell.$("bgImg").css("opacity", fValue);
};

sap.ui.ux3.ShellPersonalization.prototype._handleSidebarOpacitySliderChange = function(oEvent) {
	var value = (100 - oEvent.getParameter("value"))/100;
	this.oTransientSettings.fSidebarOpacity = value;
	this.applySidebarOpacity(value);
};
sap.ui.ux3.ShellPersonalization.prototype.applySidebarOpacity = function(fValue) {
	this.shell.$("tp").css("opacity", fValue);
	this.shell.$("paneBar").children(":nth-child(2)").css("opacity", fValue);
};

sap.ui.ux3.ShellPersonalization.prototype._handleLogoImageChange = function(url, bPersistImmediately) {
	if (bPersistImmediately) {
		this.oSettings.sLogoImageSrc = url;
		this.firePersonalizationChange({settings:this.oSettings});
	} else {
		this.oTransientSettings.sLogoImageSrc = url;
	}
	this.applyLogoImage(url);
};
sap.ui.ux3.ShellPersonalization.prototype.applyLogoImage = function(url) {
	if (!url) {
		url = this.shell.getAppIcon();
		if (!url) {
			url = sap.ui.ux3.ShellPersonalization.TRANSPARENT_1x1;
		}
	}
	this.shell.$("logoImg").attr("src", url);
	this.shell.$("p13n_logoImageImg").attr("src", url); // just in case the dialog is displaying it
};

sap.ui.ux3.ShellPersonalization.prototype._handleLogoAlignChange = function(oEvent) {
	var iIndex = oEvent.getParameter("selectedIndex");
	var sAlign = ["left","center"][iIndex];
	this.oTransientSettings.sLogoAlign = sAlign;
	this.applyLogoAlign(sAlign);
};
sap.ui.ux3.ShellPersonalization.prototype.applyLogoAlign = function(sLogoAlign) {
	var sRealAlign = sLogoAlign;
	if (sap.ui.getCore().getConfiguration().getRTL() && (sRealAlign == "right")) {
		sRealAlign = "left"; // need to use left/right, as "begin" is not supported by IE8
	}
	this.shell.$("hdr").css("text-align", sRealAlign);
};

sap.ui.ux3.ShellPersonalization.prototype._handleUseLogoSizeChange = function(oEvent) {
	var bUse = oEvent.getParameter("checked");
	this.oTransientSettings.bUseLogoSize = bUse;
	this.applyUseLogoSize(bUse);
};
sap.ui.ux3.ShellPersonalization.prototype.applyUseLogoSize = function(bUseLogoSize) {
	this.shell.$("hdr").toggleClass("sapUiUx3ShellHeaderFlex", bUseLogoSize);
	this.shell.$("hdrImg").toggleClass("sapUiUx3ShellHeaderImgFlex", bUseLogoSize);
};



/* drag & drop code */


sap.ui.ux3.ShellPersonalization.prototype._handleDragover = function(evt) {
	var id = evt.target.id;
	if (!this._dragOverBlinking) {
		var $bg = jQuery.sap.byId(id);
		$bg.css("opacity", "0.5");
		this._dragOverBlinking = true;
		var that = this;
		window.setTimeout(function(){
			$bg.css("opacity", "1");
			window.setTimeout(function(){
				that._dragOverBlinking = null;
			}, 250);
		}, 250);
	}
  return false;
};
sap.ui.ux3.ShellPersonalization.prototype._handleDragend = function(evt) {
	return false;
};
sap.ui.ux3.ShellPersonalization.prototype._handleDrop = function(evt) {
	var id = evt.target.id;
	evt.preventDefault();
	var e = evt.originalEvent;
	var file = e.dataTransfer.files[0];
	if (file) {
		// read file content
		var reader = new window.FileReader();
		reader.onload = jQuery.proxy(function(event) {
			var dataUrl = event.target.result;
			if ((id == this.shell.getId() + "-p13n_bgImageImg")
					|| (id == this.shell.getId() + "-p13n_bgImageHolder")) {
				this._handleBackgroundImageChange(dataUrl);
			} else if ((id == this.shell.getId() + "-p13n_hdrImageImg")
					|| (id == this.shell.getId() + "-p13n_hdrImageHolder")) {
				this._handleHeaderImageChange(dataUrl);
			} else if ((id == this.shell.getId() + "-p13n_logoImageImg")
					|| (id == this.shell.getId() + "-p13n_logoImageHolder")) {
				this._handleLogoImageChange(dataUrl);
			}
			reader = null;
		}, this);
		reader.readAsDataURL(file);
	}
};

}; // end of sap/ui/ux3/ShellPersonalization.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ShellRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

//Provides default renderer for the sap.ui.ux3.Shell
jQuery.sap.declare("sap.ui.ux3.ShellRenderer");

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * @class GoldReflectionPageLayout renderer.
 * @static
 */
sap.ui.ux3.ShellRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ShellRenderer.render = function(oRenderManager, oControl) {
	// convenience variable
	var rm = oRenderManager;
	var bPaneOpen = oControl.isPaneOpen();
	var iPaneWidthPlus = oControl.getPaneWidth() + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH; // width of pane plus how far it is from the edge
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	var sId = oControl.getId();

	if (sap.ui.ux3.Shell.FIRST_RENDERING) {
		document.body.style.margin = "0"; // does not seem to work in initial onBeforeRendering
	}

	// write the root HTML element  TODO: this should use the existing <body>! But where is the staticarea, then?
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3Shell");
	rm.addClass("sapUiUx3ShellHead"+oControl.getHeaderType());
	rm.addClass("sapUiUx3ShellDesign"+oControl.getDesignType());
	
	if (!oControl._hasDarkDesign()) {
		rm.addClass("sapUiUx3ShellDesignLight");
	}
	
	if (oControl.getFullHeightContent()) {
		rm.addClass("sapUiUx3ShellFullHeightContent");
	}
	if (!oControl.getApplyContentPadding()) {
		rm.addClass("sapUiUx3ShellNoContentPadding");
	}
	if(!oControl.getShowTools()){
		rm.addClass("sapUiUx3ShellNoTools");
	}
	if(!oControl.getShowPane()){
		rm.addClass("sapUiUx3ShellNoPane");
	}
	if(oControl._topSyncRefId && !oControl.getAllowOverlayHeaderAccess()){
		rm.addClass("sapUiUx3ShellBlockHeaderAccess");
	}
	rm.writeClasses();
	rm.write(">");


	// write header
	rm.write("<img id='" + sId + "-hdrImg' class='sapUiUx3ShellHeaderImg' src='");
	var sImage = sap.ui.core.theming.Parameters.get('sapUiUx3ShellHeaderImageURL');
	sImage = oControl._convertImageParameter(sImage);
	if (sImage) {
		rm.writeEscaped(sImage);
	} else {
		rm.write(sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
	}
	rm.write("' />");
	rm.write("<header id='" + sId + "-hdr' class='sapUiUx3ShellHeader' role='banner'>");
	var tabIndex = oControl._topSyncRefId ? " tabindex='0'" : "";
	rm.write("<span class='sapUiUx3ShellFocusDummy' id='" + sId + "-focusDummyHdrStart'" + tabIndex + "></span>");
	sap.ui.ux3.ShellRenderer.renderHeader(rm, oControl);
	rm.write("<span class='sapUiUx3ShellFocusDummy' id='" + sId + "-focusDummyHdrEnd'" + tabIndex + "></span>");
	rm.write("</header>   <!-- end of sapUiUx3ShellHeader -->");



	// write page background
	rm.write("<div id='", sId, "-bg' class='sapUiUx3ShellBg'></div>");
	rm.write("<img id='", sId, "-bgImg' class='sapUiUx3ShellBgImg' src='");
	sImage = sap.ui.core.theming.Parameters.get('sapUiUx3ShellBackgroundImageURL');
	sImage = oControl._convertImageParameter(sImage);
	if (sImage) {
		rm.writeEscaped(sImage);
	} else {
		rm.write(sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
	}
	rm.write("'/>");


	// write workset items
	var wsMargin = bPaneOpen ? " style='margin-" + (bRtl ? "left" : "right") + ":" + (iPaneWidthPlus + 22) + "px'" : "";
	rm.write("<div id='", sId, "-wBar'" + wsMargin + " class='sapUiUx3ShellWorksetBar'>");
	sap.ui.ux3.ShellRenderer.renderWorksetItems(rm, oControl);
	rm.write("</div>   <!--  end of worksetBar -->");



	// write tool palette area
	rm.write("<section id='" + sId + "-tp' class='sapUiUx3ShellToolPaletteArea' role='complementary'>");
	sap.ui.ux3.ShellRenderer.renderToolPalette(rm, oControl);
	rm.write("</section> <!-- end of toolPaletteArea -->");



	// write page canvas and content
	
	var paneExtraStyle = bPaneOpen ? " style='" + (bRtl ? "left" : "right") + ":" + iPaneWidthPlus + "px'" : "";
	rm.write("<div class='sapUiUx3ShellCanvas'" + paneExtraStyle + " id='" + sId + "-canvas'>");

	sap.ui.ux3.ShellRenderer.renderFacetBar(rm, oControl);

	rm.write("<article class='sapUiUx3ShellContent' id='" + sId + "-content' role='main'>");
	var aContent = oControl.getContent();
	for (var i = 0; i < aContent.length; i++) {
		rm.renderControl(aContent[i]);
	}
	rm.write("</article><div class='sapUiUx3ShellNotifySpace'></div></div>");



	// write pane bar
	var tabIndex = oControl._topSyncRefId ? " tabindex='0'" : "";
	rm.write("<span class='sapUiUx3ShellFocusDummy' id='" + sId + "-focusDummyPane'" + tabIndex + "></span>");
	rm.write("<aside id='" + sId + "-paneBar' class='sapUiUx3ShellPaneBar " + (bPaneOpen ? " sapUiUx3ShellPaneBarOpen sapUiUx3ShellPaneBarOpened" : " sapUiUx3ShellPaneBarClose") + "' role='complementary' style='width:" + iPaneWidthPlus + "px;'>");
	rm.write("<section id='" + sId + "-paneContent' style='width:" + oControl.getPaneWidth() + "px;' class='sapUiUx3ShellPaneBarContent' role='tabpanel'>");
	var aPaneContent = oControl.getPaneContent();
	for (var i = 0; i < aPaneContent.length; i++) {
		rm.renderControl(aPaneContent[i]);
	}
	rm.write("</section>");

	rm.write("<div id='"+ sId + "-paneBarRight' class='sapUiUx3ShellPaneBarRight'>");
	rm.write("<ul id='" + sId + "-paneBarEntries' class='sapUiUx3ShellPaneEntries' role='tablist'>");
	sap.ui.ux3.ShellRenderer.renderPaneBarItems(rm, oControl);
	rm.write("</ul>");

	// Render overflow button
	rm.write("<div id='" + sId + "-paneBarOverflowButton' class='sapUiUx3ShellPaneOverflowButton'");
	rm.addStyle("display", "none;"); // So it does not depend on theme being loaded
	rm.writeStyles();
	rm.write(">");
	rm.write("<div id='" + sId + "-paneBarOverflowWrapper' class='sapUiUx3ShellPaneOverflowWrapper'>");
	rm.write("<span id='" + sId + "-paneBarOverflowText' class='sapUiUx3ShellPaneOverflowText sapUiUx3ShellPaneEntry'>");
	rm.write(sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3").getText("SHELL_MORE_BUTTON"));
	rm.write("</span>"); // sapUiUx3ShellPaneOverflowText
	rm.write("</div>"); // overflow-wrapper
	rm.write("</div>"); // sapUiUx3ShellPaneOverflowButton
	
	
	rm.write("</div>");
	
	
	rm.write("</aside>   <!-- end of paneBar -->");



	// write the purely visual background
	rm.write("<div class='sapUiUx3ShellCanvasBackground " + (bPaneOpen ? "sapUiUx3ShellCanvasBackgroundOpen" : "sapUiUx3ShellCanvasBackgroundClosed") 
			+ "' id='" + sId + "-canvasBackground'" + paneExtraStyle + ">");
	rm.write("<div class='sapUiUx3ShellCanvasBackgroundRight'></div>");
	rm.write("</div>");

	rm.write("<div id='" + sId + "-notify' class='sapUiUx3ShellNotify'>");
	sap.ui.ux3.ShellRenderer.renderNotificationArea(rm, oControl);
	rm.write("</div>");

	// render closing tag for root element
	rm.write("</div>");
};



sap.ui.ux3.ShellRenderer.renderHeader = function(rm, oControl) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");

	var appIcon = oControl.getAppIcon();
	rm.write("<hr id='" + oControl.getId() + "-hdrLine'/><img id='" + oControl.getId() + "-logoImg' src='");
	if (appIcon) {
		rm.writeEscaped(oControl.getAppIcon());
	} else {
		var sImage = sap.ui.core.theming.Parameters.get('sapUiUx3ShellApplicationImageURL');
		sImage = oControl._convertImageParameter(sImage);
		if (sImage) {
			rm.writeEscaped(sImage);
		} else {
			rm.write(sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
		}
	}
	rm.write("'");

	var iconTooltip = oControl.getAppIconTooltip() || rb.getText("SHELL_LOGO");
	rm.writeAttributeEscaped("alt", iconTooltip);
	rm.writeAttributeEscaped("title", iconTooltip);

	rm.write("><h1");
	rm.writeAttributeEscaped("title", oControl.getAppTitle());
	rm.write(">");
	rm.writeEscaped(oControl.getAppTitle());

	rm.write("</h1><span id='" + oControl.getId() + "-hdr-items' class='sapUiUx3ShellHeaderTitleRight'>");

	// header-right-items
	var aHeaderItems = oControl.getHeaderItems();
	for (var i = 0; i < aHeaderItems.length; i++) {
		// ensure correct styling of the menu if there is a MenuButton
		if (aHeaderItems[i] instanceof sap.ui.commons.MenuButton) { // TODO: improve this
			if (aHeaderItems[i].getMenu()) {
				aHeaderItems[i].getMenu().addStyleClass("sapUiMnuTop", true); // multiple calls are ignored, so there is no check whether the class is already there
			}
		}

		// render the header item
		rm.renderControl(aHeaderItems[i]);

		if ((i < (aHeaderItems.length-1)) || (oControl.getShowLogoutButton())) {
			rm.write("<span class='sapUiUx3ShellHeaderSep'></span>");
		}
	}

	// logout button
	if (oControl.getShowLogoutButton()) {
		rm.write("<a id='" + oControl.getId() + "-logout' title='");
		rm.write(oControl.getLogoutButtonTooltip() ? jQuery.sap.escapeHTML(oControl.getLogoutButtonTooltip()) : rb.getText("SHELL_LOGOUT"));
		rm.write("' tabindex='0' role='button' class='sapUiUx3ShellHeaderButton sapUiUx3ShellHeader-logout'></a>");
	}
	rm.write("</span>");
};




/**
 * Renders the inner HTML of the left-side tool palette.
 *
 * @param oControl the Shell control
 * @private
 */
sap.ui.ux3.ShellRenderer.renderToolPalette = function(rm, oControl) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	var sId = oControl.getId();
	
	var tabIndex = oControl._topSyncRefId ? " tabindex='0'" : "";
	rm.write("<span class='sapUiUx3ShellFocusDummy' id='" + oControl.getId() + "-focusDummyTPStart'" + tabIndex + "></span>");

	// write standard tools
	var sAccDescr = rb.getText("SHELL_TOOLPANE_GENERIC"),
		bStandardToolPresent = false,
		bFirstTool = true,
		sStandardToolsHtml = "";
	if (oControl.getShowSearchTool()) {
		bStandardToolPresent = true;
		sStandardToolsHtml += "<a id='" + sId + sap.ui.ux3.Shell.TOOL_PREFIX + sId + "-searchTool' title='" + rb.getText("SHELL_SEARCH") + "' class='sapUiUx3ShellTool sapUiUx3ShellTool-search' tabindex='0' role='button' aria-pressed='false'></a>";
		if (bFirstTool) {
			bFirstTool = false;
		} else {
			sAccDescr += ",";
		}
		sAccDescr += " " + rb.getText("SHELL_SEARCH");
	}
	if (oControl.getShowFeederTool()) {
		bStandardToolPresent = true;
		sStandardToolsHtml += "<a id='" + sId + sap.ui.ux3.Shell.TOOL_PREFIX + sId + "-feederTool' title='" + rb.getText("SHELL_FEEDER") + "' class='sapUiUx3ShellTool sapUiUx3ShellTool-feeder' tabindex='0' role='button' aria-pressed='false'></a>";
		if (bFirstTool) {
			bFirstTool = false;
		} else {
			sAccDescr += ",";
		}
		sAccDescr += " " + rb.getText("SHELL_FEEDER");
	}

	if (bStandardToolPresent) {
		rm.write("<div role='toolbar'aria-describedby='" + sId + "-genericToolsDescr'>");
		rm.write("<span id='" + sId + "-genericToolsDescr' style='display:none;'>" + sAccDescr + "</span>");
		rm.write(sStandardToolsHtml + "</div>");
	}

	var aToolItems = oControl.getToolPopups();

	// write separator between standard tools and app tools, if required
	if (bStandardToolPresent && (aToolItems.length > 0)) {
		rm.write("<hr id='" + sId + "-tp-separator' class='sapUiUx3ShellToolSep'></hr>");
	}

	// write app tools
	if (aToolItems.length > 0) {
		rm.write("<div role='toolbar' aria-describedby='" + sId + "-appToolsDescr'>");
		rm.write("<span id='" + sId + "-appToolsDescr' style='display:none;'>" + rb.getText("SHELL_TOOLPANE_APP") + "</span>");
		for (var i = 0; i < aToolItems.length; i++) {
			var oToolItem = aToolItems[i];
			if (oToolItem instanceof sap.ui.core.SeparatorItem) { // TODO: not possible
				rm.write("<hr class='sapUiUx3ShellToolSep'></hr>");
			} else {
				// regular item
				rm.write("<a id='" + sId + "-tool-" + oToolItem.getId() + "' class='sapUiUx3ShellTool'");
				var sTooltip = oToolItem.getTooltip_AsString();
				if (!sTooltip) {
					sTooltip = oToolItem.getTitle();
				}
				if (sTooltip) {
					rm.write(" title='");
					rm.writeEscaped(sTooltip);
					rm.write("' ");
				}
				rm.write(" tabindex='0' role='button' aria-pressed='false'><img src='");
				rm.writeEscaped(oToolItem.getIcon());
				rm.write("' alt='' role='presentation'/></a>");
			}
		}
		rm.write("</div>");
	}
	rm.write("<span class='sapUiUx3ShellFocusDummy' id='" + oControl.getId() + "-focusDummyTPEnd'" + tabIndex + "></span>");
};

sap.ui.ux3.ShellRenderer.renderPaneBarItems = function(rm, oControl) {
	var sId = oControl.getId();
	var aPaneBarItems = oControl.getPaneBarItems();
	var iNoOfItems = aPaneBarItems.length;
	for (var i = 0; i < iNoOfItems; i++) {
		var item = aPaneBarItems[i];
		var itemId = item.getId();
		rm.write("<li");
		rm.writeElementData(item);
		rm.write(" role='tab' aria-controls='" + sId + "-paneContent' aria-setsize='" + iNoOfItems + "' aria-posinset='" + (i+1) + "' tabindex='-1' class='sapUiUx3ShellPaneEntry");
		if (oControl._sOpenPaneId === itemId) { // mark pane item if opened
			rm.write(" sapUiUx3ShellPaneEntrySelected");
		}
		rm.write("'");
		if(item.getTooltip_AsString()) {
			rm.writeAttributeEscaped("title", item.getTooltip_AsString());
		}
		rm.write(">");
		rm.writeEscaped(item.getText().toUpperCase());
		rm.write("</li>");
	}
};

sap.ui.ux3.ShellRenderer.renderNotificationArea = function(rm, oControl) {
	rm.write("<div class='sapUiUx3ShellNotifyBG'></div>");
	if(oControl.getNotificationBar()){
		rm.renderControl(oControl.getNotificationBar());
	}
};

sap.ui.ux3.ShellRenderer.renderWorksetItems = function(rm, oControl) {
	var aItems = oControl.getWorksetItems();
	oControl._oWorksetBar.setAssociatedItems(aItems);
	if (!oControl._oWorksetBar.isSelectedItemValid() && (aItems.length > 0)) {
		oControl.setAssociation("selectedWorksetItem", aItems[0], true); // set the first item as being selected if there is no item selected
		oControl._oWorksetBar.setSelectedItem(aItems[0]); // set the first item as being selected if there is no item selected
	}
	if(rm){
		rm.renderControl(oControl._oWorksetBar);
	}
};

sap.ui.ux3.ShellRenderer.renderFacetBar = function(rm, oControl) {
	var oSelectedWsi = sap.ui.getCore().byId(oControl.getSelectedWorksetItem()); // by now it is guaranteed that the association is properly initialized
	if (oSelectedWsi) {
		// if parent is also a NavigationItem, the selected one is a second-level item and we need to go up one level
		var parent = oSelectedWsi.getParent();
		if (parent && parent instanceof sap.ui.ux3.NavigationItem) {
			oSelectedWsi = parent;
		}
	
		var aSubItems = oSelectedWsi.getSubItems();
		oControl._oFacetBar.setAssociatedItems(aSubItems);
		if (!oControl._oFacetBar.isSelectedItemValid() && (aSubItems.length > 0)) {
			oControl._oFacetBar.setSelectedItem(aSubItems[0]); // set the first item as being selected if there is no item selected
		}
	}
	if(rm){
		rm.renderControl(oControl._oFacetBar);
	}
};

}; // end of sap/ui/ux3/ShellRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingInspectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.ThingInspector
jQuery.sap.declare("sap.ui.ux3.ThingInspectorRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class ThingInspector renderer.
 * @static
 */
sap.ui.ux3.ThingInspectorRenderer = sap.ui.core.Renderer.extend(sap.ui.ux3.OverlayRenderer);

/**
 * Renders the ThingInspector content
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.ThingInspectorRenderer.renderContent = function(oRenderManager, oControl) {
	// convenience variable
	var rm = oRenderManager;	
	rm.write("<div role='Main' class='sapUiUx3TIContent' id='"+oControl.getId()+"-content'>");
	rm.renderControl(oControl._oThingViewer);
	rm.write("</div>");
};

/**
 * Add root class to ThingInspector
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.ThingInspectorRenderer.addRootClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3TI");
};

/**
 * Add class to ThingInspector
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.ThingInspectorRenderer.addOverlayClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3TIOverlay");
};
}; // end of sap/ui/ux3/ThingInspectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingViewerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
 
jQuery.sap.declare("sap.ui.ux3.ThingViewerRenderer");

/**
 * @class Thing renderer. 
 * @static
 */
sap.ui.ux3.ThingViewerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ThingViewerRenderer.render = function(oRenderManager, oControl){ 
    // convenience variable
	var rm = oRenderManager;
	
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.writeAttributeEscaped("style", "width:"+oControl.getWidth()+"; height:"+oControl.getHeight());
	rm.addClass('sapUiUx3TV');
	rm.writeClasses();
	rm.write(">");
	this.renderContent(rm,oControl);
	rm.write("</div>");
};

sap.ui.ux3.ThingViewerRenderer.renderContent = function(oRenderManager, oControl) {
// convenience variable
	var rm = oRenderManager,
		headerType = oControl.getHeaderType();

	rm.write("<div role='Main' class='sapUiUx3TVContent' id='"+oControl.getId()+"-content'>");
	//render Header
	//rm.write("<div class='sapUiUx3TVHeader sapUiUx3TVNoActionBar'>");
	rm.write("<div class='sapUiUx3TVHeader sapUiUx3TVNoActionBar");
	if (oControl.getHeaderType() === sap.ui.ux3.ThingViewerHeaderType.Standard) {
		rm.write("'>");
	} else {
		rm.write(" sapUiUx3TVhorizontal'>");
	}
	rm.write("<div class='sapUiUx3TVHeaderContainerIdentifier'>");
	rm.write("<span role='heading' aria-level='1' class='sapUiUx3TVIdentifier'");
	rm.writeAttributeEscaped("title", oControl.getType());
	rm.write(">");
	rm.writeEscaped(oControl.getType());
	rm.write("</span>");
	rm.write("</div>");

	if (headerType === sap.ui.ux3.ThingViewerHeaderType.Standard) {
		rm.write("<div class='sapUiUx3TVHeaderGroupScrollContainer'>");
		rm.write("<div id='" + oControl.getId() + "-header' class='sapUiUx3TVHeaderContainer'>");
		this.renderHeader(rm,oControl);
		rm.write("</div>");
	} else {
		rm.write("<div id='" + oControl.getId() + "-header' class='sapUiUx3TVHeaderContainer'>");
		this.renderHeader(rm,oControl);
		rm.write("</div>");
		rm.write("<div class='sapUiUx3TVHeaderGroupScrollContainer sapUiUx3TVhorizontal'>");
	}
	// render Header Content
	rm.write("<div id='" + oControl.getId() + "-headerContent'");
	if (headerType === sap.ui.ux3.ThingViewerHeaderType.Standard) {
		rm.write(">");
	} else {
		rm.write("style='height:100%; white-space:nowrap'>");
	}
	this.renderHeaderContent(rm, oControl);
	rm.write("</div>");

	rm.write("</div>");
	rm.write("</div>");

	// render Facets
	rm.write("<div class='sapUiUx3TVFacets sapUiUx3TVNoActionBar");
	if (headerType === sap.ui.ux3.ThingViewerHeaderType.Standard) {
		rm.write("'>");
	} else {
		rm.write(" sapUiUx3TVhorizontal'>");
	}
	rm.write("<div role='Navigation' class='sapUiUx3TVFacetBar'>");
	rm.renderControl(oControl._getNavBar());
	rm.write("</div>");
	rm.write("<div id='" + oControl.getId() + "-facetContent' class='sapUiUx3TVFacetContent'>");

	// render Facet Content
	this.renderFacetContent(rm, oControl);

	rm.write("</div>");
	rm.write("</div>");
	this.renderToolbar(rm, oControl);
	rm.write("</div>");
};

/**
 * Add root class to Thing
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.ThingViewerRenderer.addRootClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3TV");
};

/**
 * Add class to Thing
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.ThingViewerRenderer.addOverlayClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3TVOverlay");
};

/**
 * Renders the HTML for Thing Header
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.ThingViewerRenderer.renderHeader = function(oRenderManager, oControl) {
	var rm = oRenderManager;

	rm.write("<div class='sapUiUx3TVIconBar'>");
	rm.writeIcon(oControl.getIcon(),["sapUiUx3TVIcon"],{role:'presentation', id: oControl.getId() + '-swatch'});
	rm.write("<div class='sapUiUx3TVTitle'>");
	rm.write("<span role='heading' aria-level='2' class='sapUiUx3TVTitleFirst'");
	rm.writeAttributeEscaped("title", oControl.getTitle());
	rm.write(">");
	rm.writeEscaped(oControl.getTitle());
	rm.write("</span><br/>");
	rm.write("<span role='heading' aria-level='3' class='sapUiUx3TVTitleSecond'");
	rm.writeAttributeEscaped("title", oControl.getSubtitle());
	rm.write(">");
	rm.writeEscaped(oControl.getSubtitle());
	rm.write("</span>");
	rm.write("</div>");
	rm.write("</div>");	
};
 
 
/**
 * Renders the HTML for Thing Toolbar
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.ThingViewerRenderer.renderToolbar = function(rm, oControl) {
	// render Toolbar
	if (oControl.getActionBar()) {
		rm.write("<div id='"+oControl.getId()+"-toolbar' class='sapUiUx3TVToolbar'>");
		rm.renderControl(oControl.getActionBar());
		rm.write("</div>");
	}
};

/**
 * Renders the HTML for Thing Header content
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.ThingViewerRenderer.renderHeaderContent = function(rm, oControl) {
	var headerContentList = oControl.getHeaderContent(),
		headerType = oControl.getHeaderType();
		
	for ( var i = 0; i < headerContentList.length; i++) {
		var headerContent = headerContentList[i];
		if (headerType === sap.ui.ux3.ThingViewerHeaderType.Standard) {
			rm.write("<hr class='sapUiUx3TVHRWhite'>");
		}
		rm.write("<div class='sapUiUx3TVHeaderContainer");
		if (headerType === sap.ui.ux3.ThingViewerHeaderType.Standard) {
			rm.write("' role='form'>");
		} else {
			rm.write(" sapUiUx3TVhorizontal' role='form'>");
		}
		if (headerContent.getTitle()) {
			rm.write("<div class='sapUiUx3TVHeaderGroupTitle'");
			rm.writeAttributeEscaped("title", headerContent.getTooltip_AsString() ? headerContent.getTooltip_AsString(): headerContent.getTitle());
			rm.write("><span role='heading' aria-level='4'>");
			rm.writeEscaped(headerContent.getTitle());
			rm.write("</span>");
			rm.write("</div>");
		}
		rm.write("<div class='sapUiUx3TVHeaderGroupContent'>");
		var childContent = headerContent.getContent();
		for ( var j = 0; j < childContent.length; j++) {
			var childControl = childContent[j];
			rm.renderControl(childControl);
		}
		rm.write("</div>");
		rm.write("</div>");
	}
};

/**
 * Renders the HTML for Thing Facet content
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.ThingViewerRenderer.renderFacetContent = function(rm, oControl) {
	var facetContent = oControl.getFacetContent();
	var bTitle = true;

	if (facetContent.length == 1 )  {
		bTitle = false;
	}

	for ( var i = 0; i < facetContent.length; i++) {
		var group = facetContent[i];
		if (group.getColspan()) {
			rm.write("<div class='sapUiUx3TVFacetThingGroupSpan' role='form'>");
		} else {
			rm.write("<div class='sapUiUx3TVFacetThingGroup' role='form'>");
		}
		if (bTitle) {
			rm.write("<div class='sapUiUx3TVFacetThingGroupContentTitle'");
			rm.writeAttributeEscaped("title", group.getTooltip_AsString() ? group.getTooltip_AsString() : group.getTitle());
			rm.write("><span role='heading'>");
			rm.writeEscaped(group.getTitle());
			rm.write("</span></div>");
		}
		rm.write("<div class='sapUiUx3TVFacetThingGroupContent'>");
		var groupContent = group.getContent();
		for ( var j = 0; j < groupContent.length; j++) {
			rm.renderControl(groupContent[j]);
		}
		rm.write("</div></div>");
	}
};
}; // end of sap/ui/ux3/ThingViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ToolPopupRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.ToolPopup
jQuery.sap.declare("sap.ui.ux3.ToolPopupRenderer");

/**
 * @class ToolPopup renderer.
 * @static
 */
sap.ui.ux3.ToolPopupRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ToolPopupRenderer.render = function(rm, oControl) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	var sId = oControl.getId();
	var aContent = oControl.getContent();
	var aButtons = oControl.getButtons();
	var sTitle = oControl.getTitle();
	// there must be something to focus -> empty elements don't get a focus
	var sSrc = sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif');

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	
	rm.addClass("sapUiUx3TP");
	if (sTitle === "") {
		rm.addClass("sapUiUx3TPNoTitle");
	}
	if (aButtons.length === 0) {
		rm.addClass("sapUiUx3TPNoButtons");
	}
	if (oControl.isInverted()){
		rm.addClass("sapUiTPInverted");
		rm.addClass("sapUiInverted-CTX");
	}
	rm.writeClasses();
	
	rm.write(" aria-labelledby='", sId, "-title ", sId, "-acc' role='dialog'");
	rm.writeAttribute("tabindex", "-1");
	
	rm.write(">"); // div element

	rm.write("<div id='" + sId + "-arrow' class='sapUiUx3TPArrow sapUiUx3TPArrowLeft'><div class='sapUiUx3TPArrowBorder'></div></div>");
	rm.write("<span style='display:none;' id='", sId, "-acc'>");
	rm.writeEscaped(rb.getText("DIALOG_CLOSE_HELP"));
	rm.write("</span>");

	// write a focusable element that can be focused if there is no focusable element within the control
	// OR if the shift+tab key is used to set the focus on the last focusable element
	rm.write('<span id="' + sId + '-firstFocusable'+'" tabindex="0" class="sapUiUxTPFocus">');
	rm.write('<img src="' + sSrc + '">');
	rm.write('</span>');

	// title
	if (sTitle && (sTitle.length !== "")) {
		rm.write('<div class="sapUiUx3TPTitle" id="' + sId + '-title">');
		rm.write('<span class="sapUiUx3TPTitleText">');
		rm.writeEscaped(sTitle);
		rm.write('</span>');
		rm.write('</div>');
		rm.write('<div class="sapUiUx3TPTitleSep" id="' + sId + '-title-separator"></div>');
	} else { // for accessibility reasons use tooltip as hidden label
		var sTooltip = oControl.getTooltip_AsString();
		if (sTooltip) {
			rm.write("<h1 id='" + sId + "-title' style='display:none;'>");
			rm.writeEscaped(sTooltip);
			rm.write("</h1>");
		}
	}

	// content
	rm.write('<div id="' + sId + '-content"');
	rm.addClass("sapUiUx3TPContent");
	rm.writeClasses();
	rm.write(">");
	
	for (var i = 0; i < aContent.length; i++) {
		rm.renderControl(aContent[i]);
	}
	rm.write('</div>');

	// button row
	if (aButtons.length > 0) {
		rm.write('<div class="sapUiUx3TPButtonsSep" id="' + sId + '-buttons-separator"></div>');
		rm.write('<div class="sapUiUx3TPBtnRow" id="'+ sId +'-buttons">');
		for (var i = 0; i < aButtons.length; i++) {
			rm.renderControl(aButtons[i].addStyleClass("sapUiUx3TPBtn"));
		}
	}
	else{
		// hide button row
		rm.write('<div class="sapUiUx3TPButtonsSep sapUiUx3TPButtonRowHidden" id="' + sId + '-buttons-separator"></div>');
		rm.write('<div class="sapUiUx3TPBtnRow sapUiUx3TPButtonRowHidden" id="'+ sId +'-buttons">');
	}
	rm.write("</div>");

	// write a focusable element that can be focused when the user uses the tab-key within ToolPopup and 
	// to set the focus to the first focusable element
	rm.write('<span id="' + sId + '-lastFocusable'+'" tabindex="0" class="sapUiUxTPFocus">');
	rm.write('<img src="' + sSrc + '">');
	rm.write('</span>');

	rm.write("</div>");
};

}; // end of sap/ui/ux3/ToolPopupRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ui.ux3 (1.20.7)
 */
jQuery.sap.declare("sap.ui.ux3.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library with controls that implement the SAP User Experience (UX) Guidelines 3.0
 *
 * @namespace
 * @name sap.ui.ux3
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ui.ux3",
  dependencies : ["sap.ui.core","sap.ui.commons"],
  types: [
    "sap.ui.ux3.ActionBarSocialActions",
    "sap.ui.ux3.ExactOrder",
    "sap.ui.ux3.FeederType",
    "sap.ui.ux3.FollowActionState",
    "sap.ui.ux3.NotificationBarStatus",
    "sap.ui.ux3.ShellDesignType",
    "sap.ui.ux3.ShellHeaderType",
    "sap.ui.ux3.ThingViewerHeaderType",
    "sap.ui.ux3.VisibleItemCountMode"
  ],
  interfaces: [
    "sap.ui.ux3.DataSetView"
  ],
  controls: [
    "sap.ui.ux3.ActionBar",
    "sap.ui.ux3.CollectionInspector",
    "sap.ui.ux3.DataSet",
    "sap.ui.ux3.DataSetSimpleView",
    "sap.ui.ux3.Exact",
    "sap.ui.ux3.ExactArea",
    "sap.ui.ux3.ExactBrowser",
    "sap.ui.ux3.ExactList",
    "sap.ui.ux3.FacetFilter",
    "sap.ui.ux3.FacetFilterList",
    "sap.ui.ux3.Feed",
    "sap.ui.ux3.FeedChunk",
    "sap.ui.ux3.Feeder",
    "sap.ui.ux3.NavigationBar",
    "sap.ui.ux3.NotificationBar",
    "sap.ui.ux3.Overlay",
    "sap.ui.ux3.OverlayContainer",
    "sap.ui.ux3.OverlayDialog",
    "sap.ui.ux3.QuickView",
    "sap.ui.ux3.Shell",
    "sap.ui.ux3.ThingInspector",
    "sap.ui.ux3.ThingViewer",
    "sap.ui.ux3.ToolPopup"
  ],
  elements: [
    "sap.ui.ux3.Collection",
    "sap.ui.ux3.DataSetItem",
    "sap.ui.ux3.ExactAttribute",
    "sap.ui.ux3.NavigationItem",
    "sap.ui.ux3.Notifier",
    "sap.ui.ux3.ThingAction",
    "sap.ui.ux3.ThingGroup"
  ],
  version: "1.20.7"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.ActionBarSocialActions.
jQuery.sap.declare("sap.ui.ux3.ActionBarSocialActions");


/**
 * @class Enumeration of available standard actions for 'sap.ui.ux3.ActionBar'. To be used as parameters for function 'sap.ui.ux3.ActionBar.getSocialAction'.
 *
 * @version 1.20.7
 * @static
 * @public
 * @experimental Since version 1.2. 
 * API is not yet finished and might change completely
 */
sap.ui.ux3.ActionBarSocialActions = {
  
    /**
     * Standard action 'Create an update' (Feed) 
     * @public
     */
    Update : "Update",

    /**
     * Standard action 'Follow/Unfollow' 
     * @public
     */
    Follow : "Follow",

    /**
     * Standard action 'Mark for Follow up' 
     * @public
     */
    Flag : "Flag",

    /**
     * Standards action 'Mark as Favorite' 
     * @public
     */
    Favorite : "Favorite",

    /**
     * Standard action 'Open Thing Inspector' 
     * @public
     */
    Open : "Open"

  };
/**
 * 
 *   		Marker interface for controls which are suitable as view rendering for a DataSet.
 *   	
 *
 * @name sap.ui.ux3.DataSetView
 * @interface
 * @public
 */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.ExactOrder.
jQuery.sap.declare("sap.ui.ux3.ExactOrder");


/**
 * @class Defines the order of the sub lists of a list in the ExactBrowser.
 *
 * @version 1.20.7
 * @static
 * @public
 * @since 1.7.1
 */
sap.ui.ux3.ExactOrder = {
  
    /**
     * The order of the sub lists is defined by the selection order of the user. 
     * @public
     */
    Select : "Select",

    /**
     * The order of the sub lists is defined by order of the defined sub attributes. 
     * @public
     */
    Fixed : "Fixed"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.FeederType.
jQuery.sap.declare("sap.ui.ux3.FeederType");


/**
 * @class Type of an Feeder.
 *
 * @version 1.20.7
 * @static
 * @public
 * @experimental Since version 1.2. 
 * The whole Feed/Feeder API is still under discussion, significant changes are likely. Especially text presentation (e.g. @-references and formatted text) is not final. Also the Feed model topic is still open.
 */
sap.ui.ux3.FeederType = {
  
    /**
     * large Feeder 
     * @public
     */
    Large : "Large",

    /**
     * medium feeder 
     * @public
     */
    Medium : "Medium",

    /**
     * comment feeder (small) 
     * @public
     */
    Comment : "Comment"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.FollowActionState.
jQuery.sap.declare("sap.ui.ux3.FollowActionState");


/**
 * @class Defines the states of the follow action
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.ui.ux3.FollowActionState = {
  
    /**
     * follow state 
     * @public
     */
    Follow : "Follow",

    /**
     * hold state 
     * @public
     */
    Hold : "Hold",

    /**
     * default state 
     * @public
     */
    Default : "Default"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.NotificationBarStatus.
jQuery.sap.declare("sap.ui.ux3.NotificationBarStatus");


/**
 * @class This entries are used to set the visibility status of a NotificationBar
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.ui.ux3.NotificationBarStatus = {
  
    /**
     * Default height for the bar 
     * @public
     */
    Default : "Default",

    /**
     * Bar should be minimized 
     * @public
     */
    Min : "Min",

    /**
     * Bar should be maximized 
     * @public
     */
    Max : "Max",

    /**
     * Bar should not be visible 
     * @public
     */
    None : "None"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.ShellDesignType.
jQuery.sap.declare("sap.ui.ux3.ShellDesignType");


/**
 * @class Available shell design types.
 *
 * @version 1.20.7
 * @static
 * @public
 * @since 1.12.0
 */
sap.ui.ux3.ShellDesignType = {
  
    /**
     * The standard Shell design (dark). 
     * @public
     */
    Standard : "Standard",

    /**
     * 
     * A lighter design. Should be used in combination with the Standard header
     * type.
     *  
     * @public
     */
    Light : "Light",

    /**
     * 
     * An even lighter design. It borrows most of its properties from the Light
     * design and just changes a few details like the header colors in order to
     * have a blue design within gold reflection.
     *  
     * @public
     */
    Crystal : "Crystal"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.ShellHeaderType.
jQuery.sap.declare("sap.ui.ux3.ShellHeaderType");


/**
 * @class Available shell header display types.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.ui.ux3.ShellHeaderType = {
  
    /**
     * The standard Shell header. 
     * @public
     */
    Standard : "Standard",

    /**
     * Only the branding area is visible. Top-level navigation bar, header items, title and icon are not shown. 
     * @public
     */
    BrandOnly : "BrandOnly",

    /**
     * Like the Standard Area but without top-level navigation bar. 
     * @public
     */
    NoNavigation : "NoNavigation",

    /**
     * Like the Standard Area but with a leaner top-level navigation bar. 
     * @public
     */
    SlimNavigation : "SlimNavigation"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.ThingViewerHeaderType.
jQuery.sap.declare("sap.ui.ux3.ThingViewerHeaderType");


/**
 * @class Available ThingViewer header display types.
 *
 * @version 1.20.7
 * @static
 * @public
 * @since 1.16.3
 */
sap.ui.ux3.ThingViewerHeaderType = {
  
    /**
     * The standard ThingViewer header. 
     * @public
     */
    Standard : "Standard",

    /**
     * The header content is displayed horizontally above the facet content 
     * @public
     */
    Horizontal : "Horizontal"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.VisibleItemCountMode.
jQuery.sap.declare("sap.ui.ux3.VisibleItemCountMode");


/**
 * @class VisibleItemCountMode of the FacetFilter defines if the FacetFilter takes the whole available height (Auto) in the surrounding container, or is so high as needed to show 5 Items ("Fixed " - default).
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.ui.ux3.VisibleItemCountMode = {
  
    /**
     * The FacetFilter always has as many items in the FacetFilterList as defined in the visibleItemCount property. 
     * @public
     */
    Fixed : "Fixed",

    /**
     * The FacetFilter automatically fills the height of the surrounding container. The visibleItemCount property is automatically changed accordingly. 
     * @public
     */
    Auto : "Auto"

  };

}; // end of sap/ui/ux3/library.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ActionBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ActionBar.
jQuery.sap.declare("sap.ui.ux3.ActionBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ActionBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFollowState followState} : sap.ui.ux3.FollowActionState (default: sap.ui.ux3.FollowActionState.Default)</li>
 * <li>{@link #getFlagState flagState} : boolean</li>
 * <li>{@link #getFavoriteState favoriteState} : boolean</li>
 * <li>{@link #getThingIconURI thingIconURI} : sap.ui.core.URI</li>
 * <li>{@link #getAlwaysShowMoreMenu alwaysShowMoreMenu} : boolean (default: true)</li>
 * <li>{@link #getShowUpdate showUpdate} : boolean (default: true)</li>
 * <li>{@link #getShowFollow showFollow} : boolean (default: true)</li>
 * <li>{@link #getShowFlag showFlag} : boolean (default: true)</li>
 * <li>{@link #getShowFavorite showFavorite} : boolean (default: true)</li>
 * <li>{@link #getShowOpen showOpen} : boolean (default: true)</li>
 * <li>{@link #getDividerWidth dividerWidth} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBusinessActions businessActions} : sap.ui.ux3.ThingAction[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.ActionBar#event:actionSelected actionSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.ActionBar#event:feedSubmit feedSubmit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A special toolbar with predefined social actions which can be shown as needed. These are: Create an update (Feed), Follow, Mark for Follow Up, Mark as Favorite and Open Thing.
 * 
 * In addition business actions (ThingAction instances) can be added which are either displayed as MenuItems of the 'More' menu button or as individual tool bar buttons.
 * 
 * When using this control, please be aware that it fulfills rather specific requirements: it has been designed for and is used within composite controls QuickView and ThingInspector.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.ActionBar
 */
sap.ui.core.Control.extend("sap.ui.ux3.ActionBar", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"closePopups"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"followState" : {type : "sap.ui.ux3.FollowActionState", group : "Misc", defaultValue : sap.ui.ux3.FollowActionState.Default},
		"flagState" : {type : "boolean", group : "Misc", defaultValue : null},
		"favoriteState" : {type : "boolean", group : "Misc", defaultValue : null},
		"thingIconURI" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"alwaysShowMoreMenu" : {type : "boolean", group : "Misc", defaultValue : true},
		"showUpdate" : {type : "boolean", group : "Misc", defaultValue : true},
		"showFollow" : {type : "boolean", group : "Misc", defaultValue : true},
		"showFlag" : {type : "boolean", group : "Misc", defaultValue : true},
		"showFavorite" : {type : "boolean", group : "Misc", defaultValue : true},
		"showOpen" : {type : "boolean", group : "Misc", defaultValue : true},
		"dividerWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	},
	aggregations : {
    	"businessActions" : {type : "sap.ui.ux3.ThingAction", multiple : true, singularName : "businessAction"}, 
    	"_businessActionButtons" : {type : "sap.ui.commons.Button", multiple : true, singularName : "_businessActionButton", visibility : "hidden"}, 
    	"_socialActions" : {type : "sap.ui.ux3.ThingAction", multiple : true, singularName : "_socialAction", visibility : "hidden"}
	},
	events : {
		"actionSelected" : {}, 
		"feedSubmit" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ActionBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ActionBar.extend
 * @function
 */

sap.ui.ux3.ActionBar.M_EVENTS = {'actionSelected':'actionSelected','feedSubmit':'feedSubmit'};


/**
 * Getter for property <code>followState</code>.
 * Keeps track of the actionBars Follow/Unfollow button’s state. Its value is one of
 * - FollowActionState.Default
 * - FollowActionState.Follow
 * - FollowActionState.Hold
 * 
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.ui.ux3.FollowActionState} the value of property <code>followState</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getFollowState
 * @function
 */

/**
 * Setter for property <code>followState</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.ui.ux3.FollowActionState} oFollowState  new value for property <code>followState</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setFollowState
 * @function
 */


/**
 * Getter for property <code>flagState</code>.
 * Indicates whether “Mark for Follow Up” is active
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>flagState</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getFlagState
 * @function
 */

/**
 * Setter for property <code>flagState</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bFlagState  new value for property <code>flagState</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setFlagState
 * @function
 */


/**
 * Getter for property <code>favoriteState</code>.
 * Indicates whether “Favorite” is active
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>favoriteState</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getFavoriteState
 * @function
 */

/**
 * Setter for property <code>favoriteState</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bFavoriteState  new value for property <code>favoriteState</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setFavoriteState
 * @function
 */


/**
 * Getter for property <code>thingIconURI</code>.
 * The thing icon uri. Icon will be displayed in Feeder
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>thingIconURI</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getThingIconURI
 * @function
 */

/**
 * Setter for property <code>thingIconURI</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sThingIconURI  new value for property <code>thingIconURI</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setThingIconURI
 * @function
 */


/**
 * Getter for property <code>alwaysShowMoreMenu</code>.
 * If true, business actions are rendered as menu items of the 'More' menu button. Otherwise, 'More' menu button is only displayed for overflow and business actions are rendered as inidividual buttons.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>alwaysShowMoreMenu</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getAlwaysShowMoreMenu
 * @function
 */

/**
 * Setter for property <code>alwaysShowMoreMenu</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAlwaysShowMoreMenu  new value for property <code>alwaysShowMoreMenu</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setAlwaysShowMoreMenu
 * @function
 */


/**
 * Getter for property <code>showUpdate</code>.
 * Indicates whether social action “Update” is shown, default is ‘true’
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showUpdate</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getShowUpdate
 * @function
 */

/**
 * Setter for property <code>showUpdate</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowUpdate  new value for property <code>showUpdate</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setShowUpdate
 * @function
 */


/**
 * Getter for property <code>showFollow</code>.
 * Indicates whether social action “Follow” is shown, default is ‘true’
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showFollow</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getShowFollow
 * @function
 */

/**
 * Setter for property <code>showFollow</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowFollow  new value for property <code>showFollow</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setShowFollow
 * @function
 */


/**
 * Getter for property <code>showFlag</code>.
 * Indicates whether social action “Mark for Follow Up” is shown, default is ‘true’
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showFlag</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getShowFlag
 * @function
 */

/**
 * Setter for property <code>showFlag</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowFlag  new value for property <code>showFlag</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setShowFlag
 * @function
 */


/**
 * Getter for property <code>showFavorite</code>.
 * Indicates whether social action “Favorite” is shown, default is ‘true’
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showFavorite</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getShowFavorite
 * @function
 */

/**
 * Setter for property <code>showFavorite</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowFavorite  new value for property <code>showFavorite</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setShowFavorite
 * @function
 */


/**
 * Getter for property <code>showOpen</code>.
 * Indicates whether social action “Open” is shown, default is ‘true’
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showOpen</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getShowOpen
 * @function
 */

/**
 * Setter for property <code>showOpen</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowOpen  new value for property <code>showOpen</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setShowOpen
 * @function
 */


/**
 * Getter for property <code>dividerWidth</code>.
 * The minimum width of ActionBar's the social actions part: business action controls have to be rendered outside this area
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>dividerWidth</code>
 * @public
 * @name sap.ui.ux3.ActionBar#getDividerWidth
 * @function
 */

/**
 * Setter for property <code>dividerWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sDividerWidth  new value for property <code>dividerWidth</code>
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#setDividerWidth
 * @function
 */


/**
 * Getter for aggregation <code>businessActions</code>.<br/>
 * Displayed on the actionBar's right hand-side, either as menu item under 'More' or as individual buttons
 * 
 * @return {sap.ui.ux3.ThingAction[]}
 * @public
 * @name sap.ui.ux3.ActionBar#getBusinessActions
 * @function
 */


/**
 * Inserts a businessAction into the aggregation named <code>businessActions</code>.
 *
 * @param {sap.ui.ux3.ThingAction}
 *          oBusinessAction the businessAction to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the businessAction should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the businessAction is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the businessAction is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#insertBusinessAction
 * @function
 */

/**
 * Adds some businessAction <code>oBusinessAction</code> 
 * to the aggregation named <code>businessActions</code>.
 *
 * @param {sap.ui.ux3.ThingAction}
 *            oBusinessAction the businessAction to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#addBusinessAction
 * @function
 */

/**
 * Removes an businessAction from the aggregation named <code>businessActions</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingAction} vBusinessAction the businessAction to remove or its index or id
 * @return {sap.ui.ux3.ThingAction} the removed businessAction or null
 * @public
 * @name sap.ui.ux3.ActionBar#removeBusinessAction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>businessActions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingAction[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ActionBar#removeAllBusinessActions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingAction</code> in the aggregation named <code>businessActions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingAction}
 *            oBusinessAction the businessAction whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ActionBar#indexOfBusinessAction
 * @function
 */
	

/**
 * Destroys all the businessActions in the aggregation 
 * named <code>businessActions</code>.
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#destroyBusinessActions
 * @function
 */


/**
 * Fired when any of the social action’s toolbar buttons except ‘Update’ or any of the business action’s menu items resp. buttons is pressed. The selected action can be identified by its id and newState (the latter if applicable only)
 * ‘Follow’ button + menu: id: follow, newState: Follow/Hold/Default
 * ‘Mark for follow up’ button: id: flag, newState: true/false
 * ‘Favorite’ button: id: favorite, newState: true/false
 * ‘Open Thing Inspector’ button id: open
 * Business Actions: id: the ThingAction id
 * 
 * For ‘Update’, please refer to event ‘feedSubmit’ 
 *
 * @name sap.ui.ux3.ActionBar#actionSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of selected ThingAction
 * @param {sap.ui.ux3.ThingAction} oControlEvent.getParameters.action Selected ThingAction
 * @param {string} oControlEvent.getParameters.newState New State of the selected action.Only filled if the respective action maintains a state property, for example 'FollowUp' or 'Favorite'
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'actionSelected' event of this <code>sap.ui.ux3.ActionBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ActionBar</code>.<br/> itself. 
 *  
 * Fired when any of the social action’s toolbar buttons except ‘Update’ or any of the business action’s menu items resp. buttons is pressed. The selected action can be identified by its id and newState (the latter if applicable only)
 * ‘Follow’ button + menu: id: follow, newState: Follow/Hold/Default
 * ‘Mark for follow up’ button: id: flag, newState: true/false
 * ‘Favorite’ button: id: favorite, newState: true/false
 * ‘Open Thing Inspector’ button id: open
 * Business Actions: id: the ThingAction id
 * 
 * For ‘Update’, please refer to event ‘feedSubmit’ 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ActionBar</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#attachActionSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'actionSelected' event of this <code>sap.ui.ux3.ActionBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#detachActionSelected
 * @function
 */

/**
 * Fire event actionSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of selected ThingAction</li>
 * <li>'action' of type <code>sap.ui.ux3.ThingAction</code> Selected ThingAction</li>
 * <li>'newState' of type <code>string</code> New State of the selected action.Only filled if the respective action maintains a state property, for example 'FollowUp' or 'Favorite'</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ActionBar#fireActionSelected
 * @function
 */


/**
 * Fired when a new feed entry is submitted. 
 *
 * @name sap.ui.ux3.ActionBar#feedSubmit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.text Feed text
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'feedSubmit' event of this <code>sap.ui.ux3.ActionBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ActionBar</code>.<br/> itself. 
 *  
 * Fired when a new feed entry is submitted. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ActionBar</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#attachFeedSubmit
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'feedSubmit' event of this <code>sap.ui.ux3.ActionBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ActionBar#detachFeedSubmit
 * @function
 */

/**
 * Fire event feedSubmit to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'text' of type <code>string</code> Feed text</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ActionBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ActionBar#fireFeedSubmit
 * @function
 */


/**
 * Closes all popups which might be opened as ActionBar children. These are the more- and follow menu and the feeder popup
 *
 * @name sap.ui.ux3.ActionBar.prototype.closePopups
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\ux3\ActionBar.js
/*================================================================================
 *
 * This file provides behaviour of control sap.ui.ux3.ActionBar
 * 
 */

jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained
 


/**
 * Initialization hook for the Actionbar. Creates the empty action map instance
 * 'mActionMap' and provides the convenience member 'mActionKeys' to access static
 * 'sap.ui.ux3.ActionBar.M_ACTION_KEYS'  
 * 
 * @private
 */
sap.ui.ux3.ActionBar.prototype.init = function(){
	//Initialize map which will contain the actually used ThingActions
	this.mActionMap = {};
	//Provide convenient access to the static array of action identifiers for "mActionMap"
	this.mActionKeys = sap.ui.ux3.ActionBarSocialActions;
	
	this.oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	
	//Show social actions. No need to call the property setters because the prperties are true
	//by default, so there is no property change
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Update), true);
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Follow), true);
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Flag), true);
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Favorite), true);
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Open), true);
	
	// Initialize the ItemNavigation if required
	if (!this._oItemNavigation) {
		this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.addDelegate(this._oItemNavigation);
	}
};




/**
 * Destroys this instance of ActionBar, called by Element#destroy()
 * 
 * @private
 */
sap.ui.ux3.ActionBar.prototype.exit = function() {
	this.closePopups();
	
	if (this._oUpdatePopup) {
		this._oUpdatePopup.destroy();
		this._oUpdatePopup = null;
	}
	
	if (this._oMoreMenuButton) {
		this._oMoreMenuButton.destroy();
		this._oMoreMenuButton = null;
	}
	
	if (this._oMoreMenu) {
		this._oMoreMenu.destroy();
		this._oMoreMenu = null;
	}
	
	if(this._oHoldItem) {
		this._oHoldItem.destroy();
	}
	if(this._oUnFollowItem) {
		this._oUnFollowItem.destroy();
	}
	if(this._oUnHoldItem) {
		this._oUnHoldItem.destroy();
	}
	// cleanup the resize handler
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	
	this.mActionKeys = null;
	this.mActionKeys = null;
	this.oRb = null;
	
	this.destroyAggregation("_socialActions");
	this.destroyAggregation("_businessActionButtons");

	if (this._oItemNavigation) {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		delete this._oItemNavigation;
	}
};



/**
 * Checks whether the control is still valid (is in the DOM). ActionBar
 * instance is rendered if and only if 'isActive' returns 'true'. This
 * check is called implicitely by the rendere, MUST not be removed.
 *
 * @return {boolean} True if the control is still in the active DOM
 * @protected
 */
sap.ui.ux3.ActionBar.prototype.isActive = function() {
	var bResult = this.getDomRef() != null;
	
	return bResult;
};
	
	
/**
 * Load language dependent text for given resource bundle key and optional
 * arguments, if the resource contains dynamic content
 *
 * @param sKey resource bundle key
 * @param aArgs used to fill dynamic resource content 
 * @return the resource if it was found in the bundle or 'sKey' if no matching
 *		 resource was available. 
 * @private
 */
sap.ui.ux3.ActionBar.prototype._getLocalizedText = function(sKey, aArgs) {
	var sText = undefined;
	if(this.oRb) {
		sText = this.oRb.getText(sKey);
	}
	if(sText && aArgs){
		for(var index=0; index<aArgs.length; index++){
			sText = sText.replace("{"+index+"}", aArgs[index]);
		};
	}
	return sText ? sText : sKey;
};


/**
 * Creates a new social action for the specified 'sActionId' or returns the 
 * pooled instance of that social action. Assumes 
 * that 'sActionId' taken from 'this.mActionKeys', otherwise
 * a warning will be logged and 'undefined is returned'
 * 
 * @param sActionId
 * @return new or pooled instance of the specified action or 'undefined'
 */
sap.ui.ux3.ActionBar.prototype._getSocialAction = function (sActionId) {
	
	var oResult = this.mActionMap[sActionId];
	if(!oResult) {
		//no instance of the social action created for this action bar instance so far
		oResult = new sap.ui.ux3.ThingAction({id : this.getId() + "-" + sActionId});
		switch (sActionId) {
			case this.mActionKeys.Update:
				oResult.name = this.mActionKeys.Update;
				oResult.tooltipKey = "ACTIONBAR_UPDATE_ACTION_TOOLTIP";
				oResult.cssClass = "sapUiUx3ActionBarUpdateAction";
				//prepares the feeder popup 
				oResult.fnInit = function ( oActionBar ) {
					oActionBar._oUpdatePopup = new sap.ui.ux3.ToolPopup({
					id : oActionBar.getId() + "-UpdateActionPopup"
					}).addStyleClass("sapUiUx3ActionBarUpdatePopup");
					oActionBar._oUpdatePopup._ensurePopup().setAutoClose(true);
					
					oActionBar._feeder = new sap.ui.ux3.Feeder({
						id: oActionBar.getId() + "-Feeder",
						type: sap.ui.ux3.FeederType.Comment,
						thumbnailSrc : oActionBar.getThingIconURI(),
						text: "",
						submit : jQuery.proxy(
						function(oEvent) {
							var feedText = oEvent.getParameter("text");
							this.fireFeedSubmit({
								text : feedText
							});
							this._oUpdatePopup.close();
						}, oActionBar)
					});
					oActionBar._feeder.addStyleClass("sapUiUx3ActionBarFeeder");
					oActionBar._oUpdatePopup.addContent(oActionBar._feeder);
				};
				//opens or closes the feeder popup
				oResult.fnActionSelected = function (oEvent, oActionBar) {
					if (oActionBar._oUpdatePopup.isOpen()) {
						oActionBar._oUpdatePopup.close();
						} else {
							var oDomRef, iTIHeight, iContentHeight;
							
							oActionBar._oUpdatePopup.setPosition(sap.ui.core.Popup.Dock.BeginBottom, sap.ui.core.Popup.Dock.BeginTop, oEvent.getSource().getDomRef(), "-8 -13", "none");
							oActionBar._oUpdatePopup.open();
							oDomRef = jQuery(oActionBar._oUpdatePopup.getDomRef());
							iTIHeight =jQuery(window).height();
							iContentHeight = jQuery(oActionBar.getDomRef()).offset().top;
							oDomRef.css("top", "auto").css("bottom",(iTIHeight - iContentHeight + 7) + "px"); 
							jQuery.sap.delayedCall(1000, this, function() {
								jQuery.sap.focus(oActionBar._feeder.getFocusDomRef());
							})
							
						}
				};
				
				oResult.fnExit = function( oActionBar) {
					if(oActionBar._oUpdatePopup) {
						oActionBar._oUpdatePopup.destroy();
						oActionBar._oUpdatePopup = null;
					}
				};
			break;
		case this.mActionKeys.Follow:
			var followAction = oResult;
			oResult.name = this.mActionKeys.Follow;
			oResult.tooltipKey = "ACTIONBAR_FOLLOW_ACTION_TOOLTIP_FOLLOW";
			oResult.cssClass = "sapUiUx3ActionBarFollowAction";
			oResult.isMenu = function(oActionBar) {
				return oActionBar.getFollowState() != sap.ui.ux3.FollowActionState.Default;
			}
			oResult.fnActionSelected = function (oEvent, oActionBar) {
				if (oActionBar.getFollowState() == sap.ui.ux3.FollowActionState.Default) {
						//set new follow state BEFORE firing the corresponding event
						oActionBar._setFollowState(sap.ui.ux3.FollowActionState.Follow);
						oActionBar.fireActionSelected({
							id : followAction.name,
							state : "followState",
							action : followAction
						});
						
						
						this._fnPrepareFollowMenu(oEvent, oActionBar);
						
					} else {
						var eDock = sap.ui.core.Popup.Dock;
						oActionBar._oMenu.open(false, followAction.getFocusDomRef(), eDock.BeginBottom, eDock.BeginTop, followAction.getDomRef());
					}
				};
			oResult.fnCalculateState = function ( oActionBar ) {
				return oActionBar.getFollowState();
			};
			//populates the menu of the 'Follow' actionBar button depending on the 'FollowState' property
			oResult._fnPrepareFollowMenu = function( oEvent, oActionBar ) {
				var imagePath = sap.ui.resource("sap.ui.ux3", "themes/" + sap.ui.getCore().getConfiguration().getTheme());
				if(oActionBar.mActionMap[oActionBar.mActionKeys.Follow]) {
					if (!oActionBar._oUnFollowItem) {
						oActionBar._oUnFollowItem = new sap.ui.commons.MenuItem({
							id : oActionBar.getId() + "-unfollowState",
							text : oActionBar._getLocalizedText("TI_FOLLOW_ACTION_MENU_TXT_UNFOLLOW"),
							icon : imagePath + "/img/menu_unlisten.png"
						});
					}
					if (!oActionBar._oHoldItem) {
						oActionBar._oHoldItem = new sap.ui.commons.MenuItem({
							id : oActionBar.getId() + "-holdState",
							text : oActionBar._getLocalizedText("TI_FOLLOW_ACTION_MENU_TXT_HOLD"),
							icon : imagePath + "/img/menu_hold.png"
						});
					}
					if (!oActionBar._oUnHoldItem) {
						oActionBar._oUnHoldItem = new sap.ui.commons.MenuItem({
							id : oActionBar.getId() + "-unholdState",
							text : oActionBar._getLocalizedText("TI_FOLLOW_ACTION_MENU_TXT_UNHOLD"),
							icon : imagePath + "/img/menu_follow.png"
						});
					}
					if (!oActionBar._oMenu) {
						oActionBar._oMenu = new sap.ui.commons.Menu({
							id : oActionBar.getId() + "-followActionMenu"
						});
						
						oActionBar._oMenu.attachItemSelect(jQuery.proxy(function(oControlEvent) {
							this._fnFollowMenuSelected(oControlEvent, oActionBar);
						}, this));
						oActionBar._oMenu.addItem(oActionBar._oHoldItem);
						oActionBar._oMenu.addItem(oActionBar._oUnHoldItem);
						oActionBar._oMenu.addItem(oActionBar._oUnFollowItem);
					}
					if (oActionBar.getFollowState() == sap.ui.ux3.FollowActionState.Default) {
						oActionBar.mActionMap[oActionBar.mActionKeys.Follow].setTooltip(oActionBar._getLocalizedText("TI_FOLLOW_ACTION_TOOLTIP_FOLLOW"));
						oActionBar._oHoldItem.setVisible(false);
						oActionBar._oUnFollowItem.setVisible(false);
						oActionBar._oUnHoldItem.setVisible(false);
					} else if (oActionBar.getFollowState() == sap.ui.ux3.FollowActionState.Follow) {
						oActionBar.mActionMap[oActionBar.mActionKeys.Follow].setTooltip(oActionBar._getLocalizedText("TI_FOLLOW_ACTION_TOOLTIP_STOPPAUSE_FOLLOW"));
						oActionBar._oHoldItem.setVisible(true);
						oActionBar._oUnFollowItem.setVisible(true);
						oActionBar._oUnHoldItem.setVisible(false);
					} else if (oActionBar.getFollowState() == sap.ui.ux3.FollowActionState.Hold) {
						oActionBar.mActionMap[oActionBar.mActionKeys.Follow].setTooltip(oActionBar._getLocalizedText("TI_FOLLOW_ACTION_TOOLTIP_STOPCONTINUE_FOLLOW"));
						oActionBar._oHoldItem.setVisible(false);
						oActionBar._oUnFollowItem.setVisible(true);
						oActionBar._oUnHoldItem.setVisible(true);
					}
					oActionBar._updateSocialActionDomRef(oResult);
				}
			};
			//takes care of selection events in the follow menu
			oResult._fnFollowMenuSelected = function(oEvent, oActionBar) {
				if(oActionBar.mActionMap[oActionBar.mActionKeys.Follow]) {
					var sId = oEvent.getParameters().item.getId();
					//set new follow state BEFORE firing the corresponding event
					if (sId == oActionBar.getId() + "-followState") {
						oActionBar._setFollowState(sap.ui.ux3.FollowActionState.Follow);
					} else if (sId == oActionBar.getId() + "-unfollowState") {
						oActionBar._setFollowState(sap.ui.ux3.FollowActionState.Default);
					} else if (sId == oActionBar.getId() + "-holdState") {
						oActionBar._setFollowState(sap.ui.ux3.FollowActionState.Hold);
					} else if (sId + "-unholdState") {
						oActionBar._setFollowState(sap.ui.ux3.FollowActionState.Follow);
					}
					
					oActionBar.fireActionSelected({
						id : followAction.name,
						state: sId,
						action : followAction
					});
					
					this._fnPrepareFollowMenu(oEvent, oActionBar);
				}
			};
			break;
		case this.mActionKeys.Favorite:
				var favoriteAction = oResult;
				oResult.name = this.mActionKeys.Favorite;
				oResult.tooltipKey = "ACTIONBAR_FAVORITE_ACTION_TOOLTIP";
			oResult.cssClass = "sapUiUx3ActionBarFavoriteAction";
			//toggles the 'FavoriteState' property
			oResult.fnActionSelected = function (oEvent, oActionBar) {
				if (oActionBar.getFavoriteState() == true) {
						oActionBar._setFavoriteState(false);
					} else {
						oActionBar._setFavoriteState(true);
					}
					oActionBar.fireActionSelected({
						id : favoriteAction.name,
						state: oActionBar.getFavoriteState(),
						action : favoriteAction
					});
					oActionBar._updateSocialActionDomRef(oResult);
				};
				oResult.fnCalculateState = function ( oActionBar ) {
					var result = null;
					if(oActionBar.getFavoriteState()) {
						result = "Selected";
					}
					return result; 
				};
				break;
		case this.mActionKeys.Flag:
			var flagAction = oResult;
			oResult.name = this.mActionKeys.Flag;
			oResult.tooltipKey = "ACTIONBAR_FLAG_ACTION_TOOLTIP";
			oResult.cssClass = "sapUiUx3ActionBarFlagAction";
			//toggles the 'FlagState' property
			oResult.fnActionSelected = function (oEvent, oActionBar) {
				oActionBar._setFlagState(!oActionBar.getFlagState());
				oActionBar.fireActionSelected({
					id : flagAction.name,
					state : oActionBar.getFlagState(),
					action : flagAction
				});
				oActionBar._updateSocialActionDomRef(oResult);
			};
			oResult.fnCalculateState = function ( oActionBar ) {
				var result = null;
				if(oActionBar.getFlagState()) {
					result = "Selected";
				} 
				return result;
			};
			break;
		case this.mActionKeys.Open:
			oResult.name = this.mActionKeys.Open;
			oResult.tooltipKey = "ACTIONBAR_OPEN_THING_ACTION_TOOLTIP";
			oResult.cssClass = "sapUiUx3ActionBarOpenThingAction";
			break;
		default:
			jQuery.sap.log.warning("Function \"sap.ui.ux3.ActionBar.prototype._getSocialAction\" was called with unknown action key \"" + sActionId + 
				"\".\n\tNo action will not be rendered.");	
			return undefined;
		}
	}
	return oResult;
};
	
	
	
/*=================================================================================
 * Re-Rendering
 * 
 */	

/**    
  * Updates css classes and aria description for a social action    
  *    
  * @param oSocialAction social action to be re-rendered    
  * @private    
  */    
sap.ui.ux3.ActionBar.prototype._updateSocialActionDomRef = function(oSocialAction) {    
	
	var content = oSocialAction.$();
	if(content) {
		//Replace css classes with action's standard css
		content.attr("class", oSocialAction.cssClass);
		if (oSocialAction.fnCalculateState) {
			//add state specific css classes
			content.addClass("sapUiUx3ActionBarAction");
			content.addClass(oSocialAction.fnCalculateState(this));
		}
		if (oSocialAction.name == this.mActionKeys.Flag || oSocialAction.name == this.mActionKeys.Favorite) {
			content.attr("aria-pressed", oSocialAction.fnCalculateState(this) == "Selected" ? "true" : "false");
		}
		if (oSocialAction.isMenu) {
			//Update aria description
			content.attr("aria-haspopup", oSocialAction.isMenu(this) ? "true" : "false");
		}
	}
}; 

 

	
/**
 * Re-renders all content of the '-socialActions' list
 *
 * @private
 */
sap.ui.ux3.ActionBar.prototype._rerenderSocialActions = function() {
	var content = this.$("socialActions");
	if (content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ActionBarRenderer.renderSocialActions(rm, this);
		rm.flush(content[0]);
		rm.destroy();
	}
};


/**
 * Re-renders single business action toolbar button.
 *
 * @param oButton business action button to be re-rendered.
 * @private
 */
sap.ui.ux3.ActionBar.prototype._rerenderBusinessAction = function(oButton) {
	var content = oButton.$();
	if (content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		rm.renderControl(oButton);
		rm.flush(content[0].parentNode);
		rm.destroy();
	}
};


/**
 * Re-renders all content of the '-businessActions' list
 *
 * @private
 */
sap.ui.ux3.ActionBar.prototype._rerenderBusinessActions = function() {
	if(!this.getAlwaysShowMoreMenu()) {
		var content = this.$("businessActions");
		if (content && content.length > 0) {
			var rm = sap.ui.getCore().createRenderManager();
			sap.ui.ux3.ActionBarRenderer.renderBusinessActionButtons(rm, this);
			rm.flush(content[0]);
			rm.destroy();
		}
	}
	//make sure that more menu button's visibility is up to date
	this._onresize();
};

/*=============================================================================
 * Overwrite setter methods for show<SocialAction> properties
 * - setShowUpdate 
 * - setShowFollow
 * - setShowFlag
 * - setShowFavorite
 * - setShowOpen
 *
 * Private method _setShowSocialActionProperty to be used within these setters
 */

/**
 * Sets follow state and triggering re-rendering
 *
 * @param oFollowState new state
 */
sap.ui.ux3.ActionBar.prototype.setFollowState = function(oFollowState) {
	this.setProperty("followState", oFollowState);
	//CSS 0002094039 2013: Make sure that 'Follow' action menu is available
	//if the follow state is set via API
	if(!this._oMenu) {
		var oFollowAction = this._getSocialAction(this.mActionKeys.Follow);
		oFollowAction._fnPrepareFollowMenu(null, this);
	}
	return this;
};


 
 /**
 * Shows or hides standard button 'Update' on toolbar
 *
 * @param bFlag show or hide this social action on the toolbar
 */
sap.ui.ux3.ActionBar.prototype.setShowUpdate = function(bFlag) {
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Update), bFlag);
	// supress rerendering
	this.setProperty("showUpdate", bFlag, true);
	return this;
};

/**
 * Shows or hides standard button 'Follow' on toolbar
 *
 * @param bFlag show or hide this social action on the toolbar
 */
sap.ui.ux3.ActionBar.prototype.setShowFollow = function(bFlag) {
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Follow), bFlag);
	// supress rerendering
	this.setProperty("showFollow", bFlag, true);
	return this;
};

/**
 * Shows or hides standard button 'Flag' on toolbar
 *
 * @param bFlag show or hide this social action on the toolbar
 */
sap.ui.ux3.ActionBar.prototype.setShowFlag = function(bFlag) {
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Flag), bFlag);
	// supress rerendering
	this.setProperty("showFlag", bFlag, true);
	return this;
};

/**
 * Shows or hides standard button 'Favorite' on toolbar
 *
 * @param bFlag show or hide this social action on the toolbar
 */
sap.ui.ux3.ActionBar.prototype.setShowFavorite = function(bFlag) {
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Favorite), bFlag);
	// supress rerendering
	this.setProperty("showFavorite", bFlag, true);
	return this;
};

/**
 * Shows or hides standard button 'Open' on toolbar
 *
 * @param bFlag show or hide this social action on the toolbar
 */
sap.ui.ux3.ActionBar.prototype.setShowOpen = function(bFlag) {
	this._setShowSocialAction(this._getSocialAction(this.mActionKeys.Open), bFlag);
	// supress rerendering
	this.setProperty("showOpen", bFlag, true);
	return this;
};

/**
 * Sets follow state without triggering re-rendering
 *
 * @param oFollowState new state
 * @private
 */
sap.ui.ux3.ActionBar.prototype._setFollowState = function(oFollowState) {
	// supress rerendering
	this.setProperty("followState", oFollowState, true);
	return this;
};

/**
 * Sets flag state without triggering re-rendering
 *
 * @param oFlagState new state
 * @private
 */
sap.ui.ux3.ActionBar.prototype._setFlagState = function(oFlagState) {
	// supress rerendering
	this.setProperty("flagState", oFlagState, true);
	return this;
};

/**
 * Sets favorite state without triggering re-rendering
 *
 * @param oFavoriteState new state
 * @private
 */
sap.ui.ux3.ActionBar.prototype._setFavoriteState = function(oFavoriteState) {
	// supress rerendering
	this.setProperty("favoriteState", oFavoriteState, true);
	return this;
};

// Implementation of API method
sap.ui.ux3.ActionBar.prototype.setThingIconURI = function(oIcon) {
    // supress rendering 
	this.setProperty("thingIconURI", oIcon, true);
	var oUpdateAction = this.mActionMap[this.mActionKeys.Update]
	if(oUpdateAction && this._feeder) {
		this._feeder.setThumbnailSrc(oIcon);
	} else {
		jQuery.sap.log.warning("Function \"sap.ui.ux3.ActionBar.setThingIconURI\": failed to set new icon \"" + oIcon + 
			"\".\n\tReason: either updateAction " + oUpdateAction + " or feeder " + this._feeder + " is not defined."  );
	}
	return this;
};

/**
 * Sets the minimum width of ActionBar's the social actions part: 
 * business action controls have to be rendered outside this area
 *
 * @param oWidth the new width as CSSSize
 */
sap.ui.ux3.ActionBar.prototype.setDividerWidth = function(oWidth) {
	//Make sure that minim width of social actions part is re-calculated
	this._iSocActListWidth = null;
	//do not suppress rerendering
	this.setProperty("dividerWidth", oWidth);
	return this;
};

/**
 * Renders business actions as menu items of the 'Other Actions' 
 * toolbar button if 'bFlag' is true. Otherwise, 'Other Actions' toolbar button disappears and 
 * business actions are rendered as individual buttons.
 *
 * @param bFlag If true, business actions are rendered as menu items of the 'Other Actions' 
 *		  toolbar button. Otherwise, 'Other Actions' toolbar button disappears and 
 * 		  business actions are rendered as individual buttons.
 */
sap.ui.ux3.ActionBar.prototype.setAlwaysShowMoreMenu = function(bFlag) {
	var bOldValue = this.getProperty("alwaysShowMoreMenu");
	var businessActionsList = this.getAggregation("businessActions", []);
	this.setProperty("alwaysShowMoreMenu", bFlag, true);
	
	if(bOldValue != bFlag && businessActionsList) {
		
		if(!bFlag) {
			for(var i=0; i<businessActionsList.length; i++) {
				var oBusinessAction = businessActionsList[i];
				this._createButtonForAction(oBusinessAction, 
					this._oMoreMenu._getMenuItemForAction(oBusinessAction));
			}
		} else {
			var actionButtons = this._getBusinessActionButtons();
			for(var iIndex=0; iIndex<actionButtons.length; iIndex++) {
				if(actionButtons[iIndex].oMenuItem) {
					actionButtons[iIndex].oMenuItem.setVisible(true);
					actionButtons[iIndex].oMenuItem = null;
				}
			}
			this.destroyAggregation("_businessActionButtons");
		}
		this._styleMoreMenuButton();
	}
	this._bCallOnresize = true;
	this._rerenderBusinessActions();
	return this;
};	

/**
 * Closes all popups which might be opened as ActionBar children
 * These are the more- and follow menu and the feeder popup
 */
sap.ui.ux3.ActionBar.prototype.closePopups = function() {
	if (this._oUpdatePopup) {
		this._oUpdatePopup.close();
	}
	if(this._oMoreMenu) {
		this._oMoreMenu.close();
	}
	if(this._oMenu) {
		this._oMenu.close();
	}
}

/*=============================================================================
 * Methods for aggregation '_socialActions':
 * 
 */


	
/**
 * Removes the specified social action, if it was added before
 * and re-renders the actionbar instance. 
 * 
 * @param oSocialAction social action to remove from the actionbar.
 * @return the sap.ui.ux3.ActionBar instance if 'oSocialAction' was removed successfully,
 * null otherwise.
 * @private
 */
sap.ui.ux3.ActionBar.prototype._removeSocialAction = function(oSocialAction) {
	//check if oSocialAction to be removed is displayed at all
	var result = null;
	if(oSocialAction.name && this.mActionMap[oSocialAction.name]) {
		//Call action's clean up method which will in turn
		//destroy any controls created by the action
		if(this.mActionMap[oSocialAction.name].fnExit) {
			this.mActionMap[oSocialAction.name].fnExit(this);
		}
		result = this.removeAggregation("_socialActions", this.mActionMap[oSocialAction.name], true);
		this.mActionMap[oSocialAction.name].destroy();
		//remove both key and value from mActionMap
		delete this.mActionMap[oSocialAction.name];
		this._rerenderSocialActions();
		this._iSocActListWidth = null; //needs to be re-calculated
	}
	return result;
};

/**
 * Removes all social actions and re-renders the actionbar instance. 
 * 
 * @return the sap.ui.ux3.ActionBar instance
 * @private
 */
sap.ui.ux3.ActionBar.prototype._removeAllSocialActions = function() {
	//clear actionMap
	for (var key in this.mActionMap) {
		if(this.mActionMap[key] && this.mActionMap[key].fnExit) {
			this.mActionMap[key].fnExit(this);
		}
	}
	this.mActionMap = {};
	var result = this.removeAllAggregation("_socialActions", true);
	this._iSocActListWidth = null; //needs to be re-calculated
	this._rerenderSocialActions();
	return result;
};


/**
 * Checks if given 'oSocialAction' has already been added. If not, it is passed on
 * to private method 'sap.ui.ux3.ActionBar.prototype._prepareSocialAction'. After that,
 * the action's 'fnInit' exit is called, if it is defined.
 * 
 * @param oSocialAction social action to add to the actionbar
 * @param iIndex position at which new action shall be inserted. If not defined, new action will be appended
 *		to the end od the aggregation.
 * @return sap.ui.ux3.ActionBar the sap.ui.ux3.ActionBar instance if 'oSocialAction' was added successfully,
 * null otherwise.
 * @private
 * @see sap.ui.ux3.ActionBar.prototype._prepareSocialAction 
 */
sap.ui.ux3.ActionBar.prototype._addSocialAction = function(oSocialAction, iIndex) {
	//make sure that each social action is only added once
	//duplicates are useless in this case
	var result = null;
	if(!this.mActionMap[oSocialAction.name]) {
		result = this._prepareSocialAction(oSocialAction, iIndex);
	
		if ( oSocialAction.fnInit ) {
			// call the action's 'fnInit' exit
			oSocialAction.fnInit(this);
		}
		this._iSocActListWidth = null; //needs to be re-calculated
	}
	if(result) {
		//Only if social action was actually added, the actionbar is 
		//rendered again 
		this._rerenderSocialActions();
	}
	return result;	
};

	
/**
 * Attaches a 'Select' listener to the passed in 'oSocialAction', which will call the
 * actions 'fnActionSelected'. Uses the action's tooltip key to generate the i18n tooltip
 * text of the action's button. Finally, adds 'oSocialAction' to the actionbar's 
 * action map and its '_socialActions' aggregation.
 *
 * @param oSocialAction social action to add to the actionbar.
 * @param iIndex position at which new action shall be inserted. If not defined, new action will be appended
 *		to the end od the aggregation.
 * @return sap.ui.ux3.ActionBar the sap.ui.ux3.ActionBar instance 
 * @private
 */
sap.ui.ux3.ActionBar.prototype._prepareSocialAction = function(oSocialAction, iIndex) {
	
	// if 'Select' event is triggered on the action (this is done by a 'press' event
	// on the action's toolbar button'), the action's 'fnActionSelected' function is 
	// executed
	oSocialAction.attachSelect(jQuery.proxy(function(oControlEvent) {
		if(oSocialAction.fnActionSelected) {
			oSocialAction.fnActionSelected(oControlEvent, this);
		} else {
			this.fireActionSelected({
				id : oSocialAction.name,
				action : oSocialAction
			});
		}
	}, this));
	oSocialAction.setTooltip(this._getLocalizedText(oSocialAction.tooltipKey));
	this.mActionMap[oSocialAction.name] = oSocialAction;
	if(iIndex) {
		this.insertAggregation("_socialActions", oSocialAction, iIndex, true);
	} else {
		this.addAggregation("_socialActions", oSocialAction, true);
	}
	
	return oSocialAction;
};

/**
 * Calls '_addSocialAction' or '_removeSocialAction' depending on 'bFlag'.
 *
 * @param oSocialAction social action to deal with.
 * @param bFlag show the action or not.
 * @return the sap.ui.ux3.ActionBar instance 
 * @see sap.ui.ux3.ActionBar._addSocialAction
 * @see sap.ui.ux3.ActionBar._removeSocialAction  
 * @private
 */
sap.ui.ux3.ActionBar.prototype._setShowSocialAction = function (oSocialAction, bFlag) {
	return bFlag ? this._addSocialAction(oSocialAction) : this._removeSocialAction(oSocialAction);
};

/*=============================================================================
 * Implementation of generated API methods for aggregation 'businessActions':
 * - addBusinessAction 
 * - insertBusinessAction
 * - removeBusinessAction
 * - removeAllBusinessActions
 */

/**
 * Implementation of API method addBusinessAction.
 * 
 * @param oBusinessAction business action to be added 
 * @return sap.ui.ux3.ActionBar the sap.ui.ux3.ActionBar instance 
 */
sap.ui.ux3.ActionBar.prototype.addBusinessAction = function(oBusinessAction) {
	return this._addBusinessAction(oBusinessAction);
};

/**
 * Implementation of API method insertBusinessAction.
 * 
 * @param oBusinessAction business action to be added 
 * @param iIndex position at which the business action is to be displayed amidst the 
 *		other business actions 
 * @return sap.ui.ux3.ActionBar the sap.ui.ux3.ActionBar instance 
 */
sap.ui.ux3.ActionBar.prototype.insertBusinessAction = function(oBusinessAction, iIndex) {
	return this._addBusinessAction(oBusinessAction, iIndex);
};

/**
 * Implementation of API method removeBusinessAction.
 * 
 * @param oBusinessAction business action to be removed 
 * @return sap.ui.ux3.ActionBar the sap.ui.ux3.ActionBar instance 
 */
sap.ui.ux3.ActionBar.prototype.removeBusinessAction = function(oBusinessAction) {
	return this._removeBusinessAction(oBusinessAction, true);
};

/**
 * Removes oBusinessAction and cleans up corresponding menu item
 * and buttons. Calls rerenderBusinessActions if param 'bRerender' is true
 * 
 * @param oBusinessAction business action to be removed 
 * @param bRerender if this flag is set, business actions are re-rendered.
 * @return sap.ui.ux3.ActionBar the sap.ui.ux3.ActionBar instance 
 * @private
 */
sap.ui.ux3.ActionBar.prototype._removeBusinessAction = function(oBusinessAction, bRerender) {
		
	//Make sure that remove works for action Ids as well
	//CSN 0001948046 2013
	if(typeof oBusinessAction === "string") {
		var oCorrespondingAction = undefined;
		var sActionId = oBusinessAction;
		for(var i=0; i< this.getBusinessActions().length; i++) {
			var oAction = this.getBusinessActions()[i];
			if(oAction.getId() === sActionId) {
				oCorrespondingAction = oAction;
				break;
			}
		}
		oBusinessAction = oCorrespondingAction;
	}
	
	if(this._oMoreMenu) {
		var oMenuItem = this._oMoreMenu._getMenuItemForAction(oBusinessAction);
		if(oMenuItem) {
			this._oMoreMenu.removeItem(oMenuItem);
			oMenuItem.destroy();
		}
		
		// Check if there are any menu items left. If not,
		// destroy the 'More' menu and corresponding menu button
		if(this._oMoreMenu.getItems().length == 0) {
		    this._oMoreMenuButton.destroy();
		    this._oMoreMenuButton = null;
			this._oMoreMenu.destroy();
			this._oMoreMenu = null;
		}
	}
	
	if(!this.getAlwaysShowMoreMenu()) {
		var oButton = this._getButtonForAction(oBusinessAction);
		if(oButton) {
			
			this.removeAggregation("_businessActionButtons", oButton, true);
			oButton.destroy();
		}
	}
	// do not use flag'bRerender' as parameter here since
	// only the businessActionButtons section shall be
	// rendered. This is taken care of at the end of this 
	// function
	var result = this.removeAggregation("businessActions", oBusinessAction, true);
	if(bRerender) {
		this._rerenderBusinessActions();
	}
	return result;
};

/**
 * Implementation of API method removeAllBusinessAction.
 * 
 * @return sap.ui.ux3.ActionBar the ActionBar instance for method chaining 
 */
sap.ui.ux3.ActionBar.prototype.removeAllBusinessActions = function() {
	var businessActionsList = this.getAggregation("businessActions", []);
	if(businessActionsList) {
		for(var i=0; i<businessActionsList.length; i++) {
		    //Call '_removeBusinessAction' individually for each
		    //action since that function contains the logic for cleaning
		    //up menu items and menus
			//do not re-render inidividually but once and for all at the
			//method's end
			this._removeBusinessAction(businessActionsList[i], false);
		}
	}
	this._rerenderBusinessActions();
	var result = this.removeAllAggregation("businessActions", true);
	return result;
};

/**
 * Implementation of API method destroyBusinessActions.
 * 
 * @return sap.ui.ux3.ActionBar the ActionBar instance for method chaining
 */
sap.ui.ux3.ActionBar.prototype.destroyBusinessActions = function() {
	
	var businessActionsList = this.getAggregation("businessActions", []);
	if(businessActionsList) {
		for(var i=0; i<businessActionsList.length; i++) {
		    //Call '_removeBusinessAction' individually for each
		    //action since that function contains the logic for cleaning
		    //up menu items and menus
			//do not re-render inidividually but once and for all at the
			//method's end
			var aChildren = this._removeBusinessAction(businessActionsList[i], false);
			//destroy each business action
			if (aChildren instanceof sap.ui.core.Element) {
				aChildren.destroy(true);
			} 
		}
	}
	this._rerenderBusinessActions();
	var result = this.destroyAggregation("businessActions", true);
	return result;
};

/**
 * Returns the aggregation for the business action buttons
 * @private  
 */
sap.ui.ux3.ActionBar.prototype._getBusinessActionButtons = function() {
	return this.getAggregation("_businessActionButtons", []);
};

/**
 * Checks if property 'showBusinessActionsMenu' is set. If so, it first checks if the 
 * 'Other Actions' toolbar button is available and creates it if necessary. After that
 * it adds the new business action as a menu item to the 'Other Actions' toolbar button.
 * If the flag is not set, the a new '_businessActionButton' is created which is added to the
 * private aggregation '_businessActionButtons'. If an 'iIndex' is present, it is taken into
 * consideration in all of these cases.
 * 
 * @param oBusinessAction business action to be added 
 * @param iIndex position at which new action shall be inserted. If not defined, new action will be appended
 *		to the end of the aggregation.
 * @return sap.ui.ux3.ActionBar the sap.ui.ux3.ActionBar instance 
 * @private
 */
sap.ui.ux3.ActionBar.prototype._addBusinessAction = function(oBusinessAction, iIndex) {
	
	var result,
		that = this;
	
	if(!iIndex && iIndex != 0) { 
		result = this.addAggregation("businessActions", oBusinessAction, true);
	} else {
		result = this.insertAggregation("businessActions", oBusinessAction, iIndex, true);
	}
	
	// Prepare the 'Other Actions' toolbar button and add business actions as menu items to the 
	// 'Other Actions' toolbar button
	if(!this._oMoreMenuButton) {
		this._oMoreMenuButton = new sap.ui.commons.MenuButton(this.getId() + "-MoreMenuButton");
		this._oMoreMenuButton.setText(this._getLocalizedText("ACTIONBAR_BUTTON_MORE_TEXT"));
		this._oMoreMenuButton.setTooltip(this._getLocalizedText("ACTIONBAR_BUTTON_MORE_TOOLTIP"));
		var eDock = sap.ui.core.Popup.Dock;
		
		//make sure menu is displayed OVER the more button and towards the inside of the containing
		//control
		this._oMoreMenuButton.setDockButton(eDock.EndTop);
		this._oMoreMenuButton.setDockMenu(eDock.EndBottom);
		
		this._styleMoreMenuButton();
		
		this._oMoreMenu = new sap.ui.commons.Menu(this.getId() + "-MoreMenu", {
			ariaDescription: this._getLocalizedText("ACTIONBAR_BUTTON_MORE_TOOLTIP")
		});
		
		this._oMoreMenu._getMenuItemForAction = function (oAction) {
			for(var i=0; i< this.getItems().length; i++) {
				var oMenuItem = this.getItems()[i];
				if(oMenuItem.action == oAction) {
					return oMenuItem;
				}
			}
			return null;
		};
		
		this._oMoreMenuButton.setMenu(this._oMoreMenu);
	}
	var sMenuItemID = this._oMoreMenu.getId() + "-MenuItem-" + oBusinessAction.getId();
	var oMenuItem = new sap.ui.commons.MenuItem( sMenuItemID, {text: oBusinessAction.getText(), enabled: oBusinessAction.getEnabled()});
	oMenuItem.action = oBusinessAction;
	oMenuItem.attachSelect(jQuery.proxy(function (oControlEvent) {
		this.fireActionSelected({
			id : oBusinessAction.getId(),
			action : oBusinessAction
		});
	}, this));
	
	if(iIndex) {
		this._oMoreMenu.insertItem(oMenuItem, iIndex);
	} else {
		this._oMoreMenu.addItem(oMenuItem);
	}
	
	this._createButtonForAction(oBusinessAction, oMenuItem, iIndex);
	this._rerenderBusinessActions();
	return result;
};

/**
 * Returns the "More" menu button or null, if it has not been created.
 *
 * @return the "More" menu button 
 */
sap.ui.ux3.ActionBar.prototype._getMoreMenuButton = function() {
	return this._oMoreMenuButton;
};


/**
 * Will be called by the ResizeHandler listening to size changes of the actionBar
 * control depending on the DOM element or window size changes.
 * If the "alwaysShowMoreMenu" property is not set, this will check if there is
 * enough room to render the business actions individually (it does so by checking the
 * vertical offset of the businessActions' div).
 * If there is not enough room, the "Other Actions" toolbar button is displayed even 
 * though "alwaysShowMoreMenu" is not set
 *
 * @private  
 */
sap.ui.ux3.ActionBar.prototype._onresize = function(oEvent) {

	//set min width for action bar
	var oActionBarDomRef = this.$();
	
	if(oActionBarDomRef) {
		var sActionBarMinWidth = this.getActionBarMinWidth() + "px";
	
		if(oActionBarDomRef.css('minWidth') != sActionBarMinWidth) {
			oActionBarDomRef.css('minWidth', sActionBarMinWidth);
		}
	}
	
	if(!this.getAlwaysShowMoreMenu() && this._oMoreMenuButton ) {
		//Only show 'More' menu button if there is more than one business action
		var bShowMoreMenuButton = false;
		if( this._getBusinessActionButtons().length > 1) {
			var iMoreMenuButtonWidth = this._oMoreMenuButton.$().outerWidth();
			
			var iMaxButtonsWidth = oActionBarDomRef.outerWidth() 
				- this._getSocialActionListMinWidth() 
				- iMoreMenuButtonWidth;
			var actionButtons = this._getBusinessActionButtons();
			
			var iButtonWidth = 0;
			
			for(var iIndex=0; iIndex<actionButtons.length; iIndex++) {
				var oIthButtonDomRef = actionButtons[iIndex].$().parent();
				iButtonWidth += oIthButtonDomRef.outerWidth();
				if(iIndex == actionButtons.length -1) {
					//special treatment for last button since it toggles with more menu button
					iButtonWidth -= iMoreMenuButtonWidth;
				}
				
				if(iButtonWidth >= iMaxButtonsWidth) {
					if(oIthButtonDomRef.length > 0) {
						oIthButtonDomRef.css('display', 'none');
						if(actionButtons[iIndex].oMenuItem) {
							actionButtons[iIndex].oMenuItem.setVisible(true);
						}
						//There is at least one business action whose button does not fit
						//so show the 'More' button
						bShowMoreMenuButton = true;
					}
				} else {
					if(oIthButtonDomRef.length > 0) {
						oIthButtonDomRef.css('display', '');
						//due to problems in ie8
						if(!!sap.ui.Device.browser.internet_explorer) {
							this._rerenderBusinessAction(actionButtons[iIndex]);
						}
						if(actionButtons[iIndex].oMenuItem) {
							actionButtons[iIndex].oMenuItem.setVisible(false);
						}
					}
				}
			}
			
			//if there is more business actions than action buttons, there is at least
			//one business action which shall only be displayed in the 'More' menu.
			//In that case, the 'More' menu button MUST be displayed
			bShowMoreMenuButton |= this.getAggregation("businessActions").length > actionButtons.length;
		}
		
		var oMoreMenuButtonDomRef = this._oMoreMenuButton.$().parent();
		if(oMoreMenuButtonDomRef.length > 0) {
			bShowMoreMenuButton ? oMoreMenuButtonDomRef.css('display', '') : oMoreMenuButtonDomRef.css('display', 'none');
		}
		if (!bShowMoreMenuButton && this._oMoreMenu) {
			this._oMoreMenu.close();
		}
	}
	this._setItemNavigation();
	
};

/**
 * Rerendering handling
 * @private
 */
sap.ui.ux3.ActionBar.prototype.onBeforeRendering = function() {
	sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
	this._sResizeListenerId = null;
};

/**
 * Rerendering handling
 * @private
 */
sap.ui.ux3.ActionBar.prototype.onAfterRendering = function() {
	// listen to resize events of the browser (or surrounding DOM elements)
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this._onresize, this));
	if(this._bCallOnresize) {
		this._onresize();
	}
	//make sure that buttons are ready for keyboard navigation
	//this is usually done within 'resize' but we have to make sure that '_setItemNavigation' called
	//at least once
	this._setItemNavigation();
};


/**
 * Get the min width of the social action list
 * @return min width of the social action list
 * @private
 */
sap.ui.ux3.ActionBar.prototype._getSocialActionListMinWidth = function() {
	//determine minimum width for actionBar and socialActionsList
	
	if(!this._iSocActListWidth) {
		if(this.getDividerWidth()) {
			this._iSocActListWidth = parseInt(this.getDividerWidth(), 10);
		} else {
			// min width of the social actions part is determined by the number of 
			// actually displayed social actions
			
			var oSocialActions = this.getAggregation("_socialActions", []);
			var iActionCount = oSocialActions.length;
			this._iSocActListWidth = 24 * iActionCount + 12; //add some padding
		};
	}
	return this._iSocActListWidth;
};

/**
 * Get the min width of the social action list and add the width of the "More" button
 * @return min width of ActionBar
 */
sap.ui.ux3.ActionBar.prototype.getActionBarMinWidth = function() {
	
	var iResult = this._getSocialActionListMinWidth();
	var oRightControl = this._oMoreMenuButton;
	if(!this.getAlwaysShowMoreMenu() &&  this._getBusinessActionButtons().length == 1) {
		//If there is exactly one business action it is always displayed
		oRightControl = this._getBusinessActionButtons()[0]; 
	}	
	if(oRightControl) {
		// use parent's outer width because the menu button's outer width
		// has turned out to change, depending on the speed in which you resize 
		// the browser window.
		var oParentDomRef =  oRightControl.$().parent();
		if(oParentDomRef) {
			iResult += oParentDomRef.outerWidth() - 3; //substract left padding
		}
	}
	return iResult;
};

/**
 * Delivers action button for a specified action
 * @param oAction the action for which the button should be found
 * @return button for specified action
 * @private
 */
sap.ui.ux3.ActionBar.prototype._getButtonForAction = function(oAction) {
	for(var i=0; i< this._getBusinessActionButtons().length; i++) {
		var oButton = this._getBusinessActionButtons()[i];
		if(oButton.action == oAction) {
			return oButton;
		}
	}
	return null;
};

/**
 * Creates an action button for a specified action if 
 * @param oBusinessAction the action for which the button should be found
 * @param oMenuItem menu item which corresponds to the button
 * @param iIndex position at which button shall be shown
 * @return new button for specified action
 * @private
 */
sap.ui.ux3.ActionBar.prototype._createButtonForAction = function(oBusinessAction, oMenuItem, iIndex) {
	if(!this.getAlwaysShowMoreMenu() && !oBusinessAction.showInMoreMenu) {
		// Add business actions as individual buttons
		var oButton = new sap.ui.commons.Button({
			id : this.getId() + "-" + oBusinessAction.getId() + "Button",
			text : oBusinessAction.getText(),
			tooltip : oBusinessAction.getTooltip(),
			enabled : oBusinessAction.getEnabled()
		});
		
		oButton.attachPress(jQuery.proxy(function(oControlEvent) {
			this.fireActionSelected({
				id : oBusinessAction.getId(),
				action : oBusinessAction
			});
		}, this));
		//Link menu item to new button
		oButton.oMenuItem = oMenuItem;
		oButton.action = oBusinessAction;
		
		if(iIndex) {
			this.insertAggregation("_businessActionButtons", oButton, iIndex, true);
		} else {
			this.addAggregation("_businessActionButtons", oButton, true);
		}
		return oButton;
	}
	return null;
		
};

/**
 * Changes css class of 'More' menu button depending on whether 'alwaysShowMoreMenu'
 * property is set. If business actions are always displayed in the menu, 
 * it should be rendered as a lite button.
 * 
 * @private
 */
sap.ui.ux3.ActionBar.prototype._styleMoreMenuButton = function() {
    if(this._oMoreMenuButton) {
    	if(this.getAlwaysShowMoreMenu()) {
			this._oMoreMenuButton.setLite(true);
			//button styling differs from standard lite button: normal font and black color
			this._oMoreMenuButton.addStyleClass("sapUiUx3ActionBarLiteMoreButton");
		}	else {
			this._oMoreMenuButton.setLite(false);
			this._oMoreMenuButton.removeStyleClass("sapUiUx3ActionBarLiteMoreButton");
		}
    }
};



/**
 * Add Social- and Business Actions to ItemNavigation
 *
 * @private
 */
sap.ui.ux3.ActionBar.prototype._setItemNavigation = function() {

	if (this.getDomRef()) {
		
		this._oItemNavigation.setRootDomRef(jQuery(this.getDomRef()).get(0));
		// only if already rendered, otherwise not DOM elements exists
		var aItemDomRefs = [];
		var oActions = this.getAggregation("_socialActions", []);
		for ( var i = 0; i < oActions.length; i++) {
			aItemDomRefs.push(oActions[i].getDomRef());
		}
		oActions = this.getAggregation("_businessActionButtons", []);
		for ( var i = 0; i < oActions.length; i++) {
			aItemDomRefs.push(oActions[i].getDomRef());
		}
		if(this._oMoreMenuButton && this._oMoreMenuButton.getDomRef()) {
			aItemDomRefs.push(this._oMoreMenuButton.getDomRef());
		}
		this._oItemNavigation.setItemDomRefs(aItemDomRefs);
	}
};

/**
 * ActionBar invalidation: If ThingActions get invalidated the action buttons/items need to be updated 
 *
 * @private
 */
sap.ui.ux3.ActionBar.prototype.invalidate = function(oControl) {
	if (oControl instanceof sap.ui.ux3.ThingAction) {
		var oBusinessActionButton = sap.ui.getCore().byId(this.getId() + "-" + oControl.getId() + "Button");
		var oBusinessMenuItem = this._oMoreMenu && this._oMoreMenu._getMenuItemForAction(oControl);
		if (oBusinessActionButton) {
			oBusinessActionButton.setTooltip(oControl.getTooltip());
			oBusinessActionButton.setText(oControl.getText());
			oBusinessActionButton.setEnabled(oControl.getEnabled());
		}
		if (oBusinessMenuItem) {
			oBusinessMenuItem.setTooltip(oControl.getTooltip());
			oBusinessMenuItem.setText(oControl.getText());
			oBusinessMenuItem.setEnabled(oControl.getEnabled());
		}
		if (!oBusinessActionButton && !oBusinessMenuItem) {
			//the social actions are ThingActions too, but they need no special treatment
			sap.ui.core.Control.prototype.invalidate.apply(this,arguments);
		}
	} else {
		sap.ui.core.Control.prototype.invalidate.apply(this,arguments);
	}
};
}; // end of sap/ui/ux3/ActionBar.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Collection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Collection.
jQuery.sap.declare("sap.ui.ux3.Collection");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Collection.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getEditable editable} : boolean (default: false)</li>
 * <li>{@link #getMultiSelection multiSelection} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItems selectedItems} : string | sap.ui.core.Item</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.Collection#event:selectionChanged selectionChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Collection#event:propertyChanged propertyChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Collection
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.Collection
 */
sap.ui.core.Element.extend("sap.ui.ux3.Collection", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"editable" : {type : "boolean", group : "Appearance", defaultValue : false},
		"multiSelection" : {type : "boolean", group : "Accessibility", defaultValue : false}
	},
	aggregations : {
    	"items" : {type : "sap.ui.core.Item", multiple : true, singularName : "item"}
	},
	associations : {
		"selectedItems" : {type : "sap.ui.core.Item", multiple : true, singularName : "selectedItem"}
	},
	events : {
		"selectionChanged" : {}, 
		"propertyChanged" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.Collection with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.Collection.extend
 * @function
 */

sap.ui.ux3.Collection.M_EVENTS = {'selectionChanged':'selectionChanged','propertyChanged':'propertyChanged'};


/**
 * Getter for property <code>title</code>.
 * Name for the collection
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.ux3.Collection#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#setTitle
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * If a collection is editable an edit button will be displayed below the list of items
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.ux3.Collection#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#setEditable
 * @function
 */


/**
 * Getter for property <code>multiSelection</code>.
 * Allow multi selection of items in collection
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>multiSelection</code>
 * @public
 * @name sap.ui.ux3.Collection#getMultiSelection
 * @function
 */

/**
 * Setter for property <code>multiSelection</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bMultiSelection  new value for property <code>multiSelection</code>
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#setMultiSelection
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Items in the collection
 * 
 * @return {sap.ui.core.Item[]}
 * @public
 * @name sap.ui.ux3.Collection#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id
 * @return {sap.ui.core.Item} the removed item or null
 * @public
 * @name sap.ui.ux3.Collection#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Collection#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Collection#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#destroyItems
 * @function
 */


/**
 * Contains all items that are currently selected
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.ux3.Collection#getSelectedItems
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Item} vSelectedItem
 *    Id of a selectedItem which becomes an additional target of this <code>selectedItems</code> association.
 *    Alternatively, a selectedItem instance may be given. 
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#addSelectedItem
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Item} vSelectedItem the selectedItem to remove or its index or id
 * @return {string} the id of the removed selectedItem or null
 * @public
 * @name sap.ui.ux3.Collection#removeSelectedItem
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Collection#removeAllSelectedItems
 * @function
 */

	
/**
 * Fired when ever the selected items changer 
 *
 * @name sap.ui.ux3.Collection#selectionChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.ux3.Collection</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Collection</code>.<br/> itself. 
 *  
 * Fired when ever the selected items changer 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Collection</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#attachSelectionChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.ux3.Collection</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#detachSelectionChanged
 * @function
 */

/**
 * Fire event selectionChanged to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Collection#fireSelectionChanged
 * @function
 */


/**
 * Fires if a property has changed, and the collection inspector needs to do something after that 
 *
 * @name sap.ui.ux3.Collection#propertyChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'propertyChanged' event of this <code>sap.ui.ux3.Collection</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Collection</code>.<br/> itself. 
 *  
 * Fires if a property has changed, and the collection inspector needs to do something after that 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Collection</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#attachPropertyChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'propertyChanged' event of this <code>sap.ui.ux3.Collection</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#detachPropertyChanged
 * @function
 */

/**
 * Fire event propertyChanged to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Collection#firePropertyChanged
 * @function
 */


// Start of sap\ui\ux3\Collection.js
jQuery.sap.require('sap.ui.model.SelectionModel'); // unlisted dependency retained



sap.ui.ux3.Collection.prototype.init = function() {
	this.oCollectionSelection = new sap.ui.model.SelectionModel(sap.ui.model.SelectionModel.SINGLE_SELECTION);
};

/**
 * Set multi selection for selection model
 *
 * @public
 */
sap.ui.ux3.Collection.prototype.setMultiSelection = function(bMultiSelection) {
	if (bMultiSelection) {
		this.oCollectionSelection.setSelectionMode(sap.ui.model.SelectionModel.MULTI_SELECTION);
	} else {
		this.oCollectionSelection.setSelectionMode(sap.ui.model.SelectionModel.SINGLE_SELECTION);
		this.removeAllSelectedItems();
	}
	return this.setProperty("multiSelection",bMultiSelection);
};

/**
 * Set editable
 *
 * @public
 */
sap.ui.ux3.Collection.prototype.setEditable = function(bEditable) {
	this.setProperty("editable",bEditable,true);
	this.firePropertyChanged();
};

/**
 * Set title
 *
 * @public
 */
sap.ui.ux3.Collection.prototype.setTitle = function(sTitle) {
	this.setProperty("title",sTitle);
	this.fireEvent('_titleChanged', { newTitle: this.getProperty("title") });
};


/**
 *
 * @param {string | sap.ui.core.Item} vSelectedItem
 *    Id of a selectedItem which becomes an additional target of this <code>selectedItems</code> association.
 *    Alternatively, a selectedItem instance may be given. 
 * @return {sap.ui.ux3.Collection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Collection#addSelectedItem
 * @function
 */
sap.ui.ux3.Collection.prototype.addSelectedItem = function(vSelectedItem) {
	var oSelectedItem;
	if (typeof vSelectedItem == "object") {
		oSelectedItem = vSelectedItem;
	} else {
		oSelectedItem = sap.ui.getCore().byId(vSelectedItem);
	}
	if (jQuery.inArray(oSelectedItem.getId(),this.getSelectedItems()) >= 0) {
		return this;
	}
	var iIndex = this.indexOfItem(oSelectedItem);
	if (iIndex > -1) {
		if (this.oCollectionSelection.getSelectionMode() == sap.ui.model.SelectionModel.SINGLE_SELECTION) {
			this.removeAllAssociation("selectedItems",true);
			this.oCollectionSelection.clearSelection();
		}
		this.oCollectionSelection.addSelectionInterval(iIndex,iIndex);
	}
	this.addAssociation("selectedItems",vSelectedItem,true);
	this.fireSelectionChanged();
	return this;
};

/**
 * @param {int | string | sap.ui.core.Item} vSelectedItem the selectedItem to remove or its index or id
 * @return {string} the id of the removed selectedItem or null
 * @public
 * @name sap.ui.ux3.Collection#removeSelectedItem
 * @function
 */
sap.ui.ux3.Collection.prototype.removeSelectedItem = function(vSelectedItem) {
	//Don't remove the item if there is only one item selected
	if (this.getSelectedItems().length <= 1) {
		return;
	}
	var sRemovedObject = this.removeAssociation("selectedItems",vSelectedItem,true);
	var iIndex;
	if (typeof vSelectedItem == "object") {
		iIndex = this.indexOfItem(vSelectedItem);
	} else {
		iIndex = this.indexOfItem(sap.ui.getCore().byId(vSelectedItem));
	}
	if (iIndex > -1) {
		this.oCollectionSelection.removeSelectionInterval(iIndex,iIndex);
	}
	this.fireSelectionChanged();
	return sRemovedObject;
};

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Collection#removeAllSelectedItems
 * @function
 */
sap.ui.ux3.Collection.prototype.removeAllSelectedItems = function() {
	var aRemovedObjects = this.removeAllAssociation("selectedItems",true);
	this.oCollectionSelection.clearSelection();
	if (this.getItems().length > 0) {
		this.addSelectedItem(this.getItems()[0]);
	} else {
		this.fireSelectionChanged();
	}
	return aRemovedObjects;
};
}; // end of sap/ui/ux3/Collection.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.CollectionInspector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.CollectionInspector.
jQuery.sap.declare("sap.ui.ux3.CollectionInspector");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new CollectionInspector.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSidebarVisible sidebarVisible} : boolean (default: true)</li>
 * <li>{@link #getFitParent fitParent} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCollections collections} : sap.ui.ux3.Collection[]</li>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedCollection selectedCollection} : string | sap.ui.ux3.Collection</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.CollectionInspector#event:collectionSelected collectionSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.CollectionInspector#event:itemSelectionChanged itemSelectionChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.CollectionInspector#event:editCollection editCollection} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * CollectionInspector
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.CollectionInspector
 */
sap.ui.core.Control.extend("sap.ui.ux3.CollectionInspector", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"sidebarVisible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"fitParent" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	aggregations : {
    	"collections" : {type : "sap.ui.ux3.Collection", multiple : true, singularName : "collection"}, 
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	associations : {
		"selectedCollection" : {type : "sap.ui.ux3.Collection", multiple : false}
	},
	events : {
		"collectionSelected" : {}, 
		"itemSelectionChanged" : {}, 
		"editCollection" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.CollectionInspector with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.CollectionInspector.extend
 * @function
 */

sap.ui.ux3.CollectionInspector.M_EVENTS = {'collectionSelected':'collectionSelected','itemSelectionChanged':'itemSelectionChanged','editCollection':'editCollection'};


/**
 * Getter for property <code>sidebarVisible</code>.
 * Defines if the list of collection items is visible on the left
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>sidebarVisible</code>
 * @public
 * @name sap.ui.ux3.CollectionInspector#getSidebarVisible
 * @function
 */

/**
 * Setter for property <code>sidebarVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSidebarVisible  new value for property <code>sidebarVisible</code>
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#setSidebarVisible
 * @function
 */


/**
 * Getter for property <code>fitParent</code>.
 * If set to true, control will fit parents content area
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>fitParent</code>
 * @public
 * @name sap.ui.ux3.CollectionInspector#getFitParent
 * @function
 */

/**
 * Setter for property <code>fitParent</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFitParent  new value for property <code>fitParent</code>
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#setFitParent
 * @function
 */


/**
 * Getter for aggregation <code>collections</code>.<br/>
 * Collections which are displayed in the COllectionInspector
 * 
 * @return {sap.ui.ux3.Collection[]}
 * @public
 * @name sap.ui.ux3.CollectionInspector#getCollections
 * @function
 */


/**
 * Inserts a collection into the aggregation named <code>collections</code>.
 *
 * @param {sap.ui.ux3.Collection}
 *          oCollection the collection to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the collection should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the collection is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the collection is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#insertCollection
 * @function
 */

/**
 * Adds some collection <code>oCollection</code> 
 * to the aggregation named <code>collections</code>.
 *
 * @param {sap.ui.ux3.Collection}
 *            oCollection the collection to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#addCollection
 * @function
 */

/**
 * Removes an collection from the aggregation named <code>collections</code>.
 *
 * @param {int | string | sap.ui.ux3.Collection} vCollection the collection to remove or its index or id
 * @return {sap.ui.ux3.Collection} the removed collection or null
 * @public
 * @name sap.ui.ux3.CollectionInspector#removeCollection
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>collections</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.Collection[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.CollectionInspector#removeAllCollections
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.Collection</code> in the aggregation named <code>collections</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.Collection}
 *            oCollection the collection whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.CollectionInspector#indexOfCollection
 * @function
 */
	

/**
 * Destroys all the collections in the aggregation 
 * named <code>collections</code>.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#destroyCollections
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * All controls that are currently displayed
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.CollectionInspector#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.ux3.CollectionInspector#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.CollectionInspector#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.CollectionInspector#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#destroyContent
 * @function
 */


/**
 * Collection which is currently selected
 *
 * @return {string} Id of the element which is the current target of the <code>selectedCollection</code> association, or null
 * @public
 * @name sap.ui.ux3.CollectionInspector#getSelectedCollection
 * @function
 */

/**
 * Collection which is currently selected
 *
 * @param {string | sap.ui.ux3.Collection} vSelectedCollection 
 *    Id of an element which becomes the new target of this <code>selectedCollection</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#setSelectedCollection
 * @function
 */


	
/**
 * Event is fired if user selects a collection 
 *
 * @name sap.ui.ux3.CollectionInspector#collectionSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'collectionSelected' event of this <code>sap.ui.ux3.CollectionInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.CollectionInspector</code>.<br/> itself. 
 *  
 * Event is fired if user selects a collection 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.CollectionInspector</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#attachCollectionSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'collectionSelected' event of this <code>sap.ui.ux3.CollectionInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#detachCollectionSelected
 * @function
 */

/**
 * Fire event collectionSelected to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.CollectionInspector#fireCollectionSelected
 * @function
 */


/**
 * Fires when an item in a collection is selected 
 *
 * @name sap.ui.ux3.CollectionInspector#itemSelectionChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'itemSelectionChanged' event of this <code>sap.ui.ux3.CollectionInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.CollectionInspector</code>.<br/> itself. 
 *  
 * Fires when an item in a collection is selected 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.CollectionInspector</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#attachItemSelectionChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'itemSelectionChanged' event of this <code>sap.ui.ux3.CollectionInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#detachItemSelectionChanged
 * @function
 */

/**
 * Fire event itemSelectionChanged to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.CollectionInspector#fireItemSelectionChanged
 * @function
 */


/**
 * Fires when the edit button is clicked 
 *
 * @name sap.ui.ux3.CollectionInspector#editCollection
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'editCollection' event of this <code>sap.ui.ux3.CollectionInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.CollectionInspector</code>.<br/> itself. 
 *  
 * Fires when the edit button is clicked 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.CollectionInspector</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#attachEditCollection
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'editCollection' event of this <code>sap.ui.ux3.CollectionInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#detachEditCollection
 * @function
 */

/**
 * Fire event editCollection to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.CollectionInspector#fireEditCollection
 * @function
 */


// Start of sap\ui\ux3\CollectionInspector.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained
 

/**
 * Initialization the control
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.init = function() {

	var that = this;

	if (!this._oItemNavigation) {
		this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this._oItemNavigation.setCycling(false);
		this.addDelegate(this._oItemNavigation);
	}

	var oToggleButton = new sap.ui.commons.ToggleButton(this.getId() + "-toggleButton");
	oToggleButton.setParent(this);
	oToggleButton.setTooltip("This button opens and closes the sidebar");
	oToggleButton.attachPress(function() {
		if (oToggleButton.getPressed()) {
			that.openSidebar();
		} else {
			that.closeSidebar();
		}
	});
	this._oToggleButton = oToggleButton;

	var oCollectionSelector = new sap.ui.commons.SegmentedButton(this.getId() + "-selector");

	oCollectionSelector.attachSelect(function(oEvent) {
		var iCollectionIndex = this.indexOfButton(sap.ui.getCore().byId(this.getSelectedButton()));
		var oCollection = that.getCollections()[iCollectionIndex];
		that.setSelectedCollection(oCollection);
		that.fireCollectionSelected({
			collection: oCollection
		});
		that.openSidebar();
	});

	this._oCollectionSelector = oCollectionSelector;

	var oEditButton = new sap.ui.commons.Button();
	oEditButton.addStyleClass("sapUiUx3EditCollectionButton");
	oEditButton.setText("Collection");
	oEditButton.setTooltip("This button opens an edit dialog for the current collection");
	oEditButton.attachPress(function() {
		that.fireEditCollection();
	});
	this._oEditButton = oEditButton;
};

/**
 * Destroys elements created by the control
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.exit = function() {
	this._oToggleButton.destroy();
	this._oToggleButton = null;
	this._oEditButton.destroy();
	this._oEditButton = null;
	this._oCollectionSelector.destroy();
	this._oCollectionSelector = null;
	if (this._oItemNavigation) {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		delete this._oItemNavigation;
	}
};

/**
 * called before the control will be rendered
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.onBeforeRendering = function() {
	this._oToggleButton.setPressed(this.getSidebarVisible());
};

/**
 * called after control has been rendered
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.onAfterRendering = function() {
	if (!this.getSelectedCollection()) {
		if (this.getCollections().length > 0) {
			this.setSelectedCollection(this.getCollections()[0]);
		}
	} else {
		var oSelectedCollection = sap.ui.getCore().byId(this.getSelectedCollection());
		if (oSelectedCollection.getSelectedItems().length == 0 && oSelectedCollection.getItems().length > 0) {
			oSelectedCollection.addSelectedItem(oSelectedCollection.getItems()[0]);
		}
	}
	this.setElementsHeight();
	this.updateItemNavigation();
	this.refreshSelectionHighlighting();
};

/**
 * called when the control is clicked
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.onclick = function(oEvent) {
	var oTarget = oEvent.target;
	if (jQuery(oTarget).hasClass("sapUiUx3CICollectionListItem")) {
		var oSelectedCollection = sap.ui.getCore().byId(this.getSelectedCollection());
		var iIndex = jQuery(oTarget).index();
		if (jQuery.inArray(oTarget.id,oSelectedCollection.getSelectedItems()) >= 0) {
			oSelectedCollection.removeSelectedItem(oTarget.id);
		} else {
			oSelectedCollection.addSelectedItem(oTarget.id);
		}
		this.refreshSelectionHighlighting();
		this.fireItemSelectionChanged({
			selectedItems: oSelectedCollection.getSelectedItems()
		});
	}
};


/**
 * returns instance of toggle button
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.getToggleButton = function() {
	return this._oToggleButton;
};

/**
 * returns instance of collection selector
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.getCollectionSelector = function() {
	return this._oCollectionSelector;
};

/**
 * rerender the sidebar if different collection is selected
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.rerenderSidebar = function() {
	var oCurrentCollection = sap.ui.getCore().byId(this.getSelectedCollection());
	if (oCurrentCollection && oCurrentCollection.getEditable()) {
		this._oEditButton.setVisible(true);
	} else {
		this._oEditButton.setVisible(false);
	}
	var $Content = this.$("sidebar");
	if ($Content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this.getRenderer().renderSidebar(rm, this);
		rm.flush($Content[0]);
		rm.destroy();
	}
	if (oCurrentCollection && oCurrentCollection.getEditable()) {
		this.$("sidebar").addClass("sapUiUx3CIWithEditButton");
	} else {
		this.$("sidebar").removeClass("sapUiUx3CIWithEditButton");
	}
	this.updateItemNavigation();
	this.refreshSelectionHighlighting();
};

/**
 * load all dom refs to into the item navigation
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.updateItemNavigation = function() {
	var aItemDomRefs = [];
	var $Items = this.$("sidebar").find('li');
	jQuery.each($Items, function(iIndex, $DomRef) {
		aItemDomRefs.push($DomRef);
	});
	this._oItemNavigation.setItemDomRefs(aItemDomRefs);
	this._oItemNavigation.setRootDomRef(this.$("sidebar ul")[0]);
};

/**
 * rerender the content if different collection or collection item is selected
 *
 * @param int Index of the collection that should be rendered
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.rerenderContent = function() {
	var $Content = this.$("content");
	if ($Content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this.getRenderer().renderContent(rm, this);
		rm.flush($Content[0]);
		rm.destroy();
	}
	this.setElementsHeight();
};

/**
 * Calculate height, so that both the sidebar and the content have the same height
 *
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.setElementsHeight = function() {
	if (this.getFitParent()) return;

	var oSidebar = this.$("sidebar");
	var oContent = this.$("content");

	var iContentHeight = oContent.outerHeight(true);
	var iContentMargin = oContent.outerHeight(true) - oContent.height();
	var iSidebarMargin = oSidebar.outerHeight(true) - oSidebar.height();

	oSidebar.height(Math.max(200, iContentHeight) - iSidebarMargin);
	oContent.height(Math.max(200, iContentHeight) - iContentMargin);
};

/**
 * Opens the sidebar
 *
 * @public
 */
sap.ui.ux3.CollectionInspector.prototype.openSidebar = function() {
	var $this = this.$();
	var $Sidebar = this.$("sidebar");
	var $Content = this.$("content");
	$Sidebar.stop(true, true).animate({ width : 150 }, 300, function() {
		$Sidebar.css('width', '');
	});
	$Content.stop(true, true).animate({ left : 150 }, 300, function() {
		$Content.css('left', '');
	});
	$this.removeClass("sapUiUx3CISidebarClosed");
	$this.addClass("sapUiUx3CISidebarOpened");
	this._oToggleButton.setPressed(true);
};

/**
 * Closes the siedebar
 *
 * @public
 */
sap.ui.ux3.CollectionInspector.prototype.closeSidebar = function() {
	var $this = this.$();
	var $Sidebar = this.$("sidebar");
	var $Content = this.$("content");
	$Sidebar.stop(true, true).animate({ width : 0 }, 300, function() {
		$Sidebar.css('width', '');
	});
	$Content.stop(true, true).animate({ left : 0 }, 300, function() {
		$Content.css('left', '');
	});
	$this.removeClass("sapUiUx3CISidebarOpened");
	$this.addClass("sapUiUx3CISidebarClosed");
	this._oToggleButton.setPressed(false);
};

/**
 * Inserts a collection into the aggregation named <code>collections</code>.
 *
 * @param {sap.ui.ux3.Collection}
 *          oCollection the collection to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the collection should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the collection is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the collection is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#insertCollection
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.insertCollection = function(oCollection, iIndex) {
	var oButton = new sap.ui.commons.Button();
	oButton.setText(oCollection.getTitle());
	oCollection.attachEvent('_titleChanged', function(oEvent) {
		oButton.setText(oEvent.getParameter("newTitle"));
	});
	var that = this;
	oCollection.attachSelectionChanged(function() {
		that.refreshSelectionHighlighting();
	});
	oCollection.attachPropertyChanged(function() {
		that.rerenderSidebar();
	});
	this._oCollectionSelector.insertButton(oButton, iIndex);
	return this.insertAggregation("collections",oCollection, iIndex);
};

/**
 * Adds some collection <code>oCollection</code> 
 * to the aggregation named <code>collections</code>.
 *
 * @param {sap.ui.ux3.Collection}
 *            oCollection the collection to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#addCollection
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.addCollection = function(oCollection) {
	var oButton = new sap.ui.commons.Button();
	oButton.setText(oCollection.getTitle());
	oCollection.attachEvent('_titleChanged', function(oEvent) {
		oButton.setText(oEvent.getParameter("newTitle"));
	});
	var that = this;
	oCollection.attachSelectionChanged(function() {
		that.refreshSelectionHighlighting();
	});
	oCollection.attachPropertyChanged(function() {
		that.rerenderSidebar();
	});
	this._oCollectionSelector.addButton(oButton);
	return this.addAggregation("collections",oCollection);
};

/**
 * Removes an collection from the aggregation named <code>collections</code>.
 *
 * @param {int | string | sap.ui.ux3.Collection} vCollection the collection to remove or its index or id
 * @return {sap.ui.ux3.Collection} the removed collection or null
 * @public
 * @name sap.ui.ux3.CollectionInspector#removeCollection
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.removeCollection = function(vCollection) {
	var iIndex;
	if (typeof vCollection == "object") {
		iIndex= this.indexOfCollection(vCollection);
	} else {
		iIndex = this.indexOfCollection(sap.ui.getCore().byId(vCollection));
	}
	var oButton = this._oCollectionSelector.getButtons()[iIndex];
	this._oCollectionSelector.removeButton(oButton);

	var oResult = this.removeAggregation("collections",vCollection);
	if (oResult && this.getSelectedCollection() == oResult.getId()) {
		this.setSelectedCollection(null);
	}
	return oResult;
};

/**
 * Removes all the controls in the aggregation named <code>collections</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.Collection[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.CollectionInspector#removeAllCollections
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.removeAllCollections = function() {
	this._oCollectionSelector.removeAllButtons();
	this.setSelectedCollection(null);
	return this.removeAllAggregation("collections");
};

/**
 * Destroys the collection aggregation
 * @return {sap.ui.ux3.CollectionInspector} this to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#destroyCollections
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.destroyCollections = function() {
	this._oCollectionSelector.destroyButtons();
	this.setSelectedCollection(null);
	return this.destroyAggregation("collections");
};

sap.ui.ux3.CollectionInspector.prototype.setSelectedCollection = function(oCollection) {
	this.setAssociation("selectedCollection",oCollection,true);
	if (!oCollection) { 
		this._oEditButton.setVisible(false);
	} else {
		//Select the corresponding item in top navigation
		this._oCollectionSelector.setSelectedButton(this._oCollectionSelector.getButtons()[this.indexOfCollection(oCollection)]);
		//Select first item if no item is selected
		var oSelectedCollection = sap.ui.getCore().byId(this.getSelectedCollection());
		if (oSelectedCollection.getSelectedItems().length == 0 && oSelectedCollection.getItems().length > 0) {
			oSelectedCollection.addSelectedItem(oSelectedCollection.getItems()[0]);
		}
	}
	this.rerenderSidebar();
	this.refreshSelectionHighlighting();
};

/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#insertContent
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content",oContent,iIndex,true);
	this.rerenderContent();
}

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#addContent
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.addContent = function(oContent) {
	this.addAggregation("content",oContent,true);
	this.rerenderContent();
}

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.ux3.CollectionInspector#removeContent
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.removeContent = function(vContent) {
	this.removeAggregation("content",vContent,true);
	this.rerenderContent();
}

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.CollectionInspector#removeAllContent
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.removeAllContent = function() {
	this.removeAllAggregation("content",true);
	this.rerenderContent();
}

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.CollectionInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.CollectionInspector#destroyContent
 * @function
 */
sap.ui.ux3.CollectionInspector.prototype.destroyContent = function() {
	this.destroyAggregation("content",true);
	this.rerenderContent();
}

/**
 * When the CI looses the focus, this method is called.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.onfocusout = function(oEvent) {
	var $Target = jQuery(oEvent.target);
	if ($Target.hasClass("sapUiUx3CICollectionListItem")) {
		$Target.removeClass("sapUiUx3CISidebarFoc");
	}
};

/**
 * When the CI gets the focus, this method is called.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.onfocusin = function(oEvent) {
	var $Target = jQuery(oEvent.target);
	if ($Target.hasClass("sapUiUx3CICollectionListItem")) {
		$Target.addClass("sapUiUx3CISidebarFoc");
	}
};

/**
 * Handles the sapenter event does not bubble
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.onsapenter = function(oEvent) {
	var $Target = jQuery(oEvent.target);
	if ($Target.hasClass("sapUiUx3CISidebarFoc")) {
		this.onclick(oEvent);
	}
	oEvent.stopPropagation();
};

/**
 * Handles the sapspace event does not bubble
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.onsapspace = function(oEvent) {
	var $Target = jQuery(oEvent.target);
	if ($Target.hasClass("sapUiUx3CISidebarFoc")) {
		this.onclick(oEvent);
	}
	oEvent.stopPropagation();
};

/**
 * Updates the css classes for the selected items
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.ux3.CollectionInspector.prototype.refreshSelectionHighlighting = function() {
	var aItems = this.$("sidebar").find('.sapUiUx3CICollectionListItem');
	var aSelectedItems;
	if (this.getSelectedCollection()) {
		aSelectedItems = sap.ui.getCore().byId(this.getSelectedCollection()).getSelectedItems();
	} else {
		aSelectedItems = [];
	}
	jQuery.each(aItems, function(iIndex, oItem) {
		if (jQuery.inArray(oItem.id,aSelectedItems) >= 0) {
			jQuery(oItem).addClass("sapUiUx3CICollectionListItemSelected");
			jQuery(oItem).attr("aria-selected",true);
		} else {
			jQuery(oItem).removeClass("sapUiUx3CICollectionListItemSelected");
			jQuery(oItem).attr("aria-selected",false);
		}
	});
};

/**
 * Return the edit button
 *
 * @public
 */
sap.ui.ux3.CollectionInspector.prototype.getEditButton = function() {
	return this._oEditButton;
};
}; // end of sap/ui/ux3/CollectionInspector.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.DataSet.
jQuery.sap.declare("sap.ui.ux3.DataSet");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new DataSet.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowToolbar showToolbar} : boolean (default: true)</li>
 * <li>{@link #getShowFilter showFilter} : boolean (default: true)</li>
 * <li>{@link #getShowSearchField showSearchField} : boolean (default: true)</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.ux3.DataSetItem[]</li>
 * <li>{@link #getViews views} : sap.ui.ux3.DataSetView[]</li>
 * <li>{@link #getFilter filter} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedView selectedView} : string | sap.ui.ux3.DataSetView</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.DataSet#event:selectionChanged selectionChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.DataSet#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * DataSet
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.DataSet
 */
sap.ui.core.Control.extend("sap.ui.ux3.DataSet", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setLeadSelection", "getLeadSelection", "addToolbarItem", "removeToolbarItem"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"showToolbar" : {type : "boolean", group : "Misc", defaultValue : true},
		"showFilter" : {type : "boolean", group : "Misc", defaultValue : true},
		"showSearchField" : {type : "boolean", group : "Misc", defaultValue : true},
		"multiSelect" : {type : "boolean", group : "Behavior", defaultValue : false}
	},
	aggregations : {
    	"items" : {type : "sap.ui.ux3.DataSetItem", multiple : true, singularName : "item", bindable : "bindable"}, 
    	"views" : {type : "sap.ui.ux3.DataSetView", multiple : true, singularName : "view"}, 
    	"filter" : {type : "sap.ui.core.Control", multiple : true, singularName : "filter"}, 
    	"_viewSwitches" : {type : "sap.ui.core.Control", multiple : true, singularName : "_viewSwitch", visibility : "hidden"}, 
    	"_toolbar" : {type : "sap.ui.commons.Toolbar", multiple : false, visibility : "hidden"}
	},
	associations : {
		"selectedView" : {type : "sap.ui.ux3.DataSetView", multiple : false}
	},
	events : {
		"selectionChanged" : {}, 
		"search" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.DataSet with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.DataSet.extend
 * @function
 */

sap.ui.ux3.DataSet.M_EVENTS = {'selectionChanged':'selectionChanged','search':'search'};


/**
 * Getter for property <code>showToolbar</code>.
 * show Toolbar
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showToolbar</code>
 * @public
 * @name sap.ui.ux3.DataSet#getShowToolbar
 * @function
 */

/**
 * Setter for property <code>showToolbar</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowToolbar  new value for property <code>showToolbar</code>
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#setShowToolbar
 * @function
 */


/**
 * Getter for property <code>showFilter</code>.
 * show filter
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showFilter</code>
 * @public
 * @name sap.ui.ux3.DataSet#getShowFilter
 * @function
 */

/**
 * Setter for property <code>showFilter</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowFilter  new value for property <code>showFilter</code>
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#setShowFilter
 * @function
 */


/**
 * Getter for property <code>showSearchField</code>.
 * Show/hide SearchField in Toolbar
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSearchField</code>
 * @public
 * @name sap.ui.ux3.DataSet#getShowSearchField
 * @function
 */

/**
 * Setter for property <code>showSearchField</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSearchField  new value for property <code>showSearchField</code>
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#setShowSearchField
 * @function
 */


/**
 * Getter for property <code>multiSelect</code>.
 * Selection mode of the DataSet
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * @name sap.ui.ux3.DataSet#getMultiSelect
 * @function
 */

/**
 * Setter for property <code>multiSelect</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bMultiSelect  new value for property <code>multiSelect</code>
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#setMultiSelect
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of DataSetItems
 * 
 * @return {sap.ui.ux3.DataSetItem[]}
 * @public
 * @name sap.ui.ux3.DataSet#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.ux3.DataSetItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.ux3.DataSetItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.ux3.DataSetItem} vItem the item to remove or its index or id
 * @return {sap.ui.ux3.DataSetItem} the removed item or null
 * @public
 * @name sap.ui.ux3.DataSet#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.DataSetItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.DataSet#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.DataSetItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.DataSetItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.DataSet#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#destroyItems
 * @function
 */


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#bindItems
 * @function
 */

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#unbindItems
 * @function
 */


/**
 * Getter for aggregation <code>views</code>.<br/>
 * views
 * 
 * @return {sap.ui.ux3.DataSetView[]}
 * @public
 * @name sap.ui.ux3.DataSet#getViews
 * @function
 */


/**
 * Inserts a view into the aggregation named <code>views</code>.
 *
 * @param {sap.ui.ux3.DataSetView}
 *          oView the view to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the view should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the view is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the view is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#insertView
 * @function
 */

/**
 * Adds some view <code>oView</code> 
 * to the aggregation named <code>views</code>.
 *
 * @param {sap.ui.ux3.DataSetView}
 *            oView the view to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#addView
 * @function
 */

/**
 * Removes an view from the aggregation named <code>views</code>.
 *
 * @param {int | string | sap.ui.ux3.DataSetView} vView the view to remove or its index or id
 * @return {sap.ui.ux3.DataSetView} the removed view or null
 * @public
 * @name sap.ui.ux3.DataSet#removeView
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>views</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.DataSetView[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.DataSet#removeAllViews
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.DataSetView</code> in the aggregation named <code>views</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.DataSetView}
 *            oView the view whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.DataSet#indexOfView
 * @function
 */
	

/**
 * Destroys all the views in the aggregation 
 * named <code>views</code>.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#destroyViews
 * @function
 */


/**
 * Getter for aggregation <code>filter</code>.<br/>
 * Filter control (e.g. a FacetFilter) for the DataSet
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.DataSet#getFilter
 * @function
 */


/**
 * Inserts a filter into the aggregation named <code>filter</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFilter the filter to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the filter should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the filter is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the filter is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#insertFilter
 * @function
 */

/**
 * Adds some filter <code>oFilter</code> 
 * to the aggregation named <code>filter</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFilter the filter to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#addFilter
 * @function
 */

/**
 * Removes an filter from the aggregation named <code>filter</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFilter the filter to remove or its index or id
 * @return {sap.ui.core.Control} the removed filter or null
 * @public
 * @name sap.ui.ux3.DataSet#removeFilter
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>filter</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.DataSet#removeAllFilter
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>filter</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFilter the filter whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.DataSet#indexOfFilter
 * @function
 */
	

/**
 * Destroys all the filter in the aggregation 
 * named <code>filter</code>.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#destroyFilter
 * @function
 */


/**
 * Selected view of the Dataset
 *
 * @return {string} Id of the element which is the current target of the <code>selectedView</code> association, or null
 * @public
 * @name sap.ui.ux3.DataSet#getSelectedView
 * @function
 */

/**
 * Selected view of the Dataset
 *
 * @param {string | sap.ui.ux3.DataSetView} vSelectedView 
 *    Id of an element which becomes the new target of this <code>selectedView</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#setSelectedView
 * @function
 */


	
/**
 * selection Changed 
 *
 * @name sap.ui.ux3.DataSet#selectionChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.oldLeadSelectedIndex Old lead selected index
 * @param {int} oControlEvent.getParameters.newLeadSelectedIndex New lead selected index
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.ux3.DataSet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.DataSet</code>.<br/> itself. 
 *  
 * selection Changed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.DataSet</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#attachSelectionChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.ux3.DataSet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#detachSelectionChanged
 * @function
 */

/**
 * Fire event selectionChanged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oldLeadSelectedIndex' of type <code>int</code> Old lead selected index</li>
 * <li>'newLeadSelectedIndex' of type <code>int</code> New lead selected index</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.DataSet#fireSelectionChanged
 * @function
 */


/**
 * Event which is fired when the user triggers a search 
 *
 * @name sap.ui.ux3.DataSet#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The search query
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.ui.ux3.DataSet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.DataSet</code>.<br/> itself. 
 *  
 * Event which is fired when the user triggers a search 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.DataSet</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.ui.ux3.DataSet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSet#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.DataSet#fireSearch
 * @function
 */


/**
 * Set LeadSelection index
 *
 * @name sap.ui.ux3.DataSet.prototype.setLeadSelection
 * @function
 * @param {int} 
 *         iIIndex
 *         

 * @type void
 * @public
 */


/**
 * Get LeadSelection index
 *
 * @name sap.ui.ux3.DataSet.prototype.getLeadSelection
 * @function

 * @type int
 * @public
 */


/**
 * add a toolbarItem to the toolbar
 *
 * @name sap.ui.ux3.DataSet.prototype.addToolbarItem
 * @function
 * @param {sap.ui.commons.ToolbarItem} 
 *         oOToolbarItem
 *         ToolbarItem

 * @type void
 * @public
 */


/**
 * remove a toolbarItem to the toolbar
 *
 * @name sap.ui.ux3.DataSet.prototype.removeToolbarItem
 * @function
 * @param {sap.ui.commons.ToolbarItem} 
 *         oOToolbarItem
 *         

 * @type void
 * @public
 */


// Start of sap\ui\ux3\DataSet.js
///**
//* This file defines behavior for the DataSet control,
//*/
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained


sap.ui.ux3.DataSet.prototype.init = function() {
	var that = this, oToolbar;
	//each DS needs a selectionModel for its items
	jQuery.sap.require("sap.ui.model.SelectionModel");
	this.selectionModel = new sap.ui.model.SelectionModel(sap.ui.model.SelectionModel.SINGLE_SELECTION);
	// init toolbar
	this._oSegBut = new sap.ui.commons.SegmentedButton();
	this._oSegBut.attachSelect(function(oEvent){that.press(oEvent);}, that);
	this._oSegBut.show = false;
	this._oSearchField = new sap.ui.commons.SearchField(this.getId()+"-searchValue");
	this._oSearchField.setShowListExpander(false);
	this._oSearchField.setEnableListSuggest(false);
	this._oSearchField.setEnableFilterMode(true);
	this._oSearchField.setEnableClear(true);
	this._oSearchField.show = false;
	that = this;
	this._oSearchField.attachSearch(function(oEvent) {
		that.fireSearch(oEvent.getParameters());
	});
	this.selectionModel.attachSelectionChanged(function(oEvent){
		var oldSelectedIndex, newSelectedIndex;
		var mParameters = oEvent.getParameters();
		if (mParameters){
			newSelectedIndex = mParameters.leadIndex;
			oldSelectedIndex = mParameters.oldIndex;
		} 
		that.fireSelectionChanged({
			oldLeadSelectedIndex: oldSelectedIndex,
			newLeadSelectedIndex: newSelectedIndex
		});
		jQuery.sap.log.debug("Selection Change fired");
	});
	oToolbar = new sap.ui.commons.Toolbar();
	this._setToolbar(oToolbar);
	this._iShiftStart = null;
};

sap.ui.ux3.DataSet.prototype.exit = function() {
	this._oSegBut.destroy();
	this._oSearchField.destroy();
	this.destroyAggregation("_toolbar");
};

sap.ui.ux3.DataSet.prototype._prepareToolbar = function() {
	var iViewCount = this.getViews().length,
		oToolbar = this._getToolbar();
		
	if(iViewCount > 1 && this._oSegBut.show == false) {
		oToolbar.insertItem(this._oSegBut,0);
			this._oSegBut.show = true; 
	} else if (iViewCount <= 1 && this._oSegBut.show) {
		oToolbar.removeItem(this._oSegBut);
		this._oSegBut.show = false;
	}
	if (this.getShowSearchField() && this._oSearchField.show == false) {
		oToolbar.insertRightItem(this._oSearchField,oToolbar.getRightItems().length);
		this._oSearchField.show = true;
	} else if (!this.getShowSearchField() && this._oSearchField.show == true){
		oToolbar.removeRightItem(this._oSearchField);
		this._oSearchField.show = false;
	}
};

/**
 * Press handler for the view selection buttons
 *
 * @param {sap.ui.base.Event} oEvent Press event
 * @private
*/
sap.ui.ux3.DataSet.prototype.press = function(oEvent,iSelectedViewIndex) {
	var oButtonID = oEvent.getParameters().selectedButtonId,
		viewId = oButtonID.substring(oButtonID.lastIndexOf('-')+1),
		oldView = sap.ui.getCore().byId(this.getSelectedView());
	oldView.exitView(this.getItems());
	this.setSelectedView(viewId);
};

/**
 * Fire filter event
 *
 * @private
*/
sap.ui.ux3.DataSet.prototype.filter = function() {
	this.fireFilter({
					filterValue : this.getFilterValue()
				});
};
/**
 * Fire sort event
 *
 * @private
*/
sap.ui.ux3.DataSet.prototype.sort = function() {
	this.fireSort();
};

/**
 * adds selection interval to array of selected items.
 * 
 * @private
 */
sap.ui.ux3.DataSet.prototype.addSelectionInterval = function(iIndexFrom, iIndexTo) {
	this.selectionModel.addSelectionInterval(iIndexFrom, iIndexTo);
	return this;
};

/**
 * sets selection interval to array of selected items.
 * 
 * @private
 */
sap.ui.ux3.DataSet.prototype.setSelectionInterval = function(iIndexFrom, iIndexTo) {
	this.selectionModel.setSelectionInterval(iIndexFrom, iIndexTo);
	return this;
};
/**
 * removes selection interval from array of selected items
 * 
 * @private
 */
sap.ui.ux3.DataSet.prototype.removeSelectionInterval = function(iIndexFrom, iIndexTo) {
	this.selectionModel.removeSelectionInterval(iIndexFrom, iIndexTo);
	return this;
};

/** use this function to retrieve the lead selected index
 * 
 * @public 
 */
sap.ui.ux3.DataSet.prototype.getSelectedIndex = function() {
		return this.selectionModel.getLeadSelectedIndex();
};

/** use this function to retrieve all selected indices if multiple select is enabled
 * 
 * @public 
 */
sap.ui.ux3.DataSet.prototype.getSelectedIndices = function(){
	return this.selectionModel.getSelectedIndices() || []; 
}

/** clears dataset from all previous selections
 * 
 * @public 
 */
sap.ui.ux3.DataSet.prototype.clearSelection = function() {
	this.selectionModel.clearSelection();
	return this;
};

/**
 * Selection handler for the DataSetItem selection event.
 *
 * @param {string} sItemId Id of the selected DataSetItem
 * @private
*/
sap.ui.ux3.DataSet.prototype.selectItem = function(oEvent) {
	var oParams = oEvent.getParameters(), 
		sItemId = oEvent.getParameters().itemId,
		oItem = sap.ui.getCore().byId(sItemId),
		aItems = this.getItems(),
		iIndex = jQuery.inArray(oItem,aItems),
		oldSelectedIndex = this.getLeadSelection();

	if (!this.getMultiSelect()){
		if (oldSelectedIndex == iIndex && !oParams.shift) {
			this.setLeadSelection(-1);
		} else {
			this.setLeadSelection(iIndex);
		}
		this._iShiftStart = null;
	} else {
		if (oParams.ctrl){
			if(!this.isSelectedIndex(iIndex)){
				this.addSelectionInterval(iIndex, iIndex);
			} else {
				this.removeSelectionInterval(iIndex, iIndex);
			}
			if (this._iShiftStart >= 0){
				this._iShiftStart = iIndex;
			}
		}

		if (oParams.shift){
			if (!this._iShiftStart && this._iShiftStart !== 0) {
				this._iShiftStart = oldSelectedIndex;
			}
			if (this._iShiftStart >= 0 && oParams.ctrl){
				this.addSelectionInterval(this._iShiftStart, iIndex);
			} else if (this._iShiftStart >= 0 &! oParams.ctrl){
				this.setSelectionInterval(this._iShiftStart, iIndex);
			}else{
				this.setLeadSelection(iIndex);
				this._iShiftStart = iIndex;
			}
		}

		if(!oParams.shift && !oParams.ctrl){
			if (oldSelectedIndex == iIndex && iIndex != this._iShiftStart) {
				this.setLeadSelection(-1);
			} else {
				this.setLeadSelection(iIndex);
			}
			this._iShiftStart = null;
		}
	}
};

/**
 * Prepare rendering: Calls init end exit hooks on the selected view instance. Necessary to keep the view
 * consistent to the DataSet state.
 *
 * @param {string} sItemId Id of the selected DataSetItem
 * @private
*/
sap.ui.ux3.DataSet.prototype.prepareRendering = function() {
	var oView, iViewCount = this.getViews().length;
	if (iViewCount == 0) {
		return;
	} 
	this._prepareToolbar();
	if (this._bDirty) {
		oView = sap.ui.getCore().byId(this.getSelectedView());
		if (oView.exitView) {
			oView.exitView(this.getItems());
		}
		if (oView.initView) {
			oView.initView(this.getItems());
		}
		this._bDirty = false;
	}
};

//*** Selection Model methods ***

/**
 * Returns the LeadSelection index
 *
 * @param {string} sItemId Id of the selected DataSetItem
 * @return {int} selected index
 * @protected
*/
sap.ui.ux3.DataSet.prototype.getLeadSelection = function() {
	return this.selectionModel.getLeadSelectedIndex();
};

/**
 * Set the LeadSelection index
 *
 * @param {int} iIndex set LeadSelection index
 * @protected
*/
sap.ui.ux3.DataSet.prototype.setLeadSelection = function(iIndex) {
	this.selectionModel.setLeadSelectedIndex(iIndex);
};

/**
 * Returns true if iIndex is selected
 *
 * @param {int} iIndex index of selection
 * @return {boolean} index selected true/false
 * @protected
*/
sap.ui.ux3.DataSet.prototype.isSelectedIndex = function(iIndex) {
	return (this.selectionModel.isSelectedIndex(iIndex));
};

/**
 * Returns id of selected Item from given index
 *
 * @param {int} iIndex index of selection
 * @return {string} id of selected item
 * @protected
*/
sap.ui.ux3.DataSet.prototype.getSelectedItemId = function(iIndex) {
	 return this.getItems()[iIndex].getId();
};

/**
 * Creates a view switch button
 *
 * @param {object} oView View
 * @param {int} iIndex Index of view
 * @return {object} viewSwitch instance
 * @protected
*/
sap.ui.ux3.DataSet.prototype.createViewSwitch = function(oView, iIndex) {
	 var that = this, oViewSwitch;

	 if (oView.getIcon()) {
		 oViewSwitch = new sap.ui.commons.Button({
			 id : this.getId()+"-view-"+oView.getId(),
			 lite: true,
			 icon:oView.getIcon(),
			 iconHovered: oView.getIconHovered(),
			 iconSelected: oView.getIconSelected()
		 });
	 } else if (oView.getName()) {
		 oViewSwitch = new sap.ui.commons.Button({
			 id : this.getId()+"-view-"+oView.getId(),
			 text : oView.getName(),
			 lite: true
		 });
	 } else {
		 oViewSwitch = new sap.ui.commons.Button({
			 id : this.getId()+"-view-"+oView.getId(),
			 text : oView.getId(),
			 lite: true
		 });
	 }
	 oViewSwitch._viewIndex = iIndex;
	 //oViewSwitch.attachPress(function(oEvent){that.press(oEvent,iIndex);}, that);
	 return oViewSwitch;
};

/**
 * Rerendering of the Toolbar
 *
 * @protected
*/
sap.ui.ux3.DataSet.prototype._rerenderToolbar = function() {
	var $content = this.$("toolbar");
	this._prepareToolbar();
	if ($content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.DataSetRenderer.renderToolbar(rm, this);
		rm.flush($content[0]);
		rm.destroy();
	}
};
/**
 * Rerendering of the FilterArea
 *
 * @protected
*/
sap.ui.ux3.DataSet.prototype._rerenderFilter = function() {
	var $content = this.$("filter");
	if ($content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.DataSetRenderer.renderFilterArea(rm, this);
		rm.flush($content[0]);
		if (this.getShowFilter()) {
			$content.removeClass("noPadding");
		} else {
			$content.addClass("noPadding");
		}
		rm.destroy();
	}
};

//*** override API methods ***

/**
 * setter for multi selection mode
 *  * @param {boolean}
 *            bMode true for multi mode, false for single mode
 * @public
 */
sap.ui.ux3.DataSet.prototype.setMultiSelect = function(bMode) {
	this.clearSelection();
	if (!bMode){
		this.setProperty("multiSelect", false);
		if (!!this.selectionModel){
			this.selectionModel.setSelectionMode(sap.ui.model.SelectionModel.SINGLE_SELECTION);
		}
	} else {
		this.setProperty("multiSelect", true);
		if (!!this.selectionModel){
			this.selectionModel.setSelectionMode(sap.ui.model.SelectionModel.MULTI_SELECTION);
		}
	};
	return this;
};

sap.ui.ux3.DataSet.prototype.removeItem = function(oItem) {
	var result = this.removeAggregation("items", oItem, true);
	if (result) {
		result.detachSelected(this.selectItem,this);
		result.destroyAggregation("_template",true);
		this._bDirty = true;
	}
	return result;
};

sap.ui.ux3.DataSet.prototype.removeAllItems = function() {
	var aItems = this.getItems(), result;
	jQuery.each(aItems,function(i,oItem) {
		oItem.destroyAggregation("_template",true);
		oItem.detachSelected(this.selectItem,this);
	});
	result = this.removeAllAggregation("items");
	this._bDirty = true;
	return result;
};

sap.ui.ux3.DataSet.prototype.destroyItems = function() {
	var result = this.destroyAggregation("items");
	this._bDirty = true;
	return result;
};

sap.ui.ux3.DataSet.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem, true);
	oItem.attachSelected(this.selectItem,this);
	this._bDirty = true;
	return this;
};

sap.ui.ux3.DataSet.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex, true);
	oItem.attachSelected(this.selectItem,this);
	this._bDirty = true;
	return this;
};

sap.ui.ux3.DataSet.prototype.setFilterValue = function(sFilterValue) {
	this.setProperty("filterValue",sFilterValue, true);
	return this;
};

sap.ui.ux3.DataSet.prototype.getFilterValue = function() {
	return this.getProperty("filterValue");
};

sap.ui.ux3.DataSet.prototype.insertView = function(oView, iIndex) {
	var oViewSwitch = this.createViewSwitch(oView,iIndex,true);
	if (!this.getSelectedView()) {
		this.setSelectedView(oView);
	}
	this.insertAggregation("views", oView, iIndex);
	this._oSegBut.insertButton(oViewSwitch,iIndex);
	this._rerenderToolbar();
	return this;
};

sap.ui.ux3.DataSet.prototype.addView = function(oView) {
	var iIndex = this.getViews().length,
		oViewSwitch = this.createViewSwitch(oView,iIndex);
	if (!this.getSelectedView()) {
		this.setSelectedView(oView);
	}
	this.addAggregation("views", oView, true);
	this._oSegBut.addButton(oViewSwitch);
	this._rerenderToolbar();
	return this;
};

sap.ui.ux3.DataSet.prototype.removeView = function(oView) {
	var result = this.removeAggregation("views", oView, true);
	
	if (result) {
		if (this.getSelectedView() == result.getId()) {
			this.setSelectedView(this.getViews()[0]);
			this._bDirty = true;
			result.invalidate();
		} else {
			this._rerenderToolbar();
		}
	
		this._oSegBut.removeButton(this.getId()+"-view-"+result.getId()).destroy();
	}
	return result;
};

sap.ui.ux3.DataSet.prototype.destroyViews = function() {
	this._oSegBut.destroyButtons();
	this.destroyAggregation("views");
	return this;
};

sap.ui.ux3.DataSet.prototype.removeAllViews = function() {
	var result = this.removeAllAggregation("views");
	this._oSegBut.destroyButtons();
	return result;
};

sap.ui.ux3.DataSet.prototype.setEnableSorting = function(bEnableSorting) {
	//suppress rerendering ofDataSet. Rerender only the toolbar.
	this.setProperty("enableSorting", bEnableSorting, true);
	this._rerenderToolbar();
	return this;
};

sap.ui.ux3.DataSet.prototype.setEnableFiltering = function(bEnableFiltering) {
	//suppress rerendering ofDataSet. Rerender only the toolbar.
	this.setProperty("enableFiltering", bEnableFiltering, true);
	this._rerenderToolbar();
	return this;
};

sap.ui.ux3.DataSet.prototype.setSelectedView = function(vView) {
	var oldSelectedView = this.getSelectedView();
	
	this.setAssociation("selectedView", vView);
	if (oldSelectedView != this.getSelectedView()) {
		this._bDirty = true;
	}
	if (this.getId()+"-view-"+this.getSelectedView() !== this._oSegBut.getSelectedButton()) {
		this._oSegBut.setSelectedButton(this.getId()+"-view-"+this.getSelectedView());
	}
	return this;
};

sap.ui.ux3.DataSet.prototype.addToolbarItem = function(oToolbarItem) {
	this._getToolbar().addItem(oToolbarItem);
	this._rerenderToolbar();
};

sap.ui.ux3.DataSet.prototype.removeToolbarItem = function(oToolbarItem) {
	this._getToolbar().removeItem(oToolbarItem);
	this._rerenderToolbar();
};

sap.ui.ux3.DataSet.prototype.setShowToolbar = function(bShow) {
	this.setProperty("showToolbar",bShow, true);
	this._rerenderToolbar();
};

sap.ui.ux3.DataSet.prototype.setShowFilter = function(bShow) {
	this.setProperty("showFilter",bShow, true);
	this._rerenderFilter();
};

sap.ui.ux3.DataSet.prototype.setShowSearchField = function(bShow) {
	this.setProperty("showSearchField",bShow, true);
	this._rerenderToolbar();
};
/**
* @private
*/
sap.ui.ux3.DataSet.prototype._setToolbar = function(oToolbar) {
	this.setAggregation("_toolbar",oToolbar,true);
	this._rerenderToolbar();
};
/**
* @private
*/
sap.ui.ux3.DataSet.prototype._getToolbar = function() {
	return this.getAggregation("_toolbar");
};

sap.ui.ux3.DataSet.prototype.refreshItems = function() {
	var	oBinding = this.getBinding("items"),
		oSelectedView = sap.ui.getCore().byId(this.getSelectedView());
	
	oBinding.bUseExtendedChangeDetection = true;
	
	if (oSelectedView && oSelectedView.getItemCount && oSelectedView.getItemCount()) {
		var iItemCount = Math.max(oSelectedView.getItemCount(),this.getItems().length);
		if (iItemCount) {
			oBinding.getContexts(0, iItemCount);
		} else {
			oBinding.getContexts();
		}
	} else {
		oBinding.getContexts();
	}
}

sap.ui.ux3.DataSet.prototype.updateItems = function(sChangeReason) {
	var oBindingInfo = this.mBindingInfos["items"],
		oAggregationInfo = this.getMetadata().getJSONKeys()["items"],
		oSelectedView = sap.ui.getCore().byId(this.getSelectedView()),
		oBinding = oBindingInfo.binding,
		fnFactory = oBindingInfo.factory,
		oClone,
		oItems,
		oItem,
		iIndex,
		that = this,
		aContexts = [];
	
	oBinding.bUseExtendedChangeDetection = true;
	
	if (oSelectedView && oSelectedView.getItemCount && oSelectedView.getItemCount()) {
		var iItemCount = Math.max(oSelectedView.getItemCount(),this.getItems().length);
		if (iItemCount) {
			aContexts = oBinding.getContexts(0, iItemCount);
		} else {
			aContexts = oBinding.getContexts();
		}
	} else {
		aContexts = oBinding.getContexts();
	}

	if (aContexts.diff && sChangeReason) {
		var aDiff = aContexts.diff;
		for (var i=0; i < aDiff.length; i++) {
			oItems = this.getItems();
			iIndex = aDiff[i].index;
			if (aDiff[i].type === "delete") {
				oItem = oItems[iIndex];
				aDiff[i].item = oItem;
				this.removeItem(oItem);
			} else if (aContexts.diff[i].type === "insert") {
				oItem = fnFactory("", aContexts[iIndex]);
				oItem.setBindingContext(aContexts[iIndex], oBindingInfo.model);
				aDiff[i].item = oItem;
				this.insertItem(oItem, iIndex);
			}
		}
		if (oSelectedView && oSelectedView.updateView) {
			oSelectedView.updateView(aDiff);
		}
	} else {
		this[oAggregationInfo._sDestructor]();
		jQuery.each(aContexts, function(iIndex, oContext) {
			var sId = that.getId() + "-" + iIndex;
			oClone = fnFactory(sId, oContext);
			oClone.setBindingContext(oContext, oBindingInfo.model);
			that[oAggregationInfo._sMutator](oClone);
		});
	}
};

}; // end of sap/ui/ux3/DataSet.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSetItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.DataSetItem.
jQuery.sap.declare("sap.ui.ux3.DataSetItem");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new DataSetItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIconSrc iconSrc} : sap.ui.core.URI</li>
 * <li>{@link #getTitle title} : string (default: 'Title')</li>
 * <li>{@link #getCheckable checkable} : boolean (default: true)</li>
 * <li>{@link #getSubtitle subtitle} : string (default: 'Subtitle')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.DataSetItem#event:selected selected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * DataSet Item
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.DataSetItem
 */
sap.ui.core.Element.extend("sap.ui.ux3.DataSetItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"iconSrc" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"title" : {type : "string", group : "Misc", defaultValue : 'Title'},
		"checkable" : {type : "boolean", group : "Misc", defaultValue : true},
		"subtitle" : {type : "string", group : "Misc", defaultValue : 'Subtitle'}
	},
	aggregations : {
    	"_template" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	events : {
		"selected" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.DataSetItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.DataSetItem.extend
 * @function
 */

sap.ui.ux3.DataSetItem.M_EVENTS = {'selected':'selected'};


/**
 * Getter for property <code>iconSrc</code>.
 * image
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSrc</code>
 * @public
 * @name sap.ui.ux3.DataSetItem#getIconSrc
 * @function
 */

/**
 * Setter for property <code>iconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSrc  new value for property <code>iconSrc</code>
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetItem#setIconSrc
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * title
 *
 * Default value is <code>Title</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.ux3.DataSetItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is <code>Title</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetItem#setTitle
 * @function
 */


/**
 * Getter for property <code>checkable</code>.
 * checkable
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>checkable</code>
 * @public
 * @name sap.ui.ux3.DataSetItem#getCheckable
 * @function
 */

/**
 * Setter for property <code>checkable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCheckable  new value for property <code>checkable</code>
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetItem#setCheckable
 * @function
 */


/**
 * Getter for property <code>subtitle</code>.
 * subtitle
 *
 * Default value is <code>Subtitle</code>
 *
 * @return {string} the value of property <code>subtitle</code>
 * @public
 * @name sap.ui.ux3.DataSetItem#getSubtitle
 * @function
 */

/**
 * Setter for property <code>subtitle</code>.
 *
 * Default value is <code>Subtitle</code> 
 *
 * @param {string} sSubtitle  new value for property <code>subtitle</code>
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetItem#setSubtitle
 * @function
 */


/**
 * Event Fired when Datset item is selected.
 *  
 *
 * @name sap.ui.ux3.DataSetItem#selected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId Id of the selected Datset item
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selected' event of this <code>sap.ui.ux3.DataSetItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.DataSetItem</code>.<br/> itself. 
 *  
 * Event Fired when Datset item is selected.
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.DataSetItem</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetItem#attachSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selected' event of this <code>sap.ui.ux3.DataSetItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetItem#detachSelected
 * @function
 */

/**
 * Fire event selected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> Id of the selected Datset item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.DataSetItem#fireSelected
 * @function
 */


// Start of sap\ui\ux3\DataSetItem.js
/**
 * Handle onclick event. Fires selected Event.
 * @param {sap.ui.base.Event} oEvent click event
 * @private
 */
sap.ui.ux3.DataSetItem.prototype.onclick = function(oEvent) {
	oEvent.stopPropagation();
	
	// determine modifier keys
	var bShift = oEvent.shiftKey;
	var bCtrl = !!(oEvent.metaKey || oEvent.ctrlKey);
	
	this.fireSelected({
		itemId: this.getId(),
		shift:  bShift,
		ctrl:   bCtrl
	});
};
sap.ui.ux3.DataSetItem.prototype.ondblclick = function(oEvent) {
	this.onclick(oEvent);
};
}; // end of sap/ui/ux3/DataSetItem.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSetSimpleView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.DataSetSimpleView.
jQuery.sap.declare("sap.ui.ux3.DataSetSimpleView");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new DataSetSimpleView.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFloating floating} : boolean (default: true)</li>
 * <li>{@link #getName name} : string (default: "Name of this View")</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconHovered iconHovered} : sap.ui.core.URI</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>
 * <li>{@link #getResponsive responsive} : boolean (default: false)</li>
 * <li>{@link #getItemMinWidth itemMinWidth} : int (default: 0)</li>
 * <li>{@link #getInitialItemCount initialItemCount} : int (default: 0)</li>
 * <li>{@link #getReloadItemCount reloadItemCount} : int (default: 0)</li>
 * <li>{@link #getScrollArea scrollArea} : any</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTemplate template} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * DataSetSimpleView provides a simple view example for DataSet usage.
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.ux3.DataSetView
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.DataSetSimpleView
 */
sap.ui.core.Control.extend("sap.ui.ux3.DataSetSimpleView", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.ux3.DataSetView"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"floating" : {type : "boolean", group : "Misc", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : "Name of this View"},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconHovered" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconSelected" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"responsive" : {type : "boolean", group : "Misc", defaultValue : false},
		"itemMinWidth" : {type : "int", group : "Misc", defaultValue : 0},
		"initialItemCount" : {type : "int", group : "Appearance", defaultValue : 0},
		"reloadItemCount" : {type : "int", group : "Appearance", defaultValue : 0},
		"scrollArea" : {type : "any", group : "Appearance", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null}
	},
	aggregations : {
    	"template" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.DataSetSimpleView with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.DataSetSimpleView.extend
 * @function
 */


/**
 * Getter for property <code>floating</code>.
 * When true the DatSet items are floating containers. When set to false The Items are rendered in a 1 column Layout.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>floating</code>
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#getFloating
 * @function
 */

/**
 * Setter for property <code>floating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFloating  new value for property <code>floating</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#setFloating
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * Name of the View
 *
 * Default value is <code>"Name of this View"</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is <code>"Name of this View"</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#setName
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon source for this view
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#setIcon
 * @function
 */


/**
 * Getter for property <code>iconHovered</code>.
 * icon: hovered state
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconHovered</code>
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#getIconHovered
 * @function
 */

/**
 * Setter for property <code>iconHovered</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconHovered  new value for property <code>iconHovered</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#setIconHovered
 * @function
 */


/**
 * Getter for property <code>iconSelected</code>.
 * icon: selected state
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSelected</code>
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#getIconSelected
 * @function
 */

/**
 * Setter for property <code>iconSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSelected  new value for property <code>iconSelected</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#setIconSelected
 * @function
 */


/**
 * Getter for property <code>responsive</code>.
 * When true and the property floating is true the DatSet items are floating containers filling the whole space of a row.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>responsive</code>
 * @public
 * @since 1.9.2
 * @name sap.ui.ux3.DataSetSimpleView#getResponsive
 * @function
 */

/**
 * Setter for property <code>responsive</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bResponsive  new value for property <code>responsive</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.2
 * @name sap.ui.ux3.DataSetSimpleView#setResponsive
 * @function
 */


/**
 * Getter for property <code>itemMinWidth</code>.
 * When itemMinWidth>0 and the property floating is true the given minimum width in pixels is set to DatSet items. A minimum width must be given when the property responsive is set.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>itemMinWidth</code>
 * @public
 * @since 1.9.2
 * @name sap.ui.ux3.DataSetSimpleView#getItemMinWidth
 * @function
 */

/**
 * Setter for property <code>itemMinWidth</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iItemMinWidth  new value for property <code>itemMinWidth</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.2
 * @name sap.ui.ux3.DataSetSimpleView#setItemMinWidth
 * @function
 */


/**
 * Getter for property <code>initialItemCount</code>.
 * If this value is greater zero only this amount of items is loaded in the first place. New items are loaded automatically when the user scrolls down. The number of items which are reloaded can be defined with the property "reloadItemCount"
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>initialItemCount</code>
 * @public
 * @since 1.13.0
 * @name sap.ui.ux3.DataSetSimpleView#getInitialItemCount
 * @function
 */

/**
 * Setter for property <code>initialItemCount</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iInitialItemCount  new value for property <code>initialItemCount</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.0
 * @name sap.ui.ux3.DataSetSimpleView#setInitialItemCount
 * @function
 */


/**
 * Getter for property <code>reloadItemCount</code>.
 * This number defines the item count which is reloaded on scroll if initialItemCount is enabled.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>reloadItemCount</code>
 * @public
 * @since 1.13.0
 * @name sap.ui.ux3.DataSetSimpleView#getReloadItemCount
 * @function
 */

/**
 * Setter for property <code>reloadItemCount</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iReloadItemCount  new value for property <code>reloadItemCount</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.0
 * @name sap.ui.ux3.DataSetSimpleView#setReloadItemCount
 * @function
 */


/**
 * Getter for property <code>scrollArea</code>.
 * ID of the DOM Element or jQuery reference to the dom which holds the scrollbar for the dataset
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>scrollArea</code>
 * @public
 * @since 1.13.0
 * @name sap.ui.ux3.DataSetSimpleView#getScrollArea
 * @function
 */

/**
 * Setter for property <code>scrollArea</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oScrollArea  new value for property <code>scrollArea</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.0
 * @name sap.ui.ux3.DataSetSimpleView#setScrollArea
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * If the pagination feature is used without specifying a scroll area, a height for the dataset must be defined.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @since 1.13.0
 * @name sap.ui.ux3.DataSetSimpleView#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.0
 * @name sap.ui.ux3.DataSetSimpleView#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>template</code>.<br/>
 * template
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#getTemplate
 * @function
 */


/**
 * Setter for the aggregated <code>template</code>.
 * @param {sap.ui.core.Control} oTemplate
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#setTemplate
 * @function
 */
	

/**
 * Destroys the template in the aggregation 
 * named <code>template</code>.
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.DataSetSimpleView#destroyTemplate
 * @function
 */


// Start of sap\ui\ux3\DataSetSimpleView.js
jQuery.sap.require('jquery.sap.script'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained


///**
// * This file defines behavior for the control,
// */

/**
 * Initialization of DataSetSimpleView
 *
 * @private
*/
sap.ui.ux3.DataSetSimpleView.prototype.init = function(){
   this._oDataSet = this.getParent();
   this.items = [];
   this._bRendered = false;
   if (this.getInitialItemCount() > 0 && this.getReloadItemCount() <= 0) {
	   this.setReloadItemCount(this.getInitialItemCount());
   }
	this._bUsePagination = false;
};

sap.ui.ux3.DataSetSimpleView.prototype.exit = function() {
	// Cleanup resize event registration on exit
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};

/**
 * Eventhandler for the selection of an Item
 *
 * @param {event} oEvent SelectionChanged event
 * @protected
 */
sap.ui.ux3.DataSetSimpleView.prototype.handleSelection = function(oEvent) {
	var oDataSet = this.getParent();
	var oldIndex = oEvent.getParameters().oldLeadSelectedIndex,
		newIndex = oEvent.getParameters().newLeadSelectedIndex,
		aItems = oDataSet.getItems(),
		aSelectedItems = oDataSet.getSelectedIndices();
		if (aSelectedItems.length > 1){
			this._clearTextSelection();
		}
		jQuery.each(aItems, function(index, item){
			if (oDataSet.isSelectedIndex(index)){
				item.$().addClass("sapUiUx3DSSVSelected");
			}
			else{
				item.$().removeClass("sapUiUx3DSSVSelected");
			}
		});
};


/**
 * clears the text selection on the document (disabled fro Dnd)
 * @private
 */
sap.ui.ux3.DataSetSimpleView.prototype._clearTextSelection = function () {
	if (window.getSelection) {
	  if (window.getSelection().empty) {  // Chrome
	    window.getSelection().empty();
	  } else if (window.getSelection().removeAllRanges) {  // Firefox
	    window.getSelection().removeAllRanges();
	  }
	} else if (document.selection && document.selection.empty) {  // IE?
		try {
		    document.selection.empty();
		} catch (ex) {
		    // ignore error to as a workaround for bug in IE8
		}
	}
};

/**
 * Check if Item <code>oItem</code> is selected
 *
 * @param {sap.ui.ux3.DataSetItem} oItem DataSetItem instance
 * @protected
 */
sap.ui.ux3.DataSetSimpleView.prototype.isItemSelected = function(oItem) {
	var iIndex = jQuery.inArray(oItem,this.items);
	if (iIndex == -1) {
		return false;
	}
	return this.getParent().isSelectedIndex(iIndex);
};

//*** Interface methods ***

/**
 * View Initialization: Called when selecting the view
 *
 * @param {array} aItems Array of DataSetItems added to the parent DataSet
 * @protected
 */
sap.ui.ux3.DataSetSimpleView.prototype.initView = function(aItems) {
	this.getParent().attachSelectionChanged(this.handleSelection, this);
	this.items = this.items.concat(aItems);
	for (var i = 0; i < aItems.length; i++) {
		var template = this.getTemplate().clone();
		aItems[i].setAggregation('_template', template, true);
	}
};

/**
 * View update: Called when pagination adds items
 *
 * @param {array} aItems Array of DataSetItems added to the parent DataSet
 * @protected
 */
sap.ui.ux3.DataSetSimpleView.prototype.updateView = function(aDiff) {
	var rm = sap.ui.getCore().createRenderManager(),
		iLastLength = this.items.length;
		
	for (var i = 0; i < aDiff.length; i++) {
		var oItem = aDiff[i].item;
		var iIndex = aDiff[i].index;
		
		if (aDiff[i].type === "insert") {
			var template = this.getTemplate().clone();
			oItem.setAggregation('_template', template, true);
			if (i == aDiff.length - 1 && iLastLength == 0) {
				//render all inital items first. The delegate loads all missing tro fill the scrollarea
				var oDelegate = {
					onAfterRendering: function() {
						this.calculateItemCounts();
						this.getParent().updateItems(sap.ui.model.ChangeReason.Change);
						template.removeDelegate(oDelegate);
					}
				};
				template.addDelegate(oDelegate, false, this);
			}
			this.getRenderer().renderItem(rm, this, oItem);
			rm.flush(this.$()[0], false, iIndex);
			this.items.splice(iIndex, 0, oItem);
		} else {
			this.items.slice(iIndex, 1);
			oItem.$().remove();
			oItem.destroy();
		}
	}
	if(aDiff.length > 0 && this.getFloating() && this.getResponsive()){
		this._computeWidths(true);
	}
	rm.destroy();
};

/**
 * View finalization: Called when leaving the view
 *
 * @protected
 */
sap.ui.ux3.DataSetSimpleView.prototype.exitView = function(aItems) {
	this.getParent().detachSelectionChanged(this.handleSelection, this);
	for (var i = 0; i < aItems.length; i++) {
		aItems[i].destroyAggregation("_template",true);
    }
    this.items = [];
};

/**
 * Set scroll area based on selected view
 * @private
 */
sap.ui.ux3.DataSetSimpleView.prototype.initScrollArea = function() {
	var $scrollArea = this.getScrollArea(),
		that = this;
	
	var fnScroll = function(oEvent) {
		that.getParent().updateItems(sap.ui.model.ChangeReason.Change);
	};
	if (typeof $scrollArea === 'string') {
		$scrollArea = jQuery.sap.byId($scrollArea);
	}
	if (!$scrollArea) {
		$scrollArea = this.$();
	} else if ($scrollArea.is('html')) {
		//if scrollarea is 'html' then we use the browser scrollarea
		$scrollArea = jQuery(document);
	}
	
	if (!this._bUsePagination) {
		$scrollArea.off('scroll', fnScroll);
	} else {
		$scrollArea.on('scroll', fnScroll);
	}
};

sap.ui.ux3.DataSetSimpleView.prototype.checkScrollItems = function() {
	if (!this._bRendered) {
		return;
	}
	
	var oBindingInfo = this.getParent().mBindingInfos["items"],
		$scrollArea = this.getScrollArea(),
		oBinding = oBindingInfo.binding,
		oParent = this.getParent(),
		iAppendItems = 0,
		iFillupSpace,
		scrollArea,
		iClientHeight,
		iScrollHeight;
		
	
	if (oParent.getItems().length === oBinding.getLength()) {
		return iAppendItems;
	}
	if (typeof $scrollArea === 'string') {
		$scrollArea = jQuery.sap.byId($scrollArea);
	}
	if (!$scrollArea) {
		$scrollArea = this.$();
	}
	if (!$scrollArea || $scrollArea.length == 0) {
		return iAppendItems;
	}

	scrollArea = $scrollArea[0];
	iClientHeight = scrollArea.clientHeight;
	iScrollHeight = scrollArea.scrollHeight;

	if ($scrollArea.is('html')) {
		//if scrollarea is 'html' then we use the browser scrollarea
		$scrollArea = jQuery(document);
	}

	if (iClientHeight == iScrollHeight) {
		iFillupSpace = iClientHeight + this._iScrollTrigger;
	} else {
		iFillupSpace = iClientHeight + this._iScrollTrigger + $scrollArea.scrollTop();
	}
	
	if (iFillupSpace > 0) {
		var iNewItemCount = Math.floor(iFillupSpace / this._iRowHeight) * this._iItemsPerRow;
		var iCurrentItemCount = oParent.getItems().length;
		iNewItemCount = Math.ceil(iNewItemCount / this._iItemsPerRow) * this._iItemsPerRow;
		iAppendItems = iNewItemCount - iCurrentItemCount;
	}
	
	return iAppendItems;
};

sap.ui.ux3.DataSetSimpleView.prototype.getItemCount = function() {
	if (this._bUsePagination) {
		var iLength = this.getParent().getItems().length,
		iAppendItems = this.checkScrollItems();
		if (iLength == 0) {
			iLength += this.getInitialItemCount();
		} else {
			iLength += iAppendItems;
		}
		//this._iLastLength = iLength;
		return iLength;
	} else {
		return null;
	}
};

sap.ui.ux3.DataSetSimpleView.prototype.setInitialItemCount = function(iValue) {
	this.setProperty("initialItemCount", iValue);
	this._bUsePagination = (iValue != 0);
};

/**
 * Called after the control is rendered
 */
sap.ui.ux3.DataSetSimpleView.prototype.onBeforeRendering = function(){
	// Cleanup resize event registration before re-rendering
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};

/**
 * Called after the control is rendered
 */
sap.ui.ux3.DataSetSimpleView.prototype.onAfterRendering = function(){
	this._bRendered = true;
	this.initScrollArea();
	if((this.getFloating() && this.getResponsive()) || this._bUsePagination){
		this._height = -1;
		this._itemsPerRow = -1;
		this.onresize();
		this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this.onresize, this));
	}
};

/**
 * Called after the control is rendered
 */
sap.ui.ux3.DataSetSimpleView.prototype.onThemeChanged = function(){
	if (this._bRendered) {
		this.calculateItemCounts();
		this.getParent().updateItems(sap.ui.model.ChangeReason.Change);
	}
};

/**
 * Function is called when window is resized
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.ux3.DataSetSimpleView.prototype.onresize = function() {

	if (!this.getDomRef()) {
		// slider is not renderes, maybe deleted from DOM -> deregister resize handler and do nothing
		// Cleanup resize event registration on exit
		if(this.sResizeListenerId){
			sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
			this.sResizeListenerId = null;
		}
		return;
	}

	if(this.getFloating() && this.getResponsive()){
		this._computeWidths();
	}
	if (this._bUsePagination && this.items.length > 0) {
		this.calculateItemCounts();
		this.getParent().updateItems(sap.ui.model.ChangeReason.Change);
	}
};

sap.ui.ux3.DataSetSimpleView.prototype.setTemplate = function(oTemplate) {
	this.setAggregation("template", oTemplate, true);
	//Here we need to rerender all items because of a new layout
	if (this.getParent()) {
		this.getParent().updateItems();
	}
};

/**
 * Calculate Item count
 * @private
 */
sap.ui.ux3.DataSetSimpleView.prototype.calculateItemCounts = function(){
	if (this.getDomRef()) {
		var $itemArea = this.$(),
			$firstItem = $itemArea.children().first();
		
		this._iItemsPerRow = Math.floor($itemArea.outerWidth(true) / $firstItem.outerWidth(true));
		this._iNewRows = Math.ceil(this.getReloadItemCount() / this._iItemsPerRow);
		this._iNewItems = this._iItemsPerRow * this._iNewRows;
		this._iRowHeight = $firstItem.outerHeight(true);
		this._iScrollTrigger = this._iNewRows * this._iRowHeight;
	}
};

sap.ui.ux3.DataSetSimpleView.prototype._computeWidths = function(bInitial){
	var $This = this.$();
	var iItemsPerRow = Math.floor($This.width()/this.getItemMinWidth());
	var width = Math.floor(100/iItemsPerRow);
	if($This.width()*width/100 < this.getItemMinWidth()){
		iItemsPerRow--;
		width = Math.floor(100/iItemsPerRow);
	}
	
	if(bInitial || this._height != $This.height() || this._itemsPerRow != iItemsPerRow){
		var count = -1;
		var aItems = this.getParent().getItems();
		var diff, w;
		
		for(var j=0; j<aItems.length; j++){
			if(count == -1 || count+1 > iItemsPerRow){
				count = 0;
				diff = 100-(iItemsPerRow*width);
			}
			
			var w = width;
			if(diff > 0){
				w++;
				diff--;
			}
			aItems[j].$().css("width", w+"%");
			count++;
		}
		
		this._height = $This.height();
		this._itemsPerRow = iItemsPerRow;
	}
};

/**
 * @public
 */
sap.ui.ux3.DataSetSimpleView.prototype.setScrollArea = function(aScrollArea, bSupress) {
	if (typeof aScrollArea !== 'string' && !(aScrollArea instanceof jQuery)) {
		jQuery.sap.log.error('You can only pass a string (ID of scroll area DOM) or an jQuery object as scrollarea');
	}
	this.setProperty('scrollArea', aScrollArea, bSupress);
};

}; // end of sap/ui/ux3/DataSetSimpleView.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ExactArea.
jQuery.sap.declare("sap.ui.ux3.ExactArea");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ExactArea.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getToolbarVisible toolbarVisible} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getToolbarItems toolbarItems} : sap.ui.commons.ToolbarItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Consists of two sections: A tool bar and a content area where arbitrary controls can be added.
 * The ExactArea is intended to be used for the Exact design approach but alternatively also in a stand alone version.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @experimental Since version 1.6. 
 * API is not yet finished and might change completely
 * @name sap.ui.ux3.ExactArea
 */
sap.ui.core.Control.extend("sap.ui.ux3.ExactArea", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"toolbarVisible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"toolbarItems" : {type : "sap.ui.commons.ToolbarItem", multiple : true, singularName : "toolbarItem"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ExactArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ExactArea.extend
 * @function
 */


/**
 * Getter for property <code>toolbarVisible</code>.
 * Specifies whether the tool bar shall be visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>toolbarVisible</code>
 * @public
 * @name sap.ui.ux3.ExactArea#getToolbarVisible
 * @function
 */

/**
 * Setter for property <code>toolbarVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bToolbarVisible  new value for property <code>toolbarVisible</code>
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactArea#setToolbarVisible
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Specifies whether the control shall be visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.ux3.ExactArea#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactArea#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Arbitrary child controls of the content area
 * 
 * <strong>Note</strong>: this is the default aggregation for ExactArea.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.ExactArea#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactArea#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactArea#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.ux3.ExactArea#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ExactArea#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ExactArea#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactArea#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>toolbarItems</code>.<br/>
 * Tool bar items which shall be shown in the tool bar.
 * 
 * @return {sap.ui.commons.ToolbarItem[]}
 * @public
 * @name sap.ui.ux3.ExactArea#getToolbarItems
 * @function
 */


/**
 * Inserts a toolbarItem into the aggregation named <code>toolbarItems</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *          oToolbarItem the toolbarItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the toolbarItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the toolbarItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the toolbarItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactArea#insertToolbarItem
 * @function
 */

/**
 * Adds some toolbarItem <code>oToolbarItem</code> 
 * to the aggregation named <code>toolbarItems</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oToolbarItem the toolbarItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactArea#addToolbarItem
 * @function
 */

/**
 * Removes an toolbarItem from the aggregation named <code>toolbarItems</code>.
 *
 * @param {int | string | sap.ui.commons.ToolbarItem} vToolbarItem the toolbarItem to remove or its index or id
 * @return {sap.ui.commons.ToolbarItem} the removed toolbarItem or null
 * @public
 * @name sap.ui.ux3.ExactArea#removeToolbarItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>toolbarItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.ToolbarItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ExactArea#removeAllToolbarItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.ToolbarItem</code> in the aggregation named <code>toolbarItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oToolbarItem the toolbarItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ExactArea#indexOfToolbarItem
 * @function
 */
	

/**
 * Destroys all the toolbarItems in the aggregation 
 * named <code>toolbarItems</code>.
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactArea#destroyToolbarItems
 * @function
 */


// Start of sap\ui\ux3\ExactArea.js
jQuery.sap.require('sap.ui.commons.Toolbar'); // unlisted dependency retained


(function() {

//*************************************************************
//Define a private element to enable titles tin the toolbar
//*************************************************************

sap.ui.core.Element.extend("sap.ui.ux3.ExactAreaToolbarTitle", {
  
  metadata: {
    interfaces : ["sap.ui.commons.ToolbarItem"],
    properties : {
      text : {name : "text", type : "string", group : "Appearance", defaultValue : ''}
    }
  }

});

//*************************************************************

}());
}; // end of sap/ui/ux3/ExactArea.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactAttribute') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ExactAttribute.
jQuery.sap.declare("sap.ui.ux3.ExactAttribute");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ExactAttribute.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getSelected selected} : boolean</li>
 * <li>{@link #getWidth width} : int (default: 168)</li>
 * <li>{@link #getListOrder listOrder} : sap.ui.ux3.ExactOrder (default: sap.ui.ux3.ExactOrder.Select)</li>
 * <li>{@link #getShowSubAttributesIndicator showSubAttributesIndicator} : boolean (default: true)</li>
 * <li>{@link #getAdditionalData additionalData} : object</li>
 * <li>{@link #getSupplyActive supplyActive} : boolean (default: true)</li>
 * <li>{@link #getAutoActivateSupply autoActivateSupply} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} <strong>(default aggregation)</strong> : sap.ui.ux3.ExactAttribute[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.ExactAttribute#event:supplyAttributes supplyAttributes} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An element for defining attributes and sub-attributes used within the Exact pattern.
 * 
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.ExactAttribute
 */
sap.ui.core.Element.extend("sap.ui.ux3.ExactAttribute", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getShowSubAttributesIndicator_Computed", "scrollTo"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"selected" : {type : "boolean", group : "Misc", defaultValue : null},
		"width" : {type : "int", group : "Misc", defaultValue : 168},
		"listOrder" : {type : "sap.ui.ux3.ExactOrder", group : "", defaultValue : sap.ui.ux3.ExactOrder.Select},
		"showSubAttributesIndicator" : {type : "boolean", group : "Misc", defaultValue : true},
		"additionalData" : {type : "object", group : "Misc", defaultValue : null},
		"supplyActive" : {type : "boolean", group : "Misc", defaultValue : true},
		"autoActivateSupply" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	defaultAggregation : "attributes",
	aggregations : {
    	"attributes" : {type : "sap.ui.ux3.ExactAttribute", multiple : true, singularName : "attribute"}
	},
	events : {
		"supplyAttributes" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ExactAttribute with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ExactAttribute.extend
 * @function
 */

sap.ui.ux3.ExactAttribute.M_EVENTS = {'supplyAttributes':'supplyAttributes'};


/**
 * Getter for property <code>text</code>.
 * The attribute name
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.ux3.ExactAttribute#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#setText
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * Specifies whether the attribute shall be selected
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.ui.ux3.ExactAttribute#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#setSelected
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Specifies the width of the corresponding list in pixels. The value must be between 70 and 500.
 *
 * Default value is <code>168</code>
 *
 * @return {int} the value of property <code>width</code>
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.ExactAttribute#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>168</code> 
 *
 * @param {int} iWidth  new value for property <code>width</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.ExactAttribute#setWidth
 * @function
 */


/**
 * Getter for property <code>listOrder</code>.
 * The order how the sublists of this attribute should be displayed.
 *
 * Default value is <code>Select</code>
 *
 * @return {sap.ui.ux3.ExactOrder} the value of property <code>listOrder</code>
 * @public
 * @since 1.7.1
 * @name sap.ui.ux3.ExactAttribute#getListOrder
 * @function
 */

/**
 * Setter for property <code>listOrder</code>.
 *
 * Default value is <code>Select</code> 
 *
 * @param {sap.ui.ux3.ExactOrder} oListOrder  new value for property <code>listOrder</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.ui.ux3.ExactAttribute#setListOrder
 * @function
 */


/**
 * Getter for property <code>showSubAttributesIndicator</code>.
 * Specifies whether the attribute shall have sub values for visual purposes.
 * The indicator which is a little arrow beside an attribute in the list is computed automatically
 * (getShowSubAttributesIndicator_Computed() of sap.ui.ux3.ExactAttribute).
 * In the case that a supply function is attached, and the supplyActive attribute has value 'true',
 * then the Exact pattern needs a hint if sub attributes are available. The showSubAttributesIndicator attribute is
 * considered then and has to be maintained. If the back-end does not support count-calls, for example,
 * showSubAttributesIndicator should be set to true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSubAttributesIndicator</code>
 * @public
 * @name sap.ui.ux3.ExactAttribute#getShowSubAttributesIndicator
 * @function
 */

/**
 * Setter for property <code>showSubAttributesIndicator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSubAttributesIndicator  new value for property <code>showSubAttributesIndicator</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#setShowSubAttributesIndicator
 * @function
 */


/**
 * Getter for property <code>additionalData</code>.
 * An example for additional data are database keys
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>additionalData</code>
 * @public
 * @name sap.ui.ux3.ExactAttribute#getAdditionalData
 * @function
 */

/**
 * Setter for property <code>additionalData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oAdditionalData  new value for property <code>additionalData</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#setAdditionalData
 * @function
 */


/**
 * Getter for property <code>supplyActive</code>.
 * The supplyAttributes event is only fired if supplyActive has value true which is the default. After firing the event, the attribute is automatically set to false.
 * The idea is that a supply function is called only once when the data is requested. To enable the event again it is possible to manually set the attribute back to true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>supplyActive</code>
 * @public
 * @name sap.ui.ux3.ExactAttribute#getSupplyActive
 * @function
 */

/**
 * Setter for property <code>supplyActive</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSupplyActive  new value for property <code>supplyActive</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#setSupplyActive
 * @function
 */


/**
 * Getter for property <code>autoActivateSupply</code>.
 * If you want the supply function to be called on every select, you can set the autoActivateSupply attribute to true. In this case, supplyActive is automatically
 * set to true on every unselect.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>autoActivateSupply</code>
 * @public
 * @name sap.ui.ux3.ExactAttribute#getAutoActivateSupply
 * @function
 */

/**
 * Setter for property <code>autoActivateSupply</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAutoActivateSupply  new value for property <code>autoActivateSupply</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#setAutoActivateSupply
 * @function
 */


/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * Values (sub attributes) of this attribute
 * 
 * <strong>Note</strong>: this is the default aggregation for ExactAttribute.
 * @return {sap.ui.ux3.ExactAttribute[]}
 * @public
 * @name sap.ui.ux3.ExactAttribute#getAttributes
 * @function
 */


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#insertAttribute
 * @function
 */

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#addAttribute
 * @function
 */

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.ui.ux3.ExactAttribute} the removed attribute or null
 * @public
 * @name sap.ui.ux3.ExactAttribute#removeAttribute
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactAttribute[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ExactAttribute#removeAllAttributes
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ExactAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ExactAttribute#indexOfAttribute
 * @function
 */
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#destroyAttributes
 * @function
 */


/**
 * A supply function is a handler which is attached to the supplyAttributes event. The event is fired when the corresponding ExactAttribute is selected, it was already selected when a handler is attached or function getAttributes() is called. 
 *
 * @name sap.ui.ux3.ExactAttribute#supplyAttributes
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.ExactAttribute} oControlEvent.getParameters.attribute The ExactAttribute
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'supplyAttributes' event of this <code>sap.ui.ux3.ExactAttribute</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ExactAttribute</code>.<br/> itself. 
 *  
 * A supply function is a handler which is attached to the supplyAttributes event. The event is fired when the corresponding ExactAttribute is selected, it was already selected when a handler is attached or function getAttributes() is called. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ExactAttribute</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#attachSupplyAttributes
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'supplyAttributes' event of this <code>sap.ui.ux3.ExactAttribute</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactAttribute#detachSupplyAttributes
 * @function
 */

/**
 * Fire event supplyAttributes to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'attribute' of type <code>sap.ui.ux3.ExactAttribute</code> The ExactAttribute</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ExactAttribute#fireSupplyAttributes
 * @function
 */


/**
 * See attribute showSubAttributesIndicator
 *
 * @name sap.ui.ux3.ExactAttribute.prototype.getShowSubAttributesIndicator_Computed
 * @function

 * @type void
 * @public
 */


/**
 * Scrolls the corresponding list of this attribute until the given direct child attribute is visible. If the corresponding list is not yet visible the call is buffered until the list is available.
 *
 * @name sap.ui.ux3.ExactAttribute.prototype.scrollTo
 * @function
 * @param {sap.ui.ux3.ExactAttribute} 
 *         oOAttribute
 *         The direct child attribute

 * @type void
 * @public
 */


// Start of sap\ui\ux3\ExactAttribute.js
(function() {

sap.ui.ux3.ExactAttribute._MINWIDTH = 70;
sap.ui.ux3.ExactAttribute._MAXWIDTH = 500;

sap.ui.ux3.ExactAttribute.prototype.scrollTo = function(oAttribute) {
	if(!(oAttribute instanceof sap.ui.ux3.ExactAttribute)){
		this._scrollToAttributeId = undefined;
		return;
	}
	
	var oList = this.getChangeListener();
	if(oList){
		oList = sap.ui.getCore().byId(oList.id);
		if(oList && oList._lb){
			var iIdx = this.indexOfAttribute(oAttribute);
			if(iIdx >= 0){
				oList._lb.scrollToIndex(iIdx, true);
			}
			this._scrollToAttributeId = undefined;
			return;
		}
	}
	this._scrollToAttributeId = oAttribute.getId();
};

//*** Overridden API functions ***

sap.ui.ux3.ExactAttribute.prototype.setText = function(sText) {
	this.setProperty("text", sText, true);
	this._handleChange(this, "text");
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setWidth = function(iWidth) {
	this._setWidth(iWidth);
	this._handleChange(this, "width");
	return this;
};


/**
 * @see sap.ui.core.Element.prototype.setTooltip
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.setTooltip = function(oTooltip) {
	sap.ui.core.Element.prototype.setTooltip.apply(this, arguments);
	this._handleChange(this, "tooltip", true);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setSelected = function(bSelected) {
	this.setProperty("selected", bSelected, true);

	if(!this.getSelected()){
		this._clearSelection();
	}

	this._handleChange(this, "selected");
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setSupplyActive = function(bSupplyActive) {
	this.setProperty("supplyActive", bSupplyActive, true);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setAutoActivateSupply = function(bAutoActivateSupply) {
	this.setProperty("autoActivateSupply", bAutoActivateSupply, true);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setAdditionalData = function(oAdditionalData) {
	this.setProperty("additionalData", oAdditionalData, true);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setListOrder = function(sListOrder) {
	this.setProperty("listOrder", sListOrder, true);
	this._handleChange(this, "order");
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.getAttributes = function() {
	if(this.hasListeners("supplyAttributes") && this.getSupplyActive()){
		this._bSuppressChange = true;
		this._bChangedHappenedDuringSuppress = false;
		this.fireSupplyAttributes({attribute: this});
		this.setSupplyActive(false);
		this._bSuppressChange = undefined;
		if(this._bChangedHappenedDuringSuppress){
			this._handleChange(this, "attributes");
		}
		this._bChangedHappenedDuringSuppress = undefined;
	}
	return this.getAggregation("attributes", []);
};


sap.ui.ux3.ExactAttribute.prototype.insertAttribute = function(oAttribute, iIndex) {
	this.insertAggregation("attributes", oAttribute, iIndex, true);
	this._handleChange(this, "attributes");
	this.setSupplyActive(false);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.addAttribute = function(oAttribute) {
	this.addAggregation("attributes", oAttribute, true);
	this._handleChange(this, "attributes");
	this.setSupplyActive(false);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.removeAttribute = function(vElement) {
	var oAtt = this.removeAggregation("attributes", vElement, true);
	if(oAtt){
		oAtt.setChangeListener(null);
		this._handleChange(this, "attributes");
	}
	return oAtt;
};


sap.ui.ux3.ExactAttribute.prototype.removeAllAttributes = function() {
	var aAtts = this.getAttributesInternal();
	for(var idx=0; idx<aAtts.length; idx++){
		aAtts[idx].setChangeListener(null);
	}
	var aRes = this.removeAllAggregation("attributes", true);
	if(aAtts.length > 0) {
		this._handleChange(this, "attributes");
	}
	return aRes;
};


sap.ui.ux3.ExactAttribute.prototype.destroyAttributes = function() {
	var aAtts = this.getAttributesInternal();
	for(var idx=0; idx<aAtts.length; idx++){
		aAtts[idx].setChangeListener(null);
	}
	this.destroyAggregation("attributes", true);
	if(aAtts.length > 0) {
		this._handleChange(this, "attributes");
	}
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.getShowSubAttributesIndicator_Computed = function() {
	return this.hasListeners("supplyAttributes") && this.getSupplyActive() ? this.getShowSubAttributesIndicator() : this.getAttributesInternal().length > 0;
};


sap.ui.ux3.ExactAttribute.prototype.attachSupplyAttributes = function(oData, fnFunction, oListener) {
	this.attachEvent("supplyAttributes", oData, fnFunction, oListener);
	if(this.getSelected()){
		this.getAttributesInternal(true); //force init of attributes (e.g. call supply function))
	}
	return this;
};


//*** Internal (may also used by Exact Control) functions ***


sap.ui.ux3.ExactAttribute.prototype._setProperty_Orig = sap.ui.ux3.ExactAttribute.prototype.setProperty;
/**
 * @see sap.ui.core.Element.prototype.setProperty
 * @protected
 */
sap.ui.ux3.ExactAttribute.prototype.setProperty = function(sPropertyName, oValue, bSuppressRerendering) {
	this._setProperty_Orig(sPropertyName, oValue, bSuppressRerendering);

	if(sPropertyName == "selected"){
		if(oValue){
			this.getAttributesInternal(true); //force init of attributes (e.g. call supply function)
		}else{
			if(this.getAutoActivateSupply()) {
				this.setSupplyActive(true);
			}
		}
	}

	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setChangeListener = function(oChangeListener) {
	this._oChangeListener = oChangeListener;
};


sap.ui.ux3.ExactAttribute.prototype.getChangeListener = function(oChangeListener) {
	return this._oChangeListener;
};


sap.ui.ux3.ExactAttribute.prototype.getAttributesInternal = function(bForceInit) {
	return bForceInit ? this.getAttributes() : this.getAggregation("attributes", []);
};


sap.ui.ux3.ExactAttribute.prototype._handleChange = function(oSourceAttribute, sType) {
	if(this._bSuppressChange){
		this._bChangedHappenedDuringSuppress = true;
		return;
	}
	if(this.getChangeListener()){
		//Change is handled by the change listener
		this.getChangeListener()._notifyOnChange(sType, oSourceAttribute);
	}else if(this.getParent() && this.getParent()._handleChange){
		//Bubble Change to next change listener
		this.getParent()._handleChange(oSourceAttribute, sType);
	}
};


//Sets the selection property of the attribute and all its sub-attributes to false.
sap.ui.ux3.ExactAttribute.prototype._clearSelection = function(){
	this.setProperty("selected", false, true);
	var aVals = this.getAttributesInternal();
	for(var idx=0; idx<aVals.length; idx++){
		aVals[idx]._clearSelection();
	}
};


//Setter of the width property without invalidate and change notification
sap.ui.ux3.ExactAttribute.prototype._setWidth = function(iWidth) {
	iWidth = Math.round(sap.ui.ux3.ExactAttribute._checkWidth(iWidth));
	this.setProperty("width", iWidth, true);
};


//Checks whether the given width is within the allowed boundaries
sap.ui.ux3.ExactAttribute._checkWidth = function(iWidth) {
	iWidth = Math.max(iWidth, sap.ui.ux3.ExactAttribute._MINWIDTH);
	iWidth = Math.min(iWidth, sap.ui.ux3.ExactAttribute._MAXWIDTH);
	return iWidth;
};

}());
}; // end of sap/ui/ux3/ExactAttribute.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ExactList.
jQuery.sap.declare("sap.ui.ux3.ExactList");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ExactList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowClose showClose} : boolean (default: false)</li>
 * <li>{@link #getTopTitle topTitle} : string</li>
 * <li>{@link #getTopHeight topHeight} : int (default: 290)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSubLists subLists} : sap.ui.ux3.ExactList[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getData data} : string | sap.ui.ux3.ExactAttribute</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.ExactList#event:attributeSelected attributeSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Internal sub-control of the ExactBrowser. The control is not intended to be used stand alone. For this purpose, the ExactBrowser control can be used.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.ExactList
 */
sap.ui.core.Control.extend("sap.ui.ux3.ExactList", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"showClose" : {type : "boolean", group : "Misc", defaultValue : false},
		"topTitle" : {type : "string", group : "Misc", defaultValue : null},
		"topHeight" : {type : "int", group : "Appearance", defaultValue : 290}
	},
	aggregations : {
    	"subLists" : {type : "sap.ui.ux3.ExactList", multiple : true, singularName : "subList"}, 
    	"controls" : {type : "sap.ui.commons.ListBox", multiple : true, singularName : "control", visibility : "hidden"}
	},
	associations : {
		"data" : {type : "sap.ui.ux3.ExactAttribute", multiple : false}
	},
	events : {
		"attributeSelected" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ExactList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ExactList.extend
 * @function
 */

sap.ui.ux3.ExactList.M_EVENTS = {'attributeSelected':'attributeSelected'};


/**
 * Getter for property <code>showClose</code>.
 * Defines whether the close icon shall be displayed in the header.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showClose</code>
 * @public
 * @name sap.ui.ux3.ExactList#getShowClose
 * @function
 */

/**
 * Setter for property <code>showClose</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowClose  new value for property <code>showClose</code>
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactList#setShowClose
 * @function
 */


/**
 * Getter for property <code>topTitle</code>.
 * The title of this list is the top of the list hierarchy.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>topTitle</code>
 * @public
 * @name sap.ui.ux3.ExactList#getTopTitle
 * @function
 */

/**
 * Setter for property <code>topTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTopTitle  new value for property <code>topTitle</code>
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactList#setTopTitle
 * @function
 */


/**
 * Getter for property <code>topHeight</code>.
 * The height in px if this list is the top of the list hierarchy.
 *
 * Default value is <code>290</code>
 *
 * @return {int} the value of property <code>topHeight</code>
 * @public
 * @name sap.ui.ux3.ExactList#getTopHeight
 * @function
 */

/**
 * Setter for property <code>topHeight</code>.
 *
 * Default value is <code>290</code> 
 *
 * @param {int} iTopHeight  new value for property <code>topHeight</code>
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactList#setTopHeight
 * @function
 */


/**
 * Getter for aggregation <code>subLists</code>.<br/>
 * The sub-ExactLists of this list. This aggregation must not be maintained from outside.
 * The control automatically takes care to fill this aggregation according to the given ExactAttribute.
 * 
 * @return {sap.ui.ux3.ExactList[]}
 * @public
 * @name sap.ui.ux3.ExactList#getSubLists
 * @function
 */


/**
 * Inserts a subList into the aggregation named <code>subLists</code>.
 *
 * @param {sap.ui.ux3.ExactList}
 *          oSubList the subList to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the subList should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the subList is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the subList is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactList#insertSubList
 * @function
 */

/**
 * Adds some subList <code>oSubList</code> 
 * to the aggregation named <code>subLists</code>.
 *
 * @param {sap.ui.ux3.ExactList}
 *            oSubList the subList to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactList#addSubList
 * @function
 */

/**
 * Removes an subList from the aggregation named <code>subLists</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactList} vSubList the subList to remove or its index or id
 * @return {sap.ui.ux3.ExactList} the removed subList or null
 * @public
 * @name sap.ui.ux3.ExactList#removeSubList
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>subLists</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactList[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ExactList#removeAllSubLists
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ExactList</code> in the aggregation named <code>subLists</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactList}
 *            oSubList the subList whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ExactList#indexOfSubList
 * @function
 */
	

/**
 * Destroys all the subLists in the aggregation 
 * named <code>subLists</code>.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactList#destroySubLists
 * @function
 */


/**
 * The associated ExactAttribute
 *
 * @return {string} Id of the element which is the current target of the <code>data</code> association, or null
 * @public
 * @name sap.ui.ux3.ExactList#getData
 * @function
 */

/**
 * The associated ExactAttribute
 *
 * @param {string | sap.ui.ux3.ExactAttribute} vData 
 *    Id of an element which becomes the new target of this <code>data</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactList#setData
 * @function
 */


	
/**
 * Event which is fired when an attribute is selected/unselected 
 *
 * @name sap.ui.ux3.ExactList#attributeSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.ExactAttribute} oControlEvent.getParameters.attribute The attribute which was selected/unselected recently
 * @param {object} oControlEvent.getParameters.allAttributes Array of all ExactAttributes
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attributeSelected' event of this <code>sap.ui.ux3.ExactList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ExactList</code>.<br/> itself. 
 *  
 * Event which is fired when an attribute is selected/unselected 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ExactList</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactList#attachAttributeSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attributeSelected' event of this <code>sap.ui.ux3.ExactList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactList#detachAttributeSelected
 * @function
 */

/**
 * Fire event attributeSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'attribute' of type <code>sap.ui.ux3.ExactAttribute</code> The attribute which was selected/unselected recently</li>
 * <li>'allAttributes' of type <code>object</code> Array of all ExactAttributes</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ExactList#fireAttributeSelected
 * @function
 */


// Start of sap\ui\ux3\ExactList.js

/**
 * Constructor for a new ExactList.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Internal sub-control of the ExactBrowser. The control is not intended to be used stand alone. For this purpose, the ExactBrowser control can be used.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.15.1-SNAPSHOT
 *
 * @constructor   
 * @private
 * @name sap.ui.ux3.ExactList
 */

(function() {

jQuery.sap.require('sap.ui.commons.ListBox'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.dom'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


//Private extension of the ListBox control
sap.ui.commons.ListBox.extend("sap.ui.ux3.ExactList.LB", { 
	init : function() {
		sap.ui.commons.ListBox.prototype.init.apply(this, arguments);
		this.setAllowMultiSelect(true);
		this.setDisplayIcons(true);
		this.addStyleClass("sapUiUx3ExactLstLb");
	},
	
	invalidate : function() {
		sap.ui.commons.ListBox.prototype.invalidate.apply(this, arguments);
		if(!this.bInvalidated && this.getParent()){
			this.getParent().invalidate();
		}
		this.bInvalidated = true;
	},
	
	_handleUserActivation : function(oEvent) {
		oEvent.metaKey = true;
		sap.ui.commons.ListBox.prototype._handleUserActivation.apply(this, [oEvent]);
	},
	
	onclick : function(oEvent) {
		sap.ui.commons.ListBox.prototype.onclick.apply(this, arguments);
		this.getParent().onclick(oEvent);
	},
	
	onAfterRendering : function() {
		sap.ui.commons.ListBox.prototype.onAfterRendering.apply(this, arguments);
		this.bInvalidated = false;
		var oParent = this.getParent();
		
		var items = this.getItems();
		var bIsTop = oParent._isTop();
		var bHasChildren = false;
		for(var i=0; i<items.length; i++){
			var oItem = items[i];
			var oExactAttr = sap.ui.getCore().byId(oItem.getKey());
			var jItem = oItem.$();
			bHasChildren = false;
			if(bIsTop || (!oExactAttr || !oExactAttr.getShowSubAttributesIndicator_Computed())){
				jItem.addClass("sapUiUx3ExactLstNoIco");
				bHasChildren = bIsTop;
			}else{
				bHasChildren = true;
			}
			
			if(bHasChildren && !bIsTop){
				jItem.attr("aria-label", oParent._rb.getText(
						jItem.hasClass("sapUiLbxISel") ? "EXACT_LST_LIST_ITEM_SEL_ARIA_LABEL" : "EXACT_LST_LIST_ITEM_ARIA_LABEL", [oItem.getText()]
				));
			}
		}

		var sPos = oParent._bRTL ? "left" : "right";
		jQuery(".sapUiLbxITxt", this.getDomRef()).css("margin-"+sPos, 20+jQuery.sap.scrollbarSize().width+"px");
		jQuery(".sapUiLbxIIco", this.getDomRef()).css(sPos, 5+jQuery.sap.scrollbarSize().width+"px");

		jQuery(this.getDomRef()).attr("tabindex", "-1");

		var sListLabel;
		if(bIsTop){
			sListLabel = oParent.getTopTitle();
		}else{
			sListLabel = oParent._rb.getText("EXACT_LST_LIST_ARIA_LABEL", [oParent._iLevel, oParent._getAtt().getText()]);
		}
		jQuery(this.getFocusDomRef()).attr("aria-label", sListLabel).attr("aria-expanded", "true");

		this.oItemNavigation.iActiveTabIndex = -1; //Do not set the tabindex to 0 on the focused list item
		this.oItemNavigation.setSelectedIndex(-1); //Reset the selected index always -> focus is set by the item navigation on the last focused item
		
		//The item navigation should not handle the arrow left and right keys
		this.oItemNavigation.onsapnext = function(oEvent) {
			if(oEvent.keyCode != jQuery.sap.KeyCodes.ARROW_DOWN){
				return;
			}
			sap.ui.core.delegate.ItemNavigation.prototype.onsapnext.apply(this, arguments);
		};
		this.oItemNavigation.onsapprevious = function(oEvent) {
			if(oEvent.keyCode != jQuery.sap.KeyCodes.ARROW_UP){
				return;
			}
			sap.ui.core.delegate.ItemNavigation.prototype.onsapprevious.apply(this, arguments);
		};
	},

	renderer: "sap.ui.commons.ListBoxRenderer"
});



/**
 * Does the setup when the control is created.
 * @private
 */
sap.ui.ux3.ExactList.prototype.init = function(){
	var that = this;
	
	this._iLevel = 0;

	this._bCollapsed = false; //Indicates whether the control is horizontally collapsed
	this._bIsFirstRendering = true; //Set to false when the first rendering was done (used to animate the first opening)

	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");

	//Create the used ListBox control
	this._lb = new sap.ui.ux3.ExactList.LB(this.getId()+"-lb", {
		select: function(oEvent){
			setHeaderText(that);
			var sKey = oEvent.getParameter("selectedItem").getKey();
			var oAttr = sap.ui.getCore().byId(sKey);
			var iSelectedIndex = oEvent.getParameter("selectedIndex");
			if(that._lb.isIndexSelected(iSelectedIndex)){
				//select
				oAttr.setProperty("selected", true, true);
				var oSubList = createExactListForAttribute(that, oAttr);
				if(oSubList) {
					var idx = getIndexForNewSubList(that, oAttr);
					if(idx < 0){
						that.addSubList(oSubList);
					}else{
						that.insertSubList(oSubList, idx);
					}
				}
			}else{
				//deselect
				clearAttribute(that, oAttr, iSelectedIndex);
			}

			getTopList(that)._selectionChanged(oAttr);
		}
	});
	this.addAggregation("controls", this._lb);

	this._closeHandle = jQuery.proxy(this.onForceVerticalClose, this);
};


/**
 * Does all the cleanup when the control is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.ux3.ExactList.prototype.exit = function() {
	if(this.bIsDestroyed){
		return;
	}
	clearChangeListener(this);
	this._lb.removeAllItems(); //remove items first before destroy the list (see getOrCreateListItem function: items are reused)
	this._lb = null; //Destroy is called when the aggregation "controls" is cleaned up
	this._closeHandle = null;
	this._scrollCheckHandle = null;
	this._rb = null;
	this._oTopList = null;
	if(this._dirtyListsCleanupTimer){
		jQuery.sap.clearDelayedCall(this._dirtyListsCleanupTimer);
		this._dirtyListsCleanupTimer = null;
		this._dirtyLists = null;
	}
};


/**
 * @see sap.ui.core.Element.prototype.getFocusDomRef
 * @private
 */
sap.ui.ux3.ExactList.prototype.getFocusDomRef = function() {
	if(this._isTop() && this.$().hasClass("sapUiUx3ExactLstTopHidden")){
		return this.getDomRef("foc");
	}
	return this._bCollapsed ? this.getDomRef("head") : this._lb.getFocusDomRef();
};


/**
 * Called before the re-rendering is started.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onBeforeRendering = function() {
	this._oTopList = null;
	if(!this._bIsFirstRendering) {
		return;
	}
	
	this._bRTL = sap.ui.getCore().getConfiguration().getRTL();
	
	//Init the open animation (like expand, no Open Animation when the control is the top list)
	if(!this._isTop()){
		this._bCollapsed = true;
		
		//see also function collapseHorizontally
		this._oCollapseStyles = {
			"cntnt": "margin-"+(this._bRTL ? "right" : "left")+":"+sap.ui.core.theming.Parameters.get("sapUiUx3ExactLstCollapseWidth")+";border-top-width:0px;",
			"lst": "width:0px;"
		};
	}else{
		this._bIsFirstRendering = false;
	}
};


/**
 * Called when the rendering is complete.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onAfterRendering = function() {
	var that = this;
	var bIsTop = this._isTop();

	if(!this._iCurrentWidth){
		this._iCurrentWidth = this._getAtt().getWidth();
	}

	if(bIsTop){
		//Register listener on content overflow for scrollbar
		this._iScrollWidthDiff = -1;
		this.onCheckScrollbar();
		this.$("lst").css("bottom", jQuery.sap.scrollbarSize().height+"px");
		
		this.$("cntnt").bind("scroll", function(oEvent){
			if(oEvent.target.id === that.getId()+"-cntnt" && oEvent.target.scrollTop != 0){
				oEvent.target.scrollTop = 0;
			}
		});
	}
	
	

	if(!this._bCollapsed){
		setWidth(this, this._iCurrentWidth);
	}

	//Init the header text
	setHeaderText(this);

	if(this._bIsFirstRendering) {
		//Open Animation
		this._bIsFirstRendering = false;
		collapseHorizontally(this, false, null, true);
	}else{
		//Adapt the scrolling behavior and show the vertical list expander if necessary
		refreshScrollBehaviour(this);
		
		//Refresh the header text width in case the list is collapsed
		refreshCollapseHeaderTextWidth(this);
	}
	
	if(this._bRefreshList){
		this._bRefreshList = false;
		setTimeout(function(){
			that._lb.invalidate();
		}, 0);
	}
};


//********* EVENTING *********


/**
 * Called when the control gets the focus.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onfocusin = function(oEvent) {
	if(oEvent.target === this.getDomRef()){
		this.getFocusDomRef().focus();
	}
	var $head = this.$("head");
	if(this._isTop()){
		$head.attr("tabindex", "-1");
		this.$("foc").attr("tabindex", "-1");
		if(!isTopHeaderFocusable(this) && oEvent.target === $head[0]){
			this.getFocusDomRef().focus();
		}
		
		if(this.$().hasClass("sapUiUx3ExactLstTopHidden") && oEvent.target === this.getDomRef("foc")){
			var aLists = this.getSubLists();
			if(aLists.length > 0){
				aLists[0].getFocusDomRef().focus();
			}
		}
	}
	if(!oEvent.__exactHandled){
		$head.addClass("sapUiUx3ExactLstHeadFocus");
		oEvent.__exactHandled = true;
	}
};


/**
 * Called when the control loses the focus.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onfocusout = function(oEvent) {
	var $head = this.$("head");
	if(this._isTop()){
		$head.attr("tabindex", "0");
		this.$("foc").attr("tabindex", "0");
	}
	$head.removeClass("sapUiUx3ExactLstHeadFocus");
};


/**
 * Called when the control is clicked.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onclick = function(oEvent) {
	var s = this._lb.getScrollTop();
	if(jQuery(oEvent.target).attr("id") == this.getId() + "-exp"){
		//Toggle the vertically Collapse state
		toggleVerticalCollapseState(this);
		this.focus();
		// If the list is expanded, stop the event from bulling up the lists and focus the main
		// list which might be outside the scrolling area.
		oEvent.stopPropagation();
	}else if(jQuery(oEvent.target).attr("id") == this.getId() + "-close"){
		//Close this list
		close(this);
	}else if(jQuery(oEvent.target).attr("id") == this.getId() + "-hide"){
		//Toggle the horizontally Collapse state
		collapseHorizontally(this, !this._bCollapsed, oEvent);
	}else if(this._isTop() && isTopHeaderFocusable(this) && jQuery.sap.containsOrEquals(this.$("head")[0], oEvent.target)){
		fireHeaderPress(this, oEvent, false);
		return;
	}else if(!jQuery.sap.containsOrEquals(this.$("cntnt")[0], oEvent.target)){
		this.focus();
	}
	this._lb.setScrollTop(s);
};


/**
 * Called when a key is pressed.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onkeydown = function(oEvent) {
	function _handleKeyEvent(oEvent, oTargetDomRef){
		if(jQuery(oTargetDomRef).hasClass("sapUiUx3ExactLstFoc")) {
			return;
		}
		
		if(oTargetDomRef){
			oTargetDomRef.focus();
		}
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
	
	switch(oEvent.keyCode){
		case jQuery.sap.KeyCodes.ENTER:
		case jQuery.sap.KeyCodes.SPACE:
			if(this._isTop() && isTopHeaderFocusable(this) && jQuery.sap.containsOrEquals(this.$("head")[0], oEvent.target)){
				fireHeaderPress(this, oEvent, true);
			}
			break;
	
		case jQuery.sap.KeyCodes.DELETE:
			//If close functionality is active -> Close the control and deselect the corresponding attribute
			if(!this._isTop() && this.getShowClose()){
				close(this);
				_handleKeyEvent(oEvent, this.getParent().getFocusDomRef());
			}
			break;

		case jQuery.sap.KeyCodes.NUMPAD_MINUS:
			if(!!(oEvent.metaKey || oEvent.ctrlKey)){ //NUMPAD_MINUS + CTRL: Collapse list vertically
				//Deactivated on request of UX
				/*var jListContRef = jQuery.sap.byId(this.getId() + "-lst");
				if(jListContRef.hasClass("sapUiUx3ExactLstExpanded") && jQuery.sap.byId(this.getId() + "-exp").is(":visible")){
					toggleVerticalCollapseState(this);
				}
				oEvent.preventDefault();
				oEvent.stopPropagation();*/
			}else if(oEvent.shiftKey){ //NUMPAD_MINUS + SHIFT: Make width smaller
				if(!this._bCollapsed){
					setWidth(this, this._iCurrentWidth - 10);
					_handleKeyEvent(oEvent);
				}
			}else if(!this._bCollapsed){ //NUMPAD_MINUS: Collapse list horizontally
				collapseHorizontally(this, true, oEvent);
			}
			break;

		case jQuery.sap.KeyCodes.NUMPAD_PLUS:
			if(!!(oEvent.metaKey || oEvent.ctrlKey)){ //NUMPAD_PLUS + CTRL: Expand list vertically
				//Deactivated on request of UX
				/*var jListContRef = jQuery.sap.byId(this.getId() + "-lst");
				if(!jListContRef.hasClass("sapUiUx3ExactLstExpanded") && jQuery.sap.byId(this.getId() + "-exp").is(":visible")){
					toggleVerticalCollapseState(this);
				}
				oEvent.preventDefault();
				oEvent.stopPropagation();*/
			}else if(oEvent.shiftKey){ //NUMPAD_PLUS + SHIFT: Make width larger
				if(!this._bCollapsed){
					setWidth(this, this._iCurrentWidth + 10);
					_handleKeyEvent(oEvent);
				}
			}else if(this._bCollapsed){ //NUMPAD_PLUS: Expand list horizontally
				collapseHorizontally(this, false, oEvent);
			}
			break;

		case jQuery.sap.KeyCodes.TAB:
			//Handle Tabbing
			if(this._iLevel == 0){
				var bHeaderFocusable = isTopHeaderFocusable(this);
				if(!oEvent.shiftKey && bHeaderFocusable && jQuery.sap.containsOrEquals(this.$("head")[0], oEvent.target)){
					_handleKeyEvent(oEvent, this.getFocusDomRef());
				} else if(jQuery.sap.containsOrEquals(this.getFocusDomRef(), oEvent.target)){
					if(oEvent.shiftKey && bHeaderFocusable) {
						_handleKeyEvent(oEvent, this.$("head")[0]);
					}else if(!oEvent.shiftKey){
						var oSubList = getSuccessorList(this);
						if(oSubList){
							_handleKeyEvent(oEvent, oSubList.getFocusDomRef());
						}
					}
				}
				return;
			}
			
			if(this._iLevel == 1){
				var oSubList = null;
				if(oEvent.shiftKey){
					if(jQuery.sap.containsOrEquals(this.$("cntnt")[0], oEvent.target)){
						oSubList = this;
					}else{
						oSubList = getPredecessorList(this);
					}
				}else{
					oSubList = getSuccessorList(this);
				}
				if(oSubList){
					_handleKeyEvent(oEvent, oSubList.getFocusDomRef());
				}
				oEvent.stopPropagation();
			}
			break;
			
		case jQuery.sap.KeyCodes.ARROW_LEFT:
		case jQuery.sap.KeyCodes.ARROW_RIGHT:
			var oSubList = null;
			if(this._iLevel >= 1){
				if((this._bRTL && oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT)
						|| (!this._bRTL && oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT)){
					oSubList = getSuccessorList(this, true);
				}else{
					oSubList = getPredecessorList(this, true);
				}
				if(oSubList){
					_handleKeyEvent(oEvent, oSubList.getFocusDomRef());
				}
				oEvent.stopPropagation();
			}
			break;
	}
};


/**
 * Called when mousedown event appears. -> Starting point for the resizing
 * @private
 */
sap.ui.ux3.ExactList.prototype.onmousedown = function(oEvent) {
	if(oEvent.target.id === this.getId()+"-rsz"){
		jQuery(document.body).append(
				"<div id=\"" + this.getId() + "-ghost\" class=\"sapUiUx3ExactLstRSzGhost\" style =\" z-index:"+sap.ui.core.Popup.getNextZIndex()+"\" ></div>");

		// Fix for IE text selection while dragging
		jQuery(document.body).bind("selectstart."+this.getId(), onStartSelect);

		var jHandle = !!sap.ui.Device.browser.internet_explorer ? jQuery(document.body) : this.$("ghost");
		jHandle.bind("mouseup."+this.getId(), jQuery.proxy(onRelease, this)).bind("mousemove."+this.getId(), jQuery.proxy(onMove, this));
			
		this._iStartDragX = oEvent.pageX;
		this._iStartWidth  = this.$("lst").width();

		this.$("rsz").addClass("sapUiUx3ExactLstRSzDrag");
	}
};


/**
 * Called when the vertically Collapse State should be closed immediately (e.g. outer event)
 * @private
 */
sap.ui.ux3.ExactList.prototype.onForceVerticalClose = function(oEvent) {
	if(oEvent.type == "mousedown" ||
			oEvent.type == "click" ||
			oEvent.type == "dblclick" ||
			oEvent.type == "focusin" ||
			oEvent.type == "focusout" ||
			oEvent.type == "keydown" ||
			oEvent.type == "keypress" ||
			oEvent.type == "keyup" ||
			oEvent.type == "mousedown" ||
			oEvent.type == "mouseup") {
		var jRef = this.$("lst");
		if(!jQuery.sap.containsOrEquals(jRef[0], oEvent.target) || oEvent.target.tagName=="BODY"){
			if(jRef.hasClass("sapUiUx3ExactLstExpanded")){
				this._oPopup.close(true);
			}
		}
	}
};


/**
 * Called periodicly to check whether the content scrollbar must be show or hidden
 * @private
 */
sap.ui.ux3.ExactList.prototype.onCheckScrollbar = function(oEvent) {
	this._scrollCheckTimer = null;

	var jContentArea = this.$("cntnt");
	var oContentArea = jContentArea[0];
	if(oContentArea){
		var iNewDiff = oContentArea.scrollWidth - oContentArea.clientWidth;
		if(this._iScrollWidthDiff != iNewDiff){
			this._iScrollWidthDiff = iNewDiff;
			if(iNewDiff <= 0){
				//hidden scrollbar
				jContentArea.css({"overflow-x": "hidden", "bottom": jQuery.sap.scrollbarSize().height+"px"});
			}else{
				//visible scrollbar
				jContentArea.css({"overflow-x": "scroll", "bottom": "0px"});
			}
		}
		this._scrollCheckTimer = jQuery.sap.delayedCall(300, this, this.onCheckScrollbar);
	}
};


//********* OVERRIDDEN API FUNCTIONS *********


sap.ui.ux3.ExactList.prototype.insertSubList = function(oSubList, iIndex) {
	this.insertAggregation("subLists", oSubList, iIndex);
	if(oSubList){
		setLevel(oSubList, this._iLevel + 1);
	}
	return this;
};


sap.ui.ux3.ExactList.prototype.addSubList = function(oSubList) {
	this.addAggregation("subLists", oSubList);
	if(oSubList){
		setLevel(oSubList, this._iLevel + 1);
	}
	return this;
};


sap.ui.ux3.ExactList.prototype.setData = function(vData) {
	if (vData != null && typeof(vData) != "string") {
		vData = vData.getId();
	}

	if(vData) {
		//Set the associated ExactAttribute
		this.setAssociation("data", vData);
		vData = this._getAtt();
		this._lb.removeAllItems();
		if(!vData){
			return this;
		}
		var aAtts = vData.getAttributesInternal(true);
		var aSelectedKeys = [];
		var aLists = [];
		//Update the used ListBox accordingly and create child exact lists
		for(var i=0; i<aAtts.length; i++){
			var oItem = getOrCreateListItem(aAtts[i]);
			this._lb.addItem(oItem);
			if(aAtts[i].getSelected()){
				var oList = createExactListForAttribute(this, aAtts[i]);
				if(oList){
					aLists.push(oList);
				}
				aSelectedKeys.push(oItem.getKey());
			}
		}
		this._lb.setSelectedKeys(aSelectedKeys);

		//Update child lists
		var aOldChildren = this.getSubLists();
		for(var i=0; i<aOldChildren.length; i++){
			var idx = jQuery.inArray(aOldChildren[i], aLists);
			if(idx >= 0){
				if(vData.getListOrder() != sap.ui.ux3.ExactOrder.Fixed /*Select*/){
					//List is already a sublist -> remove it from the array of lists to add
					aLists.splice(idx, 1);
				}
			}else{
				//List does not exist anymore in the array of lists to add -> destroy it (also removes it from the aggregation)
				aOldChildren[i]._lb.removeAllItems();  //remove items first before destroy the list (see function getOrCreateListItem: items are reused)
				aOldChildren[i].destroy();
			}
		}
		
		if(vData.getListOrder() === sap.ui.ux3.ExactOrder.Fixed){
			this.removeAllSubLists();
		}
		
		//Append all newly created lists
		for(var i=0; i<aLists.length; i++){
			this.addSubList(aLists[i]);
		}

		//Set the change listener to the exact attribute
		var that = this;
		vData.setChangeListener({id: that.getId(), _notifyOnChange: function(sType, oAttribute){
			if(sType === "width"){
				if(that._getAtt() === oAttribute && that.getDomRef()){
					setWidth(that, oAttribute.getWidth());
				}
				return;
			}
			
			var oTopList = getTopList(that);
			if(!oTopList._dirtyLists){
				oTopList._dirtyLists = {};
			}
			if(!oTopList._dirtyLists[that.getId()]){
				oTopList._dirtyLists[that.getId()] = that;
			}
			
			if(!oTopList._dirtyListsCleanupTimer){
				oTopList._dirtyListsCleanupTimer = jQuery.sap.delayedCall(0, oTopList, function(){
					this._dirtyListsCleanupTimer = null;
					jQuery.each(this._dirtyLists, function(i, oList){
						if(oList._lb && oList.getParent()){ //List was not destroyed in the meantime and is still active
							if(!oList._isTop()){
								oList.getParent().setData(oList.getParent().getData());
							}else{
								oList.setData(oList.getData());
							}
						}
					});
					this._dirtyLists = null;
				}, []);
			}
		}});
	}

	return this;
};


sap.ui.ux3.ExactList.prototype.setShowClose = function(bShowClose) {
	if(this._isTop()){
		this.setProperty("showClose", bShowClose);
	}
	return this;
};


sap.ui.ux3.ExactList.prototype.getShowClose = function() {
	return getTopList(this).getProperty("showClose");
};


sap.ui.ux3.ExactList.prototype.getTopTitle = function() {
	var sTitle = this.getProperty("topTitle");
	return sTitle ? sTitle : this._rb.getText("EXACT_BRWSR_LST_TITLE");
};


//********* GLOBAL HELPERS *********

/**
 * Returns the associated ExactAttribute.
 * @private
 */
sap.ui.ux3.ExactList.prototype._getAtt = function() {
	return sap.ui.getCore().byId(this.getData());
};


/**
 * Returns <code>true</code>, when this control is the top most in the hierarchy, <code>false</code> otherwise.
 * @private
 */
sap.ui.ux3.ExactList.prototype._isTop = function() {
	return !(this.getParent() instanceof sap.ui.ux3.ExactList);
};


/**
 * Handles selections of the whole list tree and fires selection change event.
 * @private
 */
sap.ui.ux3.ExactList.prototype._selectionChanged = function(oAttribute) {
	if(!this._isTop()){
		return;
	}

	// In case of TwoWay databinding the attribute might have already changed by now. Make sure
	// We use the correct one.
	// This happened for example when the selected property was bound in the same model as
	// the data for the lists
	oAttribute = sap.ui.getCore().byId(oAttribute.getId());
	
	
	//Computes recursivly all selected attributes and adds them to the given result list
	var _computeSelectedAttributes = function(oAtt, aResult){
		if(!oAtt.getSelected()) {
			return;
		}
		aResult.push(oAtt);
		var aValues = oAtt.getAttributesInternal();
		for(var idx=0; idx<aValues.length; idx++){
			_computeSelectedAttributes(aValues[idx], aResult);
		}
	};

	var aSelectedAttributes = [];
	var aTopValues = this._getAtt().getAttributesInternal();
	for(var idx=0; idx<aTopValues.length; idx++){
		_computeSelectedAttributes(aTopValues[idx], aSelectedAttributes);
	}

	
	this.fireAttributeSelected({attribute: oAttribute, allAttributes: aSelectedAttributes});
};


/**
 * Closes all open sub lists and clears the selection if this list is the top list.
 *
 * @private
 */
sap.ui.ux3.ExactList.prototype._closeAll = function() {
	if(!this._isTop()){
		return;
	}

	var that = this;

	var fCallback = function(){
		that._getAtt()._clearSelection();
		that._lb.clearSelection();
		that.fireAttributeSelected({attribute: undefined, allAttributes: []});
	};

	var aLists = this.getSubLists();

	if(aLists.length > 0){
		for(var i=0; i<aLists.length; i++){
			close(aLists[i], true, i == aLists.length-1 ? fCallback : null);
		}
	}else{
		fCallback();
	}
};


//********* LOCAL HELPERS *********

//Returns the predecessor of the given list based on the level and whether TAB or the arrow keys are used
var getPredecessorList = function(oList, bArrow){
	function getPrevOnSameLevel(oLst){
		var oParent = oLst.getParent();
		var aParentSubLists = oParent.getSubLists();
		var idx = oParent.indexOfSubList(oLst) - 1;
		if(idx >= 0){
			return aParentSubLists[idx];
		}
		return null;
	}
	
	function getListOrLastChild(oLst){
		var aSubLists = oLst.getSubLists();
		if(aSubLists.length > 0){
			return getListOrLastChild(aSubLists[aSubLists.length-1]);
		}
		return oLst;
	}
	
	if(oList._iLevel == 0) {
		return null;
	}else if(oList._iLevel == 1) {
		if(bArrow){
			return null;
		}
		var oPrevList = getPrevOnSameLevel(oList);
		if(oPrevList){
			return oPrevList;
		}
		return oList.getParent();
	}else if(oList._iLevel > 1) {
		var oPrevList = getPrevOnSameLevel(oList);
		if(oPrevList){
			return getListOrLastChild(oPrevList);
		}
		var oParent = oList.getParent();
		if(oParent._iLevel >= 1){
			return oParent;
		}
	}
	return null;
};

//Returns the successor of the given list based on the level and whether TAB or the arrow keys are used
var getSuccessorList = function(oList, bArrow){
	function getNextOnSameLevel(oLst){
		var oParent = oLst.getParent();
		var aParentSubLists = oParent.getSubLists();
		var idx = oParent.indexOfSubList(oLst) + 1;
		if(idx < aParentSubLists.length){
			return aParentSubLists[idx];
		}
		return null;
	}
	
	function getFirstChild(oLst){
		var aSubLists = oLst.getSubLists();
		if(aSubLists.length > 0){
			return aSubLists[0];
		}
		return null;
	}
	
	function getNext(oLst){
		var oNextList = getNextOnSameLevel(oLst);
		if(oNextList){
			return oNextList;
		}
		var oParent = oLst.getParent();
		if(oParent._iLevel > (bArrow ? 1 : 0)){
			return getNext(oParent);
		}else{
			return null;
		}
	}
	
	if(oList._iLevel == 0) {
		return getFirstChild(oList);
	}else if(oList._iLevel == 1) {
		return bArrow ? getFirstChild(oList) : getNextOnSameLevel(oList);
	}else if(oList._iLevel > 1) {
		var oNextList = getFirstChild(oList);
		if(oNextList){
			return oNextList;
		}
		
		return getNext(oList);
	}
	return null;
};

var fireHeaderPress = function(oList, oEvent, bKeyboard){
	oList.fireEvent("_headerPress", {
		kexboard: bKeyboard,
		domRef: oList.$("head")
	});
	oEvent.stopPropagation();
};

var isTopHeaderFocusable = function(oList){
	return !isTopHidden(oList) && oList.$().hasClass("sapUiUx3ExactLstTopActive");
};

var isTopHidden = function(oList){
	return oList.$().hasClass("sapUiUx3ExactLstTopHidden");
};

//Returns the index in the sublists of the given list for a new list of the given attribute
var getIndexForNewSubList = function(oList, oAttr){
	if(oList._getAtt().getListOrder() != sap.ui.ux3.ExactOrder.Fixed /*Select*/){
		return -1;
	}
	
	var aAttributes = oList._getAtt().getAttributes();
	var idx = 0;
	for(var i=0; i<aAttributes.length; i++){
		if(aAttributes[i] === oAttr){
			break;
		}
		if(aAttributes[i].getChangeListener()){
			idx++;
		}
	}
	return idx;
};

var refreshScrollBehaviour = function(oList){
	if(adaptScollBehavior(oList)){
		oList.$("lst").addClass("sapUiUx3ExactLstLstExp");

		if(!oList._oPopup){
			var fPopupEventHandle = function(oEvent){
				oList._handleEvent(oEvent);
			};

			oList._oPopup = new sap.ui.core.Popup();

			if(!!!sap.ui.Device.browser.firefox){
				oList._oPopup._fixPositioning = function(oPosition, bRtl) {
					sap.ui.core.Popup.prototype._fixPositioning.apply(this, arguments);
					if(bRtl){
						var $Ref = this._$();
						var $Of = jQuery(oPosition.of);
						var iOffset = 0;
						if(oPosition.offset){
							iOffset = parseInt(oPosition.offset.split(" ")[0]);
						}
						$Ref.css("right", (jQuery(window).width() - $Of.outerWidth() - $Of.offset().left + iOffset) + "px");
					}
				};
			}

			oList._oPopup.open = function(){
				var jListContRef = oList.$("lst");
				animate(jListContRef, false, -1, function(jRef){
					//Switch the expand icon
					jListContRef.addClass("sapUiUx3ExactLstExpanded");
					oList.$("exp").html(sap.ui.ux3.ExactListRenderer.getExpanderSymbol(true, false));
					//Remember the current height for closing later and set the height explicitly
					oList.__sOldHeight = jListContRef.css("height");
					jListContRef.css("height", oList.__sOldHeight);
					var jListHeader = oList.$("head");
					//Calculate the target height
					var jListRef = jQuery(oList._lb.getDomRef());
					var iListHeight = jListRef[0].scrollHeight + oList.$("exp").height() + jListRef.outerHeight() - jListRef.height() + 1;
					var iMaxListHeight = jQuery(window).height() - parseInt(jListRef.offset().top, 10) + jQuery(window).scrollTop() - jListHeader.outerHeight();
					var iTargetHeight = Math.min(iListHeight, iMaxListHeight);
					//Set the list as popup content and open the popup
					oList._oPopup.setContent(jListContRef[0]);
					var sOffset = sap.ui.core.theming.Parameters.get()["sapUiUx3ExactLst" + (oList._isTop() ? "Root" : "") + "ExpandOffset"] || "0 0";
					sap.ui.core.Popup.prototype.open.apply(oList._oPopup,
							[0, sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom, jListHeader[0], sOffset, "none none"]);
					oList._bPopupOpened = true;
					return iTargetHeight;
				}, function(jRef){
					//Update BlindLayer of popup
					jListContRef.addClass("sapUiUx3ExactLstExpandedBL");
					oList._oPopup._updateBlindLayer();
					//Adapt the scroll behavior and set the focus
					adaptScollBehavior(oList);
					oList.getFocusDomRef().focus();
					//Bind the event handlers for closing and control events
					jQuery.sap.bindAnyEvent(oList._closeHandle);
					jRef.bind(jQuery.sap.ControlEvents.join(" "), fPopupEventHandle);
				});
			};
			oList._oPopup.close = function(bSkipFocus){
				var jListContRef = oList.$("lst");
				jListContRef.removeClass("sapUiUx3ExactLstExpandedBL");
				animate(jListContRef, false, oList.__sOldHeight, function(jRef){
					//Unbind the event handlers for closing and control events
					jQuery.sap.unbindAnyEvent(oList._closeHandle);
					jRef.unbind(jQuery.sap.ControlEvents.join(" "), fPopupEventHandle);
					//Switch the expand icon
					jListContRef.removeClass("sapUiUx3ExactLstExpanded");
					oList.$("exp").html(sap.ui.ux3.ExactListRenderer.getExpanderSymbol(false, false));
				}, function(jRef){
					//Move the list to its original position
					jRef.detach();
					jListContRef.removeClass("sapUiShd");
					jRef.attr("style", "width:"+oList._iCurrentWidth+"px;");
					jQuery(oList.getDomRef()).prepend(jRef);
					//Cleanup and close the popup
					oList._oPopup.setContent(null);
					oList._bPopupOpened = undefined;
					oList.__sOldHeight = null;
					if(oList._isTop()){
						jRef.css("bottom", jQuery.sap.scrollbarSize().height+"px");
					}
					adaptScollBehavior(oList);
					sap.ui.core.Popup.prototype.close.apply(oList._oPopup, [0]);
					if(!bSkipFocus){
						oList.getFocusDomRef().focus();
					}
				});
			};
		}
	}
};


//Animates the width or height of the given jRef to the given target value
//Optional callbacks are possible which are called before and after the animation
var animate = function(jRef, bWidth, iValue, fDoBefore, fDoAfter){
	if(fDoBefore){
		var iVal = fDoBefore(jRef);
		if(iVal != undefined){
			iValue = iVal;
		}
	}
	var _fDoAfter = fDoAfter ? function(){fDoAfter(jRef);} : function(){};
	if(jQuery.fx.off){
		if(bWidth){
			jRef.width(iValue);
		}else{
			jRef.height(iValue);
		}
		_fDoAfter();
	}else{
		var oParam = bWidth ? {width: iValue} : {height: iValue};
		jRef.stop(true, true).animate(oParam, 200, 'linear', _fDoAfter);
	}
};


// Handles the StartSelect event during resizing
// @see sap.ui.ux3.ExactList.prototype.onmousedown
var onStartSelect = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();
	return false;
};


//Handles the MouseMove event during resizing
//@see sap.ui.ux3.ExactList.prototype.onmousedown
var onMove = function(oEvent){
	var iCurrentX = oEvent.pageX;
	var iDiff = this._bRTL ? (this._iStartDragX - iCurrentX) : (iCurrentX - this._iStartDragX);
	setWidth(this, this._iStartWidth + iDiff);
};


//Handles the MouseUp event during resizing
//@see sap.ui.ux3.ExactList.prototype.onmousedown
var onRelease = function(oEvent){
	jQuery(document.body).unbind("selectstart."+this.getId()).unbind("mouseup."+this.getId()).unbind("mousemove."+this.getId());
	this.$("ghost").remove();
	this.$("rsz").removeClass("sapUiUx3ExactLstRSzDrag");
	this._iStartWidth = undefined;
	this._iStartDragX = undefined;
	this.focus();
};


//Sets the width of the list to the given width (maybe the width is adapted to the allowed range (@see checkWidth))
var setWidth = function(oList, iWidth){
	iWidth = sap.ui.ux3.ExactAttribute._checkWidth(iWidth);
	var sPos = oList._bRTL ? "right" : "left";
	oList._iCurrentWidth = iWidth;
	oList._getAtt()._setWidth(oList._iCurrentWidth);
	oList.$("lst").css("width", iWidth+"px");
	oList.$("rsz").css(sPos, (iWidth-4)+"px");
	if(oList._isTop()){
		if(!isTopHidden(oList)){
			oList.$("head").css("width", iWidth+"px");
			oList.$("cntnt").css(sPos, (iWidth+8)+"px");
			oList.$("scroll").css(sPos, (iWidth+8)+"px");
		}
	}else{
		if(!oList.$().hasClass("sapUiUx3ExactLstCollapsed")){
			oList.$("cntnt").css("margin-"+sPos, iWidth+"px");
		}
	}
};


//Refresh the header text of the list
var setHeaderText = function(oList){
	var oAtt = oList._getAtt();
	if(oAtt && !oList._isTop()){
		oList.$("head-txt").html(jQuery.sap.encodeHTML(oAtt.getText())
				+"<span class=\"sapUiUx3ExactLstHeadInfo\">&nbsp;("+oList._lb.getSelectedIndices().length+"/"+oList._lb.getItems().length+")</span>");
	}
};


//Sets the level of the list and its sublists
var setLevel = function(oList, iLevel){
	oList._iLevel = iLevel;
	var aLists = oList.getSubLists();
	for(var i=0; i<aLists.length; i++){
		setLevel(aLists[i], iLevel+1);
	}
};


//Adapt the scrolling behavior when not all list items can be shown and return whether adaptation was done or not.
var adaptScollBehavior = function(oList){
	if(oList._lb){
		var jListRef = jQuery(oList._lb.getDomRef());
		oList.$("lst").removeClass("sapUiUx3ExactLstScroll");
		if(jListRef.length > 0 && jListRef.outerHeight() < jListRef[0].scrollHeight){
			oList.$("lst").addClass("sapUiUx3ExactLstScroll");
			return true;
		}
	}
	return false;
};


//Collapses or expands the given list horizontally
var collapseHorizontally = function(oList, bCollapse, oEvent, bSkipParentTraversal){
	if(oEvent){
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
	if(oList._isTop()){
		return;
	}
	if(oList._bCollapsed != bCollapse){
		//Toggles the horizontal Collapse State
		var bFocus = !!oEvent;
		var cntntAnimParam = {};
		cntntAnimParam["margin-" + (oList._bRTL ? "right" : "left")] = (oList._bCollapsed ?
				(oList._iCurrentWidth + "px") : sap.ui.core.theming.Parameters.get("sapUiUx3ExactLstCollapseWidth"));
		cntntAnimParam["border-top-width"] = (oList._bCollapsed ? 
				sap.ui.core.theming.Parameters.get("sapUiUx3ExactLstContentTop") : "0px");
		
		var $Ctnt = oList.$("cntnt");
		if(jQuery.fx.off){
			for(var css in cntntAnimParam){
				$Ctnt.css(css, cntntAnimParam[css]);
			}
		}else{
			$Ctnt.stop(true, true).animate(cntntAnimParam, 200, 'linear');
		}
		
		if(oList._bCollapsed){
			//expand
			animate(oList.$("lst"), true, oList._iCurrentWidth+"px", function() {
				jQuery(oList.getDomRef()).removeClass("sapUiUx3ExactLstCollapsed");
				oList.$("head").css("overflow", "hidden");
			}, function($Ref) {
				oList.$("hide")
					.html(sap.ui.ux3.ExactListRenderer.getExpanderSymbol(true, true))
					.attr("title", oList._rb.getText("EXACT_LST_LIST_COLLAPSE"));
				if(bFocus){
					oList.focus();
				}
				var $head = oList.$("head");
				oList.$("head-txt").removeAttr("style");
				$head.removeAttr("style");
				$Ref.removeAttr("style");
				refreshScrollBehaviour(oList);
				setWidth(oList, oList._iCurrentWidth);
				refreshCollapseHeaderTextWidth(oList);
				
				$head.removeAttr("role");
				$head.removeAttr("aria-label");
				$head.removeAttr("aria-expanded");
				
				var oAtt = oList._getAtt();
				if(oAtt && oAtt._scrollToAttributeId){
					oAtt.scrollTo(sap.ui.getCore().byId(oAtt._scrollToAttributeId));
				}
				
			});
			
			oList._oCollapseStyles = undefined;
		}else{
			oList._oCollapseStyles = {};
			
			//collapse
			animate(oList.$("lst"), true, 0, null, function() {
				jQuery(oList.getDomRef()).addClass("sapUiUx3ExactLstCollapsed");
				oList.$("hide")
					.html(sap.ui.ux3.ExactListRenderer.getExpanderSymbol(false, true))
					.attr("title", oList._rb.getText("EXACT_LST_LIST_EXPAND"));
				if(bFocus){
					oList.focus();
				}
				refreshCollapseHeaderTextWidth(oList);
				
				var $head = oList.$("head");
				$head.attr("role", "region");
				$head.attr("aria-label", oList._rb.getText("EXACT_LST_LIST_COLL_ARIA_LABEL", [oList._iLevel, oList._getAtt().getText()]));
				$head.attr("aria-expanded", "false");
			});
			
			//Remember the current styles for rerendering
			var aStyles = [];
			for(var css in cntntAnimParam){
				aStyles.push(css, ":", cntntAnimParam[css], ";");
			}
			oList._oCollapseStyles["cntnt"] = aStyles.join("");
			oList._oCollapseStyles["lst"] = "width:0px;";
		}
		
		oList._bCollapsed = !oList._bCollapsed;
	}
	
	if(bSkipParentTraversal){
		return;
	}
	var oParent = oList.getParent();
	if(!oList._isTop() && oParent && oParent._isTop && !oParent._isTop()){
		collapseHorizontally(oParent, bCollapse);
	}
};


//Refreshs the header text width of all collapsed lists
var refreshCollapseHeaderTextWidth = function(oList) {
	if(oList._bCollapsed){
		var iWidth = oList.$("cntnt").height()-50/*Space for Header Action Buttons - Maybe provide theme parameter in future*/;
		var $txt = oList.$("head-txt");
		$txt.css("width", iWidth+"px");
		if(jQuery("html").attr("data-sap-ui-browser") == "ie8") {
			//A text with 90px width is correct aligned when bottom:75px is set
			var iBottom = 75-(90-iWidth);
			$txt.css("bottom", iBottom+"px");
		}
	}
	var aSubLists = oList.getSubLists();
	for(var i=0; i<aSubLists.length; i++){
		refreshCollapseHeaderTextWidth(aSubLists[i]);
	}
};


//Toggles the vertical Collapse State
var toggleVerticalCollapseState = function(oList){
	var jListContRef = oList.$("lst");
	if(jListContRef.hasClass("sapUiUx3ExactLstExpanded")){
		//collapse
		oList._oPopup.close();
	}else{
		//expand
		oList._oPopup.open();
	}
};


//Handles the close of the list
var close = function(oList, bSkipNotify, fCallback){
	var fFinalize = function(jRef) {
		if(!bSkipNotify){
			var oAttr = oList._getAtt();
			var iSelectedIndex = oAttr.getParent().indexOfAttribute(oAttr);
			clearAttribute(oList.getParent(), oAttr, iSelectedIndex, true);
			setHeaderText(oList.getParent());
			getTopList(oList)._selectionChanged(oAttr);
		}
		oList.destroy();
		if(fCallback){
			fCallback();
		}
	};

	var oListRef = oList.getDomRef();
	if(oListRef){
		animate(jQuery(oListRef), true, 0, function(jRef) {
			jRef.css("overflow", "hidden");
		}, fFinalize);
	}else{
		fFinalize();
	}
};


//Creates a new ExactList for the given attribute if the attribute is selected and does not have a corresponding list yet.
//If the attribute has a corresponding list already this list is returned.
var createExactListForAttribute = function(oList, oAttribute) {
	if(oAttribute.getSelected()){
		var aAttributes = oAttribute.getAttributesInternal(true);
		if(aAttributes.length > 0){
			var oSubList;
			if(oAttribute.getChangeListener()){
				oSubList = sap.ui.getCore().byId(oAttribute.getChangeListener().id);
			}else{
				oSubList = new sap.ui.ux3.ExactList();
			}

			oSubList.setData(oAttribute);
			return oSubList;
		}
	}

	return null;
};


//Sets the selection property of the given attribute and all its sub-attributes to false.
//Additionally the given index in the lists ListBox is unselected. ExactLists which corresponds
//to the cleared attributes are closed if bSkipNotify is not set.
var clearAttribute = function(oList, oAttribute, iSelectedIndex, bSkipNotify){
	oList._lb.removeSelectedIndex(iSelectedIndex);
	oAttribute._clearSelection();
	if(!bSkipNotify){
		var aSubLists = oList.getSubLists();
		for(var i=0; i<aSubLists.length; i++){
			if(aSubLists[i].getData() === oAttribute.getId()){
				close(aSubLists[i], true);
			}
		}
	}
};


//Removes the change listener which is attached to the lists attribute.
var clearChangeListener = function(oList) {
	var oAttr = oList._getAtt();
	if(oAttr && oAttr.getChangeListener() && oAttr.getChangeListener().id === oList.getId()) {
		oAttr.setChangeListener(null);
	}
};


//Returns the top most list.
var getTopList = function(oList) {
	if(oList._isTop()){
		return oList;
	}
	if(!oList._oTopList){
		oList._oTopList = getTopList(oList.getParent());
	}
	return oList._oTopList;
};


var getOrCreateListItem = function(oAttribute){
	var oItem;
	if(oAttribute.__oItem){
		oItem = oAttribute.__oItem;
		if(oItem.getText() != oAttribute.getText()){
			oItem.setText(oAttribute.getText());
		}
		if(oItem.getKey() != oAttribute.getId()){
			oItem.setKey(oAttribute.getId());
		}
	}else{
		oItem = new sap.ui.core.ListItem({text:oAttribute.getText(), key: oAttribute.getId()});
		oAttribute.exit = function() {
			if(sap.ui.ux3.ExactAttribute.prototype.exit){
				sap.ui.ux3.ExactAttribute.prototype.exit.apply(oAttribute, []);
			}
			this.__oItem.destroy();
			this.__oItem = null;
		};
		oAttribute.__oItem = oItem;
	}
	return oItem;
};


}());


//Override docu of the "internal" aggregation subLists.

/**
 * Getter for aggregation <code>subLists</code>.<br/>
 * The sub ExactLists of this list. This aggregation must not be maintained from outside. The control automatically takes care to fill this aggregation according to the given ExactAttribute.
 *
 * @return {sap.ui.ux3.ExactList[]}
 * @protected
 */

/**
 * Inserts a subList into the aggregation named <code>subLists</code>.
 *
 * @param {sap.ui.ux3.ExactList}
 *          oSubList the subList to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the subList should be inserted at; for
 *             a negative value of <code>iIndex</code>, the subList is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the subList is inserted at
 *             the last position
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @protected
 */

/**
 * Adds some subList <code>oSubList</code>
 * to the aggregation named <code>subLists</code>.
 *
 * @param {sap.ui.ux3.ExactList}
 *            oSubList the subList to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @protected
 */

/**
 * Removes an subList from the aggregation named <code>subLists</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactList} vSubList the subList to remove or its index or id
 * @return {sap.ui.ux3.ExactList} the removed subList or null
 * @protected
 */

/**
 * Removes all the controls in the aggregation named <code>subLists</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactList[]} an array of the removed elements (might be empty)
 * @protected
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ExactList</code> in the aggregation named <code>subLists</code>
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactList}
 *            oSubList the subList whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @protected
 */

/**
 * Destroys all the subLists in the aggregation
 * named <code>subLists</code>.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @protected
 */

}; // end of sap/ui/ux3/ExactList.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FacetFilter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.FacetFilter.
jQuery.sap.declare("sap.ui.ux3.FacetFilter");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FacetFilter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getVisibleItemCountMode visibleItemCountMode} : sap.ui.ux3.VisibleItemCountMode (default: sap.ui.ux3.VisibleItemCountMode.Fixed)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLists lists} : sap.ui.ux3.FacetFilterList[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * FacetFilter Control.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.FacetFilter
 */
sap.ui.core.Control.extend("sap.ui.ux3.FacetFilter", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"visibleItemCountMode" : {type : "sap.ui.ux3.VisibleItemCountMode", group : "Appearance", defaultValue : sap.ui.ux3.VisibleItemCountMode.Fixed}
	},
	aggregations : {
    	"lists" : {type : "sap.ui.ux3.FacetFilterList", multiple : true, singularName : "list"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.FacetFilter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.FacetFilter.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.ux3.FacetFilter#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.ux3.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilter#setVisible
 * @function
 */


/**
 * Getter for property <code>visibleItemCountMode</code>.
 * If the value is "Auto" - the Facet Filter takes the whole available height. If "Fixed" , then the default number of Facet Filter Items (5) is visible.
 *
 * Default value is <code>Fixed</code>
 *
 * @return {sap.ui.ux3.VisibleItemCountMode} the value of property <code>visibleItemCountMode</code>
 * @public
 * @name sap.ui.ux3.FacetFilter#getVisibleItemCountMode
 * @function
 */

/**
 * Setter for property <code>visibleItemCountMode</code>.
 *
 * Default value is <code>Fixed</code> 
 *
 * @param {sap.ui.ux3.VisibleItemCountMode} oVisibleItemCountMode  new value for property <code>visibleItemCountMode</code>
 * @return {sap.ui.ux3.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilter#setVisibleItemCountMode
 * @function
 */


/**
 * Getter for aggregation <code>lists</code>.<br/>
 * Facet Filter list represents the list of the filter values and the title of this list.
 * 
 * @return {sap.ui.ux3.FacetFilterList[]}
 * @public
 * @name sap.ui.ux3.FacetFilter#getLists
 * @function
 */


/**
 * Inserts a list into the aggregation named <code>lists</code>.
 *
 * @param {sap.ui.ux3.FacetFilterList}
 *          oList the list to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the list should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the list is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the list is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilter#insertList
 * @function
 */

/**
 * Adds some list <code>oList</code> 
 * to the aggregation named <code>lists</code>.
 *
 * @param {sap.ui.ux3.FacetFilterList}
 *            oList the list to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilter#addList
 * @function
 */

/**
 * Removes an list from the aggregation named <code>lists</code>.
 *
 * @param {int | string | sap.ui.ux3.FacetFilterList} vList the list to remove or its index or id
 * @return {sap.ui.ux3.FacetFilterList} the removed list or null
 * @public
 * @name sap.ui.ux3.FacetFilter#removeList
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>lists</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.FacetFilterList[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.FacetFilter#removeAllLists
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.FacetFilterList</code> in the aggregation named <code>lists</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.FacetFilterList}
 *            oList the list whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.FacetFilter#indexOfList
 * @function
 */
	

/**
 * Destroys all the lists in the aggregation 
 * named <code>lists</code>.
 * @return {sap.ui.ux3.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilter#destroyLists
 * @function
 */


// Start of sap\ui\ux3\FacetFilter.js

}; // end of sap/ui/ux3/FacetFilter.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FacetFilterList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.FacetFilterList.
jQuery.sap.declare("sap.ui.ux3.FacetFilterList");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FacetFilterList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: true)</li>
 * <li>{@link #getDisplaySecondaryValues displaySecondaryValues} : boolean (default: false)</li>
 * <li>{@link #getSelectedKeys selectedKeys} : string[]</li>
 * <li>{@link #getShowCounter showCounter} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.ListItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.FacetFilterList#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * List to be used with the FacetFilter control. The control is not intended to be used stand alone.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.FacetFilterList
 */
sap.ui.core.Control.extend("sap.ui.ux3.FacetFilterList", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"multiSelect" : {type : "boolean", group : "Behavior", defaultValue : true},
		"displaySecondaryValues" : {type : "boolean", group : "Misc", defaultValue : false},
		"selectedKeys" : {type : "string[]", group : "Misc", defaultValue : null},
		"showCounter" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	aggregations : {
    	"items" : {type : "sap.ui.core.ListItem", multiple : true, singularName : "item"}, 
    	"controls" : {type : "sap.ui.commons.ListBox", multiple : true, singularName : "control", visibility : "hidden"}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.FacetFilterList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.FacetFilterList.extend
 * @function
 */

sap.ui.ux3.FacetFilterList.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>title</code>.
 * The title of this list.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.ux3.FacetFilterList#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilterList#setTitle
 * @function
 */


/**
 * Getter for property <code>multiSelect</code>.
 * Specifies whether multiple or single selection is used.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * @name sap.ui.ux3.FacetFilterList#getMultiSelect
 * @function
 */

/**
 * Setter for property <code>multiSelect</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bMultiSelect  new value for property <code>multiSelect</code>
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilterList#setMultiSelect
 * @function
 */


/**
 * Getter for property <code>displaySecondaryValues</code>.
 * Specifies whether the text values from the additionalText property (see sap.ui.core.ListItems) shall be displayed.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displaySecondaryValues</code>
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.FacetFilterList#getDisplaySecondaryValues
 * @function
 */

/**
 * Setter for property <code>displaySecondaryValues</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplaySecondaryValues  new value for property <code>displaySecondaryValues</code>
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.FacetFilterList#setDisplaySecondaryValues
 * @function
 */


/**
 * Getter for property <code>selectedKeys</code>.
 * Array of type string containing the selected keys.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>selectedKeys</code>
 * @public
 * @name sap.ui.ux3.FacetFilterList#getSelectedKeys
 * @function
 */

/**
 * Setter for property <code>selectedKeys</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aSelectedKeys  new value for property <code>selectedKeys</code>
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilterList#setSelectedKeys
 * @function
 */


/**
 * Getter for property <code>showCounter</code>.
 * Specifies whether the counter for all entries is shown.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCounter</code>
 * @public
 * @name sap.ui.ux3.FacetFilterList#getShowCounter
 * @function
 */

/**
 * Setter for property <code>showCounter</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCounter  new value for property <code>showCounter</code>
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilterList#setShowCounter
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * The filter values that are presented as a list.
 * 
 * @return {sap.ui.core.ListItem[]}
 * @public
 * @name sap.ui.ux3.FacetFilterList#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.ListItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilterList#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.ListItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilterList#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.ListItem} vItem the item to remove or its index or id
 * @return {sap.ui.core.ListItem} the removed item or null
 * @public
 * @name sap.ui.ux3.FacetFilterList#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.ListItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.FacetFilterList#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.ListItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.ListItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.FacetFilterList#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilterList#destroyItems
 * @function
 */


/**
 * On Select event. 
 *
 * @name sap.ui.ux3.FacetFilterList#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of the FacetFilterList taht fires the event.
 * @param {int[]} oControlEvent.getParameters.selectedIndices Array of selected Indices.
 * @param {sap.ui.core.ListItem[]} oControlEvent.getParameters.selectedItems Array of selected Items.
 * @param {boolean} oControlEvent.getParameters.all If it is true, then Item All is selected. That means all items in the list are selected - no filter is set.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.ux3.FacetFilterList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FacetFilterList</code>.<br/> itself. 
 *  
 * On Select event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FacetFilterList</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilterList#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.ux3.FacetFilterList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FacetFilterList#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of the FacetFilterList taht fires the event.</li>
 * <li>'selectedIndices' of type <code>int[]</code> Array of selected Indices.</li>
 * <li>'selectedItems' of type <code>sap.ui.core.ListItem[]</code> Array of selected Items.</li>
 * <li>'all' of type <code>boolean</code> If it is true, then Item All is selected. That means all items in the list are selected - no filter is set.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FacetFilterList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FacetFilterList#fireSelect
 * @function
 */


// Start of sap\ui\ux3\FacetFilterList.js
jQuery.sap.require('sap.ui.commons.ListBox'); // unlisted dependency retained


(function() {

/**
 * Does the setup when the control is created.
 * @private
 */
sap.ui.ux3.FacetFilterList.prototype.init = function(){

    // Get the translatable text
	this._oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");

	//For later use
	//this._bAccMode = sap.ui.getCore().getConfiguration().getAccessibility();
	//this._bRtlMode = sap.ui.getCore().getConfiguration().getRTL();

	//Create the used ListBox control
	this._oListBox = new sap.ui.commons.ListBox(this.getId() + "-lb");
	this._oListBox.setScrollTop(0);
	this._oListBox.setValueTextAlign("Begin");
	this._oListBox.setDisplaySecondaryValues(this.getDisplaySecondaryValues());
	this._oListBox.setDisplayIcons(false);
	this._oListBox.setEditable(true);
	this._oListBox.setEnabled(true);
	this._oListBox.setVisible(true);
	this._oListBox.setAllowMultiSelect(this.getMultiSelect());
	this._oListBox.addAriaLabelledBy(this.getId() + "-head-txt");
	var that=this;
	//Attach to the ListBox select event
	this._oListBox.attachSelect(function(oEvent) {
		that.onSelect(that, oEvent);
	});
	this.addAggregation("controls", this._oListBox);
	this._oItemAll = new sap.ui.core.ListItem({text: this._oResBundle.getText("FACETFILTER_ALL", [0]), key:"sapUiFacetFilter_ALL"});
	this._oListBox.addItem(this._oItemAll);
};

sap.ui.ux3.FacetFilterList.prototype.setMultiSelect = function(bMultiSelect) {
	this._oListBox.setAllowMultiSelect(bMultiSelect);
	this.setProperty("multiSelect", bMultiSelect, true);
};

sap.ui.ux3.FacetFilterList.prototype.setDisplaySecondaryValues = function(bDisplaySecondaryValues) {
	this._oListBox.setDisplaySecondaryValues(bDisplaySecondaryValues);
	this.setProperty("displaySecondaryValues", bDisplaySecondaryValues, true);
};

sap.ui.ux3.FacetFilterList.prototype.addItem = function(oItem) {
	this._oListBox.addItem(oItem);
	if (!oItem.getKey() || jQuery.trim(oItem.getKey()) == "" ){
		oItem.setKey("generatedkey" + this.indexOfItem(oItem));
	}
	this.updateText4All();
};

sap.ui.ux3.FacetFilterList.prototype.insertItem = function(oItem, iIndex) {
	this._oListBox.insertItem(oItem, iIndex + 1); // +1 because of entry "all" on the fist position.
	if (!oItem.getKey() || jQuery.trim(oItem.getKey()) == "" ){
		oItem.setKey("generatedkey" + this.indexOfItem(oItem));
	}
	this.updateText4All();
};

sap.ui.ux3.FacetFilterList.prototype.removeItem = function(oItem) {
	this._oListBox.removeItem(oItem);
	this.updateText4All();
};

sap.ui.ux3.FacetFilterList.prototype.removeAllItems = function() {
	this._oListBox.removeAllItems();
	this._oListBox.addItem(this._oItemAll);
	this.updateText4All();
};

sap.ui.ux3.FacetFilterList.prototype.destroyItems = function() {
	this._oListBox.removeItem(this._oItemAll);
	this._oListBox.destroyItems();
	this._oListBox.addItem(this._oItemAll);
	this.updateText4All();
};

sap.ui.ux3.FacetFilterList.prototype.indexOfItem = function(oItem) {
	var iIndex = this._oListBox.indexOfItem(oItem);
	if (iIndex > -1) { // index values -1, -2 and 0 stay unchanged
		iIndex = iIndex - 1;
	}
	return iIndex;
};

sap.ui.ux3.FacetFilterList.prototype.getItems = function() {
	var aListItems = this._oListBox.getItems();
	var aItems = [];
	for(var i=1; i<aListItems.length; i++){
		aItems.push(aListItems[i]);
	}
	return aItems;
}

sap.ui.ux3.FacetFilterList.prototype.setSelectedKeys = function(aSelectedKeys) {
	this.setProperty("selectedKeys", aSelectedKeys);
	this.invalidate(); 
}

sap.ui.ux3.FacetFilterList.prototype.setShowCounter = function(bShowCounter) {
	this.setProperty("showCounter", bShowCounter);
	this.updateText4All();
}

/**
 *
 * @private
 */
sap.ui.ux3.FacetFilterList.prototype.updateText4All = function() {
	if (this.getShowCounter()) {
		this._oItemAll.setText( this._oResBundle.getText("FACETFILTER_ALL", [this._oListBox.getItems().length - 1]));
	} else {
		this._oItemAll.setText( this._oResBundle.getText("FACETFILTER_NO_COUNT"));
	}
};

/**
 * Used for after-rendering initialization.
 *
 * @private
 */
sap.ui.ux3.FacetFilterList.prototype.onBeforeRendering = function() {
	if (this.bFullHeight) {
		//this._oListBox.setHeight("100%");
	} else {
		this._oListBox.setVisibleItems(5);
	}
	
	var aKeys = this.getSelectedKeys();
	if (aKeys && aKeys.length > 0) {
		this._oListBox.setSelectedKeys(aKeys);
		this._bAllOnly = false;
	} else {
		this._oListBox.setSelectedKeys(["sapUiFacetFilter_ALL"]);
		this._bAllOnly = true;
	}
};

sap.ui.ux3.FacetFilterList.prototype.updateItems = function(){

	this.updateAggregation("items");

	var aSelectedKeys = this._oListBox.getSelectedKeys();
	//if no selection at all - mark ALL
	if (aSelectedKeys.length == 0) {
		aSelectedKeys = ["sapUiFacetFilter_ALL"];
		this._bAllOnly = true;
		this._oListBox.setSelectedKeys(aSelectedKeys);
	}

};

//Handles the select event of the used ListBox control
sap.ui.ux3.FacetFilterList.prototype.onSelect = function(oFFList, oEvent) {
    var aSelectedKeys = this._oListBox.getSelectedKeys();
    //if no selection at all - mark ALL
    if (aSelectedKeys.length == 0) {
    	aSelectedKeys = ["sapUiFacetFilter_ALL"];
    	this._bAllOnly = true;
    	this._oListBox.setSelectedKeys(aSelectedKeys);
    }
    var iIndexAll = jQuery.inArray("sapUiFacetFilter_ALL", aSelectedKeys);
    if (iIndexAll > -1) {
    	if (aSelectedKeys.length == 1){
    		this._bAllOnly = true;
    	} else {
    		if (this._bAllOnly) {
    			aSelectedKeys.splice(iIndexAll,1);
    			this._bAllOnly = false;
    		} else {
    			aSelectedKeys = ["sapUiFacetFilter_ALL"];
    			this._bAllOnly = true;
    		}
    		this._oListBox.setSelectedKeys(aSelectedKeys);
    	}
    } else {
    	this._bAllOnly = false;
    }

	this.setProperty("selectedKeys", aSelectedKeys, true);
	
	var aSelectedIndices = [];
	var aSelectedItems = [];
	var aAllSelectedItems = this._oListBox.getSelectedItems();
	if(!this._bAllOnly){
		 for(var i=0; i<aAllSelectedItems.length; i++){
			 if(aAllSelectedItems[i] != this._oItemAll){
				 aSelectedIndices.push(this.indexOfItem(aAllSelectedItems[i]));
				 aSelectedItems.push(aAllSelectedItems[i]);
			 }
		 }
	}
	
	this.fireSelect({
		id:oFFList.getId(),
		all:this._bAllOnly,
		selectedIndices: aSelectedIndices,
		selectedItems: aSelectedItems
	});
};

}());

}; // end of sap/ui/ux3/FacetFilterList.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Feeder') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Feeder.
jQuery.sap.declare("sap.ui.ux3.Feeder");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Feeder.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getThumbnailSrc thumbnailSrc} : sap.ui.core.URI</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getType type} : sap.ui.ux3.FeederType (default: sap.ui.ux3.FeederType.Large)</li>
 * <li>{@link #getPlaceholderText placeholderText} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.Feeder#event:submit submit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This feed control flavor represents a lean common feed, or a comment feed, with a text commit function.
 * The control can be used stand alone or in a multiple way, and generally would be integrated directly into a UIArea.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @experimental Since version 1.2. 
 * The whole Feed/Feeder API is still under discussion, significant changes are likely. Especially text presentation (e.g. @-references and formatted text) is not final. Also the Feed model topic is still open.
 * @name sap.ui.ux3.Feeder
 */
sap.ui.core.Control.extend("sap.ui.ux3.Feeder", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"thumbnailSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"text" : {type : "string", group : "Data", defaultValue : null},
		"type" : {type : "sap.ui.ux3.FeederType", group : "Appearance", defaultValue : sap.ui.ux3.FeederType.Large},
		"placeholderText" : {type : "string", group : "Appearance", defaultValue : null}
	},
	events : {
		"submit" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.Feeder with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.Feeder.extend
 * @function
 */

sap.ui.ux3.Feeder.M_EVENTS = {'submit':'submit'};


/**
 * Getter for property <code>thumbnailSrc</code>.
 * URL to the thumb nail image
 * This property is optional if the feeder is a sub-control of a feed or a feedChunk control. In this case the value of the feed or feddChunk control is used if it's not set. So it must be only set once on the feed or feedChunk control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>thumbnailSrc</code>
 * @public
 * @name sap.ui.ux3.Feeder#getThumbnailSrc
 * @function
 */

/**
 * Setter for property <code>thumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sThumbnailSrc  new value for property <code>thumbnailSrc</code>
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feeder#setThumbnailSrc
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The text for the Feeder. @References are supported.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.ux3.Feeder#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feeder#setText
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type and size of the Feeder
 *
 * Default value is <code>sap.ui.ux3.FeederType.Large</code>
 *
 * @return {sap.ui.ux3.FeederType} the value of property <code>type</code>
 * @public
 * @name sap.ui.ux3.Feeder#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>sap.ui.ux3.FeederType.Large</code> 
 *
 * @param {sap.ui.ux3.FeederType} oType  new value for property <code>type</code>
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feeder#setType
 * @function
 */


/**
 * Getter for property <code>placeholderText</code>.
 * This property could be used for costum placeholder. If it is not set, the default text is used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>placeholderText</code>
 * @public
 * @name sap.ui.ux3.Feeder#getPlaceholderText
 * @function
 */

/**
 * Setter for property <code>placeholderText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPlaceholderText  new value for property <code>placeholderText</code>
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feeder#setPlaceholderText
 * @function
 */


/**
 * Event is fired when the entered text is submitted 
 *
 * @name sap.ui.ux3.Feeder#submit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.text The text that is submitted
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'submit' event of this <code>sap.ui.ux3.Feeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Feeder</code>.<br/> itself. 
 *  
 * Event is fired when the entered text is submitted 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Feeder</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feeder#attachSubmit
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'submit' event of this <code>sap.ui.ux3.Feeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feeder#detachSubmit
 * @function
 */

/**
 * Fire event submit to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'text' of type <code>string</code> The text that is submitted</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Feeder#fireSubmit
 * @function
 */


// Start of sap\ui\ux3\Feeder.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained


/**
 * This file defines behavior for the control,
 */

sap.ui.ux3.Feeder.prototype.init = function(){
	this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	this.oSendButton = new sap.ui.commons.Button( this.getId() + "-send", {
			style: sap.ui.commons.ButtonStyle.Emph,
			icon: "sap-icon://feeder-arrow"
		}).setParent(this);
	this.oSendButton.attachEvent('press', this.handleSendButtonPress, this); // attach event this way to have the right this-reference in handler

};

/*
 * as onBeforeRendering only runs while re-rendering this module is called in renderer
 */
sap.ui.ux3.Feeder.prototype.initSendButton = function(){
	if (this.getText() == "") {
		// no re-rendering as button is not rendered now.
		this.oSendButton.setProperty('enabled', false, true);
	}

};

sap.ui.ux3.Feeder.prototype.exit = function(){
	this.rb = undefined;
	this.oInput = undefined;
	if(this.oSendButton){
		this.oSendButton.destroy();
		delete this.oSendButton;
	}
};

/**
 * After rendering, keep the input field jQuery object as attribute
 * for reuse
 *
 * @private
 */
sap.ui.ux3.Feeder.prototype.onAfterRendering = function () {
	this.oInput = this.$("input");
};

/**
 * handler for click event
 *
 * @private
 */
sap.ui.ux3.Feeder.prototype.onclick = function(oEvent){

	var sTargetId = oEvent.target.getAttribute( 'ID' );

	switch ( sTargetId ){
	case ( this.getId() + '-send' ):
		// Click on send button (should be handled in button)
	break;
	case ( this.getId() + '-input'):
		// Click on input field

	break;
	default:

	break;
	}

};

/**
 * handler for focusIn
 *
 * If the Feeder is empty the default text must be cleared
 * @private
 */
sap.ui.ux3.Feeder.prototype.onfocusin = function(oEvent){

	this.oInput.find(".sapUiFeederEmptyText").remove();

};

/**
 * handler for focusOut
 *
 * If the Feeder is empty the default text written
 * @private
 */
sap.ui.ux3.Feeder.prototype.onfocusout = function(oEvent){

	var sText = this.oInput.text();
	if(sText == ""){
		this.oInput.empty(); // to remove invisible line breaks and so on
		this.oInput.append(sap.ui.ux3.FeederRenderer.getEmptyTextInfo(this));
	}

	this.setProperty("text", sText, true); // no rerendering!

};

// overrides sap.ui.core.Element.getFocusDomRef()
sap.ui.ux3.Feeder.prototype.getFocusDomRef = function(){
	return this.getDomRef("input");
};

/**
 * handler for keyUp
 *
 * if text is entered the button must be enables, if empty it must be disabled
 * @private
 */
sap.ui.ux3.Feeder.prototype.onkeyup = function(oEvent){

	if(this.oInput.text() == ""){
		this.oSendButton.setEnabled(false);
	}else{
		this.oSendButton.setEnabled(true);
	}

	//Clean input so we avoid having invisible DOM content
//	if(!this.oInput.text()){
//		this.oInput.empty();
//	}

};

/**
 * Handler for send-button press
 *
 * @private
 */
sap.ui.ux3.Feeder.prototype.handleSendButtonPress = function(oEvent){

	var sText = this.getMultilineText(this.oInput);
	this.setProperty("text", sText, true); // no rerendering!
	this.fireSubmit({text: sText});
	this.setText(''); // clear text after submit

};

/**
 * get multiline text from input DIV
 *
 * @param {object} [oInput] jQuery object of the input field
 *
 * @private
 */
sap.ui.ux3.Feeder.prototype.getMultilineText = function(oInput) {

	function parseText(nodes) {

		var node;
		var sText = '';

		for (var i = 0; i < nodes.length; i++) {
			node = nodes[i];

			// text / cdata
			if (node.nodeType === 3 || node.nodeType === 4) {

				// ignore non-breakable space in IE
				if (!(!!sap.ui.Device.browser.internet_explorer && node.nodeValue === '\xA0')) {
					sText += node.nodeValue.replace(/\n/g, ''); // filter out line breaks in text-nodes
				}
			}

			// check for "linebreaking"-nodes
			if (node.nodeName === 'DIV' ||
					node.nodeName ===  'P' ||
					(node.nodeName === 'BR' && !!!sap.ui.Device.browser.webkit)) { // ignore BR in webkit

				// ignore last <br> with type="_moz" in mozilla
				if (node.nodeName === 'BR' &&
					!!sap.ui.Device.browser.firefox &&
					i === nodes.length - 1 &&
					jQuery(node).attr("type") === "_moz") {
					continue;
				}

				// do not add a newline if no text was found until now (IE)
				if (!(!!sap.ui.Device.browser.internet_explorer && sText === '') &&

					// same as above but only for <P> and webkit/mozilla
					!((!!sap.ui.Device.browser.firefox || !!sap.ui.Device.browser.webkit) && sText === '' && node.nodeName ===  'P') &&

					// ignore <P>'s containing linebreaks only (\n)
					!(!!sap.ui.Device.browser.webkit && node.nodeName ===  'P' && node.textContent.match(/^(\n)*$/))) {

					sText += '\n';
				}

			}

			// parse child elements, ignore comments in mozilla
			if (node.nodeType !== 8) {
				sText += parseText(node.childNodes);
			}

		}

		return sText;
	}

	return parseText(oInput.get(0).childNodes);
};

/*
 * Overwrite standard getter for thumbnail source:
 * If not set and feeder is child of a Feed or FeedChunk use the thumbnailsource of the parent
 * So it must not be set manually for each sub-control and is always in sync
 */
sap.ui.ux3.Feeder.prototype.getThumbnailSrc = function() {
	var sThumbnailSrc =  this.getProperty("thumbnailSrc");

	if (!sThumbnailSrc || sThumbnailSrc == "") {
		var oParent = this.getParent();
		if (oParent &&(oParent instanceof sap.ui.ux3.Feed || oParent instanceof sap.ui.ux3.FeedChunk)) {
			sThumbnailSrc = oParent.getFeederThumbnailSrc();
		}
	}

	return sThumbnailSrc;
};

sap.ui.ux3.Feeder.prototype.onpaste = function(oEvent){

	// call after paste function delayed to have content already pasted (in the moment only needed in FireFox)
	if (!!sap.ui.Device.browser.firefox) {
		jQuery.sap.delayedCall(10, this, "onAfterPaste");
	}

};

sap.ui.ux3.Feeder.prototype.onAfterPaste = function(){

	// if pasted from MS Word in FireFox text is longer that contenteditable DIV
	// -> add overflow:hidden to PRE elements
	var aChildren = this.oInput.get(0).childNodes;

	for ( var i = 0; i < aChildren.length; i++) {
		var oChild = aChildren[i];
		if (oChild.nodeName == "PRE") {
			jQuery(oChild).css("overflow", "hidden");
		}
	}

};
}; // end of sap/ui/ux3/Feeder.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.NavigationBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.NavigationBar.
jQuery.sap.declare("sap.ui.ux3.NavigationBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NavigationBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getToplevelVariant toplevelVariant} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.ux3.NavigationItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : string | sap.ui.ux3.NavigationItem</li>
 * <li>{@link #getAssociatedItems associatedItems} : string | sap.ui.ux3.NavigationItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.NavigationBar#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Provides enhanced navigation capabilities and is the parent control of NavigationItem. It is displayed in the form of a horizontal line
 * with switching markers depending on the currently selected item. The size of an item which is currently chosen by the user is enlarged. In the case
 * that a large number of items are defined for the bar, this is made transparent to the user by showing symbols for scrolling options (forwards and backwards)
 * to see the next or previous items.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.NavigationBar
 */
sap.ui.core.Control.extend("sap.ui.ux3.NavigationBar", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setAssociatedItems", "isSelectedItemValid"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"toplevelVariant" : {type : "boolean", group : "Misc", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "item"}, 
    	"overflowMenu" : {type : "sap.ui.commons.Menu", multiple : false, visibility : "hidden"}
	},
	associations : {
		"selectedItem" : {type : "sap.ui.ux3.NavigationItem", multiple : false}, 
		"associatedItems" : {type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "associatedItem"}
	},
	events : {
		"select" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.NavigationBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.NavigationBar.extend
 * @function
 */

sap.ui.ux3.NavigationBar.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>toplevelVariant</code>.
 * Defines whether the navigation bar shall have top-level appearance
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>toplevelVariant</code>
 * @public
 * @name sap.ui.ux3.NavigationBar#getToplevelVariant
 * @function
 */

/**
 * Setter for property <code>toplevelVariant</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bToplevelVariant  new value for property <code>toplevelVariant</code>
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationBar#setToplevelVariant
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.ux3.NavigationBar#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationBar#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * If the navigation items need to have a different parent than the NavigationBar, alternatively the associatedItems association can be used.
 * The NavigationBar follows the approach to use the items aggregation. If this aggregation is empty, associatedItems is used.
 * 
 * <strong>Note</strong>: this is the default aggregation for NavigationBar.
 * @return {sap.ui.ux3.NavigationItem[]}
 * @public
 * @name sap.ui.ux3.NavigationBar#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationBar#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationBar#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.ux3.NavigationItem} vItem the item to remove or its index or id
 * @return {sap.ui.ux3.NavigationItem} the removed item or null
 * @public
 * @name sap.ui.ux3.NavigationBar#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.NavigationItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.NavigationBar#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.NavigationItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.NavigationBar#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationBar#destroyItems
 * @function
 */


/**
 * The selected NavigationItem.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedItem</code> association, or null
 * @public
 * @name sap.ui.ux3.NavigationBar#getSelectedItem
 * @function
 */

/**
 * The selected NavigationItem.
 *
 * @param {string | sap.ui.ux3.NavigationItem} vSelectedItem 
 *    Id of an element which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationBar#setSelectedItem
 * @function
 */


	
/**
 * This association is ignored as long as the items aggregation is used; and supposed to be used alternatively when the items should be aggregated by other
 * entities.
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.ux3.NavigationBar#getAssociatedItems
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.ux3.NavigationItem} vAssociatedItem
 *    Id of a associatedItem which becomes an additional target of this <code>associatedItems</code> association.
 *    Alternatively, a associatedItem instance may be given. 
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationBar#addAssociatedItem
 * @function
 */

/**
 * @param {int | string | sap.ui.ux3.NavigationItem} vAssociatedItem the associatedItem to remove or its index or id
 * @return {string} the id of the removed associatedItem or null
 * @public
 * @name sap.ui.ux3.NavigationBar#removeAssociatedItem
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.NavigationBar#removeAllAssociatedItems
 * @function
 */

	
/**
 * Event is fired when an item is selected by the user 
 *
 * @name sap.ui.ux3.NavigationBar#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId The ID of the newly selected NavigationItem.
 * @param {sap.ui.ux3.NavigationItem} oControlEvent.getParameters.item The newly selected NavigationItem.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.ux3.NavigationBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.NavigationBar</code>.<br/> itself. 
 *  
 * Event is fired when an item is selected by the user 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.NavigationBar</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationBar#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.ux3.NavigationBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationBar#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> The ID of the newly selected NavigationItem.</li>
 * <li>'item' of type <code>sap.ui.ux3.NavigationItem</code> The newly selected NavigationItem.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.ux3.NavigationBar#fireSelect
 * @function
 */


/**
 * Replaces the currently associated items with the ones in the given array
 *
 * @name sap.ui.ux3.NavigationBar.prototype.setAssociatedItems
 * @function
 * @param {sap.ui.ux3.NavigationItem[]} 
 *         aItems
 *         The items to associate

 * @type sap.ui.ux3.NavigationBar
 * @public
 */


/**
 * Returns whether there is a selectedItem set which is actually present in the items aggregation; or, if the aggregation is empty, in the associatedItems association.
 *
 * @name sap.ui.ux3.NavigationBar.prototype.isSelectedItemValid
 * @function

 * @type boolean
 * @public
 */


// Start of sap\ui\ux3\NavigationBar.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.dom'); // unlisted dependency retained


sap.ui.ux3.NavigationBar.SCROLL_STEP = 250; // how many pixels to scroll with every overflow arrow click
//sap.ui.ux3.NavigationBar._MAX_ITEM_WIDTH = 300;

sap.ui.ux3.NavigationBar.prototype.init = function() {
	this._bPreviousScrollForward = false; // remember the item overflow state
	this._bPreviousScrollBack = false;
	this._iLastArrowPos = -100; // this property is always read and applied as "left"/"right" depending on RTL configuration
	this._bRtl = sap.ui.getCore().getConfiguration().getRTL();

	this.allowTextSelection(false);


	this.startScrollX = 0;
	this.startTouchX = 0;
	var that = this;

	// Initialize the ItemNavigation
	this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation().setCycling(false);
	this.addDelegate(this._oItemNavigation);

	if (jQuery.sap.touchEventMode === "ON") {
		var fnTouchStart = function(evt) {
			evt.preventDefault();

			// stop any inertia scrolling
			if (that._iInertiaIntervalId) {
				window.clearInterval(that._iInertiaIntervalId);
			}

			that.startScrollX = that.getDomRef("list").scrollLeft;
			that.startTouchX = evt.touches[0].pageX;
			that._bTouchNotMoved = true;
			that._lastMoveTime = new Date().getTime();
		};

		var fnTouchMove = function(evt) {
			var dx = evt.touches[0].pageX - that.startTouchX;

			var oListRef = that.getDomRef("list");
			var oldScrollLeft = oListRef.scrollLeft;
			var newScrollLeft = that.startScrollX - dx;
			oListRef.scrollLeft = newScrollLeft;
			that._bTouchNotMoved = false;

			// inertia scrolling: prepare continuation even after touchend by calculating the current velocity
			var dt = new Date().getTime() - that._lastMoveTime;
			that._lastMoveTime = new Date().getTime();
			if (dt > 0) {
				that._velocity = (newScrollLeft - oldScrollLeft) / dt;
			}

			evt.preventDefault();
		};

		var fnTouchEnd = function(evt) {
			if (that._bTouchNotMoved === false) { // swiping ends now
				evt.preventDefault();

				// add some inertia... continue scrolling with decreasing velocity
				var oListRef = that.getDomRef("list");
				var dt = 50;
				var endVelocity = Math.abs(that._velocity / 10); // continue scrolling until the speed has decreased to a fraction (v/10 means 11 iterations with slowing-down factor 0.8)
				that._iInertiaIntervalId = window.setInterval(function(){
					that._velocity = that._velocity * 0.80;
					var dx = that._velocity * dt;
					oListRef.scrollLeft = oListRef.scrollLeft + dx;
					if (Math.abs(that._velocity) < endVelocity) {
						window.clearInterval(that._iInertiaIntervalId);
						that._iInertiaIntervalId = undefined;
					}
				}, dt);

			} else if (that._bTouchNotMoved === true) { //touchstart and touchend without move is a click; trigger it directly to avoid the usual delay
				that.onclick(evt);
				evt.preventDefault();
			} else {
				// touchend without corresponding start
				// do nothing special
			}
			that._bTouchNotMoved = undefined;
			that._lastMoveTime = undefined;
		};

		this.ontouchstart = fnTouchStart;
		this.ontouchend = fnTouchEnd;
		this.ontouchmove = fnTouchMove;
	}

};

sap.ui.ux3.NavigationBar.prototype.exit = function () {
	if (this._oItemNavigation) {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		delete this._oItemNavigation;
	}

	// no super.exit() to call
};


sap.ui.ux3.NavigationBar.prototype.onBeforeRendering = function() {
	// stop the periodic overflow checker
	if (this._checkOverflowIntervalId) {
		jQuery.sap.clearIntervalCall(this._checkOverflowIntervalId);
		this._checkOverflowIntervalId = null;
	}

	if (!!sap.ui.Device.browser.firefox) { // TODO: feature detection... not used yet because of performance implications (may involve creating elements)
		this.$().unbind("DOMMouseScroll", this._handleScroll);
	} else {
		this.$().unbind("mousewheel", this._handleScroll);
	}

	var arrow = this.getDomRef("arrow");
	this._iLastArrowPos = arrow ? parseInt(this._bRtl ? arrow.style.right : arrow.style.left, 10) : -100;
};

/**
 * Calculates the (initial) position of the indicator-arrow and the overflow-arrows
 * 
 * @private
 */
sap.ui.ux3.NavigationBar.prototype._calculatePositions = function() {
	var oDomRef = this.getDomRef();

	var oListDomRef = oDomRef.firstChild;
	var of_back = this.getDomRef("ofb");
	var of_fw = this.getDomRef("off");

	// re-initialize display of scroll arrows
	this._bPreviousScrollForward = false;
	this._bPreviousScrollBack = false;
	this._checkOverflow(this.getDomRef().firstChild, this.getDomRef("ofb"), this.getDomRef("off"));

	// paint selection arrow in the right place
	var selItem = sap.ui.getCore().byId(this.getSelectedItem());
	if (selItem) {
		this._checkOverflow(oListDomRef, of_back, of_fw);
		var $Arrow = this.$("arrow");
		var arrowWidth = $Arrow.outerWidth();
		var targetPos = sap.ui.ux3.NavigationBar._getArrowTargetPos(selItem.getId(), arrowWidth, this._bRtl);
		if (!this._bRtl) {
			$Arrow[0].style.left = targetPos+"px";
		} else {
			$Arrow[0].style.right = targetPos+"px";
		}
	}
};

/**
 * Attaches to a themechange and recalculates the positions of the arrows in the NavigationBar
 */
sap.ui.ux3.NavigationBar.prototype.onThemeChanged = function() {
	if (this.getDomRef()) {
		this._calculatePositions();
	}
};


sap.ui.ux3.NavigationBar.prototype.onAfterRendering = function() {
	var oDomRef = this.getDomRef();

	// start the periodic checking for overflow of the item area
	var oListDomRef = oDomRef.firstChild;
	var of_back = this.getDomRef("ofb");
	var of_fw = this.getDomRef("off");
	this._checkOverflowIntervalId = jQuery.sap.intervalCall(350, this, "_checkOverflow", [oListDomRef,of_back,of_fw]);

	// bind a scroll handler to the workset item area
	if (!!sap.ui.Device.browser.firefox) { // TODO: feature detection... not used yet because of performance implications (may involve creating elements)
		jQuery(oDomRef).bind("DOMMouseScroll", jQuery.proxy(this._handleScroll, this));
	} else {
		jQuery(oDomRef).bind("mousewheel", jQuery.proxy(this._handleScroll, this));
	}

	this._calculatePositions();
	
	this._updateItemNavigation();
	
	// Workaround for sporadic weird scrolling behavior in NavigationBar when there is 
	// mobile content in the Shell.
	// TODO: We should get to the bottom of why this happens, but after 6 hours of debugging, I give up.
	// See for example CSS 0120061532 0002361191 2013 - HPAs had the same problems
	// This happens in the BC as well as GC theme
	var $NavBar = this.$();
	$NavBar.on("scroll", function() {
		$NavBar.children().scrollTop(0);
		$NavBar.scrollTop(0);
	});
};


sap.ui.ux3.NavigationBar.prototype._updateItemNavigation = function() {
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		// reinitialize the ItemNavigation after rendering
		var iSelectedDomIndex = -1;
		var sSelectedId = this.getSelectedItem();

		var $ItemRefs = jQuery(oDomRef).children().children("li").children().not(".sapUiUx3NavBarDummyItem");
		$ItemRefs.each(function(index, element) {
			if (element.id == sSelectedId) {
				iSelectedDomIndex = index;
			}
		});

		this._oItemNavigation.setRootDomRef(oDomRef);
		this._oItemNavigation.setItemDomRefs($ItemRefs.toArray());
		this._oItemNavigation.setSelectedIndex(iSelectedDomIndex);
	}
};


sap.ui.ux3.NavigationBar.prototype.onsapspace = function(oEvent) {
	this._handleActivation(oEvent);
};

sap.ui.ux3.NavigationBar.prototype.onclick = function(oEvent) {
	this._handleActivation(oEvent);
};


sap.ui.ux3.NavigationBar.prototype._handleActivation = function(oEvent) {
	var sTargetId = oEvent.target.id;

	if (sTargetId) {
		var sId = this.getId();
		
		// For items: do not navigate away! Stay on the page and handle the click in-place. Right-click + "Open in new Tab" still works.
		// For scroll buttons: Prevent IE from firing beforeunload event -> see CSN 4378288 2012
		oEvent.preventDefault(); 

		if (sTargetId == sId + "-ofb") {
			// scroll back/left button
			this._scroll(-sap.ui.ux3.NavigationBar.SCROLL_STEP, 500);

		} else if (sTargetId == sId + "-off") {
			// scroll forward/right button
			this._scroll(sap.ui.ux3.NavigationBar.SCROLL_STEP, 500);
		} else if (sTargetId == sId + "-oflt" || sTargetId == sId + "-ofl") {
			// Overflow Button has been activated
			this._showOverflowMenu();
		} else {
			// should be one of the items - select it
			
			var item = sap.ui.getCore().byId(sTargetId);
			if (item
					&& (sTargetId != this.getSelectedItem())
					&& (sap.ui.getCore().byId(sTargetId) instanceof sap.ui.ux3.NavigationItem)) {
				// select the item and fire the event
				if (this.fireSelect({item:item,itemId:sTargetId})) {
					this.setAssociation("selectedItem", item, true); // avoid rerendering, animate
					this._updateSelection(sTargetId);
				}
			}
		}
	}
};


/**
 * Return the overflow Menu, creates it if it does not exist. 
 * 
 * @returns {sap.ui.commons.Menu}
 */
sap.ui.ux3.NavigationBar.prototype._getOverflowMenu = function() {
	var oMenu = this.getAggregation("overflowMenu");
	if (!oMenu || this._menuInvalid) {
		// TODO: Check with new destroy-behavior: The Menu might not be there because it was already destroyed. In that case this might create a memory leak.
		if (oMenu) {
			oMenu.destroyAggregation("items", true);
		} else {
			oMenu = new sap.ui.commons.Menu();
		}

		var aItems = this._getCurrentItems();
		var that = this;
		var sSelectedId = this.getSelectedItem();
		
		for (var i = 0; i < aItems.length; ++i) {
			var oNavItem = aItems[i];
			
			var oMenuItem = new sap.ui.commons.MenuItem(oNavItem.getId() + "-overflowItem", {
				text : oNavItem.getText(),
				visible : oNavItem.getVisible(),
				// Like the normal NavigationBar Items, disabled items are shown and handled
				// like enabled items. The application can check the item for its 
				// enabled-property
				/* enabled : oNavItem.getEnabled(), */ 
				icon : sSelectedId == oNavItem.getId() ? "sap-icon://accept" : null,
				select : (function(oNavItem) { return function(oEvent) {
					that._handleActivation({ 
						target : { id : oNavItem.getId() },
						preventDefault : function() { /* Ignore */ }
					});
				};})(oNavItem)
			});
			oMenu.addAggregation("items", oMenuItem, true);
		}

		this.setAggregation("overflowMenu", oMenu, true);
		this._menuInvalid = false;
	}
	
	return oMenu;
};

/**
 * Returns the items added to the items aggregation, or (if empty) the items that are
 * referred to in the associatedItems association.
 */
sap.ui.ux3.NavigationBar.prototype._getCurrentItems = function() {
	var aItems = this.getItems();
	if (aItems.length < 1) {
		aItems = this.getAssociatedItems();

		var oCore = sap.ui.getCore();
		for (var i = 0; i < aItems.length; ++i) {
			aItems[i] = oCore.byId(aItems[i]);
		}
	}
	
	return aItems;
};


/**
 * Shows the menu items that do not fit into the navigation bar. Or in the case of overflow being
 * set to MenuAndButtons: All items (since we cannot know what is currently scrolled into view).
 */
sap.ui.ux3.NavigationBar.prototype._showOverflowMenu = function() {
	var oMenu = this._getOverflowMenu();
	var oTarget = this.$("ofl").get(0);

	oMenu.open(
		true, // First item highlighted. Check whether this is the correct behavior
		oTarget,
		sap.ui.core.Popup.Dock.EndTop,
		sap.ui.core.Popup.Dock.CenterCenter,
		oTarget
	);
};


/**
 * Visually adapts the NavigationBar to the new selection, using animations instead of re-rendering.
 *
 * @param sItemId may be null, which means all selection is removed
 * @private
 */
sap.ui.ux3.NavigationBar.prototype._updateSelection = function(sItemId) {
	this._menuInvalid = true;

	// update the css classes to make the selected item larger etc.
	var $newSel = jQuery.sap.byId(sItemId);
	$newSel.attr("tabindex", "0").attr("aria-checked", "true");
	$newSel.parent().addClass("sapUiUx3NavBarItemSel");
	$newSel.parent().parent().children().each(function(){
		var a = this.firstChild;
		if (a && (a.id != sItemId) && (a.className.indexOf("Dummy") == -1)) {
			jQuery(a).attr("tabindex", "-1"); // includes arrow and dummy, but does not hurt TODO?
			jQuery(a).parent().removeClass("sapUiUx3NavBarItemSel");
			jQuery(a).attr("aria-checked", "false");
		}
	});

	// let the ItemNavigation know about the new selection
	var iSelectedDomIndex = $newSel.parent().index();
	if (iSelectedDomIndex > 0) {
		iSelectedDomIndex--; // if a selected element is found, its index in the ItemNavigation is the DOM index minus the dummy element, which is the first sibling
	}
	this._oItemNavigation.setSelectedIndex(iSelectedDomIndex);

	// make the arrow slide to the selected item
	var $Arrow = this.$("arrow");
	var arrowWidth = $Arrow.outerWidth();
	var targetPos = sap.ui.ux3.NavigationBar._getArrowTargetPos(sItemId, arrowWidth, this._bRtl);
	$Arrow.stop(); // stop any ongoing animation
	var animation_1 = this._bRtl ? {right:targetPos+"px"} : {left:targetPos+"px"};
	$Arrow.animate(animation_1, 500, "linear");
	var that = this;
	window.setTimeout(function(){ // because the items resize (for 300ms), interrupt and adjust the animation in the middle
		targetPos = sap.ui.ux3.NavigationBar._getArrowTargetPos(sItemId, arrowWidth, that._bRtl);
		$Arrow.stop();
		var animation_2 = that._bRtl ? {right:targetPos+"px"} : {left:targetPos+"px"};
		$Arrow.animate(animation_2, 200, "linear", function(){
			var item = jQuery.sap.domById(sItemId);
			that._scrollItemIntoView(item);
		});
	}, 300);
};

sap.ui.ux3.NavigationBar.prototype._scrollItemIntoView = function(item) {
	if (!item) {
		return;
	}
	
	var li = jQuery(item.parentNode);
	var ul = li.parent();
	var targetPos = undefined;
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();

	// special handling for first and last item to not only scroll them into view but to scroll to the very start/end
	var index = li.index() - 1; // -1 because of leading dummy item
	if (index == 0) {
		targetPos = bRtl ? (ul[0].scrollWidth - ul.innerWidth() + 20) : 0; // +20 to account for margins etc.
	} else if (index == li.siblings().length - 2) { // siblings() excludes the item itself, but (apart from the already subtracted dummy) also the arrow => -2
		targetPos = bRtl ? 0 : (ul[0].scrollWidth - ul.innerWidth() + 20); // +20 to account for margins etc.
	} else {
		var liLeft = li.position().left;
		var ulScrollLeft = bRtl ? ul.scrollLeftRTL() : ul.scrollLeft();
		
		if (liLeft < 0) {
			// item cut at the left => scroll right to make it left-aligned
			targetPos = ulScrollLeft + liLeft;
		} else {
			var rightDistance = ul.innerWidth() - (liLeft + li.outerWidth(true));  // the distance from the right item edge to the end of the ul; negative if the item is cut
			if (rightDistance < 0) {
				targetPos = ulScrollLeft - rightDistance; // rightDistance is negative, add its amount to the current scroll amount
				// but now it might be that we scroll so far to the left that the left part of the item is hidden, which may not happen!
				targetPos = Math.min(targetPos, ulScrollLeft + liLeft);
			}
		}
	}

	if (targetPos !== undefined) {
		if (bRtl) {
			targetPos = jQuery.sap.denormalizeScrollLeftRTL(targetPos, ul.get(0)); // fix browser differences*/
		}
		ul.stop(true, true).animate({scrollLeft: targetPos}); // should be a string like "-50px"
	}
};

/**
 * Calculates the required position of the selection arrow to highlight the item with the given ID.
 * If null is given, the position will be outside the visible area.
 *
 * If bRight is set, the distance to the *right* border will be returned (instead of the normal position from left),
 * this can be used for RTL mode.
 *
 * @static
 * @private
 */
sap.ui.ux3.NavigationBar._getArrowTargetPos = function(sTargetItemId, arrowWidth, bRight) {
	var $Item = jQuery.sap.byId(sTargetItemId);
	if ($Item.length > 0) {
		var width = $Item.outerWidth(); //Math.min($Item.outerWidth(), sap.ui.ux3.NavigationBar._MAX_ITEM_WIDTH);
		var leftDistance = Math.round($Item[0].offsetLeft + (width/2) - (arrowWidth/2));
		if (!bRight) {
			return leftDistance;
		} else {
			return $Item.parent().parent().innerWidth() - leftDistance - arrowWidth;
		}
	} else {
		return -100;
	}
};


/**
 * Handles a mouse scroll event, scrolling the items if possible.
 *
 * @param oEvent
 * @private
 */
sap.ui.ux3.NavigationBar.prototype._handleScroll = function(oEvent) {
	if (oEvent.type == "DOMMouseScroll") { // Firefox
		var scrollAmount = oEvent.originalEvent.detail * 40; // in FF you get 3 ticks at once, *40 gives reasonable speed
		this._scroll(scrollAmount, 50);          // scroll fast to avoid temporal overlap
	} else { // other browsers
		var scrollAmount = -oEvent.originalEvent.wheelDelta; // in IE you get 120 as basic amount, direction is inverted
		this._scroll(scrollAmount, 50);          // scroll fast to avoid temporal overlap
	}
	oEvent.preventDefault(); // do not scroll the window (?)
};


/**
 * Scrolls the items if possible, using an animation.
 *
 * @param iDelta how far to scroll
 * @param iDuration how long to scroll (ms)
 * @private
 */
sap.ui.ux3.NavigationBar.prototype._scroll = function(iDelta, iDuration) {
	var oDomRef = this.$()[0].firstChild;
	var iScrollLeft = oDomRef.scrollLeft;
	if (!!!sap.ui.Device.browser.internet_explorer && this._bRtl) {
		iDelta = -iDelta;
	} // RTL lives in the negative space
	var iScrollTarget = iScrollLeft+iDelta;
	jQuery(oDomRef).stop(true, true).animate({scrollLeft: iScrollTarget}, iDuration);
};



/**
 * Changes the state of the scroll arrows depending on whether they are required due to overflow.
 *
 * @param oListDomRef the ul tag containing the items
 * @param of_back the backward scroll arrow
 * @param of_fw the forward scroll arrow
 * @private
 */
sap.ui.ux3.NavigationBar.prototype._checkOverflow = function(oListDomRef, of_back, of_fw) {
	if (oListDomRef) {
		var iScrollLeft = oListDomRef.scrollLeft;

		// check whether scrolling to the left is possible
		var bScrollBack = false;
		var bScrollForward = false;

		var realWidth = oListDomRef.scrollWidth;
		var availableWidth = oListDomRef.clientWidth;
		
		if(Math.abs(realWidth-availableWidth) == 1){ // Avoid rounding issues see CSN 1316630 2013
			realWidth = availableWidth;
		}

		if (!this._bRtl) {   // normal LTR mode
			if (iScrollLeft > 0) {
				bScrollBack = true;
			}
			if ((realWidth > availableWidth) && (iScrollLeft + availableWidth < realWidth)) {
				bScrollForward = true;
			}

		} else {  // RTL mode
			var $List = jQuery(oListDomRef);
			if ($List.scrollLeftRTL() > 0) {
				bScrollForward = true;
			}
			if ($List.scrollRightRTL() > 0) {
				bScrollBack = true;
			}
		}

		// only do DOM changes if the state changed to avoid periodic application of identical values
		if ((bScrollForward != this._bPreviousScrollForward) || (bScrollBack != this._bPreviousScrollBack)) {
			this._bPreviousScrollForward = bScrollForward;
			this._bPreviousScrollBack = bScrollBack;
			this.$().toggleClass("sapUiUx3NavBarScrollBack", bScrollBack)
					.toggleClass("sapUiUx3NavBarScrollForward", bScrollForward);
		}
	}
};




/* API methods */

/* overwritten association methods */

sap.ui.ux3.NavigationBar.prototype.setSelectedItem = function(vItem) {
	this.setAssociation("selectedItem", vItem, true); // avoid rerendering
	if (this.getDomRef()) {
		var sItemId = (!vItem || (typeof(vItem) == "string")) ? vItem : vItem.getId();
		this._updateSelection(sItemId); // animate selection
	}
};


/* overridden aggregation items */

sap.ui.ux3.NavigationBar.prototype.addItem = function(oItem) {
	this._menuInvalid = true;
	return this.addAggregation("items", oItem);
};

sap.ui.ux3.NavigationBar.prototype.destroyItems = function() {
	this._menuInvalid = true;
	return this.destroyAggregation("items");
};

sap.ui.ux3.NavigationBar.prototype.insertItem = function(oItem, iIndex) {
	this._menuInvalid = true;
	return this.insertAggregation("items", oItem, iIndex);
};

sap.ui.ux3.NavigationBar.prototype.removeItem = function(oItem) {
	this._menuInvalid = true;
	return this.removeAggregation("items", oItem);
};

sap.ui.ux3.NavigationBar.prototype.removeAllItems = function() {
	this._menuInvalid = true;
	return this.removeAllAggregation("items");
};


/* overridden association associatedItems */

sap.ui.ux3.NavigationBar.prototype.addAssociatedItem = function(vItemOrId) {
	this._menuInvalid = true;
	return this.addAssociation("associatedItems", vItemOrId);
};

sap.ui.ux3.NavigationBar.prototype.removeAssociatedItem = function(vItemOrId) {
	this._menuInvalid = true;
	return this.removeAssociation("associatedItems", vItemOrId);
};

sap.ui.ux3.NavigationBar.prototype.removeAllAssociatedItems = function() {
	this._menuInvalid = true;
	return this.removeAllAssociation("associatedItems");
};


/* API method implementations */

sap.ui.ux3.NavigationBar.prototype.setAssociatedItems = function(aItems /* bResetArrowPosition */) { // second parameter is currently not in the public API
	jQuery.sap.assert(jQuery.isArray(aItems), "aItems must be an array");

	var oListDomRef = this.getDomRef("list");

	// remove old items
	this.removeAllAssociation("associatedItems", true);

	// add new items
	for (var i = 0; i < aItems.length; i++) {
		this.addAssociation("associatedItems", aItems[i], true);
	}

	// if already rendered, update the UI
	if (oListDomRef) {
		var $FocusRef = jQuery(oListDomRef).find(":focus");
		var focusId = ($FocusRef.length > 0) ? $FocusRef.attr("id") : null;

		if (arguments.length > 1 && typeof arguments[1] === "boolean") { // checking for the second, hidden parameter "bResetArrowPosition"
			this._iLastArrowPos = -100;
		} else {
			var arrow = this.getDomRef("arrow");
			this._iLastArrowPos = parseInt(this._bRtl ? arrow.style.right : arrow.style.left, 10);
		}
		
		oListDomRef.innerHTML = "";
		var rm = sap.ui.getCore().createRenderManager();
		
		sap.ui.ux3.NavigationBarRenderer.renderItems(rm, this);
		
		rm.flush(oListDomRef, true);
		rm.destroy();

		// restore focus
		var oNewFocusRef;
		if (focusId && (oNewFocusRef = jQuery.sap.domById(focusId))) {
			jQuery.sap.focus(oNewFocusRef);
		}

		this._updateSelection(this.getSelectedItem());

		// update the item navigation, as the item HTML has changed
		this._updateItemNavigation();
	}

	return this;
};


sap.ui.ux3.NavigationBar.prototype.isSelectedItemValid = function() {
	var selId = this.getSelectedItem();
	if (!selId) {
		return false;
	} // no selection means no selected item out of those which are present

	var items = this.getItems();
	if (!items || items.length == 0) {
		items = this.getAssociatedItems();
		for (var i = 0; i < items.length; i++) {
			if (items[i] == selId) {
				return true;
			}
		}
	} else {
		for (var i = 0; i < items.length; i++) {
			if (items[i].getId() == selId) {
				return true;
			}
		}
	}
	return false;
};

}; // end of sap/ui/ux3/NavigationBar.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.NavigationItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.NavigationItem.
jQuery.sap.declare("sap.ui.ux3.NavigationItem");

jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained



/**
 * Constructor for a new NavigationItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHref href} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSubItems subItems} <strong>(default aggregation)</strong> : sap.ui.ux3.NavigationItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Is the item to be used within the NavigationBar
 * @extends sap.ui.core.Item
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.NavigationItem
 */
sap.ui.core.Item.extend("sap.ui.ux3.NavigationItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"href" : {type : "sap.ui.core.URI", group : "Behavior", defaultValue : null}
	},
	defaultAggregation : "subItems",
	aggregations : {
    	"subItems" : {type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "subItem"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.NavigationItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.NavigationItem.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Whether the NavigationItem is currently visible. When making NavigationItems invisible at runtime it is the application's responsibility to make sure it is not the currently selected one - or to select another one in this case.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.NavigationItem#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.ux3.NavigationItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.NavigationItem#setVisible
 * @function
 */


/**
 * Getter for property <code>href</code>.
 * Defines the link target URL. This property is optional and should only be set when required!
 * The use of the href property is to not only allow users to navigate in-place by left-clicking NavigationItems, but also to allow right-click and then "open in new tab" or "open in new window". As long as href is not set, an empty window will open and stay blank. But when href is set, the new window/tab will load this URL and it is the application's responsibility to display what the user expects (e.g. the Shell, with the respective NavigationItem being selected).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>href</code>
 * @public
 * @name sap.ui.ux3.NavigationItem#getHref
 * @function
 */

/**
 * Setter for property <code>href</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sHref  new value for property <code>href</code>
 * @return {sap.ui.ux3.NavigationItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationItem#setHref
 * @function
 */


/**
 * Getter for aggregation <code>subItems</code>.<br/>
 * Any NavigationItems on the next hierarchy level connected to this NavigationItem
 * 
 * <strong>Note</strong>: this is the default aggregation for NavigationItem.
 * @return {sap.ui.ux3.NavigationItem[]}
 * @public
 * @name sap.ui.ux3.NavigationItem#getSubItems
 * @function
 */


/**
 * Inserts a subItem into the aggregation named <code>subItems</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *          oSubItem the subItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the subItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the subItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the subItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.NavigationItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationItem#insertSubItem
 * @function
 */

/**
 * Adds some subItem <code>oSubItem</code> 
 * to the aggregation named <code>subItems</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oSubItem the subItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.NavigationItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationItem#addSubItem
 * @function
 */

/**
 * Removes an subItem from the aggregation named <code>subItems</code>.
 *
 * @param {int | string | sap.ui.ux3.NavigationItem} vSubItem the subItem to remove or its index or id
 * @return {sap.ui.ux3.NavigationItem} the removed subItem or null
 * @public
 * @name sap.ui.ux3.NavigationItem#removeSubItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>subItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.NavigationItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.NavigationItem#removeAllSubItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.NavigationItem</code> in the aggregation named <code>subItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oSubItem the subItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.NavigationItem#indexOfSubItem
 * @function
 */
	

/**
 * Destroys all the subItems in the aggregation 
 * named <code>subItems</code>.
 * @return {sap.ui.ux3.NavigationItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NavigationItem#destroySubItems
 * @function
 */


// Start of sap\ui\ux3\NavigationItem.js

}; // end of sap/ui/ux3/NavigationItem.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.NotificationBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.NotificationBar.
jQuery.sap.declare("sap.ui.ux3.NotificationBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NotificationBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisibleStatus visibleStatus} : sap.ui.ux3.NotificationBarStatus (default: sap.ui.ux3.NotificationBarStatus.Default)</li>
 * <li>{@link #getResizeEnabled resizeEnabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMessageNotifier messageNotifier} : sap.ui.core.Element</li>
 * <li>{@link #getNotifiers notifiers} : sap.ui.core.Element[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.NotificationBar#event:display display} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.NotificationBar#event:resize resize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A NotificationBar is a "toolbar" that can be added to a page to show messages and notifications from the application.
 * Its position, height and width is inherited from the element that the notification bar is added to.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.NotificationBar
 */
sap.ui.core.Control.extend("sap.ui.ux3.NotificationBar", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"hasItems"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"visibleStatus" : {type : "sap.ui.ux3.NotificationBarStatus", group : "Misc", defaultValue : sap.ui.ux3.NotificationBarStatus.Default},
		"resizeEnabled" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
    	"messageNotifier" : {type : "sap.ui.core.Element", multiple : false}, 
    	"notifiers" : {type : "sap.ui.core.Element", multiple : true, singularName : "notifier"}
	},
	events : {
		"display" : {}, 
		"resize" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.NotificationBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.NotificationBar.extend
 * @function
 */

sap.ui.ux3.NotificationBar.M_EVENTS = {'display':'display','resize':'resize'};


/**
 * Getter for property <code>visibleStatus</code>.
 * This property displays the bar corresponding to given status
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.ui.ux3.NotificationBarStatus} the value of property <code>visibleStatus</code>
 * @public
 * @name sap.ui.ux3.NotificationBar#getVisibleStatus
 * @function
 */

/**
 * Setter for property <code>visibleStatus</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.ui.ux3.NotificationBarStatus} oVisibleStatus  new value for property <code>visibleStatus</code>
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NotificationBar#setVisibleStatus
 * @function
 */


/**
 * Getter for property <code>resizeEnabled</code>.
 * This property enables the bar to be resized by the user.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizeEnabled</code>
 * @public
 * @name sap.ui.ux3.NotificationBar#getResizeEnabled
 * @function
 */

/**
 * Setter for property <code>resizeEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizeEnabled  new value for property <code>resizeEnabled</code>
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NotificationBar#setResizeEnabled
 * @function
 */


/**
 * Getter for aggregation <code>messageNotifier</code>.<br/>
 * Notifier that shows messages
 * 
 * @return {sap.ui.core.Element}
 * @public
 * @name sap.ui.ux3.NotificationBar#getMessageNotifier
 * @function
 */


/**
 * Setter for the aggregated <code>messageNotifier</code>.
 * @param {sap.ui.core.Element} oMessageNotifier
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NotificationBar#setMessageNotifier
 * @function
 */
	

/**
 * Destroys the messageNotifier in the aggregation 
 * named <code>messageNotifier</code>.
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NotificationBar#destroyMessageNotifier
 * @function
 */


/**
 * Getter for aggregation <code>notifiers</code>.<br/>
 * Notifiers that monitor something within the application and display the corresponding notifications.
 * 
 * @return {sap.ui.core.Element[]}
 * @public
 * @name sap.ui.ux3.NotificationBar#getNotifiers
 * @function
 */


/**
 * Inserts a notifier into the aggregation named <code>notifiers</code>.
 *
 * @param {sap.ui.core.Element}
 *          oNotifier the notifier to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the notifier should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the notifier is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the notifier is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NotificationBar#insertNotifier
 * @function
 */

/**
 * Adds some notifier <code>oNotifier</code> 
 * to the aggregation named <code>notifiers</code>.
 *
 * @param {sap.ui.core.Element}
 *            oNotifier the notifier to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NotificationBar#addNotifier
 * @function
 */

/**
 * Removes an notifier from the aggregation named <code>notifiers</code>.
 *
 * @param {int | string | sap.ui.core.Element} vNotifier the notifier to remove or its index or id
 * @return {sap.ui.core.Element} the removed notifier or null
 * @public
 * @name sap.ui.ux3.NotificationBar#removeNotifier
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>notifiers</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Element[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.NotificationBar#removeAllNotifiers
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation named <code>notifiers</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Element}
 *            oNotifier the notifier whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.NotificationBar#indexOfNotifier
 * @function
 */
	

/**
 * Destroys all the notifiers in the aggregation 
 * named <code>notifiers</code>.
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NotificationBar#destroyNotifiers
 * @function
 */


/**
 * Event is fired when the bar wants to be displayed depending on given flag. This allows the application to decide what to do. 
 *
 * @name sap.ui.ux3.NotificationBar#display
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.show Indicates if the bar wants to be shown or hidden
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'display' event of this <code>sap.ui.ux3.NotificationBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.NotificationBar</code>.<br/> itself. 
 *  
 * Event is fired when the bar wants to be displayed depending on given flag. This allows the application to decide what to do. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.NotificationBar</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NotificationBar#attachDisplay
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'display' event of this <code>sap.ui.ux3.NotificationBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.NotificationBar#detachDisplay
 * @function
 */

/**
 * Fire event display to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'show' of type <code>boolean</code> Indicates if the bar wants to be shown or hidden</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.NotificationBar#fireDisplay
 * @function
 */


/**
 * This event is thrown when the bar was resized (to the different valid states: Min, Max, Default, None). The event itself can be used from SAPUI5-version 1.12.2 since there was a bug in the previous versions firing this event. 
 *
 * @name sap.ui.ux3.NotificationBar#resize
 * @event
 * @since 1.12.2
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.NotificationBarStatus} oControlEvent.getParameters.status The corresponding status to which the bar was resized. The corresponding heights can be taken for the bar's CSS file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'resize' event of this <code>sap.ui.ux3.NotificationBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.NotificationBar</code>.<br/> itself. 
 *  
 * This event is thrown when the bar was resized (to the different valid states: Min, Max, Default, None). The event itself can be used from SAPUI5-version 1.12.2 since there was a bug in the previous versions firing this event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.NotificationBar</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * @name sap.ui.ux3.NotificationBar#attachResize
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'resize' event of this <code>sap.ui.ux3.NotificationBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * @name sap.ui.ux3.NotificationBar#detachResize
 * @function
 */

/**
 * Fire event resize to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'status' of type <code>sap.ui.ux3.NotificationBarStatus</code> The corresponding status to which the bar was resized. The corresponding heights can be taken for the bar's CSS file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.NotificationBar} <code>this</code> to allow method chaining
 * @protected
 * @since 1.12.2
 * @name sap.ui.ux3.NotificationBar#fireResize
 * @function
 */


/**
 * This method checks if the NotificationBar has any items (notifications or messages) to show and returns true if there are any items to show. So the application should decide if the bar should be displayed.
 *
 * @name sap.ui.ux3.NotificationBar.prototype.hasItems
 * @function

 * @type boolean
 * @public
 */


// Start of sap\ui\ux3\NotificationBar.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/**
 * This file defines behavior for the control
 */
sap.ui.core.Control.extend("sap.ui.ux3.NotificationBar.NotifierView", {
	renderMessages : function(oRm) {
		oRm.write("<div");
		oRm.writeAttribute("id", this.getId() + "-content");
		oRm.addClass("sapUiNotifierContent");
		oRm.writeClasses();
		oRm.write(">");

		/*
		 * By setting the counter before running through loop this ensures that
		 * the most recent added message will be displayed first within rendered
		 * Callout
		 */
		var aMessages = this.getMessages();
		var i = aMessages.length - 1;
		var bFirst = true;

		for (; i >= 0; i--) {
			// Since first and last message don't need a
			// separator ->
			// prevent it
			if (!bFirst || (i == 0 && aMessages.length > 1)) {
				// if not the first message is being processed
				// OR
				// if the last available message is being
				// processed but
				// only
				// if there are more than one messages in total

				oRm.write("<div");
				oRm.addClass("sapUiNotificationBarCltSep");
				oRm.writeClasses();
				oRm.write(">");

				oRm.write("</div>");
			} else {
				// After first message was processed start
				// inserting a
				// separator
				bFirst = false;
			}

			var oMessage = aMessages[i];
			if (oMessage._message && oMessage._message.getReadOnly()) {
				oMessage.addStyleClass("sapUiNotifierMessageReadOnly");
			}
			oRm.renderControl(oMessage);
		}

		oRm.write("</div>"); // sapUiNotifierContent
	},

	metadata : {
		properties : {
			"title" : "string",
			"visibleItems" : "int",
			"renderMode" : {
				type : "string",
				defaultValue : "callout"
			}
		},

		aggregations : {
			"messages" : "sap.ui.ux3.NotificationBar.MessageView"
		}
	},

	init : function() {
		this._oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	},

	exit : function() {
		if (this._renderedControl) {
			delete this._renderedControl;
		}

		delete this._oResBundle;
	},

	getTitle : function() {
		var sTitle = this.getProperty("title");
		var iCount = this.getMessages().length;

		if (iCount > 0) {
			var sKey = "NOTIBAR_NOTIFIER_VIEW_TITLE";
			sTitle = this._oResBundle.getText(sKey, [ sTitle, iCount ]);
		}

		return sTitle;
	},

	renderer : function(oRm, oControl) {
		oRm.write("<div");
		oRm.addClass("sapUiNotifierContainer");
		oRm.writeControlData(oControl);
		oRm.writeClasses();
		oRm.write(">");

		/*
		 * Render title
		 */
		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-title");
		oRm.addClass("sapUiNotifierTitle");
		oRm.writeClasses();
		oRm.write(">");

		oRm.writeEscaped(oControl.getTitle());

		oRm.write("</div>"); // div sapUiNotifierTitle

		/*
		 * Render messages
		 */
		if (oControl.getMessages().length > 0) {
			oControl.renderMessages(oRm);
		}

		oRm.write("</div>"); // sapUiNotifierContainer
	},

	onAfterRendering : function() {
		/*
		 * After all items are rendered it is needed to get the Callout's
		 * height. Since a single message could contain no, little or much text.
		 * So the messages' heights may vary.
		 */
		var $viewContent = this.$("content");
		var $aChildren = $viewContent.children();

		var iTotalHeight = 0, iCount = 0;
		// Used to prevent unneeded method calls within loop
		var iVisibleItems = this.getVisibleItems();

		// i=1 since view's title should be skipped for
		// calculation
		for (var i = 1; i < $aChildren.length; i++) {
			var child = jQuery($aChildren[i]);

			if (child.hasClass("sapUiNotifierMessage")) {
				iCount++;
			}

			var height = child.outerHeight(true);
			iTotalHeight += height;

			if (iCount == iVisibleItems) {
				// I don't know why these 2 pixels are needed
				// additionally
				// but
				// it works :-)
				iTotalHeight += 2;
				$viewContent.css("max-height", iTotalHeight);
			}
		}
	}
});

/**
 * Internal control that renders a single message for the NotificationBar
 * corresponding to its needs
 */
sap.ui.core.Control.extend("sap.ui.ux3.NotificationBar.MessageView", {
	metadata : {
		properties : {
			"text" : "string",
			"timestamp" : "string",
			"icon" : "sap.ui.core.URI"
		}
	},

	renderer : function(oRm, oControl) {
		var sId = oControl.getId();

		oRm.write("<div");
		oRm.writeControlData(oControl);

		oRm.addClass("sapUiNotifierMessage");
		oRm.writeClasses();
		oRm.writeAttribute("tabindex", "0");
		oRm.write(">");

		if (oControl.getIcon()) {
			oRm.write("<div");
			oRm.writeAttribute("id", sId + "-icon");
			oRm.addClass("sapUiNotifierMessageIcon");
			oRm.writeClasses();
			oRm.write(">");

			oRm.write("<img");
			oRm.writeAttribute("src", oControl.getIcon());
			oRm.write("/>");

			oRm.write("</div>");
		}

		oRm.write("<div");
		oRm.writeAttribute("id", sId + "-text");
		oRm.addClass("sapUiNotifierMessageText");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(oControl.getText());
		oRm.write("</div>"); // Text

		oRm.write("<div");
		oRm.writeAttribute("id", sId + "-timestamp");
		oRm.addClass("sapUiNotifierMessageTimestamp");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(oControl.getTimestamp());
		oRm.write("</div>"); // Timestamp

		oRm.write("</div>"); // NotificationItem
	},

	onclick : function(oEvent) {
		// only fire selected event if the message can be selected at all
		if (!this._message.getReadOnly()) {
			var oNotifier = this._message.getParent();

			oNotifier.fireMessageSelected({
				message : this._message,
				notifier : oNotifier
			});
		}
	},

	onsapselect : function(oEvent) {
		this.onclick(oEvent);
	},

	exit : function(oEvent) {
		if (this._message) {
			delete this._message;
		}
	}
});

(function() {
	var fnChangeVisibility = function(that) {
		var bShouldBeVisible = that.hasItems();
		var sStatus = that.getVisibleStatus();

		if (bShouldBeVisible && sStatus === "None") {
			return true;
		} else if (!bShouldBeVisible && sStatus !== "None") {
			return true;
		} else if (!bShouldBeVisible && sStatus !== "Min") {
			return true;
		} else {
			return false;
		}

	};

	/**
	 * This is the eventListener of the NotificationBar. All triggered events
	 * from the bar's notifiers will be caught here.
	 * 
	 * @param {sap.ui.base.Event}
	 *            oEvent the event will all needed stuff. It can contain
	 *            'added', 'removed' or 'openCallout' as a parameter to identify
	 *            the event.
	 */
	var fnChildEventListener = function(oEvent) {
		var oCallout = oEvent.getParameter("callout");

		switch (oEvent.getParameter("type")) {
		case "added":
		case "removed":
			var oNotifier = oEvent.getParameter("notifier");

			if (this.getMessageNotifier() && this.getMessageNotifier().getId() === oNotifier.getId()) {
				// clone the message array to sort it
				var aSortMessages = oNotifier.getMessages().concat(new Array());
				if (aSortMessages.length > 0) {
					// sort ascending the messages via their level
					aSortMessages.sort(sap.ui.core.Message.compareByType);

					var iIndex = aSortMessages.length - 1;
					this._sSeverestMessageLevel = aSortMessages[iIndex].getLevel();
				}
			}

			if (fnChangeVisibility(this)) {
				var bShouldBeVisible = this.hasItems();
				this.fireDisplay({
					show : bShouldBeVisible
				});
			} else {
				/*
				 * Needed if i.e. all messages of a notifier were removed but if
				 * there are still notifications or messages to display
				 */
				this.invalidate();

				/*
				 * Needed if the message is directly removed from the Callout
				 * without any request to the user.
				 */
				if (oEvent.getParameter("type") === "removed") {
					/*
					 * Since the Callout has only one content - the NotifierView -
					 * it can be checked this way. If there is no content the
					 * Callout has been closed already.
					 */
					if (oCallout.getContent().length > 0) {
						var oNotiView = oCallout.getContent()[0];
						var oMessage = oEvent.getParameter("message");

						var aMessageViews = oNotiView.getMessages();
						var tmpMsgView;

						for (var i = 0; i < aMessageViews.length; i++) {
							tmpMsgView = aMessageViews[i];

							if (oMessage.getId() === tmpMsgView._message.getId()) {
								tmpMsgView.destroy();

								/*
								 * A normal invalidate on the NotifierView
								 * doesn't work here since the invalidate is
								 * delegated to the most upper parent -> the
								 * NotificationBar. If the NotificationBar is
								 * rendered it doesn't know something of the
								 * corresponding Callout. It would be possible
								 * to rerender the NotifierView but since the
								 * height of the Callout is reduced the
								 * Callout's position must be fixed as well.
								 * This happens also when the Callout is
								 * rerendered, so it saves some lines of codes
								 * to rerender the Callout itself.
								 */
								oCallout.rerender();

								/*
								 * An open Callout would loose its correct
								 * position due to the re-rendering. The
								 * followOf-functionality of the Popup doesn't
								 * work here, since the opener hasn't moved. See
								 * CSN 1625930 2013
								 */
								oCallout.adjustPosition();
								break;
							}
						}
					}
				}
			}

			break;

		case "openCallout":
			oCallout.destroyContent();

			var oNotifier = oEvent.getParameter("notifier");
			// destroy (renew) views that were previously created in maximized
			// mode
			oNotifier.destroyAggregation("views", true);
			var sId = oNotifier.getId();

			var oMessageNotifier = this.getMessageNotifier();

			if (oMessageNotifier && sId === oMessageNotifier.getId()) {
				sId += "-messageNotifierView";
			} else {
				sId += "-messageView";
			}

			// create control that renders the notifier's messages
			var oNotifierView = new sap.ui.ux3.NotificationBar.NotifierView(sId, {
				title : oNotifier.getTitle(),
				visibleItems : this._visibleItems
			});

			if (oNotifier._bEnableMessageSelect) {
				oNotifierView.addStyleClass("sapUiNotifierSelectable");
			}

			var aMessages = oNotifier.getMessages();
			for (var i = 0; i < aMessages.length; i++) {
				var oView = fnCreateMessageView(aMessages[i], oNotifier, this);
				oNotifierView.addMessage(oView);
			}

			// with adding this aggregation the view is destroyed as well if
			// needed
			oNotifier.addAggregation("views", oNotifierView, true);

			oCallout.addContent(oNotifierView);
			break;
		}
	};

	sap.ui.ux3.NotificationBar.HOVER_ITEM_HEIGHT = 16;

	sap.ui.ux3.NotificationBar.prototype.init = function() {
		this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this._oItemNavigation.setCycling(true);
		this.addDelegate(this._oItemNavigation);

		this._iCalloutWidth = parseInt(250);
		this._iCalloutHeight = parseInt(200);

		this._visibleItems = 5;

		this._eventListener = jQuery.proxy(fnChildEventListener, this);

		// needed within Renderer
		this._oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");

		this._togglerPosition = "50%";
		this._gapMessageArea = "5";

		this._sSeverestMessageLevel = sap.ui.core.MessageType.None;

		// TODO maybe the ResizeHandler should be used
		/*
		 * Frank Weigel: I wonder whether the window.resize is sufficient. If
		 * the NotificationBar is not used top level (e.g. in Shell) but in some
		 * smaller portion of the screen (e.g. Panel), then resizing might occur
		 * without a window.resize. Unfortunately, there is no cross browser
		 * Element.resize event available. Instead, one can use our
		 * ResizeHandler, but this might need more discussion about the Pros and
		 * Cons (ResizeHandler does some kind of polling which is nasty...)
		 */
		jQuery(window).bind("resize", jQuery.proxy(fnOnResize, this));

		this._proxyEnableMessageSelect = jQuery.proxy(fnEnableMessageSelect, this);
	};

	sap.ui.ux3.NotificationBar.prototype.exit = function() {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		delete this._oItemNavigation;

		delete this._iCalloutWidth;
		delete this._iCalloutHeight;

		delete this._visibleItems;

		delete this._eventListener;

		if (this.getMessageNotifier()) {
			var oMN = this.getMessageNotifier();
			oMN._oMessageArea.destroy();
			delete oMN._oMessageArea;
		}

		delete this._resizeFrom;
		delete this._resizeTo;

		delete this._oResBundle;

		delete this._formerVisibleStatus;

		delete this._togglerPosition;
		delete this._gapMessageArea;

		delete this._isHovered;
		delete this._togglerClicked;

		delete this._sSeverestMessageLevel;

		jQuery(window).unbind("resize", fnOnResize);

		delete this._proxyEnableMessageSelect;
	};
	/**
	 * This method creates an instance of the internal control
	 * {sap.ui.ux3.NotificationBar.MessageView} corresponding to the given
	 * message
	 * 
	 * @param {sap.ui.core.Message}
	 *            oMessage from that should be created a view
	 * @returns {sap.ui.ux3.NotificationBar.MessageView}
	 */
	var fnCreateMessageView = function(oMessage, oNotifier, oNotiBar) {
		var oMessageView = new sap.ui.ux3.NotificationBar.MessageView(oNotifier.getId() + "-messageView-" + oMessage.getId(), {
			text : oMessage.getText(),
			timestamp : oMessage.getTimestamp()
		});
		oMessageView._message = oMessage;

		if (oNotifier.sParentAggregationName == "messageNotifier") {
			if (oNotiBar.getVisibleStatus() == sap.ui.ux3.NotificationBarStatus.Max) {
				oMessageView.setIcon(oMessage.getIcon() || oMessage.getDefaultIcon("32x32"));
			} else {
				oMessageView.setIcon(oMessage.getIcon() || oMessage.getDefaultIcon());
			}
		} else {
			oMessageView.setIcon(oMessage.getIcon());
		}

		return oMessageView;
	};

	/**
	 * This attaches the given notifier to all necessary events that a notifier
	 * can trigger. A transformation is needed because 'this' in this method is
	 * the window instance
	 * 
	 * @param {sap.ui.ux3.NotificationBar}
	 *            The bar itself since 'this' is the window's instance
	 * @param {sap.ui.ux3.Notifier}
	 *            oNotifier that should be registered
	 */
	var fnRegisterNotifierToEvents = function(that, oNotifier) {
		oNotifier.attachEvent("_childControlCalling", that._eventListener, that);
	};

	/**
	 * This detaches the given notifier to all necessary events that a notifier
	 * can trigger. A transformation is needed because 'this' in this method is
	 * the window instance
	 * 
	 * @param {sap.ui.ux3.NotificationBar}
	 *            The bar itself since 'this' is the window's instance
	 * @param {sap.ui.ux3.Notifier}
	 *            oNotifier that should be detached
	 */
	var fnDeregisterNotifierFromEvents = function(that, oNotifier) {
		oNotifier.detachEvent("_childControlCalling", that._eventListener, that);
	};

	/*
	 * Add, insert, remove, removeAll methods for notifiers
	 */
	sap.ui.ux3.NotificationBar.prototype.addNotifier = function(oNotifier) {
		if (oNotifier) {
			var bSuppress = (this.getVisibleStatus() == sap.ui.ux3.NotificationBarStatus.None) ? true : false;
			this.addAggregation("notifiers", oNotifier, bSuppress);
			fnRegisterNotifierToEvents(this, oNotifier);
		}

		return this;
	};
	sap.ui.ux3.NotificationBar.prototype.insertNotifier = function(oNotifier, iIndex) {
		if (oNotifier) {
			this.insertAggregation("notifiers", oNotifier, iIndex);
			fnRegisterNotifierToEvents(this, oNotifier);
		}

		return this;
	};
	sap.ui.ux3.NotificationBar.prototype.removeNotifier = function(oNotifier) {
		var oRemovedNotifier = this.removeAggregation("notifiers", oNotifier);
		fnDeregisterNotifierFromEvents(this, oRemovedNotifier);

		return oRemovedNotifier;
	};
	sap.ui.ux3.NotificationBar.prototype.removeAllNotifiers = function() {
		var aChildren = this.removeAllAggregation("notifiers");

		for (var i = 0; i < aChildren.length; i++) {
			var oNotifier = aChildren[i];
			fnDeregisterNotifierFromEvents(this, oNotifier);
		}

		return aChildren;
	};
	sap.ui.ux3.NotificationBar.prototype.destroyNotifiers = function() {
		var aChildren = this.getNotifiers();

		for (var i = 0; i < aChildren.length; i++) {
			var oNotifier = aChildren[i];
			fnDeregisterNotifierFromEvents(this, oNotifier);
		}

		this.destroyAggregation("notifiers");
		return this;
	};

	/**
	 * This function is called when the 'messageSelected' event listener was
	 * attached/detached to the MessageNotifier. If the MessageNotifier is
	 * affected it is invalidated accordingly so the inplace message of the
	 * MessageNotifier is clickable or not and has visual features as if it were
	 * clickable.
	 */
	var fnEnableMessageSelect = function(oEvent) {
		var oMN = this.getMessageNotifier();

		if (oMN && oMN.getId() === oEvent.getParameter("notifier").getId()) {
			oMN.invalidate();
		}
	};

	/*
	 * Set, remove, destroy methods for message notifier
	 */
	sap.ui.ux3.NotificationBar.prototype.setMessageNotifier = function(oMessageNotifier) {

		var oMN = this.getMessageNotifier();
		if (oMN) {
			oMN._oMessageArea.destroy();
			delete oMN._oMessageArea;

			oMN.detachEvent("_enableMessageSelect", this._proxyEnableMessageSelect);
			fnDeregisterNotifierFromEvents(this, oMN);
		}

		this.setAggregation("messageNotifier", oMessageNotifier);

		if (oMessageNotifier) {
			oMessageNotifier._oMessageArea = new sap.ui.ux3.NotificationBar.MessageView(this.getId() + "-inplaceMessage");
			oMessageNotifier._oMessageArea.setParent(oMessageNotifier);

			oMessageNotifier.attachEvent("_enableMessageSelect", this._proxyEnableMessageSelect);
			fnRegisterNotifierToEvents(this, oMessageNotifier);
		}

		return this;
	};
	sap.ui.ux3.NotificationBar.prototype.destroyMessageNotifier = function(oMsgNotifier) {

		var oMN = this.getMessageNotifier();
		if (oMN) {
			oMN._oMessageArea.destroy();
			delete oMN._oMessageArea;

			oMN.detachEvent("_enableMessageSelect", this._proxyEnableMessageSelect);
			fnDeregisterNotifierFromEvents(this, oMN);
		}

		this.destroyAggregation("messageNotifier");

		return this;
	};

	var fnSetResizeClasses = function(that, sStatus) {
		var $That = that.$();

		switch (sStatus) {
		case sap.ui.ux3.NotificationBarStatus.Min:
			$That.addClass("sapUiNotificationBarMinimized");
			break;

		case sap.ui.ux3.NotificationBarStatus.Max:
			var sHeight = that.getHeightOfStatus(that.getVisibleStatus());

			$That.addClass("sapUiNotificationBarMaximized");
			$That.css("height", sHeight);

			var $containers = that.$("containers");
			$containers.css("max-height", sHeight);
			break;

		case sap.ui.ux3.NotificationBarStatus.None:
			if (!that._resizeTo) {
				$That.css("display", "none");
			}
			break;

		case sap.ui.ux3.NotificationBarStatus.Default:
		default:
			$That.removeClass("sapUiNotificationBarMaximized");
			$That.removeClass("sapUiNotificationBarMinimized");

			break;
		}
	};

	var fnResizeStuff = function(that) {
		if (fnWasResized(that)) {
			var sFromHeight = that.getHeightOfStatus(that._resizeFrom);
			var $That = that.$();
			$That.css("height", sFromHeight);

			var sToHeight = that.getHeightOfStatus(that._resizeTo);
			$That.stop().animate({
				height : sToHeight
			}, {
				duration : "fast",
				queue : true,
				always : function() {
					var sStatus = that.getVisibleStatus();
					if (sStatus === "None") {
						$That.css("display", "none");

						if (that.hasItems()) {
							if (that.getMessageNotifier()) {
								var oMN = that.getMessageNotifier();
								oMN.$().css("display", "none");
							}

							if (that.getNotifiers().length > 0) {
								var aNotifiers = that.getNotifiers();
								for (var i = 0; i < aNotifiers.length; i++) {
									aNotifiers[i].$().css("display", "none");
								}
							}
						}
					}

					fnSetResizeClasses(that, sStatus);
					fnResize(that, sStatus);
				}
			});
		} else {
			/*
			 * Setting the correct size of the bar is necessary if the bar is
			 * maximized e.g. and a new message was added and triggered a
			 * re-rendering
			 */
			var sStatus = that.getVisibleStatus();
			fnSetResizeClasses(that, sStatus);
		}

		delete that._resizeFrom;
		delete that._resizeTo;
	};

	var fnSettingWidth = function(that) {
		if (that.getMessageNotifier() && that.getMessageNotifier().hasItems()) {
			var $messageArea = undefined;
			var sId = that.getId() + "-notifiers";
			var $domRef = jQuery.sap.byId(sId);
			if ($domRef.length > 0) {
				var iTotalWidth = parseInt($domRef.width());

				var $children = $domRef.children();

				for (var i = 0; i < $children.length; i++) {
					var $child = jQuery($children[i]);

					if ($child.hasClass("sapUiNotifier")) {
						iTotalWidth -= $child.width();
					} else if ($child.hasClass("sapUiNotifierSeparator")) {
						iTotalWidth -= $child.width();
					} else if ($child.hasClass("sapUiInPlaceMessage")) {
						$messageArea = $child;
					}
				}

				if ($messageArea) {
					// +2 since otherwise the inplace message has no place to be
					// displayed
					iTotalWidth -= that._gapMessageArea + 2;
					$messageArea.css("width", iTotalWidth + "px");
				}
			}
		}
	};

	var fnMouseMoveListener = function(oEvent) {
		var height = jQuery(window).height();

		var oNotiBar = oEvent.data.notibar;
		var $hoverDomRef = oNotiBar.$("hoverItem");

		var clientY = oEvent.clientY;
		var iClientTop = parseInt(clientY, 10);

		/*
		 * Border has to be moved up a little since the IE doesn't react anymore
		 * if the mouse cursor is too close to the boder.
		 */
		var iBorder = height - $hoverDomRef.outerHeight();
		if (oNotiBar._isHovered) {
			if (iClientTop < iBorder) {
				var fnHoverProxy = jQuery.proxy(fnHover, oNotiBar);
				$hoverDomRef.on("mouseleave", fnHoverProxy);

				window.setTimeout(function() {
					var oEvt = jQuery.Event("mouseleave", {
						notibar : oNotiBar
					});
					$hoverDomRef.trigger(oEvt);

					$hoverDomRef.off("mouseleave", fnHoverProxy);
				}, 100);

				delete oNotiBar._isHovered;
			}
		} else {
			if (iClientTop >= iBorder) {
				var fnHoverProxy = jQuery.proxy(fnHover, oNotiBar);
				$hoverDomRef.on("mouseenter", fnHoverProxy);

				window.setTimeout(function() {
					var oEvt = jQuery.Event("mouseenter", {
						notibar : oNotiBar
					});
					$hoverDomRef.trigger(oEvt);

					$hoverDomRef.off("mouseenter", fnHoverProxy);
				}, 100);

				oNotiBar._isHovered = true;
			}
		}
	};

	/*
	 * When the NotiBar is minimized the IE doesn't get the mouseenter and
	 * mouseleave events on the bar's parent element. So it's needed to simulate
	 * these events with checking if the mouse cursor is near the bottom of the
	 * window to manually trigger these events.
	 */
	var simulateMouseEventsForIE = function(oNotiBar) {
		var $doc = jQuery(document);

		if (oNotiBar.getVisibleStatus() === "Min") {
			$doc.on("mousemove", {
				notibar : oNotiBar
			}, fnMouseMoveListener);
		} else {
			$doc.off("mousemove", fnMouseMoveListener);
		}
	};

	/**
	 * @private
	 */
	sap.ui.ux3.NotificationBar.prototype.onAfterRendering = function() {
		this._oItemNavigation.setRootDomRef(this.getDomRef());

		var aItemDomRefs = [];
		var bIsMaximized = this.getVisibleStatus() === sap.ui.ux3.NotificationBarStatus.Max;

		// use different elements for navigation in maximized-mode
		if (bIsMaximized) {
			// add notifiers and messages reverse so the arrow keys can be used
			// properly. Or the whole control of the item navigation is
			// inverted.
			var oMessageNotifier = this.getMessageNotifier();
			if (oMessageNotifier != null) {
				var aMessages = oMessageNotifier.getMessages();
				var sId = oMessageNotifier.getId() + "-messageNotifierView-messageView-";

				for (var i = aMessages.length - 1; i >= 0; i--) {
					var oDomRef = jQuery.sap.domById(sId + aMessages[i].getId());
					if (oDomRef) {
						aItemDomRefs.push(oDomRef);
					}
				}
			}

			var aNotifiers = this.getNotifiers();
			for (var i = 0; i < aNotifiers.length; i++) {
				var aMessages = aNotifiers[i].getMessages();
				var sId = aNotifiers[i].getId() + "-notifierView-messageView-";

				for (var j = aMessages.length - 1; j >= 0; j--) {
					var oDomRef = jQuery.sap.domById(sId + aMessages[j].getId());
					if (oDomRef) {
						aItemDomRefs.push(oDomRef);
					}
				}
			}

		} else {
			var aNotifiers = this.getNotifiers();
			for (var i = 0; i < aNotifiers.length; i++) {
				var oDomRef = aNotifiers[i].getDomRef();
				if (oDomRef) {
					aItemDomRefs.push(oDomRef);
				}
			}

			var oMessageNotifier = this.getMessageNotifier();
			if (oMessageNotifier != null) {
				var oDomRef = oMessageNotifier.getDomRef();
				if (oDomRef) {
					aItemDomRefs.push(oDomRef);
				}

				// add the inplace message to the item navigation as well
				oDomRef = this.getDomRef("inplaceMessage");
				if (oDomRef && jQuery(oDomRef).hasClass("sapUiInPlaceMessageSelectable")) {
					aItemDomRefs.push(oDomRef);
				}
			}
		}

		this._oItemNavigation.setItemDomRefs(aItemDomRefs);

		/*
		 * Stuff for resizing
		 */
		fnResizeStuff(this);

		/*
		 * Calculating of the width to get the correct width for the message
		 * area
		 */
		fnSettingWidth(this);

		/*
		 * Set corresponding color for MessageNotifier's counter and description
		 * for the MessageNotifier
		 */
		fnSetSeverityForMessageNotifier(this, this.getMessageNotifier());

		// set descriptions for all normal notifiers
		fnSetItemsDescription(this);

		if (!!sap.ui.Device.browser.internet_explorer) {
			simulateMouseEventsForIE(this);
		}

		// set toggler always to visible if running on a mobile device
		if (sap.ui.Device.browser.mobile) {
			var $toggler = this.$("toggler");

			if (this.getVisibleStatus() !== sap.ui.ux3.NotificationBarStatus.None) {
				$toggler.css("display", "block");
			} else {
				$toggler.css("display", "none");
			}
		}
	};

	/**
	 * This method sets the corresponding CSS class to the message notifier's
	 * counter to set its corresponding color and sets the corresponding ARIA
	 * information to the notifier's description element
	 * 
	 * @private
	 */
	var fnSetSeverityForMessageNotifier = function(oThis, oMN) {
		if (oMN && oMN.hasItems()) {
			var $messageCount = oMN.$("counter");

			// remove all possible classes
			$messageCount.removeClass("sapUiMessageInformation");
			$messageCount.removeClass("sapUiMessageSuccess");
			$messageCount.removeClass("sapUiMessageWarning");
			$messageCount.removeClass("sapUiMessageError");

			// add new corresponding class
			var sLvl = oThis._sSeverestMessageLevel;
			$messageCount.addClass("sapUiMessage" + sLvl);

			// create key for description text
			var iCount = oMN.getMessages().length;
			var sKey = "NOTIBAR_MESSAGE_NOTIFIER_DESC_LEVEL_" + sLvl.toUpperCase() + iCount === 1 ? "_SING" : "_PL";

			// set description (i.e. "3 messages available: Highest severity
			// "Error")
			fnSetNotifierDescription(oThis, oMN, sKey, iCount);
		}
	};

	/**
	 * Sets all description of all notifiers
	 * 
	 * @private
	 */
	var fnSetItemsDescription = function(oThis) {
		var aNotifiers = oThis.getNotifiers();

		for (var i = 0; i < aNotifiers.length; i++) {
			var iCount = aNotifiers[i].getMessages().length;
			var sKey = "NOTIBAR_NOTIFIER_COUNT_TEXT_" + iCount === 1 ? "SING" : "PL";

			fnSetNotifierDescription(oThis, aNotifiers[i], sKey, iCount);
		}
	};

	var fnSetNotifierDescription = function(oThis, oNotifier, sKey, iCount) {
		var $description = oNotifier.$("description");

		var sMessage = oThis._oResBundle.getText(sKey, [ iCount ]);
		$description.html(sMessage);
	};

	/*
	 * Event listener for mouseenter/mouseleave for NotificationBar's parent
	 * HTML-element
	 */
	var fnHover = function(oEvent) {
		var $toggler = this.$("toggler");

		var bDisplay = ($toggler.css("display") === "block") ? true : false;
		if (bDisplay) {
			// if toggler is being displayed
			if (oEvent.type === "mouseleave") {
				$toggler.css("display", "none");
			}
		} else {
			if (oEvent.type === "mouseenter") {
				$toggler.css("display", "block");
			}
		}
	};

	/*
	 * EventListener when bar was resized
	 */
	var fnOnResize = function(oEvent) {
		/*
		 * Calculating of the width to get the correct width for the message
		 * area
		 */
		fnSettingWidth(this);
	};

	var fnWasResized = function(that) {
		if (that._resizeFrom && that._resizeTo) {
			if (that._resizeFrom != that._resizeTo) {
				return true;
			}
		}

		return false;
	};

	sap.ui.ux3.NotificationBar.prototype.hasItems = function() {
		// Checking all notifiers if any has items
		var mNotifiers = this.getNotifiers();
		if (mNotifiers.length > 0) {
			for (var i = 0; i < mNotifiers.length; i++) {
				var oNotifier = mNotifiers[i];
				if (oNotifier.hasItems()) {
					return true;
				}
			}
		}

		// Checking MessageNotifier if it has items
		if (this.getMessageNotifier()) {
			if (this.getMessageNotifier().hasItems()) {
				return true;
			}
		}

		return false;
	};

	var fnResize = function(oNotiBar, toStatus) {
		var display = "none";
		var $NotiBar = oNotiBar.$();

		switch (toStatus) {
		/*
		 * These cases are only mentioned to prevent running into default
		 */
		case sap.ui.ux3.NotificationBarStatus.Max:
		case sap.ui.ux3.NotificationBarStatus.None:
			break;

		case sap.ui.ux3.NotificationBarStatus.Min:
			/*
			 * Since minimizing doesn't need any re-rendering all necessary
			 * stuff can be done here
			 */
			$NotiBar.stop().animate({
				height : oNotiBar.getHeightOfStatus(toStatus)
			}, {
				duration : "fast",
				queue : true
			});

			$NotiBar.addClass("sapUiNotificationBarMinimized");

			oNotiBar.$("notifiers").css("display", "none");

			display = "block";
			break;

		default:
		case sap.ui.ux3.NotificationBarStatus.Default:
			/*
			 * If bar should be resized from maximized to default a re-rendering
			 * is needed. Otherwise a simple animation and CSS exchange is
			 * enough
			 */
			$NotiBar.stop().animate({
				height : oNotiBar.getHeightOfStatus(toStatus)
			}, {
				duration : "fast",
				queue : true
			});

			$NotiBar.removeClass("sapUiNotificationBarMaximized");
			$NotiBar.removeClass("sapUiNotificationBarMinimized");

			break;
		}

		var $hover = oNotiBar.$("hoverItem");
		$hover.css("display", display);
	};

	sap.ui.ux3.NotificationBar.prototype.onfocusin = function(oEvent) {
		if (this._togglerClicked) {
			delete this._togglerClicked;

			/*
			 * if the bar is minimized and a notifiers still has the focus it is
			 * needed to stop this event to prevent webkit browsers from
			 * scrolling down
			 */
			oEvent.stopImmediatePropagation(true);
		}
	};

	sap.ui.ux3.NotificationBar.prototype.onclick = function(oEvent) {
		/*
		 * if the bar is minimized and a notifiers still has the focus it is
		 * needed to stop this event to prevent webkit browsers from scrolling
		 * down
		 */
		this._togglerClicked = true;
		/*
		 * Prevent that the NotificationBar itselft gets the focus and causes a
		 * (dotted) border around the hover item and/or the bar iteslef
		 */
		this.$().blur();
		var $activeElement = jQuery(document.activeElement);

		fnCloseAllCallouts(this);

		var sId = oEvent.target.id;
		var aSplit = sId.split("-");

		if (aSplit) {
			var sVisibleStatus = this.getVisibleStatus();
			var iIndex = aSplit.length - 1;

			switch (aSplit[iIndex]) {
			case "ArrowUp":
				if (sVisibleStatus === "Min") {
					this.setVisibleStatus("Default");
				} else {
					// if current state is default -> maximize bar
					this.setVisibleStatus("Max");
				}
				break;

			case "ArrowDown":
				if (sVisibleStatus === "Max") {
					this.setVisibleStatus("Default");
				} else {
					// if current state is default -> minimize bar
					this.setVisibleStatus("Min");
				}
				oEvent.preventDefault();
				break;

			case "BarUp":
				if (this._formerVisibleStatus) {
					this.setVisibleStatus(this._formerVisibleStatus);
				} else {
					this.setVisibleStatus("Default");
				}

				break;

			case "BarDown":
				this._formerVisibleStatus = sVisibleStatus;
				this.setVisibleStatus("Min");

				$activeElement.blur();
				break;

			default:
				if ($activeElement.hasClass("sapUiNotifier")) {
					$activeElement.focus();
				} else {
					if (this.hasItems()) {
						var aNotifiers = this.getNotifiers();
						if (aNotifiers.length > 0) {
							var $firstNoti = jQuery(aNotifiers[0]);
							$firstNoti.focus();
						} else {
							var messageNoti = this.getMessageNotifier();
							if (messageNoti) {
								jQuery(messageNoti).focus();
							}
						}
					}
				}
				break;
			}
		}
	};

	sap.ui.ux3.NotificationBar.prototype.onThemeChanged = function(oEvent) {
		if (this.getDomRef()) {
			this.invalidate();
		}
	};

	/**
	 * Forces a close of all Callouts of all notifiers of the NotificationBar.
	 */
	var fnCloseAllCallouts = function(that) {
		var mNotifiers = that.getNotifiers();

		for (var i = 0; i < mNotifiers.length; i++) {
			var oNotifier = mNotifiers[i];

			oNotifier._oCallout.close();
		}

		if (that.getMessageNotifier()) {
			that.getMessageNotifier()._oCallout.close();
		}
	};

	sap.ui.ux3.NotificationBar.prototype.getHeightOfStatus = function(sStatus) {
		var sParam = "";

		if (sStatus == sap.ui.ux3.NotificationBarStatus.Min) {
			sParam = "sapUiNotificationBarHeightMinimized";
		} else if (sStatus == sap.ui.ux3.NotificationBarStatus.Default) {
			sParam = "sapUiNotificationBarHeight";
		} else if (sStatus == sap.ui.ux3.NotificationBarStatus.Max) {
			sParam = "sapUiNotificationBarHeightMaximized";
			sParam = sap.ui.core.theming.Parameters.get(sParam);

			var iIndex = sParam.indexOf("%");
			if (iIndex != -1) {
				var iPercentage = sParam.substring(0, iIndex);
				var iHeight = jQuery(window).height();
				iHeight = parseInt(iHeight / 100 * iPercentage);

				// Ensure that the MaxHeight is at least 1 px larger than the
				// Default
				// Maybe disabling the resize feature would be the better
				// approach in this case
				var _iHeight = parseInt(this.getHeightOfStatus(sap.ui.ux3.NotificationBarStatus.Default));
				if (iHeight < _iHeight) {
					iHeight = _iHeight + 1;
				}
			} else {
				var sMessage = "No valid percantage value given for maximized size. 400px is used";
				jQuery.sap.log.warning(sMessage);

				iHeight = 400;
			}
			return iHeight + "px";
		} else {
			// sStatus == sap.ui.ux3.NotificationBarStatus.None
			return "0px";
		}

		sParam = sap.ui.core.theming.Parameters.get(sParam);
		return sParam;
	};

	sap.ui.ux3.NotificationBar.prototype.setVisibleStatus = function(toStatus) {
		this._resizeFrom = this.getVisibleStatus();
		this._resizeTo = toStatus;

		// skip setting the property if 'toStatus' equals the current status
		if (this._resizeFrom !== this._resizeTo) {
			if (toStatus === sap.ui.ux3.NotificationBarStatus.None) {
				fnCloseAllCallouts(this);

				if (this.getDomRef()) {
					fnResize(this, toStatus);
				} else {
					this.$().css({
						"height" : "0px",
						"display" : "none"
					});
				}
			}

			this.setProperty("visibleStatus", toStatus);

			this.fireResize({
				status : toStatus
			});
		}
	};
}());

}; // end of sap/ui/ux3/NotificationBar.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Notifier') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Notifier.
jQuery.sap.declare("sap.ui.ux3.Notifier");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Notifier.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTitle title} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMessages messages} : sap.ui.core.Message[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.Notifier#event:messageSelected messageSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This element can be docked to a notification bar to show notification items
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.Notifier
 */
sap.ui.core.Element.extend("sap.ui.ux3.Notifier", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"hasItems"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"title" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
    	"messages" : {type : "sap.ui.core.Message", multiple : true, singularName : "message"}, 
    	"views" : {type : "sap.ui.core.Control", multiple : true, singularName : "view", visibility : "hidden"}
	},
	events : {
		"messageSelected" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.Notifier with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.Notifier.extend
 * @function
 */

sap.ui.ux3.Notifier.M_EVENTS = {'messageSelected':'messageSelected'};


/**
 * Getter for property <code>icon</code>.
 * Icon of the control that should be displayed within the corresponding bar
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.ux3.Notifier#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.ux3.Notifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Notifier#setIcon
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Defines the title that should be displayed within the opening popup
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.ux3.Notifier#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.Notifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Notifier#setTitle
 * @function
 */


/**
 * Getter for aggregation <code>messages</code>.<br/>
 * Messages of this notifier.
 * 
 * @return {sap.ui.core.Message[]}
 * @public
 * @name sap.ui.ux3.Notifier#getMessages
 * @function
 */


/**
 * Inserts a message into the aggregation named <code>messages</code>.
 *
 * @param {sap.ui.core.Message}
 *          oMessage the message to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the message should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the message is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the message is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Notifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Notifier#insertMessage
 * @function
 */

/**
 * Adds some message <code>oMessage</code> 
 * to the aggregation named <code>messages</code>.
 *
 * @param {sap.ui.core.Message}
 *            oMessage the message to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Notifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Notifier#addMessage
 * @function
 */

/**
 * Removes an message from the aggregation named <code>messages</code>.
 *
 * @param {int | string | sap.ui.core.Message} vMessage the message to remove or its index or id
 * @return {sap.ui.core.Message} the removed message or null
 * @public
 * @name sap.ui.ux3.Notifier#removeMessage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>messages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Message[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Notifier#removeAllMessages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Message</code> in the aggregation named <code>messages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Message}
 *            oMessage the message whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Notifier#indexOfMessage
 * @function
 */
	

/**
 * Destroys all the messages in the aggregation 
 * named <code>messages</code>.
 * @return {sap.ui.ux3.Notifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Notifier#destroyMessages
 * @function
 */


/**
 * Event is fired when a message of the notifiers was selected. 
 *
 * @name sap.ui.ux3.Notifier#messageSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Message} oControlEvent.getParameters.message The message that was selected
 * @param {sap.ui.ux3.Notifier} oControlEvent.getParameters.notifier The notifier that contains the selected message
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'messageSelected' event of this <code>sap.ui.ux3.Notifier</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Notifier</code>.<br/> itself. 
 *  
 * Event is fired when a message of the notifiers was selected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Notifier</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Notifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Notifier#attachMessageSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'messageSelected' event of this <code>sap.ui.ux3.Notifier</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Notifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Notifier#detachMessageSelected
 * @function
 */

/**
 * Fire event messageSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'message' of type <code>sap.ui.core.Message</code> The message that was selected</li>
 * <li>'notifier' of type <code>sap.ui.ux3.Notifier</code> The notifier that contains the selected message</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Notifier} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Notifier#fireMessageSelected
 * @function
 */


/**
 * This method checks if the notifier has any items.
 *
 * @name sap.ui.ux3.Notifier.prototype.hasItems
 * @function

 * @type boolean
 * @public
 */


// Start of sap\ui\ux3\Notifier.js
jQuery.sap.require('sap.ui.commons.Callout'); // unlisted dependency retained


/**
 * This file defines behavior for the control,
 */

(function() {
	var fBeforeOpen = function() {
		this.fireEvent("_childControlCalling", {
			type : "openCallout",
			callout : this._oCallout,
			notifier : this
		});
	};

	/**
	 * This is to ensure that all content is destroyed when the Callout is
	 * closed. Otherwise the content is destroyed when the Callout should be
	 * opened again. But who knows if the user will really do this :-)?
	 */
	var fCalloutClosed = function(oEvent) {
		if (oEvent.getSource()) {
			oEvent.getSource().destroyContent();
		}
	};

	sap.ui.ux3.Notifier.prototype.hasItems = function() {
		if (this.getMessages().length > 0) {
			return true;
		}
		return false;
	};

	sap.ui.ux3.Notifier.prototype.init = function() {

		/*
		 * Setting a parent isn't needed due to it will be set below when
		 * Callout is set as Tooltip
		 */
		this._oCallout = new sap.ui.commons.Callout(this.getId() + "-callout", {
			beforeOpen : jQuery.proxy(fBeforeOpen, this),
			open : function(oEvent) {
				// to prevent that the Callout moves if the window is scrolled
				this.$().css("position", "fixed");
			},
			close : jQuery.proxy(fCalloutClosed, this),
			collision : "none"
		});
		this._oCallout.addStyleClass("sapUiNotifierCallout");
		if (sap.ui.Device.browser.mobile) {
			// if used on a mobile device the tab-event is transfered into a
			// 'mouseover' to open the Callout. To simulate a real tab-event the
			// open delay of the callout has to be eleminated.
			this._oCallout.setOpenDelay(0);
		}

		/*
		 * Though it seems that these are properties -> they're not. There are
		 * only methods to do this so a method-call is needed.
		 */
		this._oCallout.setMyPosition("begin bottom");
		this._oCallout.setAtPosition("begin top");

		/*
		 * The method needs to be overwritten since the positioning of the
		 * callout's arrow does currently not work for transparent arrows. The
		 * transparent arrow is styled differently than defined within the
		 * callout and therefore the hard-coded position of the arrow has to be
		 * corrected
		 */
		this._oCallout.setTip = function() {
			sap.ui.commons.Callout.prototype.setTip.apply(this, arguments);

			/*
			 * Since the arrow is set with another CSS technique the position
			 * needs to be corrected as well
			 */
			var $arrow = this.$("arrow");
			$arrow.css("bottom", "-24px");

			/*
			 * Since the calculation of the callout's arrow works fine for RTL
			 * and must be corrected for LTR only a manipulation of the arrow's
			 * position is needed if LTR is active
			 */
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			if (!bRtl) {
				$arrow.css("left", "6px");
			}
		};

		this.setTooltip(this._oCallout);
		this.setTooltip = function() {
			jQuery.sap.log.warning("Setting toolstips for notifiers deactivated");
		};

		this._proxyEnableMessageSelect = jQuery.proxy(fnEnableMessageSelect, this);
		this.attachEvent(sap.ui.base.EventProvider.M_EVENTS.EventHandlerChange, this._proxyEnableMessageSelect);
	};

	/**
	 * Checks if the 'messageSelected' event was attached to the Notifier. If so
	 * the corresponding event is fired and e.g. the NotificationBar can react
	 * on that.
	 */
	var fnEnableMessageSelect = function(oEvent) {
		var sEventId = oEvent.getParameter("EventId");

		if (sEventId === "messageSelected") {
			if (oEvent.getParameter("type") === "listenerAttached") {
				this._bEnableMessageSelect = true;
			} else if (oEvent.getParameter("type") === "listenerDetached") {
				this._bEnableMessageSelect = false;
			}

			this.fireEvent("_enableMessageSelect", {
				enabled : this._bEnableMessageSelect,
				notifier : this
			});
		}
	};

	sap.ui.ux3.Notifier.prototype.exit = function(oEvent) {
		this._oCallout = undefined;

		/*
		 * Instance is created when adding the Notifier as MessageNotifier to
		 * the NotificationBar
		 */
		if (this._oMessageView) {
			this._oMessageView.destroy();
			delete this._oMessageView;
		}

		this.detachEvent(sap.ui.base.EventProvider.M_EVENTS.EventHandlerChange, this._proxyEnableMessageSelect);
		delete this._proxyEnableMessageSelect;
	};

	sap.ui.ux3.Notifier.prototype.onclick = function(oEvent) {
		oEvent.preventDefault();

		this.$().trigger("mouseover");
	};

	var fnFireChildControlCalling = function(sType, oMessage, oThat) {
		var sLevel = oMessage ? oMessage.getLevel() : sap.ui.core.MessageType.None;

		oThat.fireEvent("_childControlCalling", {
			type : sType,
			notifier : oThat,
			level : sLevel,
			// these two values are needed if a message was removed
			message : oMessage,
			callout : oThat._oCallout
		});
	};

	sap.ui.ux3.Notifier.prototype.addMessage = function(oMessage) {
		this.addAggregation("messages", oMessage);
		fnFireChildControlCalling("added", oMessage, this);

		return this;
	};

	sap.ui.ux3.Notifier.prototype.insertMessage = function(oMessage, index) {
		this.insertAggregation("messages", oMessage, index);
		fnFireChildControlCalling("added", oMessage, this);

		return this;
	};

	sap.ui.ux3.Notifier.prototype.removeMessage = function(oMessage) {
		var oRemovedMessage = this.removeAggregation("messages", oMessage);
		if (oRemovedMessage) {
			fnFireChildControlCalling("removed", oRemovedMessage, this);
		}

		return oRemovedMessage;
	};

	sap.ui.ux3.Notifier.prototype.removeAllMessages = function() {
		var aRemovedMessages = this.removeAllAggregation("messages");
		if (aRemovedMessages.length > 0) {
			// only re-render if there were messages removed
			fnFireChildControlCalling("removed", null, this);
		}

		return aRemovedMessages;
	};
	sap.ui.ux3.Notifier.prototype.destroyMessages = function() {
		var iLength = this.getMessages().length;
		this.destroyAggregation("messages");

		if (iLength > 0) {
			// only re-render if there were messages removed
			fnFireChildControlCalling("removed", null, this);
		}

		return this;
	};
}());

}; // end of sap/ui/ux3/Notifier.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Overlay') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Overlay.
jQuery.sap.declare("sap.ui.ux3.Overlay");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Overlay.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOpenButtonVisible openButtonVisible} : boolean (default: true)</li>
 * <li>{@link #getCloseButtonVisible closeButtonVisible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.Overlay#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Overlay#event:openNew openNew} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Overlay#event:open open} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Overlay Control
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.Overlay
 */
sap.ui.core.Control.extend("sap.ui.ux3.Overlay", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.core.PopupInterface"
	],
	publicMethods : [
		// methods
		"open", "close", "isOpen"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"openButtonVisible" : {type : "boolean", group : "Misc", defaultValue : true},
		"closeButtonVisible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"close" : {allowPreventDefault : true}, 
		"openNew" : {}, 
		"open" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.Overlay with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.Overlay.extend
 * @function
 */

sap.ui.ux3.Overlay.M_EVENTS = {'close':'close','openNew':'openNew','open':'open'};


/**
 * Getter for property <code>openButtonVisible</code>.
 * Defines whether the 'Open' button shall be visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>openButtonVisible</code>
 * @public
 * @name sap.ui.ux3.Overlay#getOpenButtonVisible
 * @function
 */

/**
 * Setter for property <code>openButtonVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bOpenButtonVisible  new value for property <code>openButtonVisible</code>
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Overlay#setOpenButtonVisible
 * @function
 */


/**
 * Getter for property <code>closeButtonVisible</code>.
 * Defines whether the 'Close' button shall be visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>closeButtonVisible</code>
 * @public
 * @name sap.ui.ux3.Overlay#getCloseButtonVisible
 * @function
 */

/**
 * Setter for property <code>closeButtonVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCloseButtonVisible  new value for property <code>closeButtonVisible</code>
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Overlay#setCloseButtonVisible
 * @function
 */


/**
 * Event is fired when the ThingInspector is closed 
 *
 * @name sap.ui.ux3.Overlay#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The Id of the Thing which is inspected in this ThingInspector instance
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.ux3.Overlay</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Overlay</code>.<br/> itself. 
 *  
 * Event is fired when the ThingInspector is closed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Overlay</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Overlay#attachClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.ux3.Overlay</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Overlay#detachClose
 * @function
 */

/**
 * Fire event close to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The Id of the Thing which is inspected in this ThingInspector instance</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.ux3.Overlay#fireClose
 * @function
 */


/**
 * Event is fired when the 'Open' button of the ThingInspector is clicked 
 *
 * @name sap.ui.ux3.Overlay#openNew
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The Id of the Thing which is inspected in this ThingInspector instance
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'openNew' event of this <code>sap.ui.ux3.Overlay</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Overlay</code>.<br/> itself. 
 *  
 * Event is fired when the 'Open' button of the ThingInspector is clicked 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Overlay</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Overlay#attachOpenNew
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'openNew' event of this <code>sap.ui.ux3.Overlay</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Overlay#detachOpenNew
 * @function
 */

/**
 * Fire event openNew to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The Id of the Thing which is inspected in this ThingInspector instance</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Overlay#fireOpenNew
 * @function
 */


/**
 * Event is fired when the ThingInspector is opened 
 *
 * @name sap.ui.ux3.Overlay#open
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The Id of the Thing which is inspected in this ThingInspector instance
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.ux3.Overlay</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Overlay</code>.<br/> itself. 
 *  
 * Event is fired when the ThingInspector is opened 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Overlay</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Overlay#attachOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.ux3.Overlay</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Overlay#detachOpen
 * @function
 */

/**
 * Fire event open to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The Id of the Thing which is inspected in this ThingInspector instance</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Overlay#fireOpen
 * @function
 */


/**
 * Opens Overlay as pop up
 *
 * @name sap.ui.ux3.Overlay.prototype.open
 * @function
 * @param {string} 
 *         sInitialFocusId
 *         ID of the control that gets focused when the overlay is openend

 * @type void
 * @public
 */


/**
 * Closes Overlay
 *
 * @name sap.ui.ux3.Overlay.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * Checks whether Overlay is open
 *
 * @name sap.ui.ux3.Overlay.prototype.isOpen
 * @function

 * @type boolean
 * @public
 */


// Start of sap\ui\ux3\Overlay.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * This file defines behavior for the control,
 */
sap.ui.ux3.Overlay.prototype.init = function() {
	var that = this;
	this._oPopup = new sap.ui.core.Popup(this, false, true);
	this._oPopup.attachOpened(function(oEvent){
		var domRef = jQuery.sap.byId(that._initialFocusId)[0];
		if (!domRef && that._getShell() && that.getOpenButtonVisible()) {
			domRef = jQuery.sap.domById(that._getOpenButtonId());
		} else if (!domRef && that._getShell() && that.getCloseButtonVisible()) {
			domRef = jQuery.sap.domById(that._getCloseButtonId());
		} else if (!domRef) {
			domRef = that.$("content").firstFocusableDomRef();
		} 
		if (!domRef) {
			domRef = that.$().firstFocusableDomRef();
		}
 		if(domRef) {
			jQuery.sap.focus(domRef);
		}
	});
	this._overridePopupEventing();
};

/**
 * Returns the Shell (if both Overlay and Shell are rendered)
 */
sap.ui.ux3.Overlay.prototype._getShell = function() {
	return this._oShell;
};


/**
 * Returns the ID of the close button element.
 * 
 * @return {string} The close button ID.
 * @private
 */
sap.ui.ux3.Overlay.prototype._getCloseButtonId = function() {
	return this.getId()+"-close";
};


/**
 * Returns the ID of the open button element.
 * 
 * @return {string} The open button ID.
 * @private
 */
sap.ui.ux3.Overlay.prototype._getOpenButtonId = function() {
	return this.getId()+"-openNew";
};


sap.ui.ux3.Overlay.prototype._initDom = function(fFocusFirst, fFocusLast, fApplyChanges) {
	//Override the popup theming and init the focus handling
	var oShell = jQuery(".sapUiUx3Shell").control();
	this._oShell = oShell.length ? oShell[0] : null;
	oShell = this._oShell;
	this.$().css("position", "fixed");
	if (oShell) {
		this._bFocusEventsRegistered = true;
		oShell.syncWithCanvasSize(this.getId(), true, fFocusFirst, fFocusLast, fApplyChanges);
		this.$("firstFocusDummyPaneFw").attr("tabindex", "0").focusin(jQuery.proxy(oShell.focusFirstHdr,oShell));
		this.$("firstFocusDummyPaneBw").attr("tabindex", "0").focusin(jQuery.proxy(oShell.focusLastTool,oShell));
		this.$("LastFocusDummyPane").attr("tabindex", "0").focusin(jQuery.proxy(oShell.focusPaneStart,oShell));
	} else {
		this.$().css("bottom", "0px").css("top", "0px").css("left", "0px").css("right", "0px");
	}
};

sap.ui.ux3.Overlay.prototype._cleanupDom = function() {
	if (this._oShell) {
		this._oShell.syncWithCanvasSize(this.getId(), false);
	}
	if (this._bFocusEventsRegistered) {
		this._bFocusEventsRegistered = false;
		this.$("firstFocusDummyPaneFw").removeAttr("tabindex").unbind("focusin");
		this.$("firstFocusDummyPaneBw").removeAttr("tabindex").unbind("focusin");
		this.$("LastFocusDummyPane").removeAttr("tabindex").unbind("focusin");
	}
};

/**
 * Set size of TI after rendering: If running in Shell we sync with shell
 * canvas (only if Popup is open/opening). The size will then be set by the shell.
 */
sap.ui.ux3.Overlay.prototype.onAfterRendering = function() {
    var oPopupState = this._oPopup.getOpenState();
    if(oPopupState === sap.ui.core.OpenState.OPEN || oPopupState === sap.ui.core.OpenState.OPENING){
          this._initDom(jQuery.proxy(this._setFocusFirst, this), jQuery.proxy(this._setFocusLast, this), jQuery.proxy(this._applyChanges, this));
    }
};

sap.ui.ux3.Overlay.prototype.onBeforeRendering = function() {
};


/**
 * Destroys this instance of Overlay, called by Element#destroy()
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype.exit = function() {
	this.close();
	this._oPopup.destroy();
	this._oPopup = null;
	this._oShell = null;
};

/**
 * Opens this instance of Overlay
 *
 * @public
 */
sap.ui.ux3.Overlay.prototype.open = function(initialFocusId) {
	this._initialFocusId = initialFocusId;
	if (this._oPopup.isOpen()) {
		return;
	}
	if(initialFocusId) {
		this._oPopup.setInitialFocusId(initialFocusId);
	}
	this._oPopup.open(400);
	
	this._initDom(jQuery.proxy(this._setFocusFirst, this), jQuery.proxy(this._setFocusLast, this), jQuery.proxy(this._applyChanges, this));

	//fire open event
	this.fireOpen({
		id : this.getId()
	});
};

/**
 * Closes this instance of Overlay
 *
 * @public
 */
sap.ui.ux3.Overlay.prototype.close = function() {
	if (!this._oPopup.isOpen()) {
		return;
	}
	this._oPopup.close(400);
	this._cleanupDom();
};

/**
 * Handle the click event happening on the Overlay instance.
 *
 * @param {jQuery.EventObject}
 *            oEvent
 * @private
 */
sap.ui.ux3.Overlay.prototype.onclick = function(oEvent) {
	this._handleButtonEvent(oEvent);
};

/**
 * Handle the sapselect pseudo event happening on the Overlay instance.
 *
 * @param {jQuery.EventObject}
 *            oEvent
 * @private
 */
sap.ui.ux3.Overlay.prototype.onsapselect = function(oEvent) {
	this._handleButtonEvent(oEvent);
};

/**
 * Eventhandling for Overlay Buttons
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype._handleButtonEvent = function(oEvent) {
	var elementId = oEvent.target.id;
	if (elementId === this._getCloseButtonId()) {
		if(this.fireClose({id : this.getId()})) {
			this.close();
		}
	} else if (elementId === this._getOpenButtonId()) {
		this.fireOpenNew({
			id : this.getId()
		});
	}
};

/**
 * Load language dependent texts.
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype._getText = function(sKey, aArgs) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	var sText = undefined;
	if(rb) {
		sText = rb.getText(sKey);
	}
	if(sText && aArgs){
		for(var index=0; index<aArgs.length; index++){
			sText = sText.replace("{"+index+"}", aArgs[index]);
		}
	}
	return sText ? sText : sKey;
};

/**
 * Override Popup Events
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype._overridePopupEventing = function() {
	// don't bring Overlay to the front on mouse down. Existing
	// Toolpopups should always be in front
	this._oPopup.onmousedown = function(oEvent) {
		return;
	};
};

/**
 * Returns the first focusable Dom element which is contained in this Overlay.
 * This function is used for the Shell integration for a proper keyboard handling (tab chain).
 * 
 * This function must be overridden in sub classes appropriately.
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype._setFocusFirst = function() {
	jQuery.sap.focus(jQuery.sap.domById(this._getOpenButtonId()));
};

/**
 * Returns the last focusable Dom element which is contained in this Overlay.
 * This function is used for the Shell integration for a proper keyboard handling (tab chain).
 *
 * This function must be overridden in sub classes appropriately.
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype._setFocusLast = function() {
	jQuery.sap.focus(jQuery.sap.domById(this._getCloseButtonId()));
};

/**
 * Called from the Shell when properties (e.g. the HeaderType) are changing
 * 
 * This function must be overridden in sub classes appropriately.
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype._applyChanges = function(oChanges) {
	return this;
};


/* Redefinition of generated API methods */

// Implementation of API method isOpen
sap.ui.ux3.Overlay.prototype.isOpen = function() {
	return this._oPopup.isOpen();
};

}; // end of sap/ui/ux3/Overlay.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.OverlayContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.OverlayContainer.
jQuery.sap.declare("sap.ui.ux3.OverlayContainer");




/**
 * Constructor for a new OverlayContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.Overlay#constructor sap.ui.ux3.Overlay}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Is to be embedded into the Overlay control as content container
 * @extends sap.ui.ux3.Overlay
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.OverlayContainer
 */
sap.ui.ux3.Overlay.extend("sap.ui.ux3.OverlayContainer", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.OverlayContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.OverlayContainer.extend
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Aggregation for content
 * 
 * <strong>Note</strong>: this is the default aggregation for OverlayContainer.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.OverlayContainer#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.OverlayContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.OverlayContainer#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.OverlayContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.OverlayContainer#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.ux3.OverlayContainer#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.OverlayContainer#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.OverlayContainer#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.OverlayContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.OverlayContainer#destroyContent
 * @function
 */


// Start of sap\ui\ux3\OverlayContainer.js
/**
 * Focus Last Element
 *
 * @private
 */
sap.ui.ux3.OverlayContainer.prototype._setFocusLast = function() {
	var oFocus = this.$("content").lastFocusableDomRef();
	if (!oFocus && this.getCloseButtonVisible()) {
		oFocus = this.getDomRef("close");
	} else if (!oFocus && this.getOpenButtonVisible()) {
		oFocus = this.getDomRef("openNew");
	}
	jQuery.sap.focus(oFocus);
};

/**
 * Focus First Element
 *
 * @private
 */
sap.ui.ux3.OverlayContainer.prototype._setFocusFirst = function() {
	if (this.getOpenButtonVisible()) {
		jQuery.sap.focus(this.getDomRef("openNew"));
	} else if (this.getCloseButtonVisible()) {
		jQuery.sap.focus(this.getDomRef("close"));
	} else {
		jQuery.sap.focus(this.$("content").firstFocusableDomRef());
	}
};
}; // end of sap/ui/ux3/OverlayContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.OverlayContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.OverlayContainer
jQuery.sap.declare("sap.ui.ux3.OverlayContainerRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

/**
 * @class OverlayContainer renderer.
 * @static
 */
sap.ui.ux3.OverlayContainerRenderer = sap.ui.core.Renderer.extend(sap.ui.ux3.OverlayRenderer);

/**
 * Renders the Overlay content
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.OverlayContainerRenderer.renderContent = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.write("<div role='Main' class='sapUiUx3OCContent' id='"+oControl.getId()+"-content'>");
	var content = oControl.getContent();
	for (var i = 0; i < content.length; i++) {
		var control = content[i];
		rm.renderControl(control);
	}
	rm.write("</div>");
};

/**
 * Add root class to Overlay
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.OverlayContainerRenderer.addRootClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3OC");
};

/**
 * Add class to Overlay
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.OverlayContainerRenderer.addOverlayClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3OCOverlay");
};

}; // end of sap/ui/ux3/OverlayContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.OverlayDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.OverlayDialog.
jQuery.sap.declare("sap.ui.ux3.OverlayDialog");




/**
 * Constructor for a new OverlayDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.Overlay#constructor sap.ui.ux3.Overlay}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Dialog implementation based on the Overlay. If used in a Shell it leaves the Tool-Palette, Pane-Bar and Header-Items accessible.
 * @extends sap.ui.ux3.Overlay
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.OverlayDialog
 */
sap.ui.ux3.Overlay.extend("sap.ui.ux3.OverlayDialog", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'}
	},
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.OverlayDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.OverlayDialog.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of the Overlay Dialog. If the width is set to "auto" it is always 50% of the overlay width.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.ux3.OverlayDialog#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.ux3.OverlayDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.OverlayDialog#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of the Overlay Dialog. If the height is set to "auto" it is always 50% of the overlay height.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.ux3.OverlayDialog#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.ux3.OverlayDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.OverlayDialog#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content for the OverlayDialog.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.OverlayDialog#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.OverlayDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.OverlayDialog#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.OverlayDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.OverlayDialog#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.ux3.OverlayDialog#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.OverlayDialog#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.OverlayDialog#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.OverlayDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.OverlayDialog#destroyContent
 * @function
 */


// Start of sap\ui\ux3\OverlayDialog.js
jQuery.sap.require('sap.ui.core.IntervalTrigger'); // unlisted dependency retained


/**
 * @private
 */
sap.ui.ux3.OverlayDialog.prototype.init = function(){
	sap.ui.ux3.Overlay.prototype.init.apply(this);
	//OverlayDialog must not have an open button
	this.setProperty("openButtonVisible",false);
	sap.ui.ux3.OverlayDialog.Trigger = new sap.ui.core.IntervalTrigger(300);
};

/**
 * Focus Last Element
 *
 * @private
 */
sap.ui.ux3.OverlayDialog.prototype._setFocusLast = function() {
	var oFocus = this.$("content").lastFocusableDomRef();
	if (!oFocus && this.getCloseButtonVisible()) {
		oFocus = this.getDomRef("close");
	}
	jQuery.sap.focus(oFocus);
};

/**
 * Focus First Element
 *
 * @private
 */
sap.ui.ux3.OverlayDialog.prototype._setFocusFirst = function() {
	if (this.getCloseButtonVisible()) {
		jQuery.sap.focus(this.getDomRef("close"));
	} else {
		jQuery.sap.focus(this.$("content").firstFocusableDomRef());
	}
};

/**
 * This Method is not supported for the OverlayDialog 
 * @public
 */
sap.ui.ux3.OverlayDialog.prototype.setOpenButtonVisible = function(bVisible) {
	jQuery.sap.log.warning("OverlayDialog does not support an openButton.");	
	return undefined;
};

/**
 * Sets the width for the OverlayDialog
 * @param {sap.ui.core.CSSSize} sWidth
 * @public 
 *
 */
sap.ui.ux3.OverlayDialog.prototype.setWidth = function(sWidth) {
	if(sWidth == "auto" || sWidth == "inherit") {
		sWidth = "auto";
	}
	return this.setProperty("width", sWidth);
};

/**
 * Sets the height for the OverlayDialog
 * @param {sap.ui.core.CSSSize} sHeight
 * @public 
 *
 */
sap.ui.ux3.OverlayDialog.prototype.setHeight = function(sHeight) {
	if(sHeight == "auto" || sHeight == "inherit") {
		sHeight = "auto";
	}
	return this.setProperty("height", sHeight);
};

/**
 * @private
 */
sap.ui.ux3.OverlayDialog.prototype.onBeforeRendering = function(){
	sap.ui.ux3.Overlay.prototype.onBeforeRendering.apply(this, arguments);
	this._cleanup();
};

/**
 * @private
 */
sap.ui.ux3.OverlayDialog.prototype.onAfterRendering = function(){
	sap.ui.ux3.Overlay.prototype.onAfterRendering.apply(this, arguments);
	sap.ui.ux3.OverlayDialog.Trigger.addListener(this._checkChange, this);
};

/**
 * @private
 */
sap.ui.ux3.OverlayDialog.prototype._cleanup = function(){
	sap.ui.ux3.OverlayDialog.Trigger.removeListener(this._checkChange, this);
	this.contentWidth = null;
	this.contentHeight = null;
	this.overlayWidth = null;
	this.overlayHeight = null;
};

/**
 * @private
 */
sap.ui.ux3.OverlayDialog.prototype.exit = function() {
	this._cleanup();
	sap.ui.ux3.Overlay.prototype.exit.apply(this,arguments);
}

/**
 * @private
 */
sap.ui.ux3.OverlayDialog.prototype._checkChange = function(){
	if(!this.getDomRef()){
		return;
	}

	var $content = this.$("content"),
		$overlay = this.$(),
		bAutoWidth = this.getWidth() === "auto",
		bAutoHeight = this.getHeight() === "auto";

	var contentWidth = bAutoWidth ? $overlay.width()/2 : $content.width(),
		contentHeight = bAutoHeight ? $overlay.height()/2 : $content.height(),
		overlayWidth = $overlay.width(),
		overlayHeight = $overlay.height();

	if(	contentWidth != this.contentWidth || contentHeight!= this.contentHeight 
		|| overlayWidth != this.overlayWidth || overlayHeight != this.overlayHeight){

		$content.css("left", "0").css("right", "auto").css("top", "0").css("bottom", "auto").css("width", this.getWidth()).css("height", this.getHeight());
		
		this.contentWidth = bAutoWidth ? $overlay.width()/2 : $content.width();
		this.contentHeight = bAutoHeight ? $overlay.height()/2 : $content.height();
		this.overlayWidth = overlayWidth;
		this.overlayHeight = overlayHeight;

		var $close = this.$("close");

		if(this.contentWidth < this.overlayWidth){
			$content.css("left", "50%");
			$content.css("right", "auto");
			$content.css("margin-left", (-1)*this.contentWidth/2+"px");
			$content.css("width",  bAutoHeight ? this.contentWidth : this.getWidth());
			$close.css("right", "50%");
			$close.css("margin-right", (-1)*this.contentWidth/2-10+"px");
		}else{
			$content.css("left", "0");
			$content.css("right", "10px");
			$content.css("margin-left", "0");
			$content.css("width", "auto");
			$close.css("right", "0")
			$close.css("margin-right", "0");
		}

		if(this.contentHeight < this.overlayHeight-30/*Bottom Border (NotificationBar)*/){
			$content.css("top", "50%");
			$content.css("bottom", "auto");
			$content.css("margin-top", (-1)*this.contentHeight/2+"px");
			$content.css("height",  bAutoHeight ? this.contentHeight : this.getHeight());
			$close.css("top", "50%");
			$close.css("margin-top", (-1)*this.contentHeight/2-10+"px");
		}else{
			$content.css("top", "10px");
			$content.css("bottom", "30px");
			$content.css("margin-top", "0");
			$content.css("height", "auto");
			$close.css("top", "0");
			$close.css("margin-top", "0");
		}
	}
};

}; // end of sap/ui/ux3/OverlayDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.OverlayDialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.ui.ux3.OverlayDialog
jQuery.sap.declare("sap.ui.ux3.OverlayDialogRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

/**
 * @class OverlayDialog renderer.
 * @static
 */
sap.ui.ux3.OverlayDialogRenderer = sap.ui.core.Renderer.extend(sap.ui.ux3.OverlayRenderer);

/**
 * Renders the Overlay content
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.OverlayDialogRenderer.renderContent = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.write("<div role='Main' class='sapUiUx3ODContent' id='"+oControl.getId()+"-content'>");
	var content = oControl.getContent();
	for (var i = 0; i < content.length; i++) {
		var control = content[i];
		rm.renderControl(control);
	}
	rm.write("</div>");
};

/**
 * Add root class to Overlay
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.OverlayDialogRenderer.addRootClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3OD");
};

/**
 * Add class to Overlay
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.OverlayDialogRenderer.addOverlayClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3ODOverlay");
};

}; // end of sap/ui/ux3/OverlayDialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.QuickView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.QuickView.
jQuery.sap.declare("sap.ui.ux3.QuickView");

jQuery.sap.require('sap.ui.commons.CalloutBase'); // unlisted dependency retained



/**
 * Constructor for a new QuickView.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getFirstTitle firstTitle} : string</li>
 * <li>{@link #getFirstTitleHref firstTitleHref} : string</li>
 * <li>{@link #getSecondTitle secondTitle} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getShowActionBar showActionBar} : boolean (default: true)</li>
 * <li>{@link #getFollowState followState} : sap.ui.ux3.FollowActionState (default: sap.ui.ux3.FollowActionState.Default)</li>
 * <li>{@link #getFlagState flagState} : boolean (default: false)</li>
 * <li>{@link #getFavoriteState favoriteState} : boolean (default: false)</li>
 * <li>{@link #getFavoriteActionEnabled favoriteActionEnabled} : boolean (default: true)</li>
 * <li>{@link #getUpdateActionEnabled updateActionEnabled} : boolean (default: true)</li>
 * <li>{@link #getFollowActionEnabled followActionEnabled} : boolean (default: true)</li>
 * <li>{@link #getFlagActionEnabled flagActionEnabled} : boolean (default: true)</li>
 * <li>{@link #getOpenActionEnabled openActionEnabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Element[]</li>
 * <li>{@link #getActions actions} : sap.ui.ux3.ThingAction[]</li>
 * <li>{@link #getActionBar actionBar} : sap.ui.ux3.ActionBar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.QuickView#event:actionSelected actionSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.QuickView#event:feedSubmit feedSubmit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.QuickView#event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.CalloutBase#constructor sap.ui.commons.CalloutBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * QuickView is a small popup with a short overview of a Thing.
 * QuickView is shown when a user holds the mouse pointer over a related screen element.
 * 
 * @extends sap.ui.commons.CalloutBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.QuickView
 */
sap.ui.commons.CalloutBase.extend("sap.ui.ux3.QuickView", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"type" : {type : "string", group : "Misc", defaultValue : null},
		"firstTitle" : {type : "string", group : "Misc", defaultValue : null},
		"firstTitleHref" : {type : "string", group : "Misc", defaultValue : null},
		"secondTitle" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"showActionBar" : {type : "boolean", group : "Misc", defaultValue : true},
		"followState" : {type : "sap.ui.ux3.FollowActionState", group : "Misc", defaultValue : sap.ui.ux3.FollowActionState.Default},
		"flagState" : {type : "boolean", group : "Misc", defaultValue : false},
		"favoriteState" : {type : "boolean", group : "Misc", defaultValue : false},
		"favoriteActionEnabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"updateActionEnabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"followActionEnabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"flagActionEnabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"openActionEnabled" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
    	"content" : {type : "sap.ui.core.Element", multiple : true, singularName : "content"}, 
    	"actions" : {type : "sap.ui.ux3.ThingAction", multiple : true, singularName : "action"}, 
    	"actionBar" : {type : "sap.ui.ux3.ActionBar", multiple : false}
	},
	events : {
		"actionSelected" : {}, 
		"feedSubmit" : {}, 
		"navigate" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.QuickView with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.QuickView.extend
 * @function
 */

sap.ui.ux3.QuickView.M_EVENTS = {'actionSelected':'actionSelected','feedSubmit':'feedSubmit','navigate':'navigate'};


/**
 * Getter for property <code>type</code>.
 * Thing type (mandatory) like Account, Material, Employee etc. is displayed in a header at the top part of the QuickView.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.ui.ux3.QuickView#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setType
 * @function
 */


/**
 * Getter for property <code>firstTitle</code>.
 * Thing name shown in the header of the QuickView
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>firstTitle</code>
 * @public
 * @name sap.ui.ux3.QuickView#getFirstTitle
 * @function
 */

/**
 * Setter for property <code>firstTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFirstTitle  new value for property <code>firstTitle</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setFirstTitle
 * @function
 */


/**
 * Getter for property <code>firstTitleHref</code>.
 * URI to Thing Inspector
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>firstTitleHref</code>
 * @public
 * @name sap.ui.ux3.QuickView#getFirstTitleHref
 * @function
 */

/**
 * Setter for property <code>firstTitleHref</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFirstTitleHref  new value for property <code>firstTitleHref</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setFirstTitleHref
 * @function
 */


/**
 * Getter for property <code>secondTitle</code>.
 * Optional short text shown under the firstTitle
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>secondTitle</code>
 * @public
 * @name sap.ui.ux3.QuickView#getSecondTitle
 * @function
 */

/**
 * Setter for property <code>secondTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSecondTitle  new value for property <code>secondTitle</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setSecondTitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * URI of the Thing icon image (mandatory). The image is scaled down to the maximal size of 32 pixel (vertical or horizontal).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.ux3.QuickView#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setIcon
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Control width as common CSS-size (px or % as unit, for example).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.ux3.QuickView#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setWidth
 * @function
 */


/**
 * Getter for property <code>showActionBar</code>.
 * Show Action Bar
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showActionBar</code>
 * @public
 * @name sap.ui.ux3.QuickView#getShowActionBar
 * @function
 */

/**
 * Setter for property <code>showActionBar</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowActionBar  new value for property <code>showActionBar</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setShowActionBar
 * @function
 */


/**
 * Getter for property <code>followState</code>.
 * Follow State of a Thing
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.ui.ux3.FollowActionState} the value of property <code>followState</code>
 * @public
 * @name sap.ui.ux3.QuickView#getFollowState
 * @function
 */

/**
 * Setter for property <code>followState</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.ui.ux3.FollowActionState} oFollowState  new value for property <code>followState</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setFollowState
 * @function
 */


/**
 * Getter for property <code>flagState</code>.
 * State of Flag Action
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>flagState</code>
 * @public
 * @name sap.ui.ux3.QuickView#getFlagState
 * @function
 */

/**
 * Setter for property <code>flagState</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFlagState  new value for property <code>flagState</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setFlagState
 * @function
 */


/**
 * Getter for property <code>favoriteState</code>.
 * State Of favorite Action
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>favoriteState</code>
 * @public
 * @name sap.ui.ux3.QuickView#getFavoriteState
 * @function
 */

/**
 * Setter for property <code>favoriteState</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFavoriteState  new value for property <code>favoriteState</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setFavoriteState
 * @function
 */


/**
 * Getter for property <code>favoriteActionEnabled</code>.
 * Favorite action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>favoriteActionEnabled</code>
 * @public
 * @name sap.ui.ux3.QuickView#getFavoriteActionEnabled
 * @function
 */

/**
 * Setter for property <code>favoriteActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFavoriteActionEnabled  new value for property <code>favoriteActionEnabled</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setFavoriteActionEnabled
 * @function
 */


/**
 * Getter for property <code>updateActionEnabled</code>.
 * Update action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>updateActionEnabled</code>
 * @public
 * @name sap.ui.ux3.QuickView#getUpdateActionEnabled
 * @function
 */

/**
 * Setter for property <code>updateActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bUpdateActionEnabled  new value for property <code>updateActionEnabled</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setUpdateActionEnabled
 * @function
 */


/**
 * Getter for property <code>followActionEnabled</code>.
 * Follow action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>followActionEnabled</code>
 * @public
 * @name sap.ui.ux3.QuickView#getFollowActionEnabled
 * @function
 */

/**
 * Setter for property <code>followActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFollowActionEnabled  new value for property <code>followActionEnabled</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setFollowActionEnabled
 * @function
 */


/**
 * Getter for property <code>flagActionEnabled</code>.
 * Flag action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>flagActionEnabled</code>
 * @public
 * @name sap.ui.ux3.QuickView#getFlagActionEnabled
 * @function
 */

/**
 * Setter for property <code>flagActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFlagActionEnabled  new value for property <code>flagActionEnabled</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setFlagActionEnabled
 * @function
 */


/**
 * Getter for property <code>openActionEnabled</code>.
 * Open Thing action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>openActionEnabled</code>
 * @public
 * @name sap.ui.ux3.QuickView#getOpenActionEnabled
 * @function
 */

/**
 * Setter for property <code>openActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bOpenActionEnabled  new value for property <code>openActionEnabled</code>
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setOpenActionEnabled
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Body content of the QuickView
 * 
 * @return {sap.ui.core.Element[]}
 * @public
 * @name sap.ui.ux3.QuickView#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Element}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Element}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Element} vContent the content to remove or its index or id
 * @return {sap.ui.core.Element} the removed content or null
 * @public
 * @name sap.ui.ux3.QuickView#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Element[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.QuickView#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Element}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.QuickView#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>actions</code>.<br/>
 * Actions of a Thing
 * 
 * @return {sap.ui.ux3.ThingAction[]}
 * @public
 * @name sap.ui.ux3.QuickView#getActions
 * @function
 */


/**
 * Inserts a action into the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingAction}
 *          oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the action should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the action is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#insertAction
 * @function
 */

/**
 * Adds some action <code>oAction</code> 
 * to the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingAction}
 *            oAction the action to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#addAction
 * @function
 */

/**
 * Removes an action from the aggregation named <code>actions</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingAction} vAction the action to remove or its index or id
 * @return {sap.ui.ux3.ThingAction} the removed action or null
 * @public
 * @name sap.ui.ux3.QuickView#removeAction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>actions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingAction[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.QuickView#removeAllActions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingAction</code> in the aggregation named <code>actions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingAction}
 *            oAction the action whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.QuickView#indexOfAction
 * @function
 */
	

/**
 * Destroys all the actions in the aggregation 
 * named <code>actions</code>.
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#destroyActions
 * @function
 */


/**
 * Getter for aggregation <code>actionBar</code>.<br/>
 * ActionBar. If no actionBar is set a default ActionBar will be created.
 * In any case, ActionBar is displayed only when the showActionBar property is set to true.
 * 
 * @return {sap.ui.ux3.ActionBar}
 * @public
 * @name sap.ui.ux3.QuickView#getActionBar
 * @function
 */


/**
 * Setter for the aggregated <code>actionBar</code>.
 * @param {sap.ui.ux3.ActionBar} oActionBar
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#setActionBar
 * @function
 */
	

/**
 * Destroys the actionBar in the aggregation 
 * named <code>actionBar</code>.
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#destroyActionBar
 * @function
 */


/**
 * Action is selected in Action Bar 
 *
 * @name sap.ui.ux3.QuickView#actionSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of selected ThingAction
 * @param {sap.ui.ux3.ThingAction} oControlEvent.getParameters.action Selected ThingAction
 * @param {string} oControlEvent.getParameters.newState New State of the selected action. Only filled if the respective action maintains a state property, for example 'FollowUp' or 'Favorite'
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'actionSelected' event of this <code>sap.ui.ux3.QuickView</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.QuickView</code>.<br/> itself. 
 *  
 * Action is selected in Action Bar 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.QuickView</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#attachActionSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'actionSelected' event of this <code>sap.ui.ux3.QuickView</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#detachActionSelected
 * @function
 */

/**
 * Fire event actionSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of selected ThingAction</li>
 * <li>'action' of type <code>sap.ui.ux3.ThingAction</code> Selected ThingAction</li>
 * <li>'newState' of type <code>string</code> New State of the selected action. Only filled if the respective action maintains a state property, for example 'FollowUp' or 'Favorite'</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.QuickView#fireActionSelected
 * @function
 */


/**
 * Fired when a new feed entry is submitted. 
 *
 * @name sap.ui.ux3.QuickView#feedSubmit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.text Feed text
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'feedSubmit' event of this <code>sap.ui.ux3.QuickView</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.QuickView</code>.<br/> itself. 
 *  
 * Fired when a new feed entry is submitted. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.QuickView</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#attachFeedSubmit
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'feedSubmit' event of this <code>sap.ui.ux3.QuickView</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#detachFeedSubmit
 * @function
 */

/**
 * Fire event feedSubmit to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'text' of type <code>string</code> Feed text</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.QuickView#fireFeedSubmit
 * @function
 */


/**
 * Event is fired when a user clicks on the firstTitle link. Call the preventDefault method of the event object to cancel browser navigation. 
 *
 * @name sap.ui.ux3.QuickView#navigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.href URI of the Thing Inspector application.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.ui.ux3.QuickView</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.QuickView</code>.<br/> itself. 
 *  
 * Event is fired when a user clicks on the firstTitle link. Call the preventDefault method of the event object to cancel browser navigation. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.QuickView</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#attachNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.ui.ux3.QuickView</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.QuickView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.QuickView#detachNavigate
 * @function
 */

/**
 * Fire event navigate to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'href' of type <code>string</code> URI of the Thing Inspector application.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.ux3.QuickView#fireNavigate
 * @function
 */


// Start of sap\ui\ux3\QuickView.js
///**
// * This file defines behavior for the QuickView control,
// */

jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained



/**
 * Initialization of the QuickView control.
 * 
 * @private
 */
sap.ui.ux3.QuickView.prototype.init = function(){

	var oActionBar;

	// Initialize CalloutBase
	sap.ui.commons.CalloutBase.prototype.init.call(this);

	if(!this.getActionBar()){
		oActionBar = new sap.ui.ux3.ActionBar();

		// react on the ActionSelected event of the ActionBar
		function onActionSelected(oControlEvent){
			var parameters = oControlEvent.getParameters();
			this.fireActionSelected(parameters);
		}
		oActionBar.attachActionSelected(jQuery.proxy(onActionSelected, this));

		// react on the FeedSubmit event of the ActionBar
		function onFeedSubmit(oControlEvent){
			var parameters = oControlEvent.getParameters();
			this.fireFeedSubmit(parameters);
		}
		oActionBar.attachFeedSubmit(jQuery.proxy(onFeedSubmit, this));
		this.setAggregation("actionBar", oActionBar, true);
	}
}

/**
* Handle the mouseover event
* @param {jQuery.EventObject} oEvent The event that occurred on the QuickView link
* @private
 */
sap.ui.ux3.QuickView.prototype.onmouseover = function(oEvent) {
	//jQuery.sap.log.debug("QuickView: mouseover");
	var oPopup = this._getPopup();
	// do not close my pop-up if it was opened already
	if (oPopup.isOpen() && oPopup.getContent() == this) {
		if (this.sCloseNowTimeout){
			jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
			this.sCloseNowTimeout = null; }
		return;
	}

	sap.ui.core.TooltipBase.prototype.onmouseover.call(this, oEvent);
};

/**
 * Organize header fields navigation with help of arrow keys.
 * 
 * @private
 */
sap.ui.ux3.QuickView.prototype.onAfterRendering = function(){
	// Collect the DOM references of items that are accessible via keyboard arrow keys

	var	i,
		oFocusRef = this.getDomRef(),
		aDomRefs = [];

	// Title
	var oRef = this.$("title");
	aDomRefs.push(oRef);

	// Name
	oRef = this.$("link");
	if(!oRef.length){oRef = this.$("name"); } // when no link, navigate to -name
	if(!oRef.length){ return; } // do nothing if we have a title only
	aDomRefs.push(oRef);

	// Description
	oRef = this.$("descr");
	if(oRef.length){aDomRefs.push(oRef);}

	// initialize item navigation
	if(!this.oItemNavigation){
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation(null, null, false);
		this.addDelegate(this.oItemNavigation);
	}
	this.oItemNavigation.setRootDomRef(oFocusRef);
	this.oItemNavigation.setItemDomRefs(aDomRefs);
	this.oItemNavigation.setCycling(false);
	this.oItemNavigation.setSelectedIndex(1); // UX3 requirement: the Name field must be focused first
	this.oItemNavigation.setPageSize(aDomRefs.length);
};

/**
 * Function is called when the Control is clicked.
 * If one of the links on the form is clicked, fire a "navigate" event, otherwise ignore the click.
 * If one of the "navigate" event handlers calls <code>preventDefault()</code>,
 * prevent the original event too (cancel browser navigation).
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.ux3.QuickView.prototype.onclick = function(oEvent) {

	var oTarget = oEvent.target;
	// react only on clicks over links:
	if(!oTarget || !oTarget.hasAttribute("href") ){ return; }

	// fire the "navigate" event and prevent browser navigation if the application requests this
	if(!this.fireEvent("navigate", {href:oTarget.href}, true, false)){
		oEvent.preventDefault();
	};
};

/**
 * Clean up on exit.
 * 
 * @private
 */
sap.ui.ux3.QuickView.prototype.exit = function() {
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
		delete this.oItemNavigation;
	}
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.insertAction = function(oAction, iIndex) {
	if(this.getActionBar()) {
		this.getActionBar().insertBusinessAction(oAction, iIndex);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.addAction = function(oAction) {
	if(this.getActionBar()) {
		this.getActionBar().addBusinessAction(oAction);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.removeAction = function(oAction) {
	if(this.getActionBar()) {
		this.getActionBar().removeBusinessAction(oAction);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.removeAllActions = function() {
	if(this.getActionBar()) {
		this.getActionBar().removeAllBusinessActions();
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.getActions = function() {
	if(this.getActionBar()) {
		this.getActionBar().getBusinessActions();
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.destroyActions = function() {
	if (this.getActionBar()) {
		this.getActionBar().destroyBusinessActions();
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.setFollowState = function(oFollowState) {
	if (this.getActionBar()) {
		this.getActionBar().setFollowState(oFollowState);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.getFollowState = function() {
	var result = null;
	if (this.getActionBar()) {
		result = this.getActionBar().getFollowState(); 
	}
	return result;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.setFlagState = function(oFlagState) {
	if (this.getActionBar()) {
		this.getActionBar().setFlagState(oFlagState);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.getFlagState = function() {
	var result = null;
	if (this.getActionBar()) {
		result = this.getActionBar().getFlagState(); 
	}
	return result;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.setFavoriteState = function(oFavoriteState) {
	if (this.getActionBar()) {
		this.getActionBar().setFavoriteState(oFavoriteState);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.getFavoriteState = function() {
	var result = null;
	if (this.getActionBar()) {
		result = this.getActionBar().getFavoriteState(); 
	}
	return result;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.setFavoriteActionEnabled = function(bEnabled) {
	if (this.getActionBar()) {
		this.getActionBar().setShowFavorite(bEnabled);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.getFavoriteActionEnabled = function() {
	var result;
	if (this.getActionBar()) {
		result = this.getActionBar().getShowFavorite();
	}
	return result;
}

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.setFlagActionEnabled = function(bEnabled) {
	if (this.getActionBar()) {
		this.getActionBar().setShowFlag(bEnabled);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.getFlagActionEnabled = function() {
	var result;
	if (this.getActionBar()) {
		result = this.getActionBar().getShowFlag();
	}
	return result;
}

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.setUpdateActionEnabled = function(bEnabled) {
	if (this.getActionBar()) {
		this.getActionBar().setShowUpdate(bEnabled);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.getUpdateActionEnabled = function() {
	var result;
	if (this.getActionBar()) {
		result = this.getActionBar().getShowUpdate();
	}
	return result;
}

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.setFollowActionEnabled = function(bEnabled) {
	if (this.getActionBar()) {
		this.getActionBar().setShowFollow(bEnabled);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.getFollowActionEnabled = function() {
	var result;
	if (this.getActionBar()) {
		result = this.getActionBar().getShowFollow();
	}
	return result;
}

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.setOpenActionEnabled = function(bEnabled) {
	if (this.getActionBar()) {
		this.getActionBar().setShowOpen(bEnabled);
	}
	return this;
};

// Interface method to ActionBar API
sap.ui.ux3.QuickView.prototype.getOpenActionEnabled = function() {
	var result;
	if (this.getActionBar()) {
		result = this.getActionBar().getShowOpen();
	}
	return result;
}

// Implementation of API method
sap.ui.ux3.QuickView.prototype.setIcon = function(oIcon) {
	this.setProperty("icon", oIcon);
	if (this.getActionBar()) {
		this.getActionBar().setThingIconURI(oIcon);
	}
	return this;
};

// Implementation of API method
sap.ui.ux3.QuickView.prototype.setActionBar = function(oActionBar) {
	this.setAggregation("actionBar", oActionBar, true);
	if (this.getIcon() && this.getActionBar()) {
		this.getActionBar().setThingIconURI(this.getIcon());
	}
	return this;
};

}; // end of sap/ui/ux3/QuickView.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Shell') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Shell.
jQuery.sap.declare("sap.ui.ux3.Shell");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Shell.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAppTitle appTitle} : string</li>
 * <li>{@link #getAppIcon appIcon} : sap.ui.core.URI</li>
 * <li>{@link #getAppIconTooltip appIconTooltip} : string</li>
 * <li>{@link #getShowLogoutButton showLogoutButton} : boolean (default: true)</li>
 * <li>{@link #getLogoutButtonTooltip logoutButtonTooltip} : string</li>
 * <li>{@link #getShowSearchTool showSearchTool} : boolean (default: true)</li>
 * <li>{@link #getShowInspectorTool showInspectorTool} : boolean (default: false)</li>
 * <li>{@link #getShowFeederTool showFeederTool} : boolean (default: true)</li>
 * <li>{@link #getShowTools showTools} : boolean (default: true)</li>
 * <li>{@link #getShowPane showPane} : boolean (default: true)</li>
 * <li>{@link #getHeaderType headerType} : sap.ui.ux3.ShellHeaderType (default: sap.ui.ux3.ShellHeaderType.Standard)</li>
 * <li>{@link #getDesignType designType} : sap.ui.ux3.ShellDesignType (default: sap.ui.ux3.ShellDesignType.Standard)</li>
 * <li>{@link #getPaneWidth paneWidth} : int (default: 250)</li>
 * <li>{@link #getApplyContentPadding applyContentPadding} : boolean (default: true)</li>
 * <li>{@link #getFullHeightContent fullHeightContent} : boolean (default: false)</li>
 * <li>{@link #getAllowOverlayHeaderAccess allowOverlayHeaderAccess} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getWorksetItems worksetItems} : sap.ui.ux3.NavigationItem[]</li>
 * <li>{@link #getPaneBarItems paneBarItems} : sap.ui.core.Item[]</li>
 * <li>{@link #getPaneContent paneContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getToolPopups toolPopups} : sap.ui.ux3.ToolPopup[]</li>
 * <li>{@link #getHeaderItems headerItems} : sap.ui.core.Control[]</li>
 * <li>{@link #getNotificationBar notificationBar} : sap.ui.ux3.NotificationBar</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedWorksetItem selectedWorksetItem} : string | sap.ui.ux3.NavigationItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.Shell#event:worksetItemSelected worksetItemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Shell#event:paneBarItemSelected paneBarItemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Shell#event:logout logout} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Shell#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Shell#event:feedSubmit feedSubmit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Shell#event:paneClosed paneClosed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Ux3 GoldReflection Shell, which is an application frame with navigation capabilities.
 * It is supposed to be added to a direct child of the BODY tag of a page and there should be no other parts of the page consuming space outside the Shell.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.Shell
 */
sap.ui.core.Control.extend("sap.ui.ux3.Shell", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setContent", "setPaneContent", "openPersonalizationDialog", "initializePersonalization", "getSearchField", "openPane", "closePane", "isPaneOpen"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"appTitle" : {type : "string", group : "Misc", defaultValue : null},
		"appIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"appIconTooltip" : {type : "string", group : "Misc", defaultValue : null},
		"showLogoutButton" : {type : "boolean", group : "Misc", defaultValue : true},
		"logoutButtonTooltip" : {type : "string", group : "Accessibility", defaultValue : null},
		"showSearchTool" : {type : "boolean", group : "Misc", defaultValue : true},
		"showInspectorTool" : {type : "boolean", group : "Misc", defaultValue : false, deprecated: true},
		"showFeederTool" : {type : "boolean", group : "Misc", defaultValue : true},
		"showTools" : {type : "boolean", group : "Misc", defaultValue : true},
		"showPane" : {type : "boolean", group : "Misc", defaultValue : true},
		"headerType" : {type : "sap.ui.ux3.ShellHeaderType", group : "Misc", defaultValue : sap.ui.ux3.ShellHeaderType.Standard},
		"designType" : {type : "sap.ui.ux3.ShellDesignType", group : "Misc", defaultValue : sap.ui.ux3.ShellDesignType.Standard},
		"paneWidth" : {type : "int", group : "Misc", defaultValue : 250},
		"applyContentPadding" : {type : "boolean", group : "Appearance", defaultValue : true},
		"fullHeightContent" : {type : "boolean", group : "Appearance", defaultValue : false},
		"allowOverlayHeaderAccess" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	defaultAggregation : "content",
	aggregations : {
    	"worksetItems" : {type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "worksetItem"}, 
    	"paneBarItems" : {type : "sap.ui.core.Item", multiple : true, singularName : "paneBarItem"}, 
    	"paneContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "paneContent"}, 
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"toolPopups" : {type : "sap.ui.ux3.ToolPopup", multiple : true, singularName : "toolPopup"}, 
    	"headerItems" : {type : "sap.ui.core.Control", multiple : true, singularName : "headerItem"}, 
    	"notificationBar" : {type : "sap.ui.ux3.NotificationBar", multiple : false}, 
    	"_paneOverflowMenu" : {type : "sap.ui.commons.Menu", multiple : false, visibility : "hidden"}
	},
	associations : {
		"selectedWorksetItem" : {type : "sap.ui.ux3.NavigationItem", multiple : false}
	},
	events : {
		"worksetItemSelected" : {allowPreventDefault : true}, 
		"paneBarItemSelected" : {}, 
		"logout" : {}, 
		"search" : {}, 
		"feedSubmit" : {}, 
		"paneClosed" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.Shell with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.Shell.extend
 * @function
 */

sap.ui.ux3.Shell.M_EVENTS = {'worksetItemSelected':'worksetItemSelected','paneBarItemSelected':'paneBarItemSelected','logout':'logout','search':'search','feedSubmit':'feedSubmit','paneClosed':'paneClosed'};


/**
 * Getter for property <code>appTitle</code>.
 * The application title to appear in the left part of the header, usually a company and/or product name. appIcon and appTitle are both optional and can both be set; in this case the icon appears first.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>appTitle</code>
 * @public
 * @name sap.ui.ux3.Shell#getAppTitle
 * @function
 */

/**
 * Setter for property <code>appTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAppTitle  new value for property <code>appTitle</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setAppTitle
 * @function
 */


/**
 * Getter for property <code>appIcon</code>.
 * The URL of the image to appear in the left part of the header, usually a branding image containing a logo and/or product name. appIcon and appTitle are both optional and can both be set; in this case the icon appears first.
 * If the appIcon is set, for accessibility reasons the appIconTooltip must also be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>appIcon</code>
 * @public
 * @name sap.ui.ux3.Shell#getAppIcon
 * @function
 */

/**
 * Setter for property <code>appIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sAppIcon  new value for property <code>appIcon</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setAppIcon
 * @function
 */


/**
 * Getter for property <code>appIconTooltip</code>.
 * The tooltip of the application icon in the header
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>appIconTooltip</code>
 * @public
 * @name sap.ui.ux3.Shell#getAppIconTooltip
 * @function
 */

/**
 * Setter for property <code>appIconTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAppIconTooltip  new value for property <code>appIconTooltip</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setAppIconTooltip
 * @function
 */


/**
 * Getter for property <code>showLogoutButton</code>.
 * Whether the Logoff button in the header should be displayed or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLogoutButton</code>
 * @public
 * @name sap.ui.ux3.Shell#getShowLogoutButton
 * @function
 */

/**
 * Setter for property <code>showLogoutButton</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLogoutButton  new value for property <code>showLogoutButton</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setShowLogoutButton
 * @function
 */


/**
 * Getter for property <code>logoutButtonTooltip</code>.
 * The tooltip to be displayed for the Logout Button of the Shell. If not set, a text meaning "Logout" in the current language will be displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>logoutButtonTooltip</code>
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.Shell#getLogoutButtonTooltip
 * @function
 */

/**
 * Setter for property <code>logoutButtonTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLogoutButtonTooltip  new value for property <code>logoutButtonTooltip</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.Shell#setLogoutButtonTooltip
 * @function
 */


/**
 * Getter for property <code>showSearchTool</code>.
 * Whether the "Global Search" tool should be displayed or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSearchTool</code>
 * @public
 * @name sap.ui.ux3.Shell#getShowSearchTool
 * @function
 */

/**
 * Setter for property <code>showSearchTool</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSearchTool  new value for property <code>showSearchTool</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setShowSearchTool
 * @function
 */


/**
 * Getter for property <code>showInspectorTool</code>.
 * Whether the "Inspector" tool should be displayed or not.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showInspectorTool</code>
 * @public
 * @deprecated Since version 1.7.2. 
 * According to the current Ux designs, the ThingInspector should NOT be opened like this from the Tool Pane. And technically, the ThingInspector is not a ToolPopup.
 * Instead trigger it from the respective elements in the Shell content.
 * @name sap.ui.ux3.Shell#getShowInspectorTool
 * @function
 */

/**
 * Setter for property <code>showInspectorTool</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowInspectorTool  new value for property <code>showInspectorTool</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.7.2. 
 * According to the current Ux designs, the ThingInspector should NOT be opened like this from the Tool Pane. And technically, the ThingInspector is not a ToolPopup.
 * Instead trigger it from the respective elements in the Shell content.
 * @name sap.ui.ux3.Shell#setShowInspectorTool
 * @function
 */


/**
 * Getter for property <code>showFeederTool</code>.
 * Whether the "Feeder" tool should be displayed or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showFeederTool</code>
 * @public
 * @name sap.ui.ux3.Shell#getShowFeederTool
 * @function
 */

/**
 * Setter for property <code>showFeederTool</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowFeederTool  new value for property <code>showFeederTool</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setShowFeederTool
 * @function
 */


/**
 * Getter for property <code>showTools</code>.
 * Whether the tool area should be displayed at all or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showTools</code>
 * @public
 * @name sap.ui.ux3.Shell#getShowTools
 * @function
 */

/**
 * Setter for property <code>showTools</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowTools  new value for property <code>showTools</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setShowTools
 * @function
 */


/**
 * Getter for property <code>showPane</code>.
 * Whether the pane bar should be displayed at all or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPane</code>
 * @public
 * @name sap.ui.ux3.Shell#getShowPane
 * @function
 */

/**
 * Setter for property <code>showPane</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPane  new value for property <code>showPane</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setShowPane
 * @function
 */


/**
 * Getter for property <code>headerType</code>.
 * Defines which header type to be used. Depending on the header type some other functionality might be obsolete.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.ux3.ShellHeaderType} the value of property <code>headerType</code>
 * @public
 * @name sap.ui.ux3.Shell#getHeaderType
 * @function
 */

/**
 * Setter for property <code>headerType</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.ux3.ShellHeaderType} oHeaderType  new value for property <code>headerType</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setHeaderType
 * @function
 */


/**
 * Getter for property <code>designType</code>.
 * Defines which design type is to be used.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.ux3.ShellDesignType} the value of property <code>designType</code>
 * @public
 * @since 1.12.0
 * @name sap.ui.ux3.Shell#getDesignType
 * @function
 */

/**
 * Setter for property <code>designType</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.ux3.ShellDesignType} oDesignType  new value for property <code>designType</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.0
 * @name sap.ui.ux3.Shell#setDesignType
 * @function
 */


/**
 * Getter for property <code>paneWidth</code>.
 * The width of the right-hand side pane in pixels. The value must be a non-negative integer. The Shell reserves the right to define a minimum width (currently 50px).
 *
 * Default value is <code>250</code>
 *
 * @return {int} the value of property <code>paneWidth</code>
 * @public
 * @name sap.ui.ux3.Shell#getPaneWidth
 * @function
 */

/**
 * Setter for property <code>paneWidth</code>.
 *
 * Default value is <code>250</code> 
 *
 * @param {int} iPaneWidth  new value for property <code>paneWidth</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setPaneWidth
 * @function
 */


/**
 * Getter for property <code>applyContentPadding</code>.
 * Whether the Shell content area should have a theme-dependent padding or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>applyContentPadding</code>
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.Shell#getApplyContentPadding
 * @function
 */

/**
 * Setter for property <code>applyContentPadding</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bApplyContentPadding  new value for property <code>applyContentPadding</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.Shell#setApplyContentPadding
 * @function
 */


/**
 * Getter for property <code>fullHeightContent</code>.
 * If set to true, the content area has a defined height. This means that any content put inside can use "100%" height in CSS and will then consume all available space.
 * However, if content is larger, scrollbars will appear at the content area of the Shell and not on window level.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>fullHeightContent</code>
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.Shell#getFullHeightContent
 * @function
 */

/**
 * Setter for property <code>fullHeightContent</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFullHeightContent  new value for property <code>fullHeightContent</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.ui.ux3.Shell#setFullHeightContent
 * @function
 */


/**
 * Getter for property <code>allowOverlayHeaderAccess</code>.
 * Whether the Shell header (Title Area + Header Items) can be accessed when an Overlay, OverlayContainer or ThingInspector is open.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>allowOverlayHeaderAccess</code>
 * @public
 * @since 1.14.0
 * @name sap.ui.ux3.Shell#getAllowOverlayHeaderAccess
 * @function
 */

/**
 * Setter for property <code>allowOverlayHeaderAccess</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAllowOverlayHeaderAccess  new value for property <code>allowOverlayHeaderAccess</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.14.0
 * @name sap.ui.ux3.Shell#setAllowOverlayHeaderAccess
 * @function
 */


/**
 * Getter for aggregation <code>worksetItems</code>.<br/>
 * The workset items.
 * 
 * @return {sap.ui.ux3.NavigationItem[]}
 * @public
 * @name sap.ui.ux3.Shell#getWorksetItems
 * @function
 */


/**
 * Inserts a worksetItem into the aggregation named <code>worksetItems</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *          oWorksetItem the worksetItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the worksetItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the worksetItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the worksetItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#insertWorksetItem
 * @function
 */

/**
 * Adds some worksetItem <code>oWorksetItem</code> 
 * to the aggregation named <code>worksetItems</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oWorksetItem the worksetItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#addWorksetItem
 * @function
 */

/**
 * Removes an worksetItem from the aggregation named <code>worksetItems</code>.
 *
 * @param {int | string | sap.ui.ux3.NavigationItem} vWorksetItem the worksetItem to remove or its index or id
 * @return {sap.ui.ux3.NavigationItem} the removed worksetItem or null
 * @public
 * @name sap.ui.ux3.Shell#removeWorksetItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>worksetItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.NavigationItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Shell#removeAllWorksetItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.NavigationItem</code> in the aggregation named <code>worksetItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oWorksetItem the worksetItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Shell#indexOfWorksetItem
 * @function
 */
	

/**
 * Destroys all the worksetItems in the aggregation 
 * named <code>worksetItems</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#destroyWorksetItems
 * @function
 */


/**
 * Getter for aggregation <code>paneBarItems</code>.<br/>
 * The items to appear in the PaneBar.
 * 
 * @return {sap.ui.core.Item[]}
 * @public
 * @name sap.ui.ux3.Shell#getPaneBarItems
 * @function
 */


/**
 * Inserts a paneBarItem into the aggregation named <code>paneBarItems</code>.
 *
 * @param {sap.ui.core.Item}
 *          oPaneBarItem the paneBarItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the paneBarItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the paneBarItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the paneBarItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#insertPaneBarItem
 * @function
 */

/**
 * Adds some paneBarItem <code>oPaneBarItem</code> 
 * to the aggregation named <code>paneBarItems</code>.
 *
 * @param {sap.ui.core.Item}
 *            oPaneBarItem the paneBarItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#addPaneBarItem
 * @function
 */

/**
 * Removes an paneBarItem from the aggregation named <code>paneBarItems</code>.
 *
 * @param {int | string | sap.ui.core.Item} vPaneBarItem the paneBarItem to remove or its index or id
 * @return {sap.ui.core.Item} the removed paneBarItem or null
 * @public
 * @name sap.ui.ux3.Shell#removePaneBarItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>paneBarItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Shell#removeAllPaneBarItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>paneBarItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oPaneBarItem the paneBarItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Shell#indexOfPaneBarItem
 * @function
 */
	

/**
 * Destroys all the paneBarItems in the aggregation 
 * named <code>paneBarItems</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#destroyPaneBarItems
 * @function
 */


/**
 * Getter for aggregation <code>paneContent</code>.<br/>
 * The content to appear in the pane area.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.Shell#getPaneContent
 * @function
 */


/**
 * Inserts a paneContent into the aggregation named <code>paneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oPaneContent the paneContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the paneContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the paneContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the paneContent is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#insertPaneContent
 * @function
 */

/**
 * Adds some paneContent <code>oPaneContent</code> 
 * to the aggregation named <code>paneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oPaneContent the paneContent to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#addPaneContent
 * @function
 */

/**
 * Removes an paneContent from the aggregation named <code>paneContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vPaneContent the paneContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed paneContent or null
 * @public
 * @name sap.ui.ux3.Shell#removePaneContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>paneContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Shell#removeAllPaneContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>paneContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oPaneContent the paneContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Shell#indexOfPaneContent
 * @function
 */
	

/**
 * Destroys all the paneContent in the aggregation 
 * named <code>paneContent</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#destroyPaneContent
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content to appear in the main canvas. Each modification of this aggregation leads to a re-rendering of the content area - but not to a re-rendering of the complete Shell.
 * 
 * <strong>Note</strong>: this is the default aggregation for Shell.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.Shell#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.ux3.Shell#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Shell#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Shell#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>toolPopups</code>.<br/>
 * The items which appear in the ToolPalette and are opened as popup when clicked.
 * 
 * @return {sap.ui.ux3.ToolPopup[]}
 * @public
 * @name sap.ui.ux3.Shell#getToolPopups
 * @function
 */


/**
 * Inserts a toolPopup into the aggregation named <code>toolPopups</code>.
 *
 * @param {sap.ui.ux3.ToolPopup}
 *          oToolPopup the toolPopup to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the toolPopup should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the toolPopup is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the toolPopup is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#insertToolPopup
 * @function
 */

/**
 * Adds some toolPopup <code>oToolPopup</code> 
 * to the aggregation named <code>toolPopups</code>.
 *
 * @param {sap.ui.ux3.ToolPopup}
 *            oToolPopup the toolPopup to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#addToolPopup
 * @function
 */

/**
 * Removes an toolPopup from the aggregation named <code>toolPopups</code>.
 *
 * @param {int | string | sap.ui.ux3.ToolPopup} vToolPopup the toolPopup to remove or its index or id
 * @return {sap.ui.ux3.ToolPopup} the removed toolPopup or null
 * @public
 * @name sap.ui.ux3.Shell#removeToolPopup
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>toolPopups</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ToolPopup[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Shell#removeAllToolPopups
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ToolPopup</code> in the aggregation named <code>toolPopups</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ToolPopup}
 *            oToolPopup the toolPopup whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Shell#indexOfToolPopup
 * @function
 */
	

/**
 * Destroys all the toolPopups in the aggregation 
 * named <code>toolPopups</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#destroyToolPopups
 * @function
 */


/**
 * Getter for aggregation <code>headerItems</code>.<br/>
 * Controls to appear in the header next to the logout button. It is recommended to only use controls of type Button, MenuButton and TextView.
 * The respective UI guidelines need to be enforced on a higher level.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.Shell#getHeaderItems
 * @function
 */


/**
 * Inserts a headerItem into the aggregation named <code>headerItems</code>.
 *
 * @param {sap.ui.core.Control}
 *          oHeaderItem the headerItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#insertHeaderItem
 * @function
 */

/**
 * Adds some headerItem <code>oHeaderItem</code> 
 * to the aggregation named <code>headerItems</code>.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderItem the headerItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#addHeaderItem
 * @function
 */

/**
 * Removes an headerItem from the aggregation named <code>headerItems</code>.
 *
 * @param {int | string | sap.ui.core.Control} vHeaderItem the headerItem to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerItem or null
 * @public
 * @name sap.ui.ux3.Shell#removeHeaderItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Shell#removeAllHeaderItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderItem the headerItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Shell#indexOfHeaderItem
 * @function
 */
	

/**
 * Destroys all the headerItems in the aggregation 
 * named <code>headerItems</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#destroyHeaderItems
 * @function
 */


/**
 * Getter for aggregation <code>notificationBar</code>.<br/>
 * The NotificationBar which should be integrated into the Shell.
 * 
 * @return {sap.ui.ux3.NotificationBar}
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.Shell#getNotificationBar
 * @function
 */


/**
 * Setter for the aggregated <code>notificationBar</code>.
 * @param {sap.ui.ux3.NotificationBar} oNotificationBar
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.Shell#setNotificationBar
 * @function
 */
	

/**
 * Destroys the notificationBar in the aggregation 
 * named <code>notificationBar</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.Shell#destroyNotificationBar
 * @function
 */


/**
 * The ID of the Item that is currently selected.
 * When setting, the NavigationItem itself can be given instead of its ID. There will not be a worksetItemSelected event, the application is responsible to show the proper content according to the newly selected WorksetItem. If the set WorksetItem does not exist in this Shell, the first item (and first sub-item) will be selected after the call.
 * When getting, always the ID is returned, by which the NavigationItem instance can be retrieved.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedWorksetItem</code> association, or null
 * @public
 * @name sap.ui.ux3.Shell#getSelectedWorksetItem
 * @function
 */

/**
 * The ID of the Item that is currently selected.
 * When setting, the NavigationItem itself can be given instead of its ID. There will not be a worksetItemSelected event, the application is responsible to show the proper content according to the newly selected WorksetItem. If the set WorksetItem does not exist in this Shell, the first item (and first sub-item) will be selected after the call.
 * When getting, always the ID is returned, by which the NavigationItem instance can be retrieved.
 *
 * @param {string | sap.ui.ux3.NavigationItem} vSelectedWorksetItem 
 *    Id of an element which becomes the new target of this <code>selectedWorksetItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#setSelectedWorksetItem
 * @function
 */


	
/**
 * Fired when a workset item was selected by the user. The application may populate the sub-items of the given workset item in the event handler, but this must happen synchronously. If this is done, the application is responsible for displaying the correct content for the selected one of the newly created sub-items. The Shell will currently always mark the first sub-item as selected. 
 *
 * @name sap.ui.ux3.Shell#worksetItemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The id of the workset item that has been newly selected by the user. If a top-level item has been clicked which has sub-items, the ID of the currently active sub-item (/leaf) is given.
 * @param {sap.ui.ux3.NavigationItem} oControlEvent.getParameters.item The selected NavigationItem
 * @param {string} oControlEvent.getParameters.key The key of the selected NavigationItem (or null if there is no key)
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'worksetItemSelected' event of this <code>sap.ui.ux3.Shell</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Shell</code>.<br/> itself. 
 *  
 * Fired when a workset item was selected by the user. The application may populate the sub-items of the given workset item in the event handler, but this must happen synchronously. If this is done, the application is responsible for displaying the correct content for the selected one of the newly created sub-items. The Shell will currently always mark the first sub-item as selected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Shell</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#attachWorksetItemSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'worksetItemSelected' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#detachWorksetItemSelected
 * @function
 */

/**
 * Fire event worksetItemSelected to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The id of the workset item that has been newly selected by the user. If a top-level item has been clicked which has sub-items, the ID of the currently active sub-item (/leaf) is given.</li>
 * <li>'item' of type <code>sap.ui.ux3.NavigationItem</code> The selected NavigationItem</li>
 * <li>'key' of type <code>string</code> The key of the selected NavigationItem (or null if there is no key)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.ux3.Shell#fireWorksetItemSelected
 * @function
 */


/**
 * An item in the right-hand-side pane bar has been selected, the pane is now visible and can be filled with UI elements. 
 *
 * @name sap.ui.ux3.Shell#paneBarItemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The ID of the selected PaneBarItem.
 * @param {sap.ui.core.Item} oControlEvent.getParameters.item The selected Item
 * @param {string} oControlEvent.getParameters.key The key of the selected Item (or null if there is no key)
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'paneBarItemSelected' event of this <code>sap.ui.ux3.Shell</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Shell</code>.<br/> itself. 
 *  
 * An item in the right-hand-side pane bar has been selected, the pane is now visible and can be filled with UI elements. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Shell</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#attachPaneBarItemSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'paneBarItemSelected' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#detachPaneBarItemSelected
 * @function
 */

/**
 * Fire event paneBarItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The ID of the selected PaneBarItem.</li>
 * <li>'item' of type <code>sap.ui.core.Item</code> The selected Item</li>
 * <li>'key' of type <code>string</code> The key of the selected Item (or null if there is no key)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Shell#firePaneBarItemSelected
 * @function
 */


/**
 * Fired when the user clicks the "Log-off" button 
 *
 * @name sap.ui.ux3.Shell#logout
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'logout' event of this <code>sap.ui.ux3.Shell</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Shell</code>.<br/> itself. 
 *  
 * Fired when the user clicks the "Log-off" button 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Shell</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#attachLogout
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'logout' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#detachLogout
 * @function
 */

/**
 * Fire event logout to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Shell#fireLogout
 * @function
 */


/**
 * Fired when search has been triggered. 
 *
 * @name sap.ui.ux3.Shell#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.ui.ux3.Shell</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Shell</code>.<br/> itself. 
 *  
 * Fired when search has been triggered. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Shell</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Shell#fireSearch
 * @function
 */


/**
 * Fired when a new feed entry is submitted. 
 *
 * @name sap.ui.ux3.Shell#feedSubmit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'feedSubmit' event of this <code>sap.ui.ux3.Shell</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Shell</code>.<br/> itself. 
 *  
 * Fired when a new feed entry is submitted. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Shell</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#attachFeedSubmit
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'feedSubmit' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Shell#detachFeedSubmit
 * @function
 */

/**
 * Fire event feedSubmit to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Shell#fireFeedSubmit
 * @function
 */


/**
 * Fired after a side pane of the shell is closed. It is also fired, when an open pane is closed by calling setShowPane(false), if and only if the pane was opened before. 
 *
 * @name sap.ui.ux3.Shell#paneClosed
 * @event
 * @since 1.12.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The id of the PaneBarItem to which the closed pane belonged.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'paneClosed' event of this <code>sap.ui.ux3.Shell</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Shell</code>.<br/> itself. 
 *  
 * Fired after a side pane of the shell is closed. It is also fired, when an open pane is closed by calling setShowPane(false), if and only if the pane was opened before. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Shell</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.0
 * @name sap.ui.ux3.Shell#attachPaneClosed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'paneClosed' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.0
 * @name sap.ui.ux3.Shell#detachPaneClosed
 * @function
 */

/**
 * Fire event paneClosed to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The id of the PaneBarItem to which the closed pane belonged.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 * @since 1.12.0
 * @name sap.ui.ux3.Shell#firePaneClosed
 * @function
 */


/**
 * Replaces the existing Shell content with the given Control(-Tree). Only leads to a re-rendering of the content area (not the complete Shell).
 * This method may be more convenient than a series of calls to "removeContent" and "addContent", which each lead to a re-rendering of the content area (but again not of the complete Shell).
 * 
 * By default the old content is not destroyed and is returned by this method in an array for further usage. To avoid memory leaks, the old content should be destroyed (if not needed later), by setting the "destroyOldContent" flag or by destroying it manually later on. If "destroyOldContent" is set, an empty array is returned.
 *
 * @name sap.ui.ux3.Shell.prototype.setContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oContent
 *         The new Content. In this method it must be exactly one control (-tree). Use addContent() to add more control (-trees) to the main content area of the Shell.
 * @param {boolean} 
 *         bDestroyOldContent
 *         If set, the controls previously contained in the Shell will be destroyed, to avoid memory leaks.

 * @type sap.ui.core.Control[]
 * @public
 */


/**
 * Replaces the existing side pane content with the given Control(-Tree). This method is optimized to only re-render the pane content (and not the shell) which is faster and smoother than any other way of changing the "paneContent" aggregation.
 * 
 * By default, the old pane content is not destroyed and is returned by this method in an array for further usage. To avoid memory leaks, the old content should be destroyed (if not needed later), by setting the "destroyOldContent" flag or by destroying it manually later on. If "destroyOldContent" is set, an empty array is returned.
 *
 * @name sap.ui.ux3.Shell.prototype.setPaneContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oContent
 *         The new Pane content. In this method it must be exactly one control (-tree). This could likely be a layout or a specific ux3 Pane control. Use addPaneContent() to add more control (-trees) to the Pane.
 * @param {boolean} 
 *         bDestroyOldContent
 *         If set, the controls previously contained in the pane will be destroyed, to avoid memory leaks.

 * @type sap.ui.core.Control[]
 * @public
 */


/**
 * Experimental method! Do not use!
 *
 * @name sap.ui.ux3.Shell.prototype.openPersonalizationDialog
 * @function

 * @type void
 * @public
 */


/**
 * Experimental method! Do not use!
 * 
 * Makes Shell personalization available and injects the given personalization settings. This should be called before the user can do any adaptations per drag&drop or using the personalization dialog. Otherwise it may override the user's new settings.
 *
 * @name sap.ui.ux3.Shell.prototype.initializePersonalization
 * @function
 * @param {object} 
 *         oSettings
 *         Personalization settings object

 * @type void
 * @public
 */


/**
 * Returns the SearchField control which is used in the Search Tool.
 *
 * @name sap.ui.ux3.Shell.prototype.getSearchField
 * @function

 * @type sap.ui.commons.SearchField
 * @public
 */


/**
 * Opens the side Pane.
 * 
 * A valid ID of a paneBarItem must be given, so this item can be marked as selected. A "paneBarItemSelected" event is then fired as if the opening was triggered by the user by a click on the respective PaneBarItem.
 * This method can be called (with different IDs) even when the Pane is already open. It has then the same effect as if the user switches between PaneBarItems.
 * 
 * Returns 'this' to allow method chaining.
 *
 * @name sap.ui.ux3.Shell.prototype.openPane
 * @function
 * @param {string} 
 *         sPaneBarItemId
 *         The ID of the PaneBarItem which should be marked as selected.

 * @type sap.ui.ux3.Shell
 * @public
 */


/**
 * Closes the side Pane (if open).
 * 
 * Returns 'this' to allow method chaining.
 *
 * @name sap.ui.ux3.Shell.prototype.closePane
 * @function

 * @type sap.ui.ux3.Shell
 * @public
 */


/**
 * Returns 'true' if the side Pane is currently open.
 *
 * @name sap.ui.ux3.Shell.prototype.isPaneOpen
 * @function

 * @type boolean
 * @public
 */


// Start of sap\ui\ux3\Shell.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Menu'); // unlisted dependency retained


sap.ui.ux3.Shell.WSI_MENU_DELAY = 200;
sap.ui.ux3.Shell.WSI_OVERFLOW_SCROLL_STEP = 250; // how many pixels to scroll with every overflow arrow click
sap.ui.ux3.Shell.TOOL_PREFIX = "-tool-";
sap.ui.ux3.Shell.FIRST_RENDERING = true; // used for detecting the single very first rendering of any Shell on the page

/**
 * The basic width of the ToolPalette if all icons fit into one column. Multiplied if more than
 * one column of items must be used.
 * 
 * This value might change after rendering from the LESS parameter "sapUiUx3ShellSideBarBaseWidth"
 * @see onBeforeRendering and onThemeChanged
 */
sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH = null;

/**
 * The basic height of the overflow button in the right pane. Shown when there are too many entries.
 * 
 * This value might change after rendering from the LESS parameter "sapUiUx3ShellPaneOverflowButtonHeight",
 * @see onBeforeRendering and onThemeChanged
 */
sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT = null;

sap.ui.ux3.Shell.prototype.init = function() {
	this._iOpenPaneIndex = -1;
	this._sOpenWsiId = null;

	this._bPreviousScrollRight = false; // remember the workset item overflow state
	this._bPreviousScrollLeft = false;

	this._sSelectedWorksetId = null;
	this._sSelectedFacetId= null;

	this._aSyncRefStack = [];
	this._mSyncRefs = {};

	this._oWorksetBar = new sap.ui.ux3.NavigationBar(this.getId() + "-wsBar", {
		toplevelVariant : true,
		select          : [this._handleWorksetBarSelect, this]
	}).setParent(this);
	this._oFacetBar = new sap.ui.ux3.NavigationBar(this.getId() + "-facetBar", {
		select          : [this._handleFacetBarSelect, this]
	}).setParent(this);

	this.setAggregation("_paneOverflowMenu", new sap.ui.commons.Menu());

	// Resize check closure, to be used with bind and unbind (so the right one gets unbound)
	var that = this;
	this._checkResizeClosure = function() { that._checkResize(); };

	// The following calue is updated when the ToolPalette is resized. 
	// (It is used in methods like _closePane and setOffsetRight)
	this.currentToolPaletteWidth = 0;

	this._updateThemeVariables();
};


sap.ui.ux3.Shell.prototype.exit = function() {
	if (this._oWorksetBar) {
		this._oWorksetBar.destroy();
		delete this._oWorksetBar;
	}
	if (this._oFacetBar) {
		this._oFacetBar.destroy();
		delete this._oFacetBar;
	}
	this._oSearchField = null;

	jQuery(window).unbind("resize", this._checkResizeClosure);
};


sap.ui.ux3.Shell.prototype.onBeforeRendering = function() {

	// unbind the tool palette mouse (hover effect) handlers
	this._beforeRenderingToolPalette();

	this.$("focusDummyPane").unbind("focusin");

	// drag&drop for images with local file API
	if (window.FileReader) {
		var $hdr = this.$("hdr");
		$hdr.unbind('dragover', this._handleDragover)
		.unbind('dragend', this._handleDragend)
		.unbind('drop', this._handleDrop);
		var $bg = this.$("bgImg");
		$bg.unbind('dragover', jQuery.proxy(this._handleDragover))
		.unbind('dragend', this._handleDragend)
		.unbind('drop', this._handleDrop);
	}

};


sap.ui.ux3.Shell.prototype.onAfterRendering = function() {

	// register hover effect handlers for application-provided tool icons
	this._afterRenderingToolPalette();

	if (this._topSyncRefId && this._mSyncRefs[this._topSyncRefId].focusLast) {
		this.$("focusDummyPane").focusin(this._mSyncRefs[this._topSyncRefId].focusLast);
	}

	// drag&drop for images with local file API
	if (window.FileReader) {
		var $hdr = this.$("hdr");
		$hdr.bind('dragover', jQuery.proxy(this._handleDragover, this))
		.bind('dragend',jQuery.proxy(this._handleDragend, this))
		.bind('drop', jQuery.proxy(this._handleDrop, this));
		var $bg = this.$("bgImg");
		$bg.bind('dragover', jQuery.proxy(this._handleDragover, this))
		.bind('dragend',jQuery.proxy(this._handleDragend, this))
		.bind('drop', jQuery.proxy(this._handleDrop, this));
	}

	// hide or show the facet bar depending on whether the current workset item has sub-items
	var bShowFacetBar = (this._oFacetBar.getAssociatedItems().length > 0);
	var $FacetBar = this.$("facetBar");
	$FacetBar.css("display", (bShowFacetBar ? "block" : "none"));
	this._adaptContentHeight();

	// remember RTL mode to avoid repeated checks
	this._bRtl = sap.ui.getCore().getConfiguration().getRTL();

	if (this._getPersonalization().hasChanges()) {
		this._getPersonalization().applySettings(this._getPersonalization().oSettings);
	}

	// ItemNavigation for PaneBar items
	if (!this._oPaneItemNavigation) {
		this._oPaneItemNavigation = new sap.ui.core.delegate.ItemNavigation().setCycling(false);
		this.addDelegate(this._oPaneItemNavigation);
	}
	var $PaneListRef = this.$("paneBarEntries");
	this._updatePaneBarItemNavigation($PaneListRef);

	this._setNotifyVisibility();

	if (sap.ui.ux3.Shell.FIRST_RENDERING) {
		jQuery(window).bind("resize", this._checkResizeClosure);
	}
	this._checkResize();

	sap.ui.ux3.Shell.FIRST_RENDERING = false;

	// Firefox ESR (17) workaround
	// TODO: Remove when Firefox ESR is updated
	if (!!sap.ui.Device.browser.firefox && sap.ui.Device.browser.version == 17) {
		jQuery.sap.delayedCall(500, this, this._checkResize);
	}
};

/**
 * Reads LESS parameter values from the currently active theme.
 * If any of the values are set to NaN, something went wrong.
 * 
 * @private
 */
sap.ui.ux3.Shell.prototype._updateThemeVariables = function() {
	sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH = parseInt(
		sap.ui.core.theming.Parameters.get("sapUiUx3ShellSideBarBaseWidth"),
		10
	);

	sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT = parseInt(
		sap.ui.core.theming.Parameters.get("sapUiUx3ShellPaneOverflowButtonHeight"),
		10
	);
	// Save the original button height to be referenced as maximum height
	sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_MAX_HEIGHT = sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT;
};


/**
 * Triggers a delayed check that determines whether the overflow mechanism of the side bars
 * must be activated.
 * 
 * @private
 */
sap.ui.ux3.Shell.prototype._checkResize = function() {
	if (!this.getDomRef()) {
		return;
	}

	// The browser window is (depending on the configuration) repainted several hundred times
	// during resize, which triggers several resize-events
	// Keep it from executing several times when only once suffices...
	jQuery.sap.clearDelayedCall(this._checkResizeDelayId);
	this._checkResizeDelayId = jQuery.sap.delayedCall(100, this, function() {
		this._rerenderPaneBarItems();
		this._checkToolPaletteSize();
	});
};


/**
 * Checks whether there are too many ToolPopups to fit into the ToolPalette (left bar) and changes 
 * its width accordingly.
 */
sap.ui.ux3.Shell.prototype._checkToolPaletteSize = function(bHideBar) {
	if (!this.getDomRef()) {
		// Do not try to calculate anything if nothing has been rendered
		return;
	}

	if (bHideBar === undefined) {
		bHideBar = !this.getShowTools();
	}
	
	// Check whether the last item is still visible on the screen
	var oToolPalette = this.$("tp");

	var iColumns = 1;
	var iLastTop = 9999999; // Just some very large number...
	var iCurrentTop = 0;
	var bKeepGrowing = true;

	if (bHideBar) {
		iColumns = 0;
		bKeepGrowing = false;
	}

	do { // Loop at least once
		var iBarWidth  = iColumns * sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH;
		var iSepWidth  = Math.floor(iBarWidth / 2);
		var iSepMargin = Math.floor(iBarWidth / 4);

		var sSide1 = this._bRtl ? "right" : "left";

		// Move left side of canvas
		this.$("canvas").css(sSide1, iBarWidth + "px");
		this.$("canvasBackground").css(sSide1, iBarWidth + "px");
		// Move left side of WorksetItems (Navigation)
		this.$("wBar").css("margin-" + sSide1, iBarWidth + "px");

		// Resize the Notification Area
		var mProps = {};
		mProps[sSide1] = iBarWidth + "px";
		this.$("notify").css(mProps);

		// Resize ToolPalette
		oToolPalette.css("width", iBarWidth + "px");
		// Resize Toolpalette Separators
		var mProps = {};
		mProps["width"] = iSepWidth + "px";
		mProps["margin-" + sSide1] = iSepMargin + "px";
		this.$("tp-separator").css(mProps);

		if (!bKeepGrowing) {
			// Break if we have to stop growing...
			break;
		}

		sap.ui.core.RenderManager.forceRepaint(oToolPalette[0]);
		iCurrentTop = oToolPalette.children().last()[0].offsetTop;
		if (iCurrentTop >= iLastTop) {
			// Reset to previous size...
			iColumns--;
			// and break (see if-condition above)
			bKeepGrowing = false;
			continue;
		}
		iLastTop = iCurrentTop;

		iColumns++;
		if (iColumns > 10) {
			// Now this is just silly....
			jQuery.sap.log.error("The ToolPalette is growing too much, this must be a bug.");
			break;
		}

	} while (
		iCurrentTop > oToolPalette.height()
	);

	this.currentToolPaletteWidth = this.getShowTools() ? iBarWidth : 0;
	
	this._updateOverlaysOnToolPaletteChange();
};


sap.ui.ux3.Shell.prototype._updateOverlaysOnToolPaletteChange = function() {
	// Resize visible Overlays when the ToolPalette changes its width.
	// Overlays can for example be ThingInspectors that leave room to the sides so the user is able
	// to use the panes while having the overlay open.
	// See setShowTools-method for another location that updates positions in this way
	var $OpenOverlays = this._getSyncRefs();
	if(this._bRtl){
		$OpenOverlays.css("right", this.currentToolPaletteWidth + "px");
	}else{
		$OpenOverlays.css("left", this.currentToolPaletteWidth + "px");
	}
};


/**
 * Updates the ItemNavigation for the PaneBarItems after the HTML has changed due to re-rendering
 *
 * @param $PaneListRef
 */
sap.ui.ux3.Shell.prototype._updatePaneBarItemNavigation = function($PaneListRef) {
	this._oPaneItemNavigation.setRootDomRef($PaneListRef[0]);
	var aPaneItems = $PaneListRef.children().toArray();
	this._oPaneItemNavigation.setItemDomRefs(aPaneItems);

	if (this._oPaneItemNavigation.getFocusedIndex() > aPaneItems.length) { // if items have been removed
		this._oPaneItemNavigation.setFocusedIndex(-1);
	}

	this._checkPaneBarOverflow($PaneListRef);
};

/**
 * Called in onAfterRendering and onThemeChanged to make sure that the paneBar-items that do not
 * fit on screen are rendered in a separate menu.
 * 
 * @param $PaneListRef jQuery object pointing to the List containing the items
 * @private
 */
sap.ui.ux3.Shell.prototype._checkPaneBarOverflow = function($PaneListRef) {
	// Keep it from executing several times when only once suffices...
	jQuery.sap.clearDelayedCall(this._checkPaneBarOverflowDelayId);
	this._checkPaneBarOverflowDelayId = jQuery.sap.delayedCall(200, this, function() {
		this._delayedCheckPaneBarOverflow($PaneListRef);
	});
};

sap.ui.ux3.Shell.prototype._delayedCheckPaneBarOverflow = function($PaneListRef) {

	if (!$PaneListRef) {
		$PaneListRef = this.$("paneBarEntries");
	}
	if ($PaneListRef.length == 0) {
		// If it is still not there, try again later...
		this._checkPaneBarOverflow();
		return;
	}

	var iListHeight = 
		$PaneListRef.parent().height() - 
		// The container itself overflows and its height is defined by its padding which changes
		// the available space in RTL mode... 
		// TODO: Check for a more elegant solution and - if found - rewrite
		(this._bRtl ? $PaneListRef.innerHeight() : 0);
	var iItemBottomPosition = 0;
	var $Entries = $PaneListRef.children();

	$Entries.css("display", "inline-block");
	var bItemsInMenu = false;
	var len = $Entries.length;
	for (var i = len - 1; i >= 0; --i) {
		// TODO: Maybe we can loop backwards and just brake when the first one fits.

		var oDomEntry = $Entries[i];
		// Find out at which position the bottom end of the item lies
		if (this._bRtl) {
			// When RTL-mode is enabled the rotated left side of the pane entry is at the bottom,
			// so the negative offsetLeft value indicates how far down the item goes...
			iItemBottomPosition = (0 - oDomEntry.offsetLeft);
		} else {
			// In normal mode, the rotated left is at the top, so we have to add the item width
			// to the offsetLeft value in order to get the bottom position
			iItemBottomPosition = oDomEntry.offsetLeft + oDomEntry.offsetWidth;
		}

		var bItemInPane = iItemBottomPosition < iListHeight;

		// Hide/show the main item
		jQuery(oDomEntry).css("display", bItemInPane ? "inline-block" : "none");
		// Hide/show the submenu item
		sap.ui.getCore().byId(oDomEntry.id + "-overflow").setVisible(!bItemInPane);
		
		if (bItemInPane) {
			// This item is inside the pane
			continue;
			// We cannot break at this point, since we don't know which items have been visible
			// in the overflow-menu before - so we have to loop over all items and set the 
			// visibility for all of them. Else, menu items could be set to visible that should
			// be hidden. Another solution would be to always show every entry in the overflow
			// menu.
		} else {
			bItemsInMenu = true;
		}
	}

	var $OverflowButton = this.$("paneBarOverflowButton");
	if (bItemsInMenu) {
		// Overflow is happening. Show button.
		$OverflowButton.css("display", "block");

	} else {
		// No overflow. Hide button.
		$OverflowButton.css("display", "none");
		// // Remove buffer for overflow menu button
		// $PaneBar.css("padding-bottom", "0");

		// Firefox ESR (17) Redraw bug workaround
		// TODO: Remove when Firefox ESR is updated
		if (!!sap.ui.Device.browser.firefox && sap.ui.Device.browser.version == 17) {
			sap.ui.core.RenderManager.forceRepaint(document.getElementsByTagName("body")[0]);
		}
	}
	
	// This is tricky: Because of this method, the overflow-button might change, but since the
	// calculation depends on the size of the overflow-button we have to check whether something 
	// changed and then restart the calculation if it did (or else we have an endless loop).
	var bOverflowButtonChanged = this._changeOverflowButton();
	if (bOverflowButtonChanged) {
		this._checkPaneBarOverflow();
	}
	
};


/**
 * Checks the text content of the overflow-button and resizes it depending on the text. The 
 * maximum height is defined through the less-parameter and written to 
 * sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_MAX_HEIGHT while the current height is saved in
 * sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT
 * 
 * @returns {bool} Returns whether a change to the button height has been made.
 */
sap.ui.ux3.Shell.prototype._adaptOverflowButtonHeight = function() {
	var $Button = this.$("paneBarOverflowButton");
	var $ButtonWrapper = this.$("paneBarOverflowWrapper");
	var $ButtonText = this.$("paneBarOverflowText");
	var $PaneBar = this.$("paneBarRight");

	// Make the span small so it does not increase the button size without having content
	$ButtonText.css("width", "");
	
	
	var iOldHeight = sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT;
	
	// We need the scroll_Width_ because the content of the button is rotated by 90°
	var iScrollWidth = $ButtonText[0].scrollWidth + /* buffer: */ 5;
	
	if (iScrollWidth > sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_MAX_HEIGHT) {
		// Use the size specified in the theme as maximum width
		sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT = sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_MAX_HEIGHT;
	} else {
		// The button does not need the maximum amount of allowed space, give it whatever it needs
		sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT = iScrollWidth;
	}
	
	$Button.css("height", sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT);
	$ButtonWrapper.css("width", sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT);
	// Make the span as large as the surrounding box again, so ellipsis works
	$ButtonText.css("width", "100%");
	// Make sure there is room for overflow menu button
	$PaneBar.css("padding-bottom", sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT + "px");

	
	return (iOldHeight != sap.ui.ux3.Shell.PANE_OVERFLOW_BUTTON_HEIGHT);
};

/**
 * Changes the overflow button from the standard text to the currently active overflowing
 * item and back.
 * 
 * @returns {bool} Returns whether a change to the button height has been made.
 */
sap.ui.ux3.Shell.prototype._changeOverflowButton = function() {
	// Only if this._sOpenPaneId is not null, an overflow item could be active
	// Whether the item is really in the overflow menu will be checked later by checking
	// its visible-property
	var oOverflowItem = null;
	if (this._sOpenPaneId) {
		oOverflowItem = sap.ui.getCore().byId(this._sOpenPaneId + "-overflow");
	}
	
	
	var sText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3").getText("SHELL_MORE_BUTTON");
	var bSelected = false;
	if (oOverflowItem && oOverflowItem.getVisible()) {
		// This activation is from an overflow menu item: Change overflow button
		sText = oOverflowItem.getText();
		bSelected = true;
	}
	
	sText = sText.toUpperCase(); // TODO: This should be done in CSS, see also renderer
	
	var oButtonText = this.$("paneBarOverflowText");

	oButtonText.text(sText);
	oButtonText.attr("title", sText);
	oButtonText.toggleClass("sapUiUx3ShellPaneEntrySelected", bSelected);
	
	return this._adaptOverflowButtonHeight();
};

sap.ui.ux3.Shell.prototype._getPaneOverflowMenu = function() {
	return this.getAggregation("_paneOverflowMenu");
};

/**
 * @returns an object defining the current focus in the Shell
 */
sap.ui.ux3.Shell.prototype.getFocusInfo = function() {
	try {
		var oElement = document.activeElement;
		return oElement ? {'sFocusId': oElement.id,'oFocusedElement': oElement} : {};
	} catch (ex) {
		// IE9 throws an Unspecified Error when accessing document.activeElement inside a frame before body.onload. This is not an issue, as there is just no focus yet to restore.
		return {};
	}
};

/**
 * Restores focus according to the given oFocusInfo which has been acquired by calling Shell.getFocusInfo
 * @param oFocusInfo
 */
sap.ui.ux3.Shell.prototype.applyFocusInfo = function(oFocusInfo) {
	var oElement = jQuery.sap.domById(oFocusInfo.sFocusId)
	|| oFocusInfo.oFocusedElement; // if not even an ID was available when focus was lost maybe the original DOM element is still there
	jQuery.sap.focus(oElement); // also works for oElement == null
};


/**
 *
 * @private
 * @static
 */
sap.ui.ux3.Shell._updateToolIcon = function(oDomRef) {
	if (oDomRef && oDomRef.firstChild) {
		var $elem = jQuery(oDomRef);
		var toolId = oDomRef.id.substr(oDomRef.id.indexOf(sap.ui.ux3.Shell.TOOL_PREFIX) + 6);
		var tool = sap.ui.getCore().byId(toolId);
		var icon = $elem.is(".sapUiUx3ShellToolSelected") ? tool.getIconSelected() : ($elem.is(".sapUiUx3ShellToolHover") ? tool.getIconHover() : tool.getIcon());
		oDomRef.firstChild.src = icon;
	}
};


sap.ui.ux3.Shell.prototype.onclick = function(oEvent) {
	this.onUserActivation(oEvent);
};
sap.ui.ux3.Shell.prototype.onsapspace = function(oEvent) {
	this.onUserActivation(oEvent);
};
sap.ui.ux3.Shell.prototype.onsapenter = function(oEvent) {
	this.onUserActivation(oEvent);
};

sap.ui.ux3.Shell.prototype.onUserActivation = function(oEvent) {
	var sTargetId = oEvent.target.id;
	var parent = oEvent.target.parentNode;
	var sId = this.getId();

	if (oEvent.target.className 
		&& oEvent.target.className.indexOf /* not available for SVG elements */ 
		&& oEvent.target.className.indexOf("sapUiUx3ShellHeader-logout") > -1) { // logout button clicked
		this.fireLogout();

	} else if (parent && parent.parentNode
		&& parent.parentNode.className
		&& parent.parentNode.className.indexOf /* not available for SVG elements */
		&& parent.parentNode.className.indexOf("sapUiUx3ShellToolPaletteArea") > -1) {  // tool item clicked
		this._handleToolItemClick(sTargetId);

	} else if (parent && parent.parentNode
		&& parent.parentNode.parentNode
		&& parent.parentNode.parentNode.className
		&& parent.parentNode.parentNode.className.indexOf /* not available for SVG elements */
		&& parent.parentNode.parentNode.className.indexOf("sapUiUx3ShellToolPaletteArea") > -1) {  // image in tool item clicked
		this._handleToolItemClick(parent.id);

	} else if (sTargetId === sId + "-paneBarOverflowText") {
		// Show/Hide overflow menu
		var oTarget = this.$("paneBarOverflowButton")[0];
		this._getPaneOverflowMenu().open(
			true, 
			oTarget,
			(this._bRtl ? "left" : "right") + " bottom",
			"center center",
			oTarget
		);

	} else if (sTargetId) {
		if (parent && parent.className 
			&& parent.className.indexOf /* not available for SVG elements */
			&& parent.className.indexOf("sapUiUx3ShellPaneEntries") > -1) {  // pane bar item clicked
			
			this._handlePaneBarItemClick(sTargetId);
		}
	}
};


/* ====== WORKSET ITEMS ====== */


sap.ui.ux3.Shell.prototype._handleWorksetBarSelect = function(oEvent) {
	var bProcessSelection = this._handleWorksetItemClick(oEvent.getParameter("item"));
	if (!bProcessSelection) {
		oEvent.preventDefault();
	}
};

sap.ui.ux3.Shell.prototype._handleFacetBarSelect = function(oEvent) {
	var bProcessSelection = this._handleWorksetItemClick(oEvent.getParameter("item"));
	if (!bProcessSelection) {
		oEvent.preventDefault();
	}
};


sap.ui.ux3.Shell.prototype._handleWorksetItemClick = function(oElement) {
	var parent = oElement.getParent(),
	id = oElement.getId(),
	facetId = id,
	bProcessSelection = true;

	if (parent instanceof sap.ui.ux3.Shell) { // 1st-level
		if (id != this._sSelectedWorksetId) {   // it's actually a change

			var aSubItems = oElement.getSubItems();
			if (aSubItems.length > 0) {
				facetId = aSubItems[0].getId();
			}

			// tell the application what the user has done and give the chance to supply new/more/changed subitems
			bProcessSelection = this._fireWorksetItemSelected(facetId);
			if (bProcessSelection) {

				this._sSelectedWorksetId = id;
				if (aSubItems.length > 0) {
					this._sSelectedFacetId = aSubItems[0].getId();
					id = this._sSelectedFacetId; // the user clicked first-level, but if the first-level has children there must be one of them selected
				} else {
					this._sSelectedFacetId = null;
				}

				// if the application modifies/sets the selected subId, this should work, as long as this._sSelectedFacetId is updated

				// application has received the event and potentially modified the subitems
				var aSubItems = oElement.getSubItems();
				this._oFacetBar.setAssociatedItems(aSubItems, true); // exchange the items in the second-level navigation; force an "arrow flies in" animation

				var $FacetBar = this.$("facetBar");
				var iFacetBarHeight = this._calcFacetBarHeight($FacetBar);

				// hide/show the second-level navigation
				if (aSubItems.length > 0) {
					if (!this._oFacetBar.isSelectedItemValid()) {
						this._oFacetBar.setSelectedItem(aSubItems[0]);
						this._sSelectedFacetId = aSubItems[0].getId();
					}
					$FacetBar.slideDown();
					this._adaptContentHeight(null, true, iFacetBarHeight);
				} else {
					this._oFacetBar.setSelectedItem(null);
					$FacetBar.slideUp();
					this._adaptContentHeight(null, true, iFacetBarHeight);
				}
			}
		}

	} else {									 // 2nd-level - it is a sub-item
		if (id != this._sSelectedFacetId) { // it's actually a change
			bProcessSelection = this._fireWorksetItemSelected(facetId);
			if (bProcessSelection) {
				this._sSelectedFacetId = id;
			}
		}
	}
	return bProcessSelection;
};


sap.ui.ux3.Shell.prototype._fireWorksetItemSelected = function(sId) {
	var item = sap.ui.getCore().byId(sId);
	var key = (item ? item.getKey() : null);
	var bProcessSelection = this.fireWorksetItemSelected({id:sId,item:item,key:key});
	if (bProcessSelection) {
		this.setAssociation("selectedWorksetItem", sId, true); // update the internal and publicly available knowledge about which item is selected
	}
	return bProcessSelection;
};





/* ====== TOOL PALETTE ====== */

sap.ui.ux3.Shell.prototype._closeCurrentToolPopup = function() {
	var sOpenToolId = undefined;
	if (this._oOpenToolPopup) {
		sOpenToolId = this._oOpenToolPopup.getId();
		jQuery.sap.byId(this.getId() + sap.ui.ux3.Shell.TOOL_PREFIX + this._oOpenToolPopup.getId()).removeClass("sapUiUx3ShellToolSelected").attr("aria-pressed", "false");
		if (sOpenToolId === this.getId() + "-feederTool") {
			var feeder = sap.ui.getCore().byId(this.getId() + "-feeder");
			feeder.setText("");
			feeder.rerender();
		}
		this._oOpenToolPopup.close();
		this._oOpenToolPopup = null;
	}
	return sOpenToolId;
};

sap.ui.ux3.Shell.prototype._handleToolItemClick = function(sId) {

	// close any previously open tool and remember ID of open tool, so it does not get opened again below
	var sAlreadyOpenId = this._closeCurrentToolPopup();

	// identify new tool
	var tool;
	var toolId = sId.substr(sId.indexOf(sap.ui.ux3.Shell.TOOL_PREFIX) + 6);
	if (toolId == (this.getId() + "-searchTool")) {
		tool = this._getSearchTool();
	} else if (toolId == (this.getId() + "-feederTool")) {
		tool = this._getFeederTool();
	} else  {
		// application tool clicked
		tool = sap.ui.getCore().byId(toolId);
	}

	// open the new tool
	if (tool && (tool.getId() != sAlreadyOpenId)) {
		this._oOpenToolPopup = tool;
		tool.setPosition(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.EndTop, jQuery.sap.domById(sId), "13 -6", "fit");
		tool.open();

		// mark icon as "tool opened"
		jQuery.sap.byId(sId).addClass("sapUiUx3ShellToolSelected").attr("aria-pressed", "true");
		sap.ui.ux3.Shell._updateToolIcon(jQuery.sap.domById(sId));

		// need to reset the icon also when the tool is closed by the application
		var that = this;
		var fnOnClosed = function(oEvent) {
			tool.detachClosed(fnOnClosed);

			if (that._oOpenToolPopup && that._oOpenToolPopup.getId() === oEvent.getParameter("id")) {
				//that._oOpenToolPopup = null;
				that._closeCurrentToolPopup();
			}

			jQuery.sap.byId(sId).removeClass("sapUiUx3ShellToolSelected");
			sap.ui.ux3.Shell._updateToolIcon(jQuery.sap.domById(sId));
		};
		tool.attachClosed(fnOnClosed);

	} else if (tool.getId() == sAlreadyOpenId) {
		sap.ui.ux3.Shell._updateToolIcon(jQuery.sap.domById(sId));
	}
};


/**
 * Returns whether or not the design is dark, which means that for example the
 * ToolPopup should be dark as well (inverted-property set to true), which in 
 * turn means that the popup content should be dark...
 * 
 * @private
 * @returns Boolean
 */
sap.ui.ux3.Shell.prototype._hasDarkDesign = function() {
	return (
		this.getDesignType() !== sap.ui.ux3.ShellDesignType.Light
		&& this.getDesignType() !== sap.ui.ux3.ShellDesignType.Crystal
	);
};

sap.ui.ux3.Shell.prototype._getSearchTool = function() {
	if (!this._oSearchPopup) {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
		this._oSearchPopup = new sap.ui.ux3.ToolPopup(this.getId() + "-searchTool", {tooltip:rb.getText("SHELL_SEARCH")}).addStyleClass("sapUiUx3TP-search");

		// Create the popup in an inverted state if the shell is dark.
		// This will be changed when the design is changed: see setDesignType()
		var bInverted = this._hasDarkDesign();
		this._oSearchPopup.setInverted(bInverted);

		var that = this;
		var sf = new sap.ui.commons.SearchField(this.getId() + "-searchField", {
			enableListSuggest: false,
			search: function(oEvent) { 
				that.fireSearch({text:oEvent.getParameter("query")});
			}
		});
		var label = new sap.ui.commons.Label({text:rb.getText("SHELL_SEARCH_LABEL") + ":"}).setLabelFor(sf);
		this._oSearchPopup.addContent(label).addContent(sf);
		this._oSearchPopup.attachOpen(function(){
			window.setTimeout(function(){sf.focus();},100);
		});
		this._oSearchField = sf;
	}
	return this._oSearchPopup;
};

sap.ui.ux3.Shell.prototype.getSearchField = function() {
	if(!this._oSearchField){
		this._getSearchTool();
	}
	return this._oSearchField;
};

sap.ui.ux3.Shell.prototype._getFeederTool = function() {
	if (!this._oFeederPopup) {
		var that = this;
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
		this._oFeederPopup = new sap.ui.ux3.ToolPopup(this.getId() + "-feederTool", {tooltip:rb.getText("SHELL_FEEDER")}).addStyleClass("sapUiUx3TP-feeder");

		// Create the popup in an inverted state if the shell is dark.
		// This will be changed when the design is changed: see setDesignType()
		var bInverted = this._hasDarkDesign();
		this._oFeederPopup.setInverted(bInverted);

		var f = new sap.ui.ux3.Feeder(this.getId() + "-feeder", {type:sap.ui.ux3.FeederType.Medium,submit:function(oEvent){
			that.fireFeedSubmit({text:oEvent.getParameter("text")});
			f.setText("");
			f.rerender();
			that._oFeederPopup.close();
		}});
		this._oFeederPopup.setInitialFocus(this.getId() + "-feeder");
		this._oFeederPopup.attachClose(function(){
			// TODO: maybe the text should stay when closing?
			f.setText("");
		});
		this._oFeederPopup.addContent(f);
	}
	return this._oFeederPopup;
};




/* ====== PANE BAR ====== */


sap.ui.ux3.Shell.prototype.openPane = function(sPaneId) {
	var that = this;
	jQuery.sap.assert(typeof sPaneId === "string", "sPaneId must be given as string");
	var item = sap.ui.getCore().byId(sPaneId);
	if (item && (sPaneId != this._sOpenPaneId) && this.getShowPane()) {
		var key = (item ? (item.getKey() == "" ? null : item.getKey()) : null);
		this.firePaneBarItemSelected({"id":sPaneId,"item":item,"key":key});

		var oPaneButton = jQuery.sap.byId(sPaneId);
		oPaneButton.siblings().removeClass("sapUiUx3ShellPaneEntrySelected");
		oPaneButton.addClass("sapUiUx3ShellPaneEntrySelected");
		
		if (!this._sOpenPaneId) {
			// pane area not open yet, open it
			this._openPane(function() {
				// Due to the display:none of the pane bar content in bluecrystal in combination 
				// with the jQuery-animation, we need to wait until the pane bar content animation 
				// is finished and thus the content focusable by jQuery.
				that.focusPaneStart();
			});
		} else {
			// pane area already open for a different pane bar item - unselect that one
			jQuery.sap.byId(this.getId() + "-pb_" + this._sOpenPaneId).removeClass("sapUiUx3ShellPaneEntrySelected");
		}

		this._sOpenPaneId = sPaneId;
		
	}
	return this;
};

sap.ui.ux3.Shell.prototype.closePane = function() {
	this._closePane();
	return this;
};

sap.ui.ux3.Shell.prototype.isPaneOpen = function() {
	return (this._sOpenPaneId != null);
};


sap.ui.ux3.Shell.prototype._handlePaneBarItemClick = function(sPaneId) {
	if (sPaneId === this._sOpenPaneId) { // close currently opened pane area
		this.closePane();
	} else { // a pane needs to be displayed
		this.openPane(sPaneId);
	}
	
	this._checkPaneBarOverflow();
};



(function() {

	sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT = 0;   // can be changed during runtime
//	sap.ui.ux3.Shell._PANE_OUTER_DISTANCE = 40; //TODO: Theme Parameter?

	sap.ui.ux3.Shell.prototype._closePane = function(fCompleteCallback) {
		if (!this._sOpenPaneId) {
			if(fCompleteCallback) {
				fCompleteCallback();
			}

			// If the paneId is not set, it  means that there was no open pane, thus 
			// the paneClosed-event (see below where the callback is called as well)
			// is not fired.
			return;
		}

		// Keep the pane-ID for use as a parameter to the paneClosed-event below 
		var sOpenPaneId = this._sOpenPaneId;
		var that = this; // this-reference for closures below

		var id = this.getId();
		var dist = this.getShowPane() ? (jQuery.sap.byId(id + "-paneBarRight").outerWidth() + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) : sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT;
		var props = {};
		props[this._bRtl ? "left" : "right"] = dist + "px";
		var props2 = {};
		props2[this._bRtl ? "marginLeft" : "marginRight"] = (dist - sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px";

		jQuery.sap.byId(id + "-content").css("overflow-x", "hidden");
		jQuery.sap.byId(id + "-canvas").stop().animate(props);
		jQuery.sap.byId(id + "-notify").stop().animate(props);
		this._getSyncRefs().stop(false, true).animate(props);
		jQuery.sap.byId(id + "-wBar").stop().animate(props2);
		jQuery.sap.byId(id+"-paneBar")
			.removeClass("sapUiUx3ShellPaneBarOpened")
			.addClass("sapUiUx3ShellPaneBarClose");
		jQuery.sap.byId(id + "-canvasBackground")
		.removeClass("sapUiUx3ShellCanvasBackgroundOpen")
		.addClass("sapUiUx3ShellCanvasBackgroundClosed")
		.stop().animate(props, function() {
			jQuery.sap.byId(id + "-paneBar").removeClass("sapUiUx3ShellPaneBarOpen");
			jQuery.sap.byId(id + "-content").css("overflow-x", "");
			if(fCompleteCallback){
				fCompleteCallback();
			}

			// When pane closing is finished, the event paneClosed is fired with 
			// the id of the closed pane in its parameter. 
			that.firePaneClosed({ "id" : sOpenPaneId });
		});

		jQuery.sap.byId(this._sOpenPaneId).removeClass("sapUiUx3ShellPaneEntrySelected");
		this._sOpenPaneId = null;
	};

	sap.ui.ux3.Shell.prototype._openPane = function(fnOpenedCallback) {
		var id = this.getId();
		var PANE_WIDTH = this.getPaneWidth();
		var iPaneBarWidth = jQuery.sap.byId(id + "-paneBarRight").outerWidth();

		jQuery.sap.byId(id + "-content").css("overflow-x", "hidden");
		if (this._bRtl) {
			jQuery.sap.byId(id+"-paneBar")
				.removeClass("sapUiUx3ShellPaneBarClose")
				.addClass("sapUiUx3ShellPaneBarOpen");
			jQuery.sap.byId(id+"-wBar").stop().animate({marginLeft: (PANE_WIDTH + iPaneBarWidth) + "px"});
			jQuery.sap.byId(id+"-canvas").stop().animate({left: (PANE_WIDTH + iPaneBarWidth + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px"});
			jQuery.sap.byId(id + "-notify").stop().animate({left: (PANE_WIDTH + iPaneBarWidth + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px"});
			this._getSyncRefs().stop(false, true).animate({left: (PANE_WIDTH + iPaneBarWidth + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px"});
			jQuery.sap.byId(id+"-canvasBackground").stop().animate({left: (PANE_WIDTH + iPaneBarWidth + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px"}, function() {
				jQuery.sap.byId(id + "-content").css("overflow-x", "");
				jQuery.sap.byId(id+"-canvasBackground").removeClass("sapUiUx3ShellCanvasBackgroundClosed").addClass("sapUiUx3ShellCanvasBackgroundOpen");
				jQuery.sap.byId(id+"-paneBar").addClass("sapUiUx3ShellPaneBarOpened");
				
				if (fnOpenedCallback) {
					fnOpenedCallback();
				}
			});
		} else {
			jQuery.sap.byId(id+"-paneBar")
				.removeClass("sapUiUx3ShellPaneBarClose")
				.addClass("sapUiUx3ShellPaneBarOpen");
			jQuery.sap.byId(id+"-wBar").stop().animate({marginRight: (PANE_WIDTH + iPaneBarWidth) + "px"});
			jQuery.sap.byId(id+"-canvas").stop().animate({right: (PANE_WIDTH + iPaneBarWidth + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px"});
			jQuery.sap.byId(id + "-notify").stop().animate({right: (PANE_WIDTH + iPaneBarWidth + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px"});
			this._getSyncRefs().stop(false, true).animate({right: (PANE_WIDTH + iPaneBarWidth + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px"});
			jQuery.sap.byId(id+"-canvasBackground").stop().animate({right: (PANE_WIDTH + iPaneBarWidth + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px"}, function() {
				jQuery.sap.byId(id + "-content").css("overflow-x", "");
				jQuery.sap.byId(id+"-canvasBackground").removeClass("sapUiUx3ShellCanvasBackgroundClosed").addClass("sapUiUx3ShellCanvasBackgroundOpen");
				jQuery.sap.byId(id+"-paneBar").addClass("sapUiUx3ShellPaneBarOpened");

				if (fnOpenedCallback) {
					fnOpenedCallback();
				}
			});
		}
	};

	sap.ui.ux3.Shell.prototype.setPaneWidth = function (iWidth) {
		if (typeof iWidth == "number" && (iWidth > 0)) {
			iWidth = Math.max(iWidth, 50);

			// apply width
			if (this.getDomRef()) {
				var id = this.getId();
				jQuery.sap.byId(id + "-paneContent").css("width", iWidth + "px");
				jQuery.sap.byId(id + "-paneBar").css("width", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH) + "px");

				if (!!this._sOpenPaneId) { // pane area is open
					if (this._bRtl) {
						jQuery.sap.byId(id+"-wBar").css("marginLeft", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH) + "px");
						jQuery.sap.byId(id+"-canvas").css("left", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px");
						jQuery.sap.byId(id+"-notify").css("left", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px");
						this._getSyncRefs().css("left", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px");
						jQuery.sap.byId(id+"-canvasBackground").css("left", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px");
					} else {
						jQuery.sap.byId(id+"-wBar").css("marginRight", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH) + "px");
						jQuery.sap.byId(id+"-canvas").css("right", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px");
						jQuery.sap.byId(id+"-notify").css("right", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px");
						this._getSyncRefs().css("right", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px");
						jQuery.sap.byId(id+"-canvasBackground").css("right", (iWidth + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH + sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT) + "px");
					}
				}
			}

			this.setProperty("paneWidth", iWidth, true);
		}

		return this;
	};

	/**
	 * Moves the complete Shell away from the right window border by the given number of pixels (left border in RTL case).
	 * 
	 * So there is space for a sidebar or so outside the Shell. The CSS class 'sapUiUx3ShellOuterSideBar' provides the basic position
	 * capabilities for the sidebar DOM element.
	 * 
	 * This feature is not public. The usage is only granted to special groups on request.
	 * 
	 * @param {int} px how many pixels of free space should be next to the Shell (between 0 and 600)
	 * @param {function} [complete] optional callback function to call after the animation
	 * @param {string} [outerId] optional id of the content representing the outside sidebar. If specified the width of the content is animated.
	 * @since 1.7.0
	 * 
	 * @protected
	 */
	sap.ui.ux3.Shell.prototype.setOffsetRight = function(px, complete, outerId) {
		if (px < 0) {
			px = 0;
		}
		if (px > 600) {
			px = 600;
		}

		// adapt value used for animations
		sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT = px;

		// adapt DOM elements
		var pxVal = px + "px";
		var id = this.getId();
		var animCnfg = this._bRtl ? {"left": pxVal} : {"right": pxVal};

		jQuery.sap.byId(id+"-hdr").stop().animate(animCnfg);
		jQuery.sap.byId(id+"-hdrImg").stop().animate(animCnfg);
		jQuery.sap.byId(id+"-bg").stop().animate(animCnfg, function() {
			if(complete){
				complete();
			}
		});

		jQuery.sap.byId(id+"-bgImg").stop().animate(animCnfg);
		jQuery.sap.byId(id+"-wBar").stop().animate(animCnfg);
		jQuery.sap.byId(id+"-paneBar").stop().animate(animCnfg);
		jQuery.sap.byId(outerId).stop().animate({"width": pxVal});

		if(!this.$().hasClass("sapUiUx3ShellNoPane")){
			pxVal = (px + (this._sOpenPaneId ? this.getPaneWidth() : 0) + sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH) + "px";
		}

		animCnfg = this._bRtl ? {"left": pxVal} : {"right": pxVal};

		jQuery.sap.byId(id+"-notify").stop().animate(animCnfg);
		this._getSyncRefs().stop(false, true).animate(animCnfg);
		jQuery.sap.byId(id+"-canvas").stop().animate(animCnfg);
		jQuery.sap.byId(id+"-canvasBackground").stop().animate(animCnfg);
	};

	sap.ui.ux3.Shell.prototype._refreshCanvasOffsetRight = function(bPaneShown) {
		var id = this.getId();
		var right = this._bRtl ? "left" : "right";
		var pxVal = sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT;
		if(bPaneShown){
			var iPaneBarWidth = jQuery.sap.byId(id + "-paneBarRight").outerWidth();
			pxVal = pxVal + (this._sOpenPaneId ? this.getPaneWidth() : 0) + iPaneBarWidth;
		}
		pxVal = pxVal + "px";

		jQuery.sap.byId(id+"-notify").css(right, pxVal);
		jQuery.sap.byId(id+"-canvas").css(right, pxVal);
		jQuery.sap.byId(id+"-canvasBackground").css(right, pxVal);
		this._getSyncRefs().css(right, pxVal);
	};

	sap.ui.ux3.Shell.prototype._setNotifyVisibility = function(sVisibleStatus) {
		var oNotificationBar = this.getNotificationBar();
		if(!oNotificationBar) {
			return;
		}

		if(!sVisibleStatus){
			sVisibleStatus = oNotificationBar.getVisibleStatus();
		}

		var $notify = this.$("notify");
		var $syncRef = this._topSyncRefId ? jQuery.sap.byId(this._topSyncRefId) : jQuery(null);
		var bIsThingInspector = $syncRef.hasClass("sapUiUx3TI");

		var iHeight = 0;
		var iBottom = 0;
		var iZIndex = 1;

		if(sVisibleStatus === sap.ui.ux3.NotificationBarStatus.Min){
			iHeight = 10;
		}else if(sVisibleStatus === sap.ui.ux3.NotificationBarStatus.Max || sVisibleStatus === sap.ui.ux3.NotificationBarStatus.Default){
			if(this.getHeaderType() === sap.ui.ux3.ShellHeaderType.BrandOnly && bIsThingInspector){
				iHeight = parseInt(oNotificationBar.getHeightOfStatus(sap.ui.ux3.NotificationBarStatus.Default));
			}else{
				iHeight = 10;
			}
			iBottom = iHeight;
		}

		$notify.removeClass("sapUiUx3ShellNotifyTI").removeClass("sapUiUx3ShellNotifyOverlay");

		if(this._topSyncRefId){
			this._getSyncRefs().animate({"bottom" : iBottom+"px"}, "fast");
			//$syncRef.css("bottom", iBottom+"px");
			iZIndex = parseInt($syncRef.css("z-index"));
			if(iBottom > 0){
				$notify.addClass(bIsThingInspector ? "sapUiUx3ShellNotifyTI" : "sapUiUx3ShellNotifyOverlay");
			}
		}

		$notify.css("height", iHeight+"px").css("z-index", iZIndex+1);

		if(iHeight > 0 && !this.$().hasClass("sapUiUx3ShellNotifyVisible")){
			this.$().addClass("sapUiUx3ShellNotifyVisible");
		}else if(iHeight == 0 && this.$().hasClass("sapUiUx3ShellNotifyVisible")){
			this.$().removeClass("sapUiUx3ShellNotifyVisible");
		}

		this._adaptContentHeight(sVisibleStatus);
	};



	/**
	 * Used to hand a DomRef to the Shell which should always cover the canvas area and also be animated
	 * with PaneBar opening/closing.
	 *
	 * Only to be used internally (by the ThingInspector/OverlayContainer)! Marking as "private", but 
	 * actually is "package" visibility.
	 * @private
	 */
	sap.ui.ux3.Shell.prototype.syncWithCanvasSize = function(sId, bInit, fFocusFirst, fFocusLast, fApplyChanges) {
		var idx = jQuery.inArray(sId, this._aSyncRefStack);

		//Update sync ref data structure
		if(bInit){
			var oRef = {id: sId, focusFirst: fFocusFirst, focusLast: fFocusLast, applyChanges: fApplyChanges};
			if(idx < 0){
				this._aSyncRefStack.push(sId); 
			}
			this._mSyncRefs[sId] = oRef;
			//notify TI for property changes
			oRef.applyChanges({showOverlay: this.getHeaderType() !== sap.ui.ux3.ShellHeaderType.BrandOnly});
		}else{
			if (idx >= 0) {
				delete this._mSyncRefs[sId];
				this._aSyncRefStack.splice(idx, 1);
			} 
		}
		
		//Cleanup Shell 
		this.$("canvas").removeAttr("aria-hidden");
		this.$("focusDummyTPStart").removeAttr("tabindex").unbind("focusin");
		this.$("focusDummyTPEnd").removeAttr("tabindex").unbind("focusin");
		this.$("focusDummyHdrStart").removeAttr("tabindex").unbind("focusin");
		this.$("focusDummyHdrEnd").removeAttr("tabindex").unbind("focusin");
		this.$("focusDummyPane").removeAttr("tabindex").unbind("focusin");
		this.$().toggleClass("sapUiUx3ShellBlockHeaderAccess", false);
		delete this._topSyncRefId;

		//Reinitialize Shell
		if(this._aSyncRefStack.length > 0){
			var oRef = this._mSyncRefs[this._aSyncRefStack[this._aSyncRefStack.length-1]];
			var $DomRefs = this._getSyncRefs();
			var oCanvas = this.getDomRef("canvas");
			$DomRefs.css(this._bRtl ? "right" : "left", (this.getShowTools() ? this.currentToolPaletteWidth : 0) + "px");
			var iRight = sap.ui.ux3.Shell._SHELL_OFFSET_RIGHT;
			if(this.getShowPane()){
				iRight += sap.ui.ux3.Shell.SIDE_BAR_BASE_WIDTH;
				if(this._sOpenPaneId){
					iRight += this.getPaneWidth();
				}
			}
			$DomRefs.css(this._bRtl ? "left" : "right", iRight + "px");
			$DomRefs.css("top", jQuery.sap.domById(this.getId() + (this.getAllowOverlayHeaderAccess() ? "-hdr" : "-hdrLine")).offsetHeight + "px");
			$DomRefs.css("bottom", "0");
			jQuery(oCanvas).attr("aria-hidden", "true");
			this.$("focusDummyTPEnd").attr("tabindex", "0").focusin(oRef.focusFirst);
			this.$("focusDummyHdrStart").attr("tabindex", "0").focusin(jQuery.proxy(this.focusPaneEnd, this));
			this.$("focusDummyHdrEnd").attr("tabindex", "0").focusin(jQuery.proxy(this.focusFirstTool, this));
			this.$("focusDummyTPStart").attr("tabindex", "0").focusin(jQuery.proxy(this.focusLastHdr, this));
			this.$("focusDummyPane").attr("tabindex", "0").focusin(oRef.focusLast);
			this.$().toggleClass("sapUiUx3ShellBlockHeaderAccess", !this.getAllowOverlayHeaderAccess());
			this._topSyncRefId = oRef.id;
		}

		jQuery.sap.require("jquery.sap.script");
		if(this._sUpdateNotificationZIndex){
			jQuery.sap.clearDelayedCall(this._sUpdateNotificationZIndex);
			delete this._sUpdateNotificationZIndex;
		}
		this._sUpdateNotificationZIndex = jQuery.sap.delayedCall(0, this, function(){
			delete this._sUpdateNotificationZIndex;
			this._setNotifyVisibility();

			if(this._oOpenToolPopup && this._topSyncRefId){
				var $syncRef = jQuery.sap.byId(this._topSyncRefId);
				this._oOpenToolPopup.$().css("z-index", parseInt($syncRef.css("z-index"), 10)+1);
			}
		});
	};

}());

/**
 * Returns a jQuery object containing all registered "special cases" aka overlays (ThingInspector,
 * etc.) that cover the canvas area, but not the panes. Whenever the canvas size is changes, all
 * these have to be updated as well.
 * 
 * @private
 * @return {jQuery} $Refs A jQuery-object referencing all "overlaying" elements
 */
sap.ui.ux3.Shell.prototype._getSyncRefs = function(){
	var aRefs = [];
	var oRef;
	for(var i=0; i<this._aSyncRefStack.length; i++){
		oRef = jQuery.sap.domById(this._aSyncRefStack[i]);
		if(oRef){
			aRefs.push(oRef);
		}
	}
	return jQuery(aRefs);
};


/**
 * Focuses the first element in the Shell Header which is in the logical tab chain while the ThingInspector is open. This is either the first element in the header,
 * or if there is no such element, it is the first tool.
 *
 * Only to be used internally (by the ThingInspector)! Marking as "private", but actually is "package" visibility.
 * @private
 */
sap.ui.ux3.Shell.prototype.focusFirstHdr = function() {
	// tabbing forward into the page from the browser UI
	var oToFocus = this.$("hdr-items").firstFocusableDomRef();
	if (oToFocus && this.getAllowOverlayHeaderAccess() && this.getHeaderType() != sap.ui.ux3.ShellHeaderType.BrandOnly) {
		jQuery.sap.focus(oToFocus);
	} else {
		// otherwise focus the first tool
		this.focusFirstTool();
	}
};

/**
 * Focuses the last element in the Shell Header which is in the logical tab chain while the ThingInspector is open. This is either the last element in the header,
 * or if there is no such element, it is the last entry in the pane area.
 *
 * Only to be used internally (by the ThingInspector)! Marking as "private", but actually is "package" visibility.
 * @private
 */
sap.ui.ux3.Shell.prototype.focusLastHdr = function() {
	// tabbing forward into the page from the browser UI
	var oToFocus = this.$("hdr-items").lastFocusableDomRef();
	if (oToFocus && this.getAllowOverlayHeaderAccess() && this.getHeaderType() != sap.ui.ux3.ShellHeaderType.BrandOnly) {
		jQuery.sap.focus(oToFocus);
	} else {
		// otherwise focus the last pane entry
		this.focusPaneEnd();
	}
};

/**
 * Focuses the first element in the Shell which is in the logical tab chain while the ThingInspector is open. This is either the first Tool,
 * or if there is no tool, it is the first item in the ThingInspector.
 *
 * Only to be used internally (by the ThingInspector)! Marking as "private", but actually is "package" visibility.
 * @private
 */
sap.ui.ux3.Shell.prototype.focusFirstTool = function() {
	// tabbing forward into the page from the browser UI
	var $firstTool = this.$("tp").find(".sapUiUx3ShellTool").first();
	if ($firstTool.length && this.getShowTools()) {
		jQuery.sap.focus($firstTool[0]);
	} else {
		// otherwise focus the first item in the ThingInspector
		this._mSyncRefs[this._topSyncRefId].focusFirst();
	}
};

/**
 * Focuses the last element in the tab chain which is logically BEFORE the ThingInspector
 *
 * Only to be used internally (by the ThingInspector)! Marking as "private", but actually is "package" visibility.
 * @private
 */
sap.ui.ux3.Shell.prototype.focusLastTool = function() {
	// tabbing backward out of the ThingInspector
	var $lastTool = this.$("tp").find(".sapUiUx3ShellTool").last();
	if ($lastTool.length && this.getShowTools()) {
		jQuery.sap.focus($lastTool[0]);
	} else {
		// no tool present => jump to end of the Pane
		this.focusPaneEnd();
	}
};

/**
 * Focuses the first element in the tab chain which is logically AFTER the ThingInspector
 *
 * Only to be used internally (by the ThingInspector)! Marking as "private", but actually is "package" visibility.
 * @private
 */
sap.ui.ux3.Shell.prototype.focusPaneStart = function() {
	// tabbing forward, ThingInspector is being left
	var oToFocus = this.$("paneBar").firstFocusableDomRef();
	if (oToFocus) {
		jQuery.sap.focus(oToFocus);
	} else {
		// no focusable element in the pane => focus first tool
		this.focusFirstTool();
	}
};

/**
 * Focuses the last element in the tab chain which belongs to the Shell Pane. This is also the "last" element of the Shell.
 * 
 * @private
 */
sap.ui.ux3.Shell.prototype.focusPaneEnd = function() {
	// The ThingInspector tried to focus the last tool, but there was no tool. Or tools were being focused and we are tabbing backwards.
	var oToFocus = this.$("paneBar").lastFocusableDomRef();
	if (oToFocus) {
		jQuery.sap.focus(oToFocus);
	} else {
		// no focusable element in the pane, so focus the last element in the ThingInspector
		this._mSyncRefs[this._topSyncRefId].focusLast();
	}
};


//invalidation avoiding code

sap.ui.ux3.Shell.prototype.setAppTitle = function(sAppTitle) {
	this.setProperty("appTitle", sAppTitle, true);
	this._rerenderHeader();
	return this;
};

sap.ui.ux3.Shell.prototype.setAppIcon = function(sAppIcon) {
	this.setProperty("appIcon", sAppIcon, true);
	this._rerenderHeader();
	return this;
};

sap.ui.ux3.Shell.prototype.setShowLogoutButton = function(bShowLogoutButton) {
	this.setProperty("showLogoutButton", bShowLogoutButton, true);
	this._rerenderHeader();
	return this;
};

sap.ui.ux3.Shell.prototype.setLogoutButtonTooltip = function(sTooltip) {
	this.setProperty("logoutButtonTooltip", sTooltip, true);
	this._rerenderHeader();
	return this;
};

sap.ui.ux3.Shell.prototype.insertHeaderItem = function(oHeaderItem, iIndex) {
	if (sap.ui.commons && sap.ui.commons.Button && (oHeaderItem instanceof sap.ui.commons.Button)) {
		oHeaderItem.setStyled(false);
	}
	this.insertAggregation("headerItems", oHeaderItem, iIndex, true);
	this._rerenderHeader();
	return this;
};
sap.ui.ux3.Shell.prototype.addHeaderItem = function(oHeaderItem) {
	if (sap.ui.commons && sap.ui.commons.Button && (oHeaderItem instanceof sap.ui.commons.Button)) {
		oHeaderItem.setStyled(false);
	}
	this.addAggregation("headerItems", oHeaderItem, true);
	this._rerenderHeader();
	return this;
};
sap.ui.ux3.Shell.prototype.removeHeaderItem = function(vIndex) {
	var result = this.removeAggregation("headerItems", vIndex, true);
	this._rerenderHeader();
	return result;
};
sap.ui.ux3.Shell.prototype.removeAllHeaderItems = function() {
	var result = this.removeAllAggregation("headerItems", true);
	this._rerenderHeader();
	return result;
};
sap.ui.ux3.Shell.prototype.destroyHeaderItems = function() {
	this.destroyAggregation("headerItems", true);
	this._rerenderHeader();
	return this;
};


sap.ui.ux3.Shell.prototype.setShowSearchTool = function(bShowSearchTool) {
	this.setProperty("showSearchTool", bShowSearchTool, true);
	this._rerenderToolPalette();
	return this;
};

sap.ui.ux3.Shell.prototype.setShowFeederTool = function(bShowFeederTool) {
	this.setProperty("showFeederTool", bShowFeederTool, true);
	this._rerenderToolPalette();
	return this;
};

sap.ui.ux3.Shell.prototype.setHeaderType = function(sHeaderType) {
	var sCurrentType = this.getHeaderType();
	this.setProperty("headerType", sHeaderType, true);
	this.$().removeClass("sapUiUx3ShellHead"+sCurrentType).addClass("sapUiUx3ShellHead"+this.getHeaderType());

	var $SyncRefs = this._getSyncRefs();
	if($SyncRefs.length){
		$SyncRefs.css("top", jQuery.sap.domById(this.getId() + (this.getAllowOverlayHeaderAccess() ? "-hdr" : "-hdrLine")).offsetHeight + "px");
	}
	
	//notify TI for changes
	var oChanges = {showOverlay: sHeaderType !== sap.ui.ux3.ShellHeaderType.BrandOnly};
	jQuery.each(this._mSyncRefs,function(sId,oRef) {
		oRef.applyChanges(oChanges);
	});
	return this;
};

sap.ui.ux3.Shell.prototype.setAllowOverlayHeaderAccess = function(bAllowOverlayHeaderAccess) {
	this.setProperty("allowOverlayHeaderAccess", bAllowOverlayHeaderAccess, true);

	var $SyncRefs = this._getSyncRefs();
	if($SyncRefs.length){
		this.$().toggleClass("sapUiUx3ShellBlockHeaderAccess", !this.getAllowOverlayHeaderAccess());
		$SyncRefs.css("top", jQuery.sap.domById(this.getId() + (this.getAllowOverlayHeaderAccess() ? "-hdr" : "-hdrLine")).offsetHeight + "px");
	}

	return this;
};

sap.ui.ux3.Shell.prototype.setDesignType = function(sDesignType) {
	var sCurrentType = this.getDesignType();
	this.setProperty("designType", sDesignType, true);

	// Set inverted state of registered tool popups based on design
	var bInverted = this._hasDarkDesign(); 

	if (this._oSearchPopup) {
		// If it does not exist at this time, the inverted state will be set on
		// creation of the ToolPopup: see _getSearchTool()
		this._oSearchPopup.setInverted(bInverted);
	}
	if (this._oFeederPopup) {
		// If it does not exist at this time, the inverted state will be set on
		// creation of the ToolPopup: see _getFeederTool()
		this._oFeederPopup.setInverted(bInverted);
	}

	// Make sure that all registered ToolPopups have the correct inverted state
	var aToolPopups = this.getToolPopups();
	for (var i = 0; i < aToolPopups.length; ++i) {
		aToolPopups[i].setInverted(bInverted);
	}



	this.$()
	.removeClass("sapUiUx3ShellDesign" + sCurrentType)
	.addClass("sapUiUx3ShellDesign" + sDesignType)
	.toggleClass("sapUiUx3ShellDesignLight", !bInverted);

	return this;
};

sap.ui.ux3.Shell.prototype.setShowTools = function(bShowTools) {
	this.setProperty("showTools", bShowTools, true);
	if(bShowTools){
		this.$().removeClass("sapUiUx3ShellNoTools");
		this._checkResize();
	}else{
		this.$().addClass("sapUiUx3ShellNoTools");
		this._closeCurrentToolPopup();
		// Remove custom styles for ToolPalette size
		this.$("tp").attr("style", "");
	}

	this._checkToolPaletteSize(true); // Also updates SyncRefs

	return this;
};


sap.ui.ux3.Shell.prototype.setShowPane = function(bShowPane) {
	this.setProperty("showPane", bShowPane, true);
	
	if(bShowPane){
		this.$().removeClass("sapUiUx3ShellNoPane");
		this._refreshCanvasOffsetRight(true);
		this._checkPaneBarOverflow();
	}else{
		var that = this;
		this._closePane(function() {
			that._refreshCanvasOffsetRight(false);
			that.$().addClass("sapUiUx3ShellNoPane");
		});
	}
	
	
	return this;
};

sap.ui.ux3.Shell.prototype.insertToolPopup = function(oToolPopup, iIndex) {
	this.insertAggregation("toolPopups", oToolPopup, iIndex, true);
	oToolPopup.attachIconChanged(this._rerenderToolPalette, this);
	this._rerenderToolPalette();
	return this;
};

sap.ui.ux3.Shell.prototype.addToolPopup = function(oToolPopup) {
	// Set inverted state of registered tool popups based on design
	var bInverted = this._hasDarkDesign();
	oToolPopup.setInverted(bInverted);

	this.addAggregation("toolPopups", oToolPopup, true);
	oToolPopup.attachIconChanged(this._rerenderToolPalette, this);
	this._rerenderToolPalette();
	return this;
};

sap.ui.ux3.Shell.prototype.removeToolPopup = function(vIndex) {
	var result = this.removeAggregation("toolPopups", vIndex, true);
	if(result === this._oOpenToolPopup){
		this._closeCurrentToolPopup();
	}
	this._rerenderToolPalette();
	return result;
};
sap.ui.ux3.Shell.prototype.removeAllToolPopups = function() {
	var result = this.removeAllAggregation("toolPopups", true);
	this._rerenderToolPalette();
	return result;
};
sap.ui.ux3.Shell.prototype.destroyToolPopups = function() {
	this.destroyAggregation("toolPopups", true);
	this._rerenderToolPalette();
	return this;
};

sap.ui.ux3.Shell.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex, true);
	this._rerenderContent();
	return this;
};
sap.ui.ux3.Shell.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent, true);
	this._rerenderContent();
	return this;
};
sap.ui.ux3.Shell.prototype.removeContent = function(vIndex) {
	var result = this.removeAggregation("content", vIndex, true);
	this._rerenderContent();
	return result;
};
sap.ui.ux3.Shell.prototype.removeAllContent = function() {
	var result = this.removeAllAggregation("content", true);
	this._rerenderContent();
	return result;
};
sap.ui.ux3.Shell.prototype.destroyContent = function() {
	this.destroyAggregation("content", true);
	this._rerenderContent();
	return this;
};



sap.ui.ux3.Shell.prototype.addPaneBarItem = function(oPaneBarItem) {
	this.addAggregation("paneBarItems", oPaneBarItem, true);
	this._rerenderPaneBarItems();
	return this;
};
sap.ui.ux3.Shell.prototype.insertPaneBarItem = function(oPaneBarItem, iIndex) {
	this.insertAggregation("paneBarItems", oPaneBarItem, iIndex, true);
	this._rerenderPaneBarItems();
	return this;
};
sap.ui.ux3.Shell.prototype.removePaneBarItem = function(vPaneBarItem) {
	var oResult = this.removeAggregation("paneBarItems", vPaneBarItem, true);

	// Remove the corresponding item in the overflow-menu (if it exists)
	if(oResult){
		var oItem = sap.ui.getCore().byId(oResult.getId() + "-overflow");
		if (oItem) {
			oItem.destroy();
		}
	}
	
	this._rerenderPaneBarItems();
	return oResult;
};
sap.ui.ux3.Shell.prototype.removeAllPaneBarItems = function() {
	var result = this.removeAllAggregation("paneBarItems", true);

	// Overflowmenu-entries are not needed anymore
	this._getPaneOverflowMenu().destroyItems();

	this._rerenderPaneBarItems();
	return result;
};
sap.ui.ux3.Shell.prototype.destroyPaneBarItems = function() {
	this.destroyAggregation("paneBarItems", true);

	// Overflowmenu-entries are not needed anymore
	this._getPaneOverflowMenu().destroyItems();

	this._rerenderPaneBarItems();
	return this;
};

sap.ui.ux3.Shell.prototype.addWorksetItem = function(oWorksetItem) {
	this.addAggregation("worksetItems", oWorksetItem, true);
	this._rerenderWorksetItems();
	return this;
};
sap.ui.ux3.Shell.prototype.insertWorksetItem = function(oWorksetItem, iIndex) {
	this.insertAggregation("worksetItems", oWorksetItem, iIndex, true);
	this._rerenderWorksetItems();
	return this;
};
sap.ui.ux3.Shell.prototype.removeWorksetItem = function(vWorksetItem) {
	var result = this.removeAggregation("worksetItems", vWorksetItem, true);
	this._rerenderWorksetItems();
	return result;
};
sap.ui.ux3.Shell.prototype.removeAllWorksetItems = function() {
	var result = this.removeAllAggregation("worksetItems", true);
	this._rerenderWorksetItems();
	return result;
};
sap.ui.ux3.Shell.prototype.destroyWorksetItems = function() {
	this.destroyAggregation("worksetItems", true);
	this._rerenderWorksetItems();
	return this;
};

(function() {

	function clearNotificationBar(oShell) {
		var oOldNotificationBar = oShell.getNotificationBar();
		if(oOldNotificationBar){
			oShell._setNotifyVisibility(sap.ui.ux3.NotificationBarStatus.None);
			oOldNotificationBar.setVisibleStatus = oOldNotificationBar.__orig_setVisibleStatus;
			oOldNotificationBar.detachDisplay(oOldNotificationBar.__fHandleNotifyDisplay);
			delete oOldNotificationBar.__orig_setVisibleStatus;
			delete oOldNotificationBar.__fHandleNotifyDisplay;
		}
	};

	sap.ui.ux3.Shell.prototype.setNotificationBar = function(oNotificationBar) {
		clearNotificationBar(this);
		if(oNotificationBar) {
			var that = this;
			oNotificationBar.__orig_setVisibleStatus = oNotificationBar.setVisibleStatus;
			oNotificationBar.setVisibleStatus = function(sVisibleStatus){
				this.__orig_setVisibleStatus.apply(this, arguments);
				that._setNotifyVisibility();
			};
		}
		this.setAggregation("notificationBar", oNotificationBar, true);
		this._rerenderNotificationArea();
		if(oNotificationBar){
			oNotificationBar.__fHandleNotifyDisplay = function(oEvent){
				var bShow = oEvent ? oEvent.getParameter("show") : oNotificationBar.hasItems();
				oNotificationBar.setVisibleStatus(bShow ? sap.ui.ux3.NotificationBarStatus.Default : sap.ui.ux3.NotificationBarStatus.None);
			};
			oNotificationBar.attachDisplay(oNotificationBar.__fHandleNotifyDisplay);
			oNotificationBar.__fHandleNotifyDisplay();
		}
		return this; 
	};

	sap.ui.ux3.Shell.prototype.destroyNotificationBar = function() {
		clearNotificationBar(this);
		this.destroyAggregation("notificationBar", true);
		this._rerenderNotificationArea();
		return this;
	};

}());

sap.ui.ux3.Shell.prototype._rerenderNotificationArea = function() {
	var $notify = this.$("notify");
	if ($notify.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ShellRenderer.renderNotificationArea(rm, this);
		rm.flush($notify[0], true);
		rm.destroy();
	}
};

sap.ui.ux3.Shell.prototype._rerenderHeader = function() {
	var $hdr = this.$("hdr");
	if ($hdr.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ShellRenderer.renderHeader(rm, this);
		rm.flush($hdr[0], true);
		rm.destroy();
	}
};

sap.ui.ux3.Shell.prototype._rerenderToolPalette = function() {
	var $tp = this.$("tp");
	if ($tp.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this._beforeRenderingToolPalette();
		sap.ui.ux3.ShellRenderer.renderToolPalette(rm, this);
		rm.flush($tp[0], true);
		this._afterRenderingToolPalette();
		rm.destroy();

		this._checkResize();
	}
};

sap.ui.ux3.Shell.prototype._beforeRenderingToolPalette = function() {
	// unbind the tool palette mouse (hover effect) handlers
	this.$("tp").find(".sapUiUx3ShellTool").unbind("mouseenter mouseleave");

	this.$("focusDummyTPEnd").unbind("focusin");
	this.$("focusDummyTPStart").unbind("focusin");
};

sap.ui.ux3.Shell.prototype._afterRenderingToolPalette = function() {
	// register hover effect handlers for application-provided tool icons
	var sIdPrefix = this.getId() + sap.ui.ux3.Shell.TOOL_PREFIX;
	var aToolItems = this.getToolPopups();

	var bValidOpenTool = false;
	if(this._oOpenToolPopup && this._oOpenToolPopup.isOpen() && (this.indexOfToolPopup(this._oOpenToolPopup) >= 0 || this._oOpenToolPopup === this._oSearchPopup || this._oOpenToolPopup === this._oFeederPopup)){
		this._oOpenToolPopup.setPosition(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.EndTop, jQuery.sap.domById(sIdPrefix + this._oOpenToolPopup.getId()), "13 -6", "fit");
		var oPopupTool = jQuery.sap.domById(sIdPrefix + this._oOpenToolPopup.getId());
		jQuery(oPopupTool).toggleClass("sapUiUx3ShellToolSelected", true);
		sap.ui.ux3.Shell._updateToolIcon(oPopupTool);
		bValidOpenTool = true;
	}

	if(!bValidOpenTool && this._oOpenToolPopup){
		this._closeCurrentToolPopup();
	}

	for (var i = 0; i < aToolItems.length; i++) {
		var oToolItem = aToolItems[i];
		if (oToolItem instanceof sap.ui.ux3.ToolPopup) {	// regular item
			jQuery.sap.byId(sIdPrefix + oToolItem.getId()).hover(
				function(evt) {
					jQuery(this).toggleClass("sapUiUx3ShellToolHover", (evt.type === "mouseenter")); // set/remove class depending on mouseenter/mouseleave
					sap.ui.ux3.Shell._updateToolIcon(this);
				}
			);
		}
	}

	if (this._topSyncRefId && this._mSyncRefs[this._topSyncRefId].focusFirst) {
		this.$("focusDummyTPEnd").attr("tabindex", "0").focusin(this._mSyncRefs[this._topSyncRefId].focusFirst);
	}
	if (this._aSyncRefStack.length > 0) {
		this.$("focusDummyTPStart").attr("tabindex", "0").focusin(jQuery.proxy(this.focusLastHdr, this));
	}
};

sap.ui.ux3.Shell.prototype._rerenderContent = function(bPreventPreserve) {
	var $content = this.$("content");
	if ($content.length > 0) {
		var aContent = this.getContent(),
		rm = sap.ui.getCore().createRenderManager();
		for (var i = 0; i < aContent.length; i++) {
			rm.renderControl(aContent[i]);
		}
		rm.flush($content[0], bPreventPreserve);
		rm.destroy();
	}
};

sap.ui.ux3.Shell.prototype._rerenderPane = function(bPreventPreserve) {
	var $paneContent = this.$("paneContent");
	if ($paneContent.length > 0) {
		var aPaneContent = this.getPaneContent(),
		rm = sap.ui.getCore().createRenderManager();
		for (var i = 0; i < aPaneContent.length; i++) {
			rm.renderControl(aPaneContent[i]);
		}
		rm.flush($paneContent[0], bPreventPreserve);
		rm.destroy();
	}
};

sap.ui.ux3.Shell.prototype._rerenderPaneBarItems = function() {
	var $PaneListRef = this.$("paneBar").find(".sapUiUx3ShellPaneEntries");

	if ($PaneListRef.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ShellRenderer.renderPaneBarItems(rm, this);
		rm.flush($PaneListRef[0]);
		rm.destroy();

		this._updatePaneBarItemNavigation($PaneListRef);
	}

	// Create overflow menu
	var that = this;
	var oMenu = this._getPaneOverflowMenu();
	var aPaneBarItems = this.getPaneBarItems();
	
	var fnOnItemSelect = function(oEvent) {
		// Emulate an event-object to "trick" the Shell into believing a real panel
		// item was selected
		var mPseudoEvent = {
			overflowItem : oEvent.getParameter("item"),
			target : {
				id : oEvent.getParameter("id").replace(/-overflow$/, ""),
				parentNode : {
					className : "sapUiUx3ShellPaneEntries"
				}
			}
		};

		that.onUserActivation(mPseudoEvent);
	};

	for (var i = 0; i < aPaneBarItems.length; ++i) {
		var sItemId = aPaneBarItems[i].getId() + "-overflow";
		var oItem = sap.ui.getCore().byId(sItemId);

		if (!oItem) {
			var oOverflowItem = new sap.ui.commons.MenuItem(sItemId, {
				text : aPaneBarItems[i].getText(),
				visible : false,
				select : fnOnItemSelect
			});
			
			oMenu.addItem(oOverflowItem);
		}
	}

	this._checkPaneBarOverflow($PaneListRef);
};

sap.ui.ux3.Shell.prototype._rerenderWorksetItems = function() {
	if (this.$("wBar").length > 0) {
		sap.ui.ux3.ShellRenderer.renderWorksetItems(null, this);
		sap.ui.ux3.ShellRenderer.renderFacetBar(null, this);
		var items = this._oFacetBar.getAssociatedItems();
		this._oFacetBar.$().css("display", (items && items.length > 0 ? "block" : "none"));
		this._adaptContentHeight();
	}
};



/* DEBUG code for tracking invalidation */

/**
 * Forces invalidation and rerendering (.invalidate() is disabled)
 * @private
 */
sap.ui.ux3.Shell.prototype.forceInvalidation = sap.ui.core.Control.prototype.invalidate;

/**
 * Hack that prevents Shell invalidation by default.
 * Later, invalidation should return to normal, but be prevented in all typical cases by bSuppressRerendering with explicit change handling.
 *
 * @private
 */
sap.ui.ux3.Shell.prototype.invalidate = function(oSource) {

	if (oSource == this) {
		// does not happen because the source is only given when propagating to a parent

	} else if (!oSource) {
		// direct invalidation of the Shell; this means a property has been modified
		this.forceInvalidation(); // let invalidation occur

	} else if (oSource instanceof sap.ui.ux3.NavigationItem) {
		// a workset item was changed/renamed or, more likely, subitems were added/exchanged
		if (this._oWorksetBar && this._oFacetBar) { // if already destroyed no update
			this._oWorksetBar.setAssociatedItems(this.getWorksetItems());
			var wsi = this.getSelectedWorksetItem();
			if (wsi) {
				var items;
				var sel = sap.ui.getCore().byId(wsi);
				if (sel && sel.getParent() instanceof sap.ui.ux3.NavigationItem) { // second-level item is selected
					this._oFacetBar.setAssociatedItems(sel.getParent().getSubItems()); // update the second-level NavigationBar as well
				} else if (sel && (items = sel.getSubItems())) {                            // toplevel item is selected and has children
					if (items && (items.length > 0)) {
						this._oFacetBar.setAssociatedItems(items); // update the second-level NavigationBar as well
					}
				} else {
					// toplevel item with no children, TODO: removing/adding the only child may be interesting to look at
				}

				items = this._oFacetBar.getAssociatedItems();
				this._oFacetBar.$().css("display", (items && items.length > 0 ? "block" : "none"));
				this._adaptContentHeight();
			}
		}

	} else if ((oSource instanceof sap.ui.core.Item) && (oSource.getParent() == this)) {
		// a PaneBarItem was changed/added/removed
		this.forceInvalidation();

	} else if (oSource instanceof sap.ui.ux3.ToolPopup) {
		// This is needed for changes due to databinding. When the model changes for example the
		// tooltip, the Shell's invalidate function is called.
		this._rerenderToolPalette();

	} else if (this.indexOfHeaderItem(oSource) >= 0) {
		// a header item was invalidated - rerender the header
		this._rerenderHeader();

	} else {
		// a child was invalidated - TODO: check what kind of child and either handle directly or re-render
	}
};


sap.ui.ux3.Shell.prototype._setParent = sap.ui.core.Control.prototype.setParent;
sap.ui.ux3.Shell.prototype.setParent = function(oParent, sAggregationName, bSuppressRerendering) {
	this._setParent(oParent, sAggregationName, bSuppressRerendering);
	this.forceInvalidation(); // TODO: temporary hack to force invalidation when the Shell is added to a UiArea
};


/*  METHODS  */

sap.ui.ux3.Shell.prototype.setContent = function(vContent, bDestruct) {
	jQuery.sap.assert(vContent === null
		|| (vContent instanceof sap.ui.core.Control)
		|| ((jQuery.isArray(vContent) && ((vContent.length > 0) ? (vContent[0] instanceof sap.ui.core.Control) : true))),
		"vContent must be a control or array of controls or null"); // only the first array element is checked
	jQuery.sap.assert((bDestruct === undefined || bDestruct === true || bDestruct === false), "bDestruct must be true, false, or undefined");

	var oldContent = [];
	var $content = this.$("content");
	var bPreventPreserve = false;

	if (!bDestruct) {
		oldContent = this.removeAllAggregation("content", true);

		if ($content.length > 0) {
			sap.ui.core.RenderManager.preserveContent($content[0]);
			bPreventPreserve = true;
			$content.empty();
		}
	} else {
		this.destroyAggregation("content", true);
	}

	// add new control(s) to aggregation
	if (vContent instanceof sap.ui.core.Control) { // one single control
		this.addAggregation("content", vContent, true);
	} else if (vContent && typeof(vContent) == "object" && vContent.length) { // an array of (hopefully) controls
		for (var i = 0; i < vContent.length; i++) {
			this.addAggregation("content", vContent[i], true);
		}
	}

	// if Shell is already rendered, update the UI
	this._rerenderContent(bPreventPreserve);

	return oldContent;
};


sap.ui.ux3.Shell.prototype.setPaneContent = function(vContent, bDestruct) {
	jQuery.sap.assert((vContent instanceof sap.ui.core.Control)
		|| ((jQuery.isArray(vContent) && ((vContent.length > 0) ? (vContent[0] instanceof sap.ui.core.Control) : true))),
		"vContent must be a control or array of controls"); // only the first array element is checked
	jQuery.sap.assert((bDestruct === undefined || bDestruct === true || bDestruct === false), "bDestruct must be true, false, or undefined");

	var oldContent = [];
	var $paneContent = this.$("paneContent");
	var bPreventPreserve = false;

	if (!bDestruct) {
		oldContent = this.removeAllAggregation("paneContent", true);

		if ($paneContent.length > 0) {
			sap.ui.core.RenderManager.preserveContent($paneContent[0]);
			bPreventPreserve = true; // HTML content is already preserved; do not do it again in the RenderManager
			$paneContent.empty();
		}
	} else {
		this.destroyAggregation("paneContent", true);
	}

	// add new control(s) to aggregation
	if (vContent instanceof sap.ui.core.Control) { // one single control
		this.addAggregation("paneContent", vContent, true);
	} else if (vContent && typeof(vContent) == "object" && vContent.length) { // an array of (hopefully) controls
		for (var i = 0; i < vContent.length; i++) {
			this.addAggregation("paneContent", vContent[i], true);
		}
	}

	// if Shell is already rendered, update the UI
	this._rerenderPane(bPreventPreserve);

	return oldContent;
};



sap.ui.ux3.Shell.prototype.getSelectedWorksetItem = function() {
	/* Initially, this is null
	 * There is a value as soon as:
	 * 1. The application sets a value
	 * 2. The Shell is rendered without a value (the first toplevel item will be used then (respectively its first child, if present))
	 */
	return this.getAssociation("selectedWorksetItem");
};

sap.ui.ux3.Shell.prototype.setSelectedWorksetItem = function(selectedWorksetItem) {
	var oldSelectedId = this.getSelectedWorksetItem();
	this.setAssociation("selectedWorksetItem", selectedWorksetItem, true);
	var newSelectedId = this.getSelectedWorksetItem();

	if (oldSelectedId != newSelectedId) { // only do something if selected item really changed
		var newSelectedItem = sap.ui.getCore().byId(newSelectedId);

		if (newSelectedItem) {

			this._sSelectedWorksetId = newSelectedId;
			this._sSelectedFacetId = null;

			var sub = newSelectedItem.getSubItems();
			if (sub.length > 0) { // app set a parent item that has children, so select automatically the first child
				newSelectedItem = sub[0];
			}

			if (newSelectedItem && (newSelectedItem.getParent() instanceof sap.ui.ux3.NavigationItem)) { // if selected item is sub-item
				var newParentItem = newSelectedItem.getParent();
				this._sSelectedWorksetId = newParentItem.getId();
				this._sSelectedFacetId = newSelectedItem.getId();

				this._oWorksetBar.setSelectedItem(newParentItem);
				this._oFacetBar.setAssociatedItems(newParentItem.getSubItems());
				this._oFacetBar.setSelectedItem(newSelectedItem);

				if (this.getDomRef()) {
					var $FacetBar = this.$("facetBar");
					var iFacetBarHeight = this._calcFacetBarHeight($FacetBar);
					$FacetBar.slideDown();
					this._adaptContentHeight(null, true, iFacetBarHeight);
				}

			} else if (newSelectedItem) {
				this._oWorksetBar.setSelectedItem(newSelectedItem);
				this._oFacetBar.setAssociatedItems([]);
				this._oFacetBar.setSelectedItem(null);

				if (this.getDomRef()) {
					var $FacetBar = this.$("facetBar");
					var iFacetBarHeight = this._calcFacetBarHeight($FacetBar);
					$FacetBar.slideUp();
					this._adaptContentHeight(null, true, iFacetBarHeight);
				}

			} else {
				// newSelectedItem == null  after selecting the child
			}
		} else {
			// newSelectedItem == null
			throw new Error("WorksetItem with ID " + newSelectedId + " cannot be found.");
		}
	}

	return this;
};


/* FullHeight / ContentPadding */

sap.ui.ux3.Shell.prototype.setApplyContentPadding = function(bApplyContentPadding) {
	this.setProperty("applyContentPadding", bApplyContentPadding, true); // no re-rendering
	this.$().toggleClass("sapUiUx3ShellNoContentPadding", !bApplyContentPadding);
	this._adaptContentHeight();
};

sap.ui.ux3.Shell.prototype.setFullHeightContent = function(bFullHeightContent) {
	this.setProperty("fullHeightContent", bFullHeightContent, true); // no re-rendering
	this.$().toggleClass("sapUiUx3ShellFullHeightContent", bFullHeightContent);
	this._adaptContentHeight();
};

sap.ui.ux3.Shell.prototype._calcFacetBarHeight = function($FacetBar){
	if(this._iFacetBarHeight === undefined){
		this._iFacetBarHeight = 0;
	}

	if(!$FacetBar){
		$FacetBar = this.$("facetBar");
	}
	if($FacetBar.length > 0){
		var h = this.$("facetBar").outerHeight(true);
		this._iFacetBarHeight = Math.max(this._iFacetBarHeight, h);
	}
	
	return this._iFacetBarHeight;
};

sap.ui.ux3.Shell.prototype._adaptContentHeight = function(sNotificationBarVisibleStatus, bAnimate, iFacetBarHeight) {
	if(!this.getDomRef()){
		return;
	}

	var $content = this.$("content");
	var $canvas = this.$("canvas");

	if(this.getFullHeightContent()){
		var bPad = this.getApplyContentPadding();
		var iTop = !bPad ? 0 : parseInt($canvas.css("paddingTop"), 10);
		var iLeft = !bPad ? 0 : parseInt($canvas.css("paddingLeft"), 10);
		var iRight = !bPad ? 0 : parseInt($canvas.css("paddingRight"), 10);

		var _iFacetBarHeight = iFacetBarHeight ? iFacetBarHeight : this._calcFacetBarHeight();

		var sTop = (iTop + (this._oFacetBar.getAssociatedItems().length > 0 ? _iFacetBarHeight : 0)) + "px";

		if(bAnimate){
			$content.stop().animate({top: sTop});
		}else{
			$content.stop().css("top", sTop);
		}

		var oNotify = this.getNotificationBar();
		if(oNotify && !sNotificationBarVisibleStatus){
			sNotificationBarVisibleStatus = oNotify.getVisibleStatus();
		}

		if(sNotificationBarVisibleStatus === sap.ui.ux3.NotificationBarStatus.Default
			|| sNotificationBarVisibleStatus === sap.ui.ux3.NotificationBarStatus.Max){
			$content.css("bottom", oNotify.getHeightOfStatus(sap.ui.ux3.NotificationBarStatus.Default));
		}else{
			var iBottom = !bPad ? 0 : parseInt($canvas.css("paddingBottom"), 10);
			if (oNotify && sNotificationBarVisibleStatus === sap.ui.ux3.NotificationBarStatus.Min) {
				iBottom += sap.ui.ux3.NotificationBar.HOVER_ITEM_HEIGHT; 
			}
			$content.css("bottom", iBottom + "px");
		}

		$content.css(this._bRtl ? "right" : "left", iLeft + "px");
		$content.css(this._bRtl ? "left" : "right", iRight + "px");
	}else{
		$content.removeAttr("style");
	}

	if(!!sap.ui.Device.browser.webkit){
		//Force Webkit Browsers to do a repaint
		sap.ui.core.RenderManager.forceRepaint(this.getId()+"-canvas");
	}
};


/* Drag&Drop personalization */

sap.ui.ux3.Shell.prototype._handleDragover = function(evt) {
	var id = evt.target.id;
	if (!this._dragOverBlinking) {
		var $bg = jQuery.sap.byId(id);
		$bg.css("opacity", "0.5");
		this._dragOverBlinking = true;
		var that = this;
		window.setTimeout(function(){
			$bg.css("opacity", "1");
			window.setTimeout(function(){
				that._dragOverBlinking = null;
			}, 300);
		}, 300);
	}
	return false;
};
sap.ui.ux3.Shell.prototype._handleDragend = function(evt) {
	return false;
};
sap.ui.ux3.Shell.prototype._handleDrop = function(evt) {
	var id = evt.target.id;
	evt.preventDefault();
	var e = evt.originalEvent;
	var file = e.dataTransfer.files[0];
	if(file) {
		// read file content
		var reader = new window.FileReader();
		reader.onload = jQuery.proxy(function(event) {
			var dataUrl = event.target.result;
			if (id == this.getId() + "-bgImg") {
				this._getPersonalization()._handleBackgroundImageChange(dataUrl, true);
			} else if (id == this.getId() + "-hdr") {
				this._getPersonalization()._handleHeaderImageChange(dataUrl, true);
			} else if (id == this.getId() + "-logoImg") {
				this._getPersonalization()._handleLogoImageChange(dataUrl, true);
			}
			reader = null;
		}, this);
		reader.readAsDataURL(file);
	}
};



sap.ui.ux3.Shell.prototype._getPersonalization = function() {
	if (!this.oPersonalization) {
		jQuery.sap.require("sap.ui.ux3.ShellPersonalization");
		this.oPersonalization = new sap.ui.ux3.ShellPersonalization(this);
	}
	return this.oPersonalization;
};

sap.ui.ux3.Shell.prototype.openPersonalizationDialog = function() {
	this._getPersonalization().openDialog();
};

sap.ui.ux3.Shell.prototype.initializePersonalization = function(oSettings) {
	this._getPersonalization().initializeSettings(oSettings);
};

sap.ui.ux3.Shell.prototype._convertImageParameter = function(sParameter) {
	var rExtractUri = new RegExp(/url[\s]*\('?"?([^\'")]*)'?"?\)/);
	return rExtractUri.exec(sParameter) ? rExtractUri.exec(sParameter)[1] : sParameter;
};
sap.ui.ux3.Shell.prototype.onThemeChanged = function(oEvent) {
	this._iFacetBarHeight = undefined;
	
	if (!this.getDomRef()) {
		// If there is no DOM-element, we cant do anything - onAfterRendering will be called later.
		return;
	}

	var sImage = "";
	// if already rendered update images
	if (!this.getAppIcon()) {
		sImage = sap.ui.core.theming.Parameters.get('sapUiUx3ShellApplicationImageURL');
		sImage = this._convertImageParameter(sImage);
		if (sImage) {
			this.$("logoImg").attr('src', sImage);
		}else{
			this.$("logoImg").attr('src', sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
		}
	}

	sImage = sap.ui.core.theming.Parameters.get('sapUiUx3ShellHeaderImageURL');
	sImage = this._convertImageParameter(sImage);
	if (sImage) {
		this.$("hdrImg").attr('src', sImage);
	}else{
		this.$("hdrImg").attr('src', sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
	}

	sImage = sap.ui.core.theming.Parameters.get('sapUiUx3ShellBackgroundImageURL');
	sImage = this._convertImageParameter(sImage);
	if (sImage) {
		this.$("bgImg").attr('src', sImage);
	}else{
		this.$("bgImg").attr('src', sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
	}

	this.$("facetBar").stop(true, true); //Stop potentially running animations
	this._adaptContentHeight();

	this._updateThemeVariables();

	this._checkResize();
};

}; // end of sap/ui/ux3/Shell.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingAction') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ThingAction.
jQuery.sap.declare("sap.ui.ux3.ThingAction");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ThingAction.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.ThingAction#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Thing Action for Swatch, QuickView, Thinginspector
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.ThingAction
 */
sap.ui.core.Element.extend("sap.ui.ux3.ThingAction", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"enabled" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ThingAction with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ThingAction.extend
 * @function
 */

sap.ui.ux3.ThingAction.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>text</code>.
 * text of action
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.ux3.ThingAction#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingAction#setText
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * action enabled (true/false)
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.ux3.ThingAction#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingAction#setEnabled
 * @function
 */


/**
 * Event will be fired when the action was triggered. 
 *
 * @name sap.ui.ux3.ThingAction#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of selected action
 * @param {sap.ui.ux3.ThingAction} oControlEvent.getParameters.action Selected Thing Action
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.ux3.ThingAction</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ThingAction</code>.<br/> itself. 
 *  
 * Event will be fired when the action was triggered. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ThingAction</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingAction#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.ux3.ThingAction</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingAction#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of selected action</li>
 * <li>'action' of type <code>sap.ui.ux3.ThingAction</code> Selected Thing Action</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ThingAction#fireSelect
 * @function
 */


// Start of sap\ui\ux3\ThingAction.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.ux3.ThingAction.prototype.init = function(){
//   // do something for initialization...
//};
sap.ui.ux3.ThingAction.prototype.onclick = function(oEvent) {
	this.fireSelect({
		id : this.getId(),
		action: this
	});
};
sap.ui.ux3.ThingAction.prototype.onsapselect = function(oEvent) {
	this.fireSelect({
		id : this.getId(),
		action: this
	});
};
}; // end of sap/ui/ux3/ThingAction.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ThingGroup.
jQuery.sap.declare("sap.ui.ux3.ThingGroup");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ThingGroup.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getColspan colspan} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getActions actions} : sap.ui.ux3.ThingGroup[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Thing Group Area
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.ThingGroup
 */
sap.ui.core.Element.extend("sap.ui.ux3.ThingGroup", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"colspan" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"actions" : {type : "sap.ui.ux3.ThingGroup", multiple : true, singularName : "action"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ThingGroup with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ThingGroup.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title of Group
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.ux3.ThingGroup#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingGroup#setTitle
 * @function
 */


/**
 * Getter for property <code>colspan</code>.
 * If Group is used in a column layout the groups spans the all columns if set to true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>colspan</code>
 * @public
 * @name sap.ui.ux3.ThingGroup#getColspan
 * @function
 */

/**
 * Setter for property <code>colspan</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bColspan  new value for property <code>colspan</code>
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingGroup#setColspan
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content of Group
 * 
 * <strong>Note</strong>: this is the default aggregation for ThingGroup.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.ThingGroup#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingGroup#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingGroup#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.ux3.ThingGroup#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ThingGroup#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ThingGroup#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingGroup#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>actions</code>.<br/>
 * Actions of the groups content
 * 
 * @return {sap.ui.ux3.ThingGroup[]}
 * @public
 * @name sap.ui.ux3.ThingGroup#getActions
 * @function
 */


/**
 * Inserts a action into the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *          oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the action should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the action is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingGroup#insertAction
 * @function
 */

/**
 * Adds some action <code>oAction</code> 
 * to the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oAction the action to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingGroup#addAction
 * @function
 */

/**
 * Removes an action from the aggregation named <code>actions</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingGroup} vAction the action to remove or its index or id
 * @return {sap.ui.ux3.ThingGroup} the removed action or null
 * @public
 * @name sap.ui.ux3.ThingGroup#removeAction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>actions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingGroup[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ThingGroup#removeAllActions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingGroup</code> in the aggregation named <code>actions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oAction the action whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ThingGroup#indexOfAction
 * @function
 */
	

/**
 * Destroys all the actions in the aggregation 
 * named <code>actions</code>.
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingGroup#destroyActions
 * @function
 */


// Start of sap\ui\ux3\ThingGroup.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.ux3.ThingContent.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap/ui/ux3/ThingGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingViewer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ThingViewer.
jQuery.sap.declare("sap.ui.ux3.ThingViewer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ThingViewer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getSubtitle subtitle} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeaderType headerType} : sap.ui.ux3.ThingViewerHeaderType (default: sap.ui.ux3.ThingViewerHeaderType.Standard)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.ux3.ThingGroup[]</li>
 * <li>{@link #getFacets facets} : sap.ui.ux3.NavigationItem[]</li>
 * <li>{@link #getFacetContent facetContent} : sap.ui.ux3.ThingGroup[]</li>
 * <li>{@link #getActionBar actionBar} : sap.ui.ux3.ActionBar</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedFacet selectedFacet} : string | sap.ui.ux3.NavigationItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.ThingViewer#event:facetSelected facetSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ThingViewer: Same as ThingInspector but decoupled from the Overlay and the ActionBar.
 * The control can be added to a Parent container that has a defined width. The ThingViewer fill the whole container. If the parent container has no width defined the control will not work properly.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @name sap.ui.ux3.ThingViewer
 */
sap.ui.core.Control.extend("sap.ui.ux3.ThingViewer", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"type" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"subtitle" : {type : "string", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'},
		"headerType" : {type : "sap.ui.ux3.ThingViewerHeaderType", group : "Misc", defaultValue : sap.ui.ux3.ThingViewerHeaderType.Standard}
	},
	aggregations : {
    	"headerContent" : {type : "sap.ui.ux3.ThingGroup", multiple : true, singularName : "headerContent"}, 
    	"facets" : {type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "facet"}, 
    	"facetContent" : {type : "sap.ui.ux3.ThingGroup", multiple : true, singularName : "facetContent"}, 
    	"actionBar" : {type : "sap.ui.ux3.ActionBar", multiple : false}, 
    	"navBar" : {type : "sap.ui.ux3.NavigationBar", multiple : false, visibility : "hidden"}
	},
	associations : {
		"selectedFacet" : {type : "sap.ui.ux3.NavigationItem", multiple : false}
	},
	events : {
		"facetSelected" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ThingViewer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ThingViewer.extend
 * @function
 */

sap.ui.ux3.ThingViewer.M_EVENTS = {'facetSelected':'facetSelected'};


/**
 * Getter for property <code>title</code>.
 * Title of the Thing Inspector
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.ux3.ThingViewer#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#setTitle
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Thing type
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.ui.ux3.ThingViewer#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#setType
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Thing Icon Url
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.ux3.ThingViewer#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#setIcon
 * @function
 */


/**
 * Getter for property <code>subtitle</code>.
 * Subtitle of the Thing Inspector
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>subtitle</code>
 * @public
 * @name sap.ui.ux3.ThingViewer#getSubtitle
 * @function
 */

/**
 * Setter for property <code>subtitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSubtitle  new value for property <code>subtitle</code>
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#setSubtitle
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of the ThingViewer
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.ux3.ThingViewer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of the ThingViewer
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.ux3.ThingViewer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#setHeight
 * @function
 */


/**
 * Getter for property <code>headerType</code>.
 * Defines which header type should be used.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.ux3.ThingViewerHeaderType} the value of property <code>headerType</code>
 * @public
 * @since 1.16.3
 * @name sap.ui.ux3.ThingViewer#getHeaderType
 * @function
 */

/**
 * Setter for property <code>headerType</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.ux3.ThingViewerHeaderType} oHeaderType  new value for property <code>headerType</code>
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * @name sap.ui.ux3.ThingViewer#setHeaderType
 * @function
 */


/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * ThingGroups for the header content
 * 
 * @return {sap.ui.ux3.ThingGroup[]}
 * @public
 * @name sap.ui.ux3.ThingViewer#getHeaderContent
 * @function
 */


/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#insertHeaderContent
 * @function
 */

/**
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#addHeaderContent
 * @function
 */

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingGroup} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.ux3.ThingGroup} the removed headerContent or null
 * @public
 * @name sap.ui.ux3.ThingViewer#removeHeaderContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingGroup[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ThingViewer#removeAllHeaderContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingGroup</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ThingViewer#indexOfHeaderContent
 * @function
 */
	

/**
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#destroyHeaderContent
 * @function
 */


/**
 * Getter for aggregation <code>facets</code>.<br/>
 * Thing Inspector facets
 * 
 * @return {sap.ui.ux3.NavigationItem[]}
 * @public
 * @name sap.ui.ux3.ThingViewer#getFacets
 * @function
 */


/**
 * Inserts a facet into the aggregation named <code>facets</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *          oFacet the facet to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facet should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facet is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facet is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#insertFacet
 * @function
 */

/**
 * Adds some facet <code>oFacet</code> 
 * to the aggregation named <code>facets</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oFacet the facet to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#addFacet
 * @function
 */

/**
 * Removes an facet from the aggregation named <code>facets</code>.
 *
 * @param {int | string | sap.ui.ux3.NavigationItem} vFacet the facet to remove or its index or id
 * @return {sap.ui.ux3.NavigationItem} the removed facet or null
 * @public
 * @name sap.ui.ux3.ThingViewer#removeFacet
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>facets</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.NavigationItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ThingViewer#removeAllFacets
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.NavigationItem</code> in the aggregation named <code>facets</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oFacet the facet whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ThingViewer#indexOfFacet
 * @function
 */
	

/**
 * Destroys all the facets in the aggregation 
 * named <code>facets</code>.
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#destroyFacets
 * @function
 */


/**
 * Getter for aggregation <code>facetContent</code>.<br/>
 * ThingGroups for content of the selected facet
 * 
 * @return {sap.ui.ux3.ThingGroup[]}
 * @public
 * @name sap.ui.ux3.ThingViewer#getFacetContent
 * @function
 */


/**
 * Inserts a facetContent into the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *          oFacetContent the facetContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facetContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facetContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facetContent is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#insertFacetContent
 * @function
 */

/**
 * Adds some facetContent <code>oFacetContent</code> 
 * to the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oFacetContent the facetContent to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#addFacetContent
 * @function
 */

/**
 * Removes an facetContent from the aggregation named <code>facetContent</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingGroup} vFacetContent the facetContent to remove or its index or id
 * @return {sap.ui.ux3.ThingGroup} the removed facetContent or null
 * @public
 * @name sap.ui.ux3.ThingViewer#removeFacetContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>facetContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingGroup[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ThingViewer#removeAllFacetContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingGroup</code> in the aggregation named <code>facetContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oFacetContent the facetContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ThingViewer#indexOfFacetContent
 * @function
 */
	

/**
 * Destroys all the facetContent in the aggregation 
 * named <code>facetContent</code>.
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#destroyFacetContent
 * @function
 */


/**
 * Getter for aggregation <code>actionBar</code>.<br/>
 * An ActionBar can be given
 * 
 * @return {sap.ui.ux3.ActionBar}
 * @public
 * @name sap.ui.ux3.ThingViewer#getActionBar
 * @function
 */


/**
 * Setter for the aggregated <code>actionBar</code>.
 * @param {sap.ui.ux3.ActionBar} oActionBar
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#setActionBar
 * @function
 */
	

/**
 * Destroys the actionBar in the aggregation 
 * named <code>actionBar</code>.
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#destroyActionBar
 * @function
 */


/**
 * The Facet that is currently selected.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedFacet</code> association, or null
 * @public
 * @name sap.ui.ux3.ThingViewer#getSelectedFacet
 * @function
 */

/**
 * The Facet that is currently selected.
 *
 * @param {string | sap.ui.ux3.NavigationItem} vSelectedFacet 
 *    Id of an element which becomes the new target of this <code>selectedFacet</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#setSelectedFacet
 * @function
 */


	
/**
 * Event for facet selection. The application is responsible for displaying the correct content for the selected one. The ThingInspector will currently always mark the first facet as selected. 
 *
 * @name sap.ui.ux3.ThingViewer#facetSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of selected NavigationItem
 * @param {sap.ui.ux3.NavigationItem} oControlEvent.getParameters.item The selected NavigationItem
 * @param {string} oControlEvent.getParameters.key Key of selected NavigationItem
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'facetSelected' event of this <code>sap.ui.ux3.ThingViewer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ThingViewer</code>.<br/> itself. 
 *  
 * Event for facet selection. The application is responsible for displaying the correct content for the selected one. The ThingInspector will currently always mark the first facet as selected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ThingViewer</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#attachFacetSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'facetSelected' event of this <code>sap.ui.ux3.ThingViewer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingViewer#detachFacetSelected
 * @function
 */

/**
 * Fire event facetSelected to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of selected NavigationItem</li>
 * <li>'item' of type <code>sap.ui.ux3.NavigationItem</code> The selected NavigationItem</li>
 * <li>'key' of type <code>string</code> Key of selected NavigationItem</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.ux3.ThingViewer#fireFacetSelected
 * @function
 */


// Start of sap\ui\ux3\ThingViewer.js
(function() {
	/**
	 * Initialization hook for the ThingViewer. It creates the instance of the
	 * Popup helper service and does some basic configuration for it.
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype.init = function() {
		var that = this;
		this._oNavBar = new sap.ui.ux3.NavigationBar();
		this.setAggregation("navBar",this._oNavBar);
		// attach NavBar selection
		this._oSocialActions = {};
		this._oNavBar.attachSelect(function(oControlEvent) {
			var item = oControlEvent.getParameters().item;
			if(that.fireFacetSelected({id:item.getId(), key:item.getKey(),item:item})) {
				that.setSelectedFacet(item);
			} else {
				 oControlEvent.preventDefault();
			}
		});
	};
	
	/*
	 * Set size of TI after rendering: If running in Shell we sync with shell
	 * canvas. The size will then be set by the shell.
	 */
	sap.ui.ux3.ThingViewer.prototype.onAfterRendering = function() {
		// register resize handler
		this._resize = false;
		if (this.getActionBar()) {
			this._adjustStyles();
		}
		if (this.$().find(".sapUiUx3TVFacetContent").length <= 0) {
			return;
		}
		this._resizeListenerId = sap.ui.core.ResizeHandler.register(this.$().find(".sapUiUx3TVFacetContent")[0], jQuery.proxy(this._onresize, this));
		
		// initial resize handling
		this._setTriggerValue();
		this._setHeaderPosition();
		this._onresize();
	};
	
	sap.ui.ux3.ThingViewer.prototype.onBeforeRendering = function() {
		if (this._resizeListenerId) {
			sap.ui.core.ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
	};
	
	sap.ui.ux3.ThingViewer.prototype._setHeaderPosition = function() {
		if (this.getHeaderType() === sap.ui.ux3.ThingViewerHeaderType.Standard) {
			var $typeContainer = this.$().find(".sapUiUx3TVHeaderContainerIdentifier");
			var $scrollContainer = this.$().find(".sapUiUx3TVHeaderGroupScrollContainer");
			$scrollContainer.css("top", $typeContainer.outerHeight());
		}
	};
	
	/**
	 * Resize handler listening to the facet content area. If the area will be
	 * resized and the blocks will be rearranged to one column the width will be set
	 * to 100%. After resize to a width greater than two times the minimum width of
	 * a single block the size will be set back to 50%
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype._onresize = function(oEvent) {
		var width;
		if (oEvent) {
			width = jQuery(oEvent.target).width();
		}
		if (!width) {
			width = jQuery(this.$().find(".sapUiUx3TVFacetContent")[0]).width();
		}
		if (width < this._triggerValue && this._resize == false) {
			var facetGroups = this.$().find(".sapUiUx3TVFacetThingGroup");
			for ( var i = 0; i < facetGroups.length; i++) {
				jQuery(facetGroups[i]).animate({
					width : "100%"
				}, "fast");
			}
			this._resize = true;
		} else if (width > this._triggerValue && this._resize == true) {
			var facetGroups = this.$().find(".sapUiUx3TVFacetThingGroup");
			for ( var i = 0; i < facetGroups.length; i++) {
				jQuery(facetGroups[i]).animate({
					width : "50%"
				}, "fast");
			}
			this._resize = false;
		}
		if (this.getActionBar()) {
			var minWidth = this.getActionBar().getActionBarMinWidth();
			var minWidthTI = minWidth;
			if (this._bShell) {
				minWidth += 36;
				minWidthTI  = minWidth + 60;
			}
			this.$().find(".sapUiUx3TV").css("min-width",minWidthTI+"px");
			this.$().find(".sapUiUx3TVContent").css("min-width",minWidth+"px");
		}
	};
	
	/**
	 * Destroys this instance of ThingViewer, called by Element#destroy()
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype.exit = function() {
		this._oNavBar.destroy();
		if (this._resizeListenerId) {
			sap.ui.core.ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
	};
	
	/**
	 * get Navigation Bar control
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype._getNavBar = function() {
		return this._oNavBar;
	};
	
	/**
	 * setDefault NavBar selection and fire SelectedItem Event
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype._selectDefault = function() {
		var navBarItems = this._oNavBar.getItems();
		if (navBarItems.length && !this._oNavBar.getSelectedItem()) {
			if (!this.getSelectedFacet()) {
				this.setSelectedFacet(navBarItems[0]);
			}
			var itemID = this._oNavBar.getSelectedItem();
			var item = sap.ui.getCore().byId(itemID);
			this.fireFacetSelected({
				id : item.getId(),
				key : item.getKey(),
				item : item
			});
		}
	};
	
	/**
	 * equal Columns
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype._equalColumns = function() {
		var headerColumn = this.$().find(".sapUiUx3TVHeader");
		var facetsColumn = this.$().find(".sapUiUx3TVFacets");
		var scrollContainer = this.$().find(".sapUiUx3TVContentScrollContainer");
		facetsColumn.height(scrollContainer.get(0).scrollHeight);
		headerColumn.height(scrollContainer.get(0).scrollHeight);
	};
	
	/**
	 * Rerender Header
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype._rerenderHeader = function() {
		var $content = this.$("header");
		if ($content.length > 0) {
			var rm = sap.ui.getCore().createRenderManager();
			sap.ui.ux3.ThingViewerRenderer.renderHeader(rm, this);
			rm.flush($content[0]);
			rm.destroy();
		}
	};
	
	/**
	 * Rerender Header Content
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype._rerenderHeaderContent = function() {
		var $content = this.$("headerContent");
		if ($content.length > 0) {
			var rm = sap.ui.getCore().createRenderManager();
			sap.ui.ux3.ThingViewerRenderer.renderHeaderContent(rm, this);
			rm.flush($content[0]);
			rm.destroy();
		}
	};
	
	/**
	 * Rerender Toolbar
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype._rerenderToolbar = function() {
		var $content = this.$("toolbar");
		if ($content.length > 0) {
			var rm = sap.ui.getCore().createRenderManager();
			sap.ui.ux3.ThingViewerRenderer.renderToolbar(rm, this);
			rm.flush($content[0]);
			rm.destroy();
		}
	};
	
	/**
	 * Rerender Facet Content
	 *
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype._rerenderFacetContent = function() {
		var $content = this.$("facetContent");
		if ($content.length > 0) {
			var rm = sap.ui.getCore().createRenderManager();
			sap.ui.ux3.ThingViewerRenderer.renderFacetContent(rm, this);
			rm.flush($content[0]);
			rm.destroy();
			this._resize = false;
			this._setTriggerValue();
			this._onresize();
		}
	};
	
	/**
	 * set trigger value for resize handler
	 * 
	 * @private
	 */
	sap.ui.ux3.ThingViewer.prototype._setTriggerValue = function() {
		var facetGroups, minWidth,
			$content = this.$("facetContent");
		
		// get triggerValue for facet content resize handler
		if ($content.length > 0) {
			facetGroups = this.$().find(".sapUiUx3TVFacetThingGroup");
			minWidth = jQuery(facetGroups[0]).css("min-width");
			this._triggerValue = parseInt(minWidth, 10) * 2;
		}
	};
	
	/* Redefinition of generated API methods */
	
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.getFacets = function() {
		return this._oNavBar.getItems();
	};
	
	// Implementation of API method insertFacet
	sap.ui.ux3.ThingViewer.prototype.insertFacet = function(oFacet, iIndex) {
		this._oNavBar.insertItem(oFacet, iIndex);
		return this;
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.addFacet = function(oFacet) {
		this._oNavBar.addItem(oFacet);
		return this;
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.removeFacet = function(vElement) {
		return this._oNavBar.removeItem(vElement);
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.removeAllFacets = function() {
		return this._oNavBar.removeAllItems();
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.destroyFacets = function() {
		this._oNavBar.destroyItems();
		return this;
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.setIcon = function(oIcon) {
		this.setProperty("icon", oIcon);
		if (this.getActionBar()) {
			this.getActionBar().setThingIconURI(oIcon);
		}
		this._rerenderHeader();
		return this;
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.insertFacetContent = function(oFacetContent, iIndex) {
		this.insertAggregation("facetContent", oFacetContent, iIndex, true);
		this._rerenderFacetContent();
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.addFacetContent = function(oFacetContent) {
		this.addAggregation("facetContent", oFacetContent, true);
		this._rerenderFacetContent();
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.removeFacetContent = function(vFacetContent) {
		var result = this.removeAggregation("facetContent", vFacetContent, true);
		this._rerenderFacetContent();
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.removeAllFacetContent = function() {
		var result = this.removeAllAggregation("facetContent", true);
		this._rerenderFacetContent();
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.destroyFacetContent = function() {
		this.destroyAggregation("facetContent", true);
		this._rerenderFacetContent();
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.insertHeaderContent = function(oHeaderContent, iIndex) {
		this.insertAggregation("headerContent", oHeaderContent, iIndex, true);
		this._rerenderHeaderContent();
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.addHeaderContent = function(oHeaderContent) {
		this.addAggregation("headerContent", oHeaderContent, true);
		this._rerenderHeaderContent();
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.removeHeaderContent = function(vHeaderContent) {
		var result = this.removeAggregation("headerContent", vHeaderContent, true);
		this._rerenderHeaderContent();
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.removeAllHeaderContent = function() {
		var result = this.removeAllAggregation("headerContent", true);
		this._rerenderHeaderContent();
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.destroyHeaderContent = function() {
		this.destroyAggregation("headerContent", true);
		this._rerenderHeaderContent();
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.setSelectedFacet = function(selectedFacet) {
		var oldSelectedFacet = this.getSelectedFacet();
		this.setAssociation("selectedFacet", selectedFacet, true);
		var newSelectedFacet = this.getSelectedFacet();
	
		if (oldSelectedFacet != newSelectedFacet) {
			this._oNavBar.setSelectedItem(newSelectedFacet);
		}
	};
	//Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.setTitle = function(sTitle) {
		this.setProperty("title", sTitle, true);
		this._rerenderHeader();
	};
	//Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.setSubtitle = function(sTitle) {
		this.setProperty("subtitle", sTitle, true);
		this._rerenderHeader();
	};
	// Implementation of API method
	sap.ui.ux3.ThingViewer.prototype.setActionBar = function(oActionBar) {
		this.setAggregation("actionBar", oActionBar, true);
		if (this.getIcon() && this.getActionBar()) {
			this.getActionBar().setThingIconURI(this.getIcon());
		}
		this._rerenderToolbar();
		this._adjustStyles();
		return this;
	};
	sap.ui.ux3.ThingViewer.prototype._adjustStyles = function() {
		var $header = this.$().find(".sapUiUx3TVHeader");
		var $facets = this.$().find(".sapUiUx3TVFacets");
		if ($header.length > 0) { 
			$header.addClass("sapUiUx3TVActionBar");
			$header.removeClass("sapUiUx3TVNoActionBar");
		}
		if ($facets.length > 0) {
			$facets.addClass("sapUiUx3TVActionBar");
			$facets.removeClass("sapUiUx3TVNoActionBar");
		}
	};
}());
}; // end of sap/ui/ux3/ThingViewer.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ToolPopup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ToolPopup.
jQuery.sap.declare("sap.ui.ux3.ToolPopup");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ToolPopup.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconHover iconHover} : sap.ui.core.URI</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>
 * <li>{@link #getModal modal} : boolean (default: false)</li>
 * <li>{@link #getInverted inverted} : boolean (default: true)</li>
 * <li>{@link #getAutoClose autoClose} : boolean (default: false)</li>
 * <li>{@link #getMaxHeight maxHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getOpenDuration openDuration} : int (default: 400)</li>
 * <li>{@link #getCloseDuration closeDuration} : int (default: 400)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.ui.core.Control[]</li>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li>
 * <li>{@link #getOpener opener} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.ToolPopup#event:open open} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.ToolPopup#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.ToolPopup#event:enter enter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.ToolPopup#event:iconChanged iconChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.ToolPopup#event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.ToolPopup#event:opened opened} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A pop up which the user can open from the Shell's tool pane. Generally, the starting point would be an icon.
 * For this pop up, buttons can be defined with any text; therefore, it has the same purpose and similar look like any common dialog box.
 * A ToolPopup can have any content. Depending on the application type and design, the structure of the texts and input fields can be for
 * example form-like.
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.ToolPopup
 */
sap.ui.core.Control.extend("sap.ui.ux3.ToolPopup", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.core.PopupInterface"
	],
	publicMethods : [
		// methods
		"isOpen", "open", "close", "setPosition", "getEnabled", "addFocusableArea", "removeFocusableArea"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconHover" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconSelected" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"modal" : {type : "boolean", group : "Behavior", defaultValue : false},
		"inverted" : {type : "boolean", group : "Misc", defaultValue : true},
		"autoClose" : {type : "boolean", group : "Misc", defaultValue : false},
		"maxHeight" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"maxWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"openDuration" : {type : "int", group : "Misc", defaultValue : 400},
		"closeDuration" : {type : "int", group : "Misc", defaultValue : 400}
	},
	defaultAggregation : "content",
	aggregations : {
    	"buttons" : {type : "sap.ui.core.Control", multiple : true, singularName : "button"}, 
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	associations : {
		"initialFocus" : {type : "sap.ui.core.Control", multiple : false}, 
		"opener" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"open" : {}, 
		"close" : {allowPreventDefault : true}, 
		"enter" : {}, 
		"iconChanged" : {}, 
		"closed" : {}, 
		"opened" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ToolPopup with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ToolPopup.extend
 * @function
 */

sap.ui.ux3.ToolPopup.M_EVENTS = {'open':'open','close':'close','enter':'enter','iconChanged':'iconChanged','closed':'closed','opened':'opened'};


/**
 * Getter for property <code>title</code>.
 * The title displayed in the pop up window
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.ux3.ToolPopup#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#setTitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * This property is relevant for Shell-use:
 * The URL to the icon displayed in the tool area which is used to open the ToolPopup. The recommended size is 32x32px, including some transparent border. Therefore, the content will cover about 20x20px.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.ux3.ToolPopup#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#setIcon
 * @function
 */


/**
 * Getter for property <code>iconHover</code>.
 * This property is relevant for Shell-use:
 * The URL to the icon in hover state, displayed in the tool area which is used to open the pop up.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconHover</code>
 * @public
 * @name sap.ui.ux3.ToolPopup#getIconHover
 * @function
 */

/**
 * Setter for property <code>iconHover</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconHover  new value for property <code>iconHover</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#setIconHover
 * @function
 */


/**
 * Getter for property <code>iconSelected</code>.
 * This property is relevant for Shell-use:
 * The URL to the icon in selected state displayed in the tool area which is used to open the pop up. If no selected icon is given, the hover icon is used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSelected</code>
 * @public
 * @name sap.ui.ux3.ToolPopup#getIconSelected
 * @function
 */

/**
 * Setter for property <code>iconSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSelected  new value for property <code>iconSelected</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#setIconSelected
 * @function
 */


/**
 * Getter for property <code>modal</code>.
 * Whether the popup is modal and blocks any user-interaction with controls in the background.
 * Changing this property while the ToolPopup is open is not allowed (and currently has no effect)
 * Please don't use "modal" and "autoclose" at the same time. In this case a warning will be prompted to the console and "autoclose" won't be used.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * @name sap.ui.ux3.ToolPopup#getModal
 * @function
 */

/**
 * Setter for property <code>modal</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bModal  new value for property <code>modal</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#setModal
 * @function
 */


/**
 * Getter for property <code>inverted</code>.
 * Specifies whether the ToolPopup has a dark or bright background. If set to true the background and borders will be dark. If false this stuff will be bright.
 * This property only has an effect for the GoldReflection-theme.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>inverted</code>
 * @public
 * @since 1.11.1
 * @name sap.ui.ux3.ToolPopup#getInverted
 * @function
 */

/**
 * Setter for property <code>inverted</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bInverted  new value for property <code>inverted</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.1
 * @name sap.ui.ux3.ToolPopup#setInverted
 * @function
 */


/**
 * Getter for property <code>autoClose</code>.
 * This property tells the ToolPopup to close itself if the ToolPopup looses the focus. If the user e.g. clicks outside of the ToolPopup it will be closed. Please don't use "modal" and "autoclose" at the same time. In this case a warning will be prompted to the console and "autoclose" won't be used.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>autoClose</code>
 * @public
 * @since 1.13.2
 * @name sap.ui.ux3.ToolPopup#getAutoClose
 * @function
 */

/**
 * Setter for property <code>autoClose</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAutoClose  new value for property <code>autoClose</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.2
 * @name sap.ui.ux3.ToolPopup#setAutoClose
 * @function
 */


/**
 * Getter for property <code>maxHeight</code>.
 * This property can be used to force a maximum height of the ToolPopup in pixels. If the ToolPopup content is higher than the ToolPopup, the content will be scrollable.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxHeight</code>
 * @public
 * @since 1.13.2
 * @name sap.ui.ux3.ToolPopup#getMaxHeight
 * @function
 */

/**
 * Setter for property <code>maxHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxHeight  new value for property <code>maxHeight</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.2
 * @name sap.ui.ux3.ToolPopup#setMaxHeight
 * @function
 */


/**
 * Getter for property <code>maxWidth</code>.
 * This property can be used to force a maximum width of the ToolPopup in pixels.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * @since 1.15.0
 * @name sap.ui.ux3.ToolPopup#getMaxWidth
 * @function
 */

/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.ui.ux3.ToolPopup#setMaxWidth
 * @function
 */


/**
 * Getter for property <code>openDuration</code>.
 * Time in milliseconds for the open animation.
 *
 * Default value is <code>400</code>
 *
 * @return {int} the value of property <code>openDuration</code>
 * @public
 * @since 1.19.0
 * @name sap.ui.ux3.ToolPopup#getOpenDuration
 * @function
 */

/**
 * Setter for property <code>openDuration</code>.
 *
 * Default value is <code>400</code> 
 *
 * @param {int} iOpenDuration  new value for property <code>openDuration</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @since 1.19.0
 * @name sap.ui.ux3.ToolPopup#setOpenDuration
 * @function
 */


/**
 * Getter for property <code>closeDuration</code>.
 * Time in milliseconds for the close animation.
 *
 * Default value is <code>400</code>
 *
 * @return {int} the value of property <code>closeDuration</code>
 * @public
 * @since 1.19.0
 * @name sap.ui.ux3.ToolPopup#getCloseDuration
 * @function
 */

/**
 * Setter for property <code>closeDuration</code>.
 *
 * Default value is <code>400</code> 
 *
 * @param {int} iCloseDuration  new value for property <code>closeDuration</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @since 1.19.0
 * @name sap.ui.ux3.ToolPopup#setCloseDuration
 * @function
 */


/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * The buttons to appear in the pop up
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.ToolPopup#getButtons
 * @function
 */


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.core.Control}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#insertButton
 * @function
 */

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.core.Control}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#addButton
 * @function
 */

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.ui.core.Control} vButton the button to remove or its index or id
 * @return {sap.ui.core.Control} the removed button or null
 * @public
 * @name sap.ui.ux3.ToolPopup#removeButton
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ToolPopup#removeAllButtons
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ToolPopup#indexOfButton
 * @function
 */
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#destroyButtons
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the pop up
 * 
 * <strong>Note</strong>: this is the default aggregation for ToolPopup.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.ux3.ToolPopup#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.ux3.ToolPopup#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ToolPopup#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ToolPopup#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#destroyContent
 * @function
 */


/**
 * Defines the control that shall get the focus when the ToolPopup is opened.
 *
 * @return {string} Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * @public
 * @name sap.ui.ux3.ToolPopup#getInitialFocus
 * @function
 */

/**
 * Defines the control that shall get the focus when the ToolPopup is opened.
 *
 * @param {string | sap.ui.core.Control} vInitialFocus 
 *    Id of an element which becomes the new target of this <code>initialFocus</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#setInitialFocus
 * @function
 */


	
/**
 * This property is relevant for stand-alone-use:
 * This association needs to be set if the ToolPopup should not be opened by/with the Shell. This association contains the instance of the control that assigns the ToolPopup's position.
 *
 * @return {string} Id of the element which is the current target of the <code>opener</code> association, or null
 * @public
 * @name sap.ui.ux3.ToolPopup#getOpener
 * @function
 */

/**
 * This property is relevant for stand-alone-use:
 * This association needs to be set if the ToolPopup should not be opened by/with the Shell. This association contains the instance of the control that assigns the ToolPopup's position.
 *
 * @param {string | sap.ui.core.Control} vOpener 
 *    Id of an element which becomes the new target of this <code>opener</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#setOpener
 * @function
 */


	
/**
 * Event is fired when the pop up opens 
 *
 * @name sap.ui.ux3.ToolPopup#open
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself. 
 *  
 * Event is fired when the pop up opens 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#attachOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#detachOpen
 * @function
 */

/**
 * Fire event open to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ToolPopup#fireOpen
 * @function
 */


/**
 * Event is fired when the pop up closes because the user pressed Escape or the ToolPopup Button in the Shell. This is called before the closing animation. 
 *
 * @name sap.ui.ux3.ToolPopup#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself. 
 *  
 * Event is fired when the pop up closes because the user pressed Escape or the ToolPopup Button in the Shell. This is called before the closing animation. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#attachClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#detachClose
 * @function
 */

/**
 * Fire event close to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.ux3.ToolPopup#fireClose
 * @function
 */


/**
 * Event is fired whenever the user clicks the Enter or the Return key inside the pop up 
 *
 * @name sap.ui.ux3.ToolPopup#enter
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.originalEvent The onsapenter event, received by the pop up
 * @param {sap.ui.core.Control} oControlEvent.getParameters.originalSrcControl The control that was focused when the user pressed the Enter key (may be null)
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'enter' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself. 
 *  
 * Event is fired whenever the user clicks the Enter or the Return key inside the pop up 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#attachEnter
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'enter' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#detachEnter
 * @function
 */

/**
 * Fire event enter to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'originalEvent' of type <code>object</code> The onsapenter event, received by the pop up</li>
 * <li>'originalSrcControl' of type <code>sap.ui.core.Control</code> The control that was focused when the user pressed the Enter key (may be null)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ToolPopup#fireEnter
 * @function
 */


/**
 * Event is fired when one of the icon properties is modified (Note: The icon is not rendered by the ToolPopup).
 * To be used by other controls which want to update the icon in their UI. 
 *
 * @name sap.ui.ux3.ToolPopup#iconChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'iconChanged' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself. 
 *  
 * Event is fired when one of the icon properties is modified (Note: The icon is not rendered by the ToolPopup).
 * To be used by other controls which want to update the icon in their UI. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#attachIconChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'iconChanged' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#detachIconChanged
 * @function
 */

/**
 * Fire event iconChanged to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ToolPopup#fireIconChanged
 * @function
 */


/**
 * This event is fired after the ToolPopup has finished its closing animation. It is called for EVERY close, regardless of whether the user has triggered the close or whether the ToolPopup was closed via API call. 
 *
 * @name sap.ui.ux3.ToolPopup#closed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'closed' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself. 
 *  
 * This event is fired after the ToolPopup has finished its closing animation. It is called for EVERY close, regardless of whether the user has triggered the close or whether the ToolPopup was closed via API call. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#attachClosed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'closed' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ToolPopup#detachClosed
 * @function
 */

/**
 * Fire event closed to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ToolPopup#fireClosed
 * @function
 */


/**
 * Event is being fired after the ToolPopup has been opened. 
 *
 * @name sap.ui.ux3.ToolPopup#opened
 * @event
 * @since 1.19.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'opened' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself. 
 *  
 * Event is being fired after the ToolPopup has been opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ToolPopup</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @since 1.19.0
 * @name sap.ui.ux3.ToolPopup#attachOpened
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'opened' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 * @since 1.19.0
 * @name sap.ui.ux3.ToolPopup#detachOpened
 * @function
 */

/**
 * Fire event opened to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @protected
 * @since 1.19.0
 * @name sap.ui.ux3.ToolPopup#fireOpened
 * @function
 */


/**
 * Returns whether the pop up is currently open
 *
 * @name sap.ui.ux3.ToolPopup.prototype.isOpen
 * @function

 * @type boolean
 * @public
 */


/**
 * Opens the pop up.
 *
 * @name sap.ui.ux3.ToolPopup.prototype.open
 * @function
 * @param {string} 
 *         sMy
 *         The ToolPopup's content reference position for docking. This value is optional if the position of the ToolPopup is set via 'setPosition'.
 * @param {string} 
 *         sAt
 *         The "of" element's reference point for docking to. This value is optional if the position of the ToolPopup is set via 'setPosition'.

 * @type void
 * @public
 */


/**
 * Closes the pop up. Can be called by the Shell when the pop up's button is clicked again; or by the application
 * when the interaction in the pop up has been completed or canceled.
 *
 * @name sap.ui.ux3.ToolPopup.prototype.close
 * @function
 * @param {boolean} 
 *         bPreventRestoreFocus
 *         If set, the focus is NOT restored to the element that had the focus before the ToolPopup was opened. This makes sense when the ToolPopup is closed programmatically from a different area of the application (outside the ToolPopup) and the focus should not move aways from that place.

 * @type void
 * @public
 */


/**
 * Sets the position of the pop up, the same parameters as for sap.ui.core.Popup can be used.
 *
 * @name sap.ui.ux3.ToolPopup.prototype.setPosition
 * @function

 * @type void
 * @public
 */


/**
 * Whether the ToolPopup is currently enabled or not.
 * 
 * Applications can't control the enabled state via a property. A ToolPopup is implicitly enabled while it is OPENING or OPEN. Descendant controls that honor the enabled state of their ancestors will appear disabled after the ToolPopup is closed.
 *
 * @name sap.ui.ux3.ToolPopup.prototype.getEnabled
 * @function

 * @type boolean
 * @public
 * @since 1.13.1
 */


/**
 * Add an identified area to the parent Popup as additional focusable area that can be used for an "autoclose" ToolPopup. This added area can be focused and prevent the ToolPopup from closing if the added area is outside of the ToolPopup.
 *
 * @name sap.ui.ux3.ToolPopup.prototype.addFocusableArea
 * @function
 * @param {string} 
 *         sId
 *         ID of a control or DOM-node

 * @type void
 * @public
 * @since 1.19.0
 */


/**
 * Removes the control's or DOM-node's id from focusable areas.
 *
 * @name sap.ui.ux3.ToolPopup.prototype.removeFocusableArea
 * @function
 * @param {string} 
 *         sId
 *         ID of a control or DOM-node

 * @type void
 * @public
 * @since 1.19.0
 */


// Start of sap\ui\ux3\ToolPopup.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


// regex rules for arrows corresponding to the given 'my' and 'at' parameters
// these regexes also consider the new offset style of jQueryUI-position from version 1.10.x
// from version 1.10.x the offset is used right within the 'my' parameter
sap.ui.ux3.ToolPopup.ARROW_LEFT =  new RegExp(/my:(left|begin)([-+]\d*\%?)?\|[a-z]+([-+]\d*\%?)? at:(right|end)\|[a-z]+/);
sap.ui.ux3.ToolPopup.ARROW_RIGHT = new RegExp(/my:(right|end)([-+]\d*\%?)?\|[a-z]+([-+]\d*\%?)? at:(left|begin)\|[a-z]+/);
sap.ui.ux3.ToolPopup.ARROW_UP =    new RegExp(/my:[a-z]+([-+]\d*\%?)?\|top([-+]\d*\%?)? at:[a-z]+\|bottom/);
sap.ui.ux3.ToolPopup.ARROW_DOWN =  new RegExp(/my:[a-z]+([-+]\d*\%?)?\|bottom([-+]\d*\%?)? at:[a-z]+\|top/);

(function() {
sap.ui.ux3.ToolPopup.prototype.init = function() {
	this.oPopup = null;
	this._bPositionSet = false;

	this._bFocusSet = false;
	this._proxyOpened = jQuery.proxy(fnPopupOpened, this);
	this._proxyClosed = jQuery.proxy(fnOnClosed, this);
	this._proxyFixSize = jQuery.proxy(fnFixSize, this);
	
	fnSetArrowDimensions(this);
};
sap.ui.ux3.ToolPopup.prototype.exit = function() {
	if (this.oPopup) {
		this.oPopup.detachOpened(this._proxyOpened);
		this.oPopup.detachClosed(this._proxyClosed);
		this.oPopup.destroy();
		delete this.oPopup;
	}
	delete this._bPositionSet;

	delete this._bFocusSet;
	delete this._bPreventRestoreFocus;
	delete this._proxyOpened;
	delete this._proxyClosed;

	if (this._bBoundOnResize){
		jQuery(window).unbind("resize", this._proxyFixSize);
	}

	delete this._bRTL;
	delete this._sArrowDir;
	delete this._oArrowIcon;
	delete this._bThemeInverted;
	
	delete this._sInitialFocusId;
	delete this._sFirstFocusableId;
	delete this._sLastFocusableId;
};

/**
 * Checks if the ToolPopup already has a focused element. If not it's checked whether
 * the fake-element should be used or if there is an element that could be focused instead
 */
var fnSetInitialFocus = function(oThis){
	var sId = oThis.getId();
	var sTempId = "";
	var sFirstFocusId = sId + "-firstFocusable";
	var sLastFocusId = sId + "-lastFocusable";
	
	var oElement = jQuery.sap.byId(sFirstFocusId).get(0);
	var aFocusables = jQuery(":sapFocusable", oThis.$()).get();
	
	// if there is an initial focus it was already set to the Popup onBeforeRendering
	if (!oThis._bFocusSet){
		// search the first focusable element
		if(aFocusables.length > 0) {
			for (var i = 0; i < aFocusables.length; i++){
				sTempId = aFocusables[i].id;
 
				if (sTempId !== sFirstFocusId && sTempId !== sLastFocusId) {
					oElement = aFocusables[i];
					break;
				}
			}
		}

		// If focusables are part of a control, focus the controls instead
		var oFocusControl = jQuery(oElement).control();
		if (oFocusControl[0]) {
			var oFocusDomRef = oFocusControl[0].getFocusDomRef();
			oElement = oFocusDomRef ? oFocusDomRef : oElement;
		}
		
		jQuery.sap.focus(oElement);
		oThis._sInitialFocusId = oElement.id;
	} else {
		oThis._sInitialFocusId = oThis.oPopup._sInitialFocusId;
	}
	
	// initiate the first and last focusable element in content
	if (!oThis._sLastFocusableId || !oThis._sFirstFocusableId) {
		oThis._sLastFocusableId = sFirstFocusId;
		oThis._sFirstFocusableId = sLastFocusId;
		
		if (aFocusables.length > 2) {
			// using second array content since first focusable item is the fake element
			oThis._sFirstFocusableId = aFocusables[1].id;
			// using the second to last element in array since last one is the fake element
			oThis._sLastFocusableId = aFocusables[aFocusables.length -2].id;
		}
		
	} 
};

sap.ui.ux3.ToolPopup.prototype.onfocusin = function(oEvent){
	var $NewFocus = jQuery();
	var sId = this.getId();
	var sFirstFocusId = sId + "-firstFocusable";
	var sLastFocusId = sId + "-lastFocusable";
	
	if (oEvent.target.id === sFirstFocusId && oEvent.target.id !== this._sLastFocusableId) {
		$NewFocus = jQuery.sap.byId(this._sLastFocusableId);
	} else if (oEvent.target.id === sLastFocusId && oEvent.target.id !== this._sFirstFocusableId) {
		$NewFocus = jQuery.sap.byId(this._sFirstFocusableId);
	}
	
	if ($NewFocus.length) {
		// if focus has to be corrected
		$NewFocus.focus();
	}
};

/**
 * This function fixes the height of the ToolPopup if the content is too large.
 * So the height will be set to the possible maximum and a scrollbar is provided.
 * Additionally the width of the ToolPopup is fixed as well since the scrollbar reduces
 * the possible space for the content.
 */
var fnFixSize = function(){
	var $This = this.$();
	var iValue = 0;
	
	var sMaxHeight = this.getMaxHeight();
	var iMaxHeight = sMaxHeight ? parseInt(sMaxHeight) : 0;
	
	/*
	 * Fix the height
	 */
	// get all paddings
	var sPaddingTop = $This.css("padding-top");
	var iPaddingTop = parseInt(sPaddingTop, 10);
	var sPaddingBottom = $This.css("padding-bottom");
	var iPaddingBottom = parseInt(sPaddingBottom, 10);
	
	// get all border widths
	var sBorderTop = $This.css("border-top-width");
	var iBorderTop = parseInt(sBorderTop, 10);
	var sBorderBottom = $This.css("border-bottom-width");
	var iBorderBottom = parseInt(sBorderBottom, 10);
	
	var iPaddings = iPaddingTop + iPaddingBottom + iBorderTop + iBorderBottom;
	
	// determine the corresponding scrollTop to calculate the proper bottom end of the ToolPopup
	var iScrollTop = jQuery(document).scrollTop();
	var oThisRect = $This.rect();
	var iBottomEnd = oThisRect.top - iScrollTop + $This.outerHeight(true);
	
	// only use this mechanism when there is NO maxHeight set
	var iWinHeight = jQuery(window).height();
	var bTooHigh = (iBottomEnd > iWinHeight) && (iMaxHeight === 0);
	
	// check if an offset forces the ToolPopup out of the window
	// and below the opener
	if (bTooHigh) {
		var $Opener = jQuery.sap.byId(this.getOpener());
		var oOpenerRect = $Opener.rect();
		var iOpenerBottom = oOpenerRect.top - iScrollTop + $Opener.outerHeight(true);
		
		// if bottom of the ToolPopup is below the opener and there is a possible offset
		var aOffset = this.oPopup._getPositionOffset();
		if (iBottomEnd > iOpenerBottom && aOffset.length > 0) {
			// check if the offset is responsible for pushing the ToolPopup below the opener
			// and therefore out of the window
			var iYOffset = Math.abs(parseInt(aOffset[1], 10));

			// this check inverts the variable to prevent any resize of the ToolPopup since it
			// is pushed out of the window because of the offset
			if (iBottomEnd - iYOffset > iWinHeight) {
				bTooHigh = false;
				var sMessage = "Offset of " + iYOffset +" pushes ToolPopup out of the window";
				jQuery.sap.log.warning(sMessage, "", "sap.ui.ux3.ToolPopup");
			}
		}
	}
		
	if (!this._bInitialFix || this._bInitialFix && bTooHigh) {
		delete this._bInitialFix;
		$This.toggleClass("sapUiUx3TPLargeContent", true);
	}
	if (bTooHigh) {
		iMaxHeight = $This.outerHeight(true);
		$This.toggleClass("sapUiUx3TPLargeContent", false);
	}
	
	if (iMaxHeight > 0) {
		$This.css("max-height", iMaxHeight + "px");
	
		var $Title = this.$("title");
		var $TitleSep = this.$("title-separator");
		
		var $Buttons = this.$("buttons");
		var $ButtonsSep = this.$("buttons-separator");
		
		// subtract all paddings and border-widths
		iMaxHeight -= iPaddings;
		
		// subtracting all corresponding values from top to down
		iMaxHeight -= $Title.outerHeight(true);
		iMaxHeight -= $TitleSep.outerHeight(true); // including margin
		
		// height of content needn't to be subtracted
		
		iMaxHeight -= $ButtonsSep.outerHeight(true); // including margin
		iMaxHeight -= $Buttons.length > 0 ? $Buttons.outerHeight(true) : 0;
		
		iValue = iMaxHeight;
	}
	
	if (bTooHigh || (iMaxHeight > 0)){
		// if the height has to be corrected
		iValue = parseInt(iValue, 10);
		
		var $Content = this.$("content");
		$Content.css("max-height", iValue + "px");
		
		$Content.toggleClass("sapUiUx3TPLargeContent", true);
	}
	
	/*
	 * Fix the width (if necessary)
	 */
	var sMaxWidth = this.getMaxWidth();
	if(sMaxWidth) {
		var iMaxWidth = parseInt(sMaxWidth, 10);
		
		var sBorderLeft = $This.css("border-left-width");
		var iBorderLeft = parseInt(sBorderLeft);
		var sBorderRight = $This.css("border-right-width");
		var iBorderRight = parseInt(sBorderRight);
		
		var sPaddingLeft = $This.css("padding-left");
		var iPaddingLeft = parseInt(sPaddingLeft);
		var sPaddingRight = $This.css("padding-right");
		var iPaddingRight = parseInt(sPaddingRight);
		
		iMaxWidth -= iBorderLeft + iPaddingLeft + iPaddingRight + iBorderRight;
		$This.css("max-width", iMaxWidth + "px");
	} else {
		$This.css("max-width", "");
	}

	fnSetArrow(this);
};

/**
 * Function is called via 'jQuery.proxy()' when the ToolPopup has been opened
 * including the fade-in-animation of the Popup
 */
var fnPopupOpened = function(){
	fnSetInitialFocus(this);
	this._bInitialFix = true; // will be deleted in _proxyFixSize
	this._proxyFixSize();
	
	// forward the Popup's opened event accordingly
	// was added in "1.19.0" as a fix for a CSN and was downported to "1.18.2" and "1.16.6"
	this.fireOpened();
};

sap.ui.ux3.ToolPopup.prototype.isOpen = function() {
	if (this.oPopup && this.oPopup.isOpen()) {
		return true;
	}
	return false;
};

sap.ui.ux3.ToolPopup.prototype.willBeClosed = function() {
	var eState = this.oPopup && this.oPopup.getOpenState();
	return eState !== sap.ui.core.OpenState.OPENING && eState !== sap.ui.core.OpenState.OPEN;
};

/**
 * This opens the ToolPopup. It is checked which control wants to open the ToolPopup. The Shell was previously set as parent so the
 * corresponding parent element is used to set the correct position of the ToolPopup.
 * If another control (i.e. a button) opens the ToolPopup, the control must be previously set as 'opener' via 'setOpener' to the
 * ToolPopup. Corresponding to this opener the position of the ToolPopup will be set.
 * It's also possible to set the position above, below or left from the opener. This can be done via the possible parameters 'my' and 'at'.
 * These parameters refers to work the same way as they do of sap.ui.core.Popup.open.
 *
 * @param {sap.ui.core.Popup.Dock} [my=sap.ui.core.Popup.Dock.CenterCenter] the ToolPopup's content reference position for docking
 * @param {sap.ui.core.Popup.Dock} [at=sap.ui.core.Popup.Dock.CenterCenter] the "of" element's reference point for docking to
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.open = function(my, at) {
	this._my = my;
	this._at = at;
	this._sArrowDir = fnGetArrowDirection(this);
	var $OpenerRef = null;
	this.sOffset = "";
	fnUpdateThemeInverted(this);

	// if the popup position has not been (re-)initialized since the last time this was opened, try to apply the default position
	if (!this._bPositionSet) {
		var iOffsetX = 0;
		var iOffsetY = 0;

		// any further validation of the values is done within the Popup
		if (!this._my){
			this._my = sap.ui.core.Popup.Dock.BeginTop;
		}
		if (!this._at){
			this._at = sap.ui.core.Popup.Dock.EndTop;
		}

		$OpenerRef = jQuery.sap.domById(this.getOpener());
		if ($OpenerRef){
			switch (this._sArrowDir) {
				case "Up":
					iOffsetX = 0;
					iOffsetY = this.iArrowWidth;
					break;

				case "Down":
					iOffsetX = 0;
					iOffsetY = -this.iArrowWidth;
					break;

				case "Right":
					iOffsetX = -this.iArrowWidth;
					break;

				default:
				case "Left":
					iOffsetX = this.iArrowWidth;
					break;
			}

			iOffsetX = parseInt( iOffsetX, 10 );
			iOffsetY = parseInt( iOffsetY, 10 );
			this.sOffset = "" + iOffsetX + " " + iOffsetY;
			// my, at, of, offset, collision /*none*/
			this.setPosition(this._my, this._at, $OpenerRef, this.sOffset, "none");
		} else {
			this.setPosition(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginTop, window, "0 0", "fit");
			jQuery.sap.log.warning("No opener set. Using a default position for Popup", "", "sap.ui.ux3.ToolPopup");
		}
		/* value is set in 'setPosition'. This value shows if the position was previously set manually =>
		 * in this case it was definitely not set manually
		 */
		this._bPositionSet = false;
	}
	// create popup if required
	this._ensurePopup();
	
	var bAutoClose = this.getAutoClose();
	var bModal = this.getModal();
	if (bAutoClose && bModal) {
		jQuery.sap.log.warning("A modal & autoclose ToolPopup will not work properly. Therefore 'autoclose' will be deactived!");
		bAutoClose = false;
	}
	this.oPopup.setAutoClose(bAutoClose);
	this.oPopup.setModal(bModal);

	// Save current focused element to restore the focus after closing the dialog
	this._oPreviousFocus = sap.ui.core.Popup.getCurrentFocusInfo();
	// open popup
	this.fireOpen();

	// the opener is needed for the intelligent arrow positioning
	fnCheckOpener(this);
	
	// function(iDuration, my, at, of, offset, collision /*empty to avoid any override*/, followOf /*true*/)
	this.oPopup.open(this.getOpenDuration(), this._my, this._at, $OpenerRef, this.sOffset, "", true);
	fnSetArrow(this);
	
	return this;
};

/**
 * Checks if an opener was set. If not this functions tries to get the opener from the Popup. 
 */
var fnCheckOpener = function(oThis) {
	if (!oThis.getOpener()) {
		var sId = "";
		if (oThis.oPopup) {
			if (oThis.oPopup._oPosition.of instanceof sap.ui.core.Element) {
				sId = oThis.oPopup._oPosition.of.getId();
			} else {
				if (oThis.oPopup._oPosition.of.length > 0) {
					sId = oThis.oPopup._oPosition.of[0].id;
				} else {
					sId = oThis.oPopup._oPosition.of.id;
				}
			}
		}
		
		if (sId !== "") {
			oThis.setAssociation("opener", sId, true);
		} else {
			jQuery.sap.log.error("Neither an opener was set properly nor a corresponding one can be distinguished", "", "sap.ui.ux3.ToolPopup");
		}
	}
};

var fnSetArrowDimensions = function(oThis){
	var sParam = "sapUiUx3ToolPopupArrowWidth";
	oThis.sArrowWidth = sap.ui.core.theming.Parameters.get(sParam);
	oThis.iArrowWidth = parseInt(oThis.sArrowWidth, 10);
	
	sParam = "sapUiUx3ToolPopupArrowHeight";
	oThis.sArrowHeight = sap.ui.core.theming.Parameters.get(sParam);
	oThis.iArrowHeight = parseInt(oThis.sArrowHeight, 10);
	
	sParam = "sapUiUx3ToolPopupArrowRightMarginCorrection";
	oThis.sArrowPadding = sap.ui.core.theming.Parameters.get(sParam);
	oThis.iArrowPadding = parseInt(oThis.sArrowPadding, 10);

	sParam = "sapUiUx3ToolPopupArrowRightMarginCorrectionInverted";
	oThis.sArrowPaddingInverted = sap.ui.core.theming.Parameters.get(sParam);
	oThis.iArrowPaddingInverted = parseInt(oThis.sArrowPaddingInverted, 10);
};

/**
 * Calculates the desired arrow direction related to the set docking. This only works when "my" and "at" both use the jQuery-based docking
 * which means they are strings like "begin top".
 *
 * @private
 */
var fnGetArrowDirection = function(oThis) {

	// do not mirror the arrow direction here in RTL mode, because otherwise the offset is calculated wrong
	// (Because the offset mirroring happens inside popup)
	// the arrow is later mirrored at the output...

	// this is the default case if no match was found
	var sDirection = "Left";

	// if 'my' is not set check if it was previously set via 'setPosition'
	var my = oThis._my;
	var at = oThis._at;
	if (!my && oThis.oPopup){
		my = oThis.oPopup._oPosition.my;
	}
	if (!at && oThis.oPopup){
		at = oThis.oPopup._oPosition.at;
	}
	
	oThis._bHorizontalArrow = false;

	if (my && at) {
		var aMy = my.split(" ");
		var aAt = at.split(" ");
		// create a rule like "my:top|left at:left|top"
		var sRule = "my:" + aMy[0] + "|" + aMy[1];
		sRule += " at:" + aAt[0] + "|" + aAt[1];
		
		if (sap.ui.ux3.ToolPopup.ARROW_LEFT.exec(sRule)) {
			oThis._bHorizontalArrow = true;
			sDirection = "Left";
		} else if (sap.ui.ux3.ToolPopup.ARROW_RIGHT.exec(sRule)) {
			oThis._bHorizontalArrow = true;
			sDirection = "Right";
		} else if (sap.ui.ux3.ToolPopup.ARROW_UP.exec(sRule)) {
			sDirection = "Up";
		} else if (sap.ui.ux3.ToolPopup.ARROW_DOWN.exec(sRule)) {
			sDirection = "Down";
		}

		if (oThis.getDomRef() && oThis.isOpen()) {
			var $This = oThis.$();
			var oPopRect = $This.rect();
			var $Opener = jQuery.sap.byId(oThis.getOpener());
			var oOpenerRect = $Opener.rect();
			
			if (oOpenerRect) {
				// check if the ToolPopup was positioned at another side relative to the opener due to any collision.
				if (oThis._bHorizontalArrow) {
					// left/right arrow
					var iPopRight = oPopRect.left + $This.outerWidth(true) + oThis.iArrowWidth;
					var iOpenerRight = oOpenerRect.left + $Opener.outerWidth(true);
					
					if(iPopRight <= iOpenerRight) {
						sDirection = "Right";
						
					} else {
						sDirection = "Left";
					}
				} else {
				// up/down arrow
					var iPopBottom = oPopRect.top + $This.outerHeight(true) + oThis.iArrowWidth;
					var iOpenerBottom = oOpenerRect.top + $Opener.outerHeight(true);
					
					if(iPopBottom <= iOpenerBottom){
						sDirection = "Down";
					} else {
						sDirection = "Up";
					}
				}
			}
		}
	}

	return sDirection;
};

/**
 * Calculates the desired arrow position related to the set docking and to the size of the popup. 
 * This only works when "my" and "at" both use the jQuery-based docking which means they are strings like "begin top".
 * If there is no opener set properly an error is logged into the console and there will be no arrow for the ToolPopup.
 *
 * @private
 */
var fnSetArrow = function(oThis){
	if (!oThis.getDomRef()){
		return;
	}

	var sKey = "";
	var iVal = 0;
	var iZero = 0; // this is the 0 of the  relative position between ToolPopup and Opener
	var iHalfArrow = oThis.iArrowHeight / 2;

	oThis._sArrowDir = fnGetArrowDirection(oThis);
	var sArrowDir = oThis._sArrowDir;
	if(oThis._bRTL){
		// in RTL mode arrow must be mirrowed here
		if (oThis._sArrowDir === "Right") {
			sArrowDir = "Left";
		} else if (oThis._sArrowDir === "Left") {
			sArrowDir = "Right";
		}
	}

	var oPopRect = oThis.$().rect();
	var oOpenerRect = jQuery.sap.byId(oThis.getOpener()).rect();
	if (!oOpenerRect) {
		// if a proper opener isn't available
		jQuery.sap.log.warning("Opener wasn't set properly. Therefore arrow will be at a default position", "", "sap.ui.ux3.ToolPopup");
	}
	var $Arrow = oThis.$("arrow");

	// get the corresponding my-property
	if (!oThis._my && oThis.oPopup){
		oThis._my = oThis.oPopup._oPosition.my;
	}

	// calculate the horizontal/vertical value of the arrow
	if (oThis._bHorizontalArrow) {
		// left or right arrow
		sKey = "top";

		if (oOpenerRect) {
			iZero = oOpenerRect.top - oPopRect.top;

			iVal = Math.round(iZero + oOpenerRect.height / 2);

			// if the position would exceed the ToolPopup's height
			iVal = iVal + iHalfArrow > oPopRect.height ? iVal - oThis.iArrowHeight : iVal;
		}
	} else {		
		// up/down arrow
		sKey = "left";

		if (oOpenerRect) {
			iZero = oOpenerRect.left - oPopRect.left;

			iVal = Math.round(iZero + oOpenerRect.width / 2);
			// if the position would exceed the ToolPopup's width
			iVal = iVal + iHalfArrow > oPopRect.width ? iVal - oThis.iArrowHeight : iVal;
		}
	}

	if (oOpenerRect) {
		iVal -= iHalfArrow;
	} else {
		iVal =  oThis.iArrowHeight;
	}


	// set the corresponding classes
	var sClassAttr = "";
	if ($Arrow.hasClass("sapUiUx3TPNewArrow")){
		sClassAttr = "sapUiUx3TPNewArrow sapUiUx3TPNewArrow";
	} else {
		sClassAttr = oThis.isInverted() ? "sapUiUx3TPArrow sapUiTPInverted sapUiUx3TPArrow" : "sapUiUx3TPArrow sapUiUx3TPArrow";
	}
	$Arrow.attr("class", sClassAttr + sArrowDir);

	if (sArrowDir === "Right" ){
		var iWidth = oPopRect.width;
		// if the ToolPopup is invertable and it is being inverted use another
		// value since in such a case the padding is different for the arrow
		if (oThis.isInverted()) {
			iWidth += oThis.iArrowPaddingInverted;
		} else {
			iWidth += oThis.iArrowPadding;
		}
		
		oThis._bRTL = sap.ui.getCore().getConfiguration().getRTL();
		if (oThis._bRTL) {
			$Arrow.css("right", iWidth + "px");
		} else {
			$Arrow.css("left", iWidth + "px");
		}
	} else {
		$Arrow.css({
			"left" : "",
			"right" : ""
		});
	}

	iVal = parseInt(iVal, 10);
	iVal = iVal < 0 ? 0 : iVal;
	if (iVal > 0) {
		iVal -= 2; // due to some padding
		// only correct corresponding position if there is something to correct
		// otherwise the default position is used (via styling)
		$Arrow.css(sKey, iVal + "px");
	}
};
/**
 * Handles the sapescape event, triggers closing of the ToolPopup.
 *
 * @private
 */
sap.ui.ux3.ToolPopup.prototype.onsapescape = function() {
	if (this.fireClose()) {
		this.close();
	}
};

/**
 * This function is called when the Popup has been closed. No matter if through the "close"-function
 * or through the autoClose-mechanism.
 * Additionally it is necessary to restore the focus as if the ToolPopup was closed via "close()".
 * If the corresponding suppress-parameter was given to "close" no focus will be restored.
 */
var fnOnClosed = function(oEvent) {
	if (!this._bPreventRestoreFocus) {
		sap.ui.core.Popup.applyFocusInfo(this._oPreviousFocus);
	}
	this.fireClosed();
};

sap.ui.ux3.ToolPopup.prototype.close = function(bPreventRestoreFocus) {
	if (this.oPopup && this.oPopup.isOpen()) {
		if (this._bBoundOnResize){
			jQuery(window).unbind("resize", this._proxyFixSize);
			delete this._bBoundOnResize;
		}

		this.oPopup.close(this.getCloseDuration());
		this._bPreventRestoreFocus = bPreventRestoreFocus;
	}
	return this;
};

/**
 * Whether the ToolPopup is currently enabled or not.
 * 
 * Applications can't control the enabled state via a property. A ToolPopup is implicitly 
 * enabled depending on its <code>openStatey</code>. Descendant controls that honor the 
 * enabled state of their ancestors will appear disabled after the ToolPopup is closed.
 * 
 * @experimental Whether a dialog is regarded as "enabled" during the state transitions 
 * (OPENING, CLOSING) is not fully decided. Currently, it is enabled during the OPENING phase 
 * and disabled during the CLOSING phase. The only potential change would be to treat the 
 * OPENING phase as disabled as well. Applications should be prepared to receive events from
 * "enabled" controls after they called open() on the dialog until close() is called on it.
 * If the mentioned potential change should happen, the dialog will become enabled only 
 * after the transition to OPEN. Events from "enabled" children then can still only arrive 
 * between open() and close(), so applications that obey the previous rule should continue 
 * to work. Only end users or code that explicitly triggers pseudo user events would notice
 * a difference. <br>
 * A second aspect that might change is the visual behavior of the content: during the CLOSING 
 * phase it 'looks' enabled but in fact it is already disabled. This avoids unnecessary redraws 
 * for content that becomes hidden soon. Should this show to be confusing for end users, it might 
 * be changed.
 * 
 * @since: 1.13.1
 * @return {boolean} whether the ToolPopup is currently enabled or not.
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.getEnabled = function() {
	var eState = this.oPopup ? this.oPopup.getOpenState() : sap.ui.core.OpenState.CLOSED; // assuming that a ToolPopup without a Popup can’t be open

	//TODO the check for state OPENING is a compromise. Without that, the content of the dialog will render 
	// in disabled state but will be enabled. As an alternative, the dialog could render again after OPEN is reached
	// and after switching to CLOSING (to properly reflect the changed enabled state in the descendants) 
	return eState === sap.ui.core.OpenState.OPENING || eState === sap.ui.core.OpenState.OPEN;
};

sap.ui.ux3.ToolPopup.prototype.onsapenter = function(oEvent) {
	this.fireEnter({originalEvent:oEvent,originalSrcControl:oEvent.srcControl});
};

sap.ui.ux3.ToolPopup.prototype.onBeforeRendering = function() {
	var sId = this.getInitialFocus();
	if (sId) {
		this._bFocusSet = true;
		this.oPopup.setInitialFocusId(sId);
	} else {
		this._bFocusSet = false;
	}
	
	this._bRTL = sap.ui.getCore().getConfiguration().getRTL();
};

sap.ui.ux3.ToolPopup.prototype._ensurePopup = function() {
	if (!this.oPopup) {
		this.oPopup = new sap.ui.core.Popup(this, false, true, false);
		this.oPopup.attachOpened(this._proxyOpened);
		this.oPopup.attachClosed(this._proxyClosed);

		var oThis = this;
		this.oPopup._applyPosition = function(){
			sap.ui.core.Popup.prototype._applyPosition.apply(oThis.oPopup, arguments);

			var of = oThis.oPopup._oLastPosition.of;
			if (!of) {
				// In case setPosition is called from the outside and the opener has
				// been removed, this leads to closing the ToolPopup instead of causing
				// an error
				oThis.oPopup.close();
			} else {
				var $of = jQuery.sap.byId(of.id);
				// only after an open popup the corresponding arrow can be determined
				// if the position was set manually
				if (oThis._bPositionSet) {
					// shell stuff should still use the left arrow
					if (!$of.hasClass("sapUiUx3ShellTool")) {
						oThis._my = oThis.oPopup._oLastPosition.my;
						oThis._at = oThis.oPopup._oLastPosition.at;
					}
				}
				fnSetArrow(oThis);
			}
		};
	}
	return this.oPopup;
};

sap.ui.ux3.ToolPopup.prototype.setPosition = function() {
	this._ensurePopup();
	this.oPopup.setPosition.apply(this.oPopup, arguments);
	this._bPositionSet = true;
	
	fnCheckOpener(this);
	
	return this;
};

var fnRenderContent = function(oThis) {
	var oContentDomRef = oThis.getDomRef("content");
	oContentDomRef.innerHTML = "";
	
	var aContent = oThis.getContent();
	var rm = sap.ui.getCore().createRenderManager();
	
	for (var i = 0; i < aContent.length; i++) {
		rm.renderControl(aContent[i]);
	}
	
	rm.flush(oContentDomRef, true);
	rm.destroy();
	
	// this fixes the height of the ToolPopup if the height exceeds the window height
	oThis._proxyFixSize();
};
var fnRenderButtons = function(oThis) {
	var oButtons = oThis.getDomRef("buttons");
	var oSeparator = oThis.getDomRef("buttons-separator");
	var aButtons = oThis.getButtons();
	
	if (aButtons.length === 0) {
		jQuery(oButtons).addClass("sapUiUx3TPButtonRowHidden");
		jQuery(oSeparator).addClass("sapUiUx3TPButtonRowHidden");
	} else {
		jQuery(oButtons).removeClass("sapUiUx3TPButtonRowHidden");
		jQuery(oSeparator).removeClass("sapUiUx3TPButtonRowHidden");
		oButtons.innerHTML = "";
		var rm = sap.ui.getCore().createRenderManager();
		
		for (var i = 0; i < aButtons.length; i++) {
			rm.renderControl(aButtons[i]);
		}
		
		rm.flush(oButtons, true);
		rm.destroy();
		
		// this fixes the height of the ToolPopup if the height exceeds the window height
		oThis._proxyFixSize();
	}
};

sap.ui.ux3.ToolPopup.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent, true);
	
	if (this.isOpen()) {
		fnRenderContent(this);
		fnSetArrow(this);
	}
	
	return this;
};
sap.ui.ux3.ToolPopup.prototype.insertContent = function(oContent, index) {
	this.insertAggregation("content", oContent, index, true);
	
	if (this.isOpen()) {
		fnRenderContent(this);
		fnSetArrow(this);
	}
	
	return this;
};
sap.ui.ux3.ToolPopup.prototype.removeContent = function(oContent) {
	this.removeAggregation("content", oContent, true);
	
	if (this.isOpen()) {
		fnRenderContent(this);
		fnSetArrow(this);
	}
	
	return this;
};
sap.ui.ux3.ToolPopup.prototype.addButton = function(oButton) {
	this.addAggregation("buttons", oButton, true);
	
	if (this.isOpen()) {
		fnRenderButtons(this);
		fnSetArrow(this);
	}
	
	return this;
};
sap.ui.ux3.ToolPopup.prototype.insertButton = function(oButton, index) {
	this.insertAggregation("buttons", oButton, index, true);
	
	if (this.isOpen()) {
		fnRenderButtons(this);
		fnSetArrow(this);
	}
	
	return this;
};
sap.ui.ux3.ToolPopup.prototype.removeButton = function(oButton) {
	this.removeAggregation("button", oButton, true);
	
	if (this.isOpen()) {
		fnRenderButtons(this);
		fnSetArrow(this);
	}
	
	return this;
};

/**
 * This updates the instance's parameter if the ToolPopup is inverted per default
 *
 * @private
 */
var fnUpdateThemeInverted = function(oThis) {
	var sParam = "sapUiUx3ToolPopupInverted";
	
	sParam = sap.ui.core.theming.Parameters.get(sParam);
	oThis._bThemeInverted = sParam === "true";
};

/**
 * @private
 */
sap.ui.ux3.ToolPopup.prototype.onThemeChanged = function() {
	fnUpdateThemeInverted(this);
};

/**
 * This checks if the ToolPopup is inverted. This depends on the parameter
 * 'inverted' and the LESS-parameter 'sapUiUx3ToolPopupInverted' in the current
 * theme. 
 * 
 * @return {sap.ui.core.boolean} whether the ToolPopup is inverted
 * @private
 */
sap.ui.ux3.ToolPopup.prototype.isInverted = function() {
	fnUpdateThemeInverted(this);
	return this.getInverted() && this._bThemeInverted;
};

/**
 * This is just a forward to the Popup's function (sap.ui.core.Popup.setAutoCloseAreas)
 * with the same functionality.
 * 
 * @public
 * @since: 1.19.0
 */
sap.ui.ux3.ToolPopup.prototype.setAutoCloseAreas = function(aAutoCloseAreas) {
	this._ensurePopup();
	return this.oPopup.setAutoCloseAreas(aAutoCloseAreas);
};

/**
 * Adds an ID to the Popup that should be focusable as well when using 'autoclose'.
 * Chaining is only possible if a valid type (string) is given.
 * 
 * @param {sap.ui.core.string} [sID] of the corresponding element that should be focusable as well
 * @since: 1.19.0
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.addFocusableArea = function(sID) {
	this._ensurePopup();
	
	if (typeof(sID) === "string") {
		// channelId & eventId are mandatory dummy values
		this.oPopup._addFocusableArea("channelId", "eventId", {
			id : sID
		}); 
		return this;
	} else {
		jQuery.sap.log.error("Wrong type of focusable area ID - string expected", "", "sap.ui.ux3.ToolPopup");
	}
};

/**
 * Removes an ID to the Popup that should be focusable as well when using 'autoclose'.
 * Chaining is only possible if a valid type (string) is given.
 * 
 * @param {sap.ui.core.string} [sID] of the corresponding element
 * @since: 1.19.0
 * @public
 */

sap.ui.ux3.ToolPopup.prototype.removeFocusableArea = function(sID) {
	this._ensurePopup();
	
	if (typeof(sID) === "string") {
		// channelId & eventId are mandatory dummy values
		this.oPopup._removeFocusableArea("channelId", "eventId", {
			id : sID
		}); 
		return this;
	} else {
		jQuery.sap.log.error("Wrong type of focusable area ID - string expected", "", "sap.ui.ux3.ToolPopup");
	}
};
}());

sap.ui.ux3.ToolPopup.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon, true); // rerendering makes no sense, as this icon is not rendered by the ToolPopup
	this.fireIconChanged(); // tell other interested parties to update the icon
	return this;
};
sap.ui.ux3.ToolPopup.prototype.setIconHover = function(sIconHover) {
	this.setProperty("iconHover", sIconHover, true); // rerendering makes no sense, as this icon is not rendered by the ToolPopup
	this.fireIconChanged(); // tell other interested parties to update the icon
	return this;
};
sap.ui.ux3.ToolPopup.prototype.setIconSelected = function(sIconSelected) {
	this.setProperty("iconSelected", sIconSelected, true); // rerendering makes no sense, as this icon is not rendered by the ToolPopup
	this.fireIconChanged(); // tell other interested parties to update the icon
	return this;
};
sap.ui.ux3.ToolPopup.prototype.getIconSelected = function() {
	return this.getProperty("iconSelected") || this.getProperty("iconHover"); // implement the documented fallback
};

sap.ui.ux3.ToolPopup.prototype.setMaxWidth = function(sMaxWidth) {
	var pattern = /[0-9]+px/;
	
	if(pattern.test(sMaxWidth)) {
		this.setProperty("maxWidth", sMaxWidth);
	} else {
		jQuery.sap.log.error("Only values in pixels are possible", "", "sap.ui.ux3.ToolPopup");
	}
};

}; // end of sap/ui/ux3/ToolPopup.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactBrowser') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ExactBrowser.
jQuery.sap.declare("sap.ui.ux3.ExactBrowser");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ExactBrowser.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getHeaderTitle headerTitle} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTopListOrder topListOrder} : sap.ui.ux3.ExactOrder (default: sap.ui.ux3.ExactOrder.Select)</li>
 * <li>{@link #getEnableListClose enableListClose} : boolean (default: false)</li>
 * <li>{@link #getListHeight listHeight} : int (default: 290)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: false)</li>
 * <li>{@link #getShowTopList showTopList} : boolean (default: true)</li>
 * <li>{@link #getEnableReset enableReset} : boolean (default: true)</li>
 * <li>{@link #getEnableSave enableSave} : boolean (default: false)</li>
 * <li>{@link #getTopListWidth topListWidth} : int (default: 168)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} <strong>(default aggregation)</strong> : sap.ui.ux3.ExactAttribute[]</li>
 * <li>{@link #getOptionsMenu optionsMenu} : sap.ui.commons.Menu</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getFollowUpControl followUpControl} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.ExactBrowser#event:attributeSelected attributeSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.ExactBrowser#event:save save} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Attribute browse area used within the Exact pattern. The main benefit of this control is the high flexibility when large data amounts shall be displayed
 * in the form of structured data sets with a high or low interdependency level. From lists - which can be nested according to the defined attributes - the user can choose
 * entries and thereby trigger the display of further information, depending on the chosen entry/entries (multiple selection supported).
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.ExactBrowser
 */
sap.ui.core.Control.extend("sap.ui.ux3.ExactBrowser", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"reset"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"headerTitle" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"topListOrder" : {type : "sap.ui.ux3.ExactOrder", group : "", defaultValue : sap.ui.ux3.ExactOrder.Select},
		"enableListClose" : {type : "boolean", group : "Misc", defaultValue : false},
		"listHeight" : {type : "int", group : "Appearance", defaultValue : 290},
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : false},
		"showTopList" : {type : "boolean", group : "Misc", defaultValue : true},
		"enableReset" : {type : "boolean", group : "Misc", defaultValue : true},
		"enableSave" : {type : "boolean", group : "Misc", defaultValue : false},
		"topListWidth" : {type : "int", group : "Misc", defaultValue : 168}
	},
	defaultAggregation : "attributes",
	aggregations : {
    	"attributes" : {type : "sap.ui.ux3.ExactAttribute", multiple : true, singularName : "attribute"}, 
    	"optionsMenu" : {type : "sap.ui.commons.Menu", multiple : false}, 
    	"controls" : {type : "sap.ui.core.Control", multiple : true, singularName : "control", visibility : "hidden"}, 
    	"rootAttribute" : {type : "sap.ui.core.Element", multiple : false, visibility : "hidden"}
	},
	associations : {
		"followUpControl" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"attributeSelected" : {}, 
		"save" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ExactBrowser with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ExactBrowser.extend
 * @function
 */

sap.ui.ux3.ExactBrowser.M_EVENTS = {'attributeSelected':'attributeSelected','save':'save'};


/**
 * Getter for property <code>title</code>.
 * Title text in the list area of the Exact Browser. The title is not shown when the property showTopList is set to false.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.ux3.ExactBrowser#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#setTitle
 * @function
 */


/**
 * Getter for property <code>headerTitle</code>.
 * Title text in the header of the Exact Browser.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerTitle</code>
 * @public
 * @name sap.ui.ux3.ExactBrowser#getHeaderTitle
 * @function
 */

/**
 * Setter for property <code>headerTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderTitle  new value for property <code>headerTitle</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#setHeaderTitle
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible ExactBrowsers are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.ux3.ExactBrowser#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#setVisible
 * @function
 */


/**
 * Getter for property <code>topListOrder</code>.
 * The order how the sublists of the top level list should be displayed.
 *
 * Default value is <code>Select</code>
 *
 * @return {sap.ui.ux3.ExactOrder} the value of property <code>topListOrder</code>
 * @public
 * @since 1.7.1
 * @name sap.ui.ux3.ExactBrowser#getTopListOrder
 * @function
 */

/**
 * Setter for property <code>topListOrder</code>.
 *
 * Default value is <code>Select</code> 
 *
 * @param {sap.ui.ux3.ExactOrder} oTopListOrder  new value for property <code>topListOrder</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.ui.ux3.ExactBrowser#setTopListOrder
 * @function
 */


/**
 * Getter for property <code>enableListClose</code>.
 * Enables the close icons of the displayed lists.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableListClose</code>
 * @public
 * @name sap.ui.ux3.ExactBrowser#getEnableListClose
 * @function
 */

/**
 * Setter for property <code>enableListClose</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableListClose  new value for property <code>enableListClose</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#setEnableListClose
 * @function
 */


/**
 * Getter for property <code>listHeight</code>.
 * The height of the list area in px.
 *
 * Default value is <code>290</code>
 *
 * @return {int} the value of property <code>listHeight</code>
 * @public
 * @name sap.ui.ux3.ExactBrowser#getListHeight
 * @function
 */

/**
 * Setter for property <code>listHeight</code>.
 *
 * Default value is <code>290</code> 
 *
 * @param {int} iListHeight  new value for property <code>listHeight</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#setListHeight
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * Whether the header area of the ExactBrowser should be shown.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.ui.ux3.ExactBrowser#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#setShowHeader
 * @function
 */


/**
 * Getter for property <code>showTopList</code>.
 * Whether the top list of the ExactBrowser should be shown. When the property is set to false the
 * application must ensure to select top level attributes appropriately.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showTopList</code>
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.ExactBrowser#getShowTopList
 * @function
 */

/**
 * Setter for property <code>showTopList</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowTopList  new value for property <code>showTopList</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.ExactBrowser#setShowTopList
 * @function
 */


/**
 * Getter for property <code>enableReset</code>.
 * Whether the reset functionality should be available in the header area.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableReset</code>
 * @public
 * @name sap.ui.ux3.ExactBrowser#getEnableReset
 * @function
 */

/**
 * Setter for property <code>enableReset</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableReset  new value for property <code>enableReset</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#setEnableReset
 * @function
 */


/**
 * Getter for property <code>enableSave</code>.
 * Whether the save button should be available in the header area.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableSave</code>
 * @public
 * @since 1.9.2
 * @name sap.ui.ux3.ExactBrowser#getEnableSave
 * @function
 */

/**
 * Setter for property <code>enableSave</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableSave  new value for property <code>enableSave</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.2
 * @name sap.ui.ux3.ExactBrowser#setEnableSave
 * @function
 */


/**
 * Getter for property <code>topListWidth</code>.
 * Specifies the width of the top list in pixels. The value must be between 70 and 500.
 *
 * Default value is <code>168</code>
 *
 * @return {int} the value of property <code>topListWidth</code>
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.ExactBrowser#getTopListWidth
 * @function
 */

/**
 * Setter for property <code>topListWidth</code>.
 *
 * Default value is <code>168</code> 
 *
 * @param {int} iTopListWidth  new value for property <code>topListWidth</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.0
 * @name sap.ui.ux3.ExactBrowser#setTopListWidth
 * @function
 */


/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * The attributes which shall be available.
 * 
 * <strong>Note</strong>: this is the default aggregation for ExactBrowser.
 * @return {sap.ui.ux3.ExactAttribute[]}
 * @public
 * @name sap.ui.ux3.ExactBrowser#getAttributes
 * @function
 */


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#insertAttribute
 * @function
 */

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#addAttribute
 * @function
 */

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.ui.ux3.ExactAttribute} the removed attribute or null
 * @public
 * @name sap.ui.ux3.ExactBrowser#removeAttribute
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactAttribute[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ExactBrowser#removeAllAttributes
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ExactAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ExactBrowser#indexOfAttribute
 * @function
 */
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#destroyAttributes
 * @function
 */


/**
 * Getter for aggregation <code>optionsMenu</code>.<br/>
 * Menu with options. The menu can not used when the property showTopList is set to false.
 * 
 * @return {sap.ui.commons.Menu}
 * @public
 * @name sap.ui.ux3.ExactBrowser#getOptionsMenu
 * @function
 */


/**
 * Setter for the aggregated <code>optionsMenu</code>.
 * @param {sap.ui.commons.Menu} oOptionsMenu
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#setOptionsMenu
 * @function
 */
	

/**
 * Destroys the optionsMenu in the aggregation 
 * named <code>optionsMenu</code>.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#destroyOptionsMenu
 * @function
 */


/**
 * 
 * The successor control of the Exact Browser. The id of this control is used in the ARIA description of the control.
 * Additionally it is possible to directly jump to this control via the F6 key.
 * 
 *
 * @return {string} Id of the element which is the current target of the <code>followUpControl</code> association, or null
 * @public
 * @name sap.ui.ux3.ExactBrowser#getFollowUpControl
 * @function
 */

/**
 * 
 * The successor control of the Exact Browser. The id of this control is used in the ARIA description of the control.
 * Additionally it is possible to directly jump to this control via the F6 key.
 * 
 *
 * @param {string | sap.ui.core.Control} vFollowUpControl 
 *    Id of an element which becomes the new target of this <code>followUpControl</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#setFollowUpControl
 * @function
 */


	
/**
 * Event is fired when an attribute is selected or unselected. 
 *
 * @name sap.ui.ux3.ExactBrowser#attributeSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.ExactAttribute} oControlEvent.getParameters.attribute The attribute which was selected or unselected recently
 * @param {object} oControlEvent.getParameters.allAttributes Array of all selected ExactAttributes
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attributeSelected' event of this <code>sap.ui.ux3.ExactBrowser</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ExactBrowser</code>.<br/> itself. 
 *  
 * Event is fired when an attribute is selected or unselected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ExactBrowser</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#attachAttributeSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attributeSelected' event of this <code>sap.ui.ux3.ExactBrowser</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#detachAttributeSelected
 * @function
 */

/**
 * Fire event attributeSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'attribute' of type <code>sap.ui.ux3.ExactAttribute</code> The attribute which was selected or unselected recently</li>
 * <li>'allAttributes' of type <code>object</code> Array of all selected ExactAttributes</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ExactBrowser#fireAttributeSelected
 * @function
 */


/**
 * Event is fired when an attribute is selected or unselected. 
 *
 * @name sap.ui.ux3.ExactBrowser#save
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'save' event of this <code>sap.ui.ux3.ExactBrowser</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ExactBrowser</code>.<br/> itself. 
 *  
 * Event is fired when an attribute is selected or unselected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ExactBrowser</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#attachSave
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'save' event of this <code>sap.ui.ux3.ExactBrowser</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ExactBrowser#detachSave
 * @function
 */

/**
 * Fire event save to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ExactBrowser#fireSave
 * @function
 */


/**
 * Deselects all currently selected attributes and closes all attribute lists.
 *
 * @name sap.ui.ux3.ExactBrowser.prototype.reset
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\ux3\ExactBrowser.js


jQuery.sap.require('sap.ui.commons.Menu'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained


(function() {
	
	/**
	 * Does the setup when the ExactBrowser is created.
	 * @private
	 */
	sap.ui.ux3.ExactBrowser.prototype.init = function(){
		var that = this;

		this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");

		//Create a root node for the attributes tree
		this._attributeRoot = new sap.ui.ux3.ExactAttribute();
		this.setAggregation("rootAttribute",this._attributeRoot);
		//Init the used subcontrols
		this._rootList = new sap.ui.ux3.ExactList(this.getId()+"-rootlist");
		this._rootList.setData(this._attributeRoot);
		this.addAggregation("controls", this._rootList);

		this._resetButton = new sap.ui.commons.Button(this.getId()+"-RstBtn", {text: this._rb.getText("EXACT_BRWSR_RESET"), lite: true});
		this._resetButton.addStyleClass("sapUiUx3ExactBrwsrReset");
		this.addAggregation("controls", this._resetButton);
		this._resetButton.attachPress(function(){
			that.reset();
		});

		this._saveButton = new sap.ui.commons.Button(this.getId()+"-SvBtn", {text: this._rb.getText("EXACT_BRWSR_SAVE"), lite: true});
		this._saveButton.addStyleClass("sapUiUx3ExactBrwsrSave");
		this.addAggregation("controls", this._saveButton);
		this._saveButton.attachPress(function(){
			that.fireSave();
		});

		this._rootList.attachAttributeSelected(function(oEvent){
			that.fireAttributeSelected({attribute: oEvent.getParameter("attribute"), allAttributes: oEvent.getParameter("allAttributes")});
		});
		this._rootList.attachEvent("_headerPress", function(oEvent){
			var oMenu = that.getOptionsMenu();
			if(oMenu){
				var oDomRef = oEvent.getParameter("domRef");
				oMenu.open(oEvent.getParameter("keyboard"), oDomRef, sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom, oDomRef);
			}
		});
	};


	/**
	 * Does all the cleanup when the ExactBrowser is to be destroyed.
	 * Called from Element's destroy() method.
	 * @private
	 */
	sap.ui.ux3.ExactBrowser.prototype.exit = function(){
		this._rootList.destroy();
		this._attributeRoot.destroy();
		this._rootList = null;
		this._attributeRoot = null;
		this._resetButton = null;
		this._saveButton = null;
		this._saveDialog = null;
		this._saveTextField = null;
		this._rb = null;
	};


	/**
	 * Called when a key is pressed.
	 * @private
	 */
	sap.ui.ux3.ExactBrowser.prototype.onkeydown = function(oEvent) {
		if(oEvent.keyCode != jQuery.sap.KeyCodes.F6 || !this.getFollowUpControl()) {
			return;
		}

		var oFollowUpControl = sap.ui.getCore().byId(this.getFollowUpControl());
		if(oFollowUpControl) {
			oEvent.preventDefault();
			oFollowUpControl.focus();
		}
	};
	
	
	/**
	 * Called when the theme is changed.
	 * @private
	 */
	sap.ui.ux3.ExactBrowser.prototype.onThemeChanged = function(oEvent) {
		if (this.getDomRef()) {
			this.invalidate();
		}
	};


	//*** Overridden API functions ***

	sap.ui.ux3.ExactBrowser.prototype.getTitle = function() {
		return this._rootList.getTopTitle();
	};


	sap.ui.ux3.ExactBrowser.prototype.setTitle = function(sTitle) {
		this._rootList.setTopTitle(sTitle);
		return this;
	};
	
	
	sap.ui.ux3.ExactBrowser.prototype.setTopListOrder = function(sListOrder) {
		this.setProperty("topListOrder", sListOrder, true);
		this._attributeRoot.setListOrder(sListOrder);
		return this;
	};
	
	
	sap.ui.ux3.ExactBrowser.prototype.getTopListWidth = function() {
		return this._attributeRoot.getWidth();
	};


	sap.ui.ux3.ExactBrowser.prototype.setTopListWidth = function(iWidth) {
		this._attributeRoot.setWidth(iWidth);
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.getHeaderTitle = function() {
		var sTitle = this.getProperty("headerTitle");
		return sTitle ? sTitle : this._rb.getText("EXACT_BRWSR_TITLE");
	};


	sap.ui.ux3.ExactBrowser.prototype.getEnableListClose = function() {
		return this._rootList.getShowClose();
	};


	sap.ui.ux3.ExactBrowser.prototype.setEnableListClose = function(bEnableListClose) {
		this._rootList.setShowClose(bEnableListClose);
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.getListHeight = function() {
		return this._rootList.getTopHeight();
	};


	sap.ui.ux3.ExactBrowser.prototype.setListHeight = function(iListHeight) {
		this._rootList.setTopHeight(iListHeight);
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.getAttributes = function() {
		return this._attributeRoot.getAttributesInternal();
	};


	sap.ui.ux3.ExactBrowser.prototype.insertAttribute = function(oAttribute, iIndex) {
		this._attributeRoot.insertAttribute(oAttribute, iIndex);
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.addAttribute = function(oAttribute) {
		this._attributeRoot.addAttribute(oAttribute);
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.removeAttribute = function(vElement) {
		return this._attributeRoot.removeAttribute(vElement);
	};


	sap.ui.ux3.ExactBrowser.prototype.removeAllAttributes = function() {
		return this._attributeRoot.removeAllAttributes();
	};


	sap.ui.ux3.ExactBrowser.prototype.indexOfAttribute = function(oAttribute) {
		return this._attributeRoot.indexOfAttribute(oAttribute);
	};


	sap.ui.ux3.ExactBrowser.prototype.destroyAttributes = function() {
		this._attributeRoot.destroyAttributes();
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.reset = function() {
		this._rootList._closeAll();
	};


	//*** Private helper functions ***
	
	sap.ui.ux3.ExactBrowser.prototype.hasOptionsMenu = function() {
		return !!this.getOptionsMenu();
	};

/*	//Closes the save dialog and triggers the save event
	function doSave(oExactBrowser, bSkip) {
		oExactBrowser._saveDialog.close();
		if(!bSkip){
			alert("Save: "+oExactBrowser._saveTextField.getValue());
		}
	}


	//Opens the save dialog
	function openSaveDialog(oExactBrowser) {
		if(!oExactBrowser._saveDialog){
			jQuery.sap.require("sap.ui.ux3.ToolPopup");
			jQuery.sap.require("sap.ui.commons.TextField");
			jQuery.sap.require("sap.ui.commons.Label");
			oExactBrowser._saveTextField = new sap.ui.commons.TextField(oExactBrowser.getId()+"-SvDlgTf");
			var label = new sap.ui.commons.Label({text: oExactBrowser._rb.getText("EXACT_BRWSR_DLG_LABEL")}).setLabelFor(oExactBrowser._saveTextField);
			oExactBrowser._saveDialog = new sap.ui.ux3.ToolPopup(oExactBrowser.getId()+"-SvDlg", {
				content:[label, oExactBrowser._saveTextField],
				buttons: [
					new sap.ui.commons.Button(oExactBrowser.getId()+"-SvDlgSvBtn", {
						text: oExactBrowser._rb.getText("EXACT_BRWSR_DLG_SAVE"),
						press: function(){
							doSave(oExactBrowser);
						}
					}),
					new sap.ui.commons.Button(oExactBrowser.getId()+"-SvDlgCnclBtn", {
						text: oExactBrowser._rb.getText("EXACT_BRWSR_DLG_CANCEL"),
						press: function(){
							doSave(oExactBrowser, true);
						}
					})
				]
			});
			oExactBrowser._saveDialog.addStyleClass("sapUiUx3ExactBrwsrSaveDlg");
			oExactBrowser.addAggregation("controls", oExactBrowser._saveDialog);
		}
		oExactBrowser._saveDialog.setPosition(sap.ui.core.Popup.Dock.EndTop, sap.ui.core.Popup.Dock.EndBottom, oExactBrowser._saveButton.getDomRef(), "0 13", "none");
		oExactBrowser._saveDialog.open();
	}
*/

}());
}; // end of sap/ui/ux3/ExactBrowser.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Feed') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Feed.
jQuery.sap.declare("sap.ui.ux3.Feed");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Feed.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFeederThumbnailSrc feederThumbnailSrc} : sap.ui.core.URI</li>
 * <li>{@link #getFeederSender feederSender} : string</li>
 * <li>{@link #getLive live} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getFilterItems filterItems} : sap.ui.core.ListItem[]</li>
 * <li>{@link #getChunks chunks} : sap.ui.ux3.FeedChunk[]</li>
 * <li>{@link #getToolsMenuItems toolsMenuItems} : sap.ui.commons.MenuItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.Feed#event:filterChange filterChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Feed#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Feed#event:chunkAdded chunkAdded} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Feed#event:toolsItemSelected toolsItemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Feed#event:toggleLive toggleLive} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container control representing a full feed page, including feeder and updates.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @experimental Since version 1.2. 
 * The whole Feed/Feeder API is still under discussion, significant changes are likely. Especially text presentation (e.g. @-references and formatted text) is not final. Also the Feed model topic is still open.
 * @name sap.ui.ux3.Feed
 */
sap.ui.core.Control.extend("sap.ui.ux3.Feed", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"feederThumbnailSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"feederSender" : {type : "string", group : "Data", defaultValue : null},
		"live" : {type : "boolean", group : "Behavior", defaultValue : true},
		"title" : {type : "string", group : "Data", defaultValue : null}
	},
	aggregations : {
    	"filterItems" : {type : "sap.ui.core.ListItem", multiple : true, singularName : "filterItem", bindable : "bindable"}, 
    	"chunks" : {type : "sap.ui.ux3.FeedChunk", multiple : true, singularName : "chunk", bindable : "bindable"}, 
    	"toolsMenuItems" : {type : "sap.ui.commons.MenuItem", multiple : true, singularName : "toolsMenuItem", bindable : "bindable"}
	},
	events : {
		"filterChange" : {}, 
		"search" : {}, 
		"chunkAdded" : {}, 
		"toolsItemSelected" : {}, 
		"toggleLive" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.Feed with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.Feed.extend
 * @function
 */

sap.ui.ux3.Feed.M_EVENTS = {'filterChange':'filterChange','search':'search','chunkAdded':'chunkAdded','toolsItemSelected':'toolsItemSelected','toggleLive':'toggleLive'};


/**
 * Getter for property <code>feederThumbnailSrc</code>.
 * The path to the thumbnail image used for the feeder
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>feederThumbnailSrc</code>
 * @public
 * @name sap.ui.ux3.Feed#getFeederThumbnailSrc
 * @function
 */

/**
 * Setter for property <code>feederThumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sFeederThumbnailSrc  new value for property <code>feederThumbnailSrc</code>
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#setFeederThumbnailSrc
 * @function
 */


/**
 * Getter for property <code>feederSender</code>.
 * The sender of the feeder
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>feederSender</code>
 * @public
 * @name sap.ui.ux3.Feed#getFeederSender
 * @function
 */

/**
 * Setter for property <code>feederSender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFeederSender  new value for property <code>feederSender</code>
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#setFeederSender
 * @function
 */


/**
 * Getter for property <code>live</code>.
 * Specifies whether the feed shall be in live mode
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>live</code>
 * @public
 * @name sap.ui.ux3.Feed#getLive
 * @function
 */

/**
 * Setter for property <code>live</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bLive  new value for property <code>live</code>
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#setLive
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title text of the Feed. If no text is entered "FEED" is displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.ux3.Feed#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#setTitle
 * @function
 */


/**
 * Getter for aggregation <code>filterItems</code>.<br/>
 * Items of the filter
 * 
 * @return {sap.ui.core.ListItem[]}
 * @public
 * @name sap.ui.ux3.Feed#getFilterItems
 * @function
 */


/**
 * Inserts a filterItem into the aggregation named <code>filterItems</code>.
 *
 * @param {sap.ui.core.ListItem}
 *          oFilterItem the filterItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the filterItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the filterItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#insertFilterItem
 * @function
 */

/**
 * Adds some filterItem <code>oFilterItem</code> 
 * to the aggregation named <code>filterItems</code>.
 *
 * @param {sap.ui.core.ListItem}
 *            oFilterItem the filterItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#addFilterItem
 * @function
 */

/**
 * Removes an filterItem from the aggregation named <code>filterItems</code>.
 *
 * @param {int | string | sap.ui.core.ListItem} vFilterItem the filterItem to remove or its index or id
 * @return {sap.ui.core.ListItem} the removed filterItem or null
 * @public
 * @name sap.ui.ux3.Feed#removeFilterItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>filterItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.ListItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Feed#removeAllFilterItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.ListItem</code> in the aggregation named <code>filterItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.ListItem}
 *            oFilterItem the filterItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Feed#indexOfFilterItem
 * @function
 */
	

/**
 * Destroys all the filterItems in the aggregation 
 * named <code>filterItems</code>.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#destroyFilterItems
 * @function
 */


/**
 * Binder for aggregation <code>filterItems</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#bindFilterItems
 * @function
 */

/**
 * Unbinder for aggregation <code>filterItems</code>.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#unbindFilterItems
 * @function
 */


/**
 * Getter for aggregation <code>chunks</code>.<br/>
 * The chunks
 * 
 * @return {sap.ui.ux3.FeedChunk[]}
 * @public
 * @name sap.ui.ux3.Feed#getChunks
 * @function
 */


/**
 * Inserts a chunk into the aggregation named <code>chunks</code>.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *          oChunk the chunk to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the chunk should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the chunk is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the chunk is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#insertChunk
 * @function
 */

/**
 * Adds some chunk <code>oChunk</code> 
 * to the aggregation named <code>chunks</code>.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *            oChunk the chunk to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#addChunk
 * @function
 */

/**
 * Removes an chunk from the aggregation named <code>chunks</code>.
 *
 * @param {int | string | sap.ui.ux3.FeedChunk} vChunk the chunk to remove or its index or id
 * @return {sap.ui.ux3.FeedChunk} the removed chunk or null
 * @public
 * @name sap.ui.ux3.Feed#removeChunk
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>chunks</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.FeedChunk[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Feed#removeAllChunks
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.FeedChunk</code> in the aggregation named <code>chunks</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *            oChunk the chunk whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Feed#indexOfChunk
 * @function
 */
	

/**
 * Destroys all the chunks in the aggregation 
 * named <code>chunks</code>.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#destroyChunks
 * @function
 */


/**
 * Binder for aggregation <code>chunks</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#bindChunks
 * @function
 */

/**
 * Unbinder for aggregation <code>chunks</code>.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#unbindChunks
 * @function
 */


/**
 * Getter for aggregation <code>toolsMenuItems</code>.<br/>
 * MenuItems to open when the tool button is clicked by the user
 * 
 * @return {sap.ui.commons.MenuItem[]}
 * @public
 * @name sap.ui.ux3.Feed#getToolsMenuItems
 * @function
 */


/**
 * Inserts a toolsMenuItem into the aggregation named <code>toolsMenuItems</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *          oToolsMenuItem the toolsMenuItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the toolsMenuItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the toolsMenuItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the toolsMenuItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#insertToolsMenuItem
 * @function
 */

/**
 * Adds some toolsMenuItem <code>oToolsMenuItem</code> 
 * to the aggregation named <code>toolsMenuItems</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oToolsMenuItem the toolsMenuItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#addToolsMenuItem
 * @function
 */

/**
 * Removes an toolsMenuItem from the aggregation named <code>toolsMenuItems</code>.
 *
 * @param {int | string | sap.ui.commons.MenuItem} vToolsMenuItem the toolsMenuItem to remove or its index or id
 * @return {sap.ui.commons.MenuItem} the removed toolsMenuItem or null
 * @public
 * @name sap.ui.ux3.Feed#removeToolsMenuItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>toolsMenuItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.MenuItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Feed#removeAllToolsMenuItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.MenuItem</code> in the aggregation named <code>toolsMenuItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oToolsMenuItem the toolsMenuItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Feed#indexOfToolsMenuItem
 * @function
 */
	

/**
 * Destroys all the toolsMenuItems in the aggregation 
 * named <code>toolsMenuItems</code>.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#destroyToolsMenuItems
 * @function
 */


/**
 * Binder for aggregation <code>toolsMenuItems</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#bindToolsMenuItems
 * @function
 */

/**
 * Unbinder for aggregation <code>toolsMenuItems</code>.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#unbindToolsMenuItems
 * @function
 */


/**
 * Event is fired when the filter is changed 
 *
 * @name sap.ui.ux3.Feed#filterChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new/changed value of the filter
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'filterChange' event of this <code>sap.ui.ux3.Feed</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Feed</code>.<br/> itself. 
 *  
 * Event is fired when the filter is changed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Feed</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#attachFilterChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'filterChange' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#detachFilterChange
 * @function
 */

/**
 * Fire event filterChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new/changed value of the filter</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Feed#fireFilterChange
 * @function
 */


/**
 * Event is fired when the search function on SearchField is triggered 
 *
 * @name sap.ui.ux3.Feed#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The search query
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.ui.ux3.Feed</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Feed</code>.<br/> itself. 
 *  
 * Event is fired when the search function on SearchField is triggered 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Feed</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Feed#fireSearch
 * @function
 */


/**
 * Event is fired when a new chunk is added 
 *
 * @name sap.ui.ux3.Feed#chunkAdded
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.FeedChunk} oControlEvent.getParameters.chunk New chunk
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'chunkAdded' event of this <code>sap.ui.ux3.Feed</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Feed</code>.<br/> itself. 
 *  
 * Event is fired when a new chunk is added 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Feed</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#attachChunkAdded
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'chunkAdded' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#detachChunkAdded
 * @function
 */

/**
 * Fire event chunkAdded to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'chunk' of type <code>sap.ui.ux3.FeedChunk</code> New chunk</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Feed#fireChunkAdded
 * @function
 */


/**
 * Event is fired when an item from the tools MenuButton was selected 
 *
 * @name sap.ui.ux3.Feed#toolsItemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId The Id of the selected item
 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item The selected item
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'toolsItemSelected' event of this <code>sap.ui.ux3.Feed</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Feed</code>.<br/> itself. 
 *  
 * Event is fired when an item from the tools MenuButton was selected 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Feed</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#attachToolsItemSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'toolsItemSelected' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#detachToolsItemSelected
 * @function
 */

/**
 * Fire event toolsItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> The Id of the selected item</li>
 * <li>'item' of type <code>sap.ui.commons.MenuItemBase</code> The selected item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Feed#fireToolsItemSelected
 * @function
 */


/**
 * Event is fired when the live mode has changed 
 *
 * @name sap.ui.ux3.Feed#toggleLive
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.live Current live indicator
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'toggleLive' event of this <code>sap.ui.ux3.Feed</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Feed</code>.<br/> itself. 
 *  
 * Event is fired when the live mode has changed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Feed</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#attachToggleLive
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'toggleLive' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Feed#detachToggleLive
 * @function
 */

/**
 * Fire event toggleLive to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'live' of type <code>boolean</code> Current live indicator</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Feed#fireToggleLive
 * @function
 */


// Start of sap\ui\ux3\Feed.js
jQuery.sap.require('sap.ui.commons.MenuButton'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.ToggleButton'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.DropdownBox'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.SearchField'); // unlisted dependency retained



///**
// * This file defines behavior for the control,
// */

sap.ui.ux3.Feed.prototype.init = function(){

	this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");

	// init sub-controls
	this.oFeeder = new sap.ui.ux3.Feeder( this.getId()+'-Feeder', {
		type: sap.ui.ux3.FeederType.Medium
	}).setParent(this);
	this.oFeeder.attachEvent('submit', this.handleFeederSubmit, this); // attach event this way to have the right this-reference in handler

	this.oLiveButton = new sap.ui.commons.ToggleButton( this.getId()+'-liveButton', {
		text: this.rb.getText('FEED_LIVE'),
		pressed: this.getLive(), // initialize with default value because setter not called for it
		lite: true
	}).setParent(this);
	this.oLiveButton.attachEvent('press', this.handleLiveButtonPress, this); // attach event this way to have the right this-reference in handler

	this.oFilter = new sap.ui.commons.DropdownBox( this.getId()+'-filter').setParent(this);
	this.oFilter.attachEvent('change', this.handleFilterChange, this); // attach event this way to have the right this-reference in handler

	this.oSearchField = new sap.ui.commons.SearchField( this.getId()+'-search', {
		enableListSuggest: false
	}).setParent(this);
	this.oSearchField.attachEvent('search', this.handleSearchFieldSearch, this); // attach event this way to have the right this-reference in handler

};

/*
 * create menu button without items. The items are added later
 */
sap.ui.ux3.Feed.prototype.initToolsButton = function(){

	if (!this.oToolsButton) {
		this.oToolsButton = new sap.ui.commons.MenuButton( this.getId()+'-toolsButton', {
			tooltip: this.rb.getText('FEED_TOOLS'),
			lite: true,
			menu: new sap.ui.commons.Menu(this.getId()+'-toolsMenu')
		}).setParent(this);
		this.oToolsButton.attachEvent('itemSelected', this.handleLtoolsButtonSelected, this); // attach event this way to have the right this-reference in handler

		var sIcon = sap.ui.core.theming.Parameters.get('sap.ui.ux3.Feed:sapUiFeedToolsIconUrl');
		var sIconHover = sap.ui.core.theming.Parameters.get('sap.ui.ux3.Feed:sapUiFeedToolsIconHoverUrl');
		if (sIcon) {
			this.oToolsButton.setProperty('icon', jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIcon, true);
		}
		if (sIconHover) {
			this.oToolsButton.setProperty('iconHovered', jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIconHover, true);
		}
	}

};

sap.ui.ux3.Feed.prototype.exit = function(){

	if (this.oFeeder) {
		this.oFeeder.destroy();
		delete this.oFeeder;
	}
	if (this.oLiveButton) {
		this.oLiveButton.destroy();
		delete this.oLiveButton;
	}
	if (this.oToolsButton) {
		this.oToolsButton.destroy();
		delete this.oToolsButton;
	}
	if (this.oFilter) {
		this.oFilter.destroy();
		delete this.oFilter;
	}
	if (this.oSearchField) {
		this.oSearchField.destroy();
		delete this.oSearchField;
	}
	this.rb = undefined;

};

/**
 * Handler for feeder submit event
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleFeederSubmit = function(oEvent){

	var oDate = new Date();
//	var sDate = String(oDate.getFullYear()) + String(oDate.getMonth()) + String(oDate.getDate()) + String(oDate.getHours()) + String(oDate.getMinutes()) + String(oDate.getSeconds());
	var sDate = String(oDate);

	var oNewChunk = new sap.ui.ux3.FeedChunk(this.getId()+'-new-'+this.getChunks().length, {
		text: oEvent.getParameter('text'),
		commentChunk: false,
		deletionAllowed: true,
		timestamp: sDate,
		sender: this.getFeederSender(),
		thumbnailSrc: this.getFeederThumbnailSrc()
	});

	// new chunks are inserted at the top
	this.insertChunk(oNewChunk, 0);
	this.fireChunkAdded({chunk: oNewChunk});

};

/*
 * overwrite of setLive
 */
sap.ui.ux3.Feed.prototype.setLive = function(bLive) {
	this.setProperty("live", bLive, true); //no re-rendering because only ToggleButton is changed

	if (this.oLiveButton) {
		// update ToggleButton
		this.oLiveButton.setPressed(bLive);
	}
	return this;
};

/**
 * Handler for live-button press
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleLiveButtonPress = function(oEvent){

	var bPressed = oEvent.getParameter("pressed");

	this.setProperty("live", bPressed, true); //no re-rendering because ToggleButton is already changed
	this.fireToggleLive({live: bPressed});

};

/**
 * Handler for tools menu button item selection
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleLtoolsButtonSelected = function(oEvent){

	// just forward event
	this.fireToolsItemSelected(oEvent.mParameters);

};

/**
 * Handler for filter change
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleFilterChange = function(oEvent){

	// just forward event
	this.fireFilterChange(oEvent.mParameters);

};

/**
 * Handler for search field
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleSearchFieldSearch = function(oEvent){

	// just forward event
	this.fireSearch(oEvent.mParameters);

};

/*
 * Overwrite generated function
 */
sap.ui.ux3.Feed.prototype.setFeederThumbnailSrc = function(sFeederThumbnailSrc) {

	this.setProperty("feederThumbnailSrc", sFeederThumbnailSrc, true); // no rerendering, only feeder is changed
	this.oFeeder.setThumbnailSrc(sFeederThumbnailSrc);
	return this;

};

sap.ui.ux3.Feed.prototype.setLive = function(bLive) {

	this.setProperty("live", bLive, true); // no rerendering, only button is changed
	this.oLiveButton.setPressed(bLive);
	return this;

};

// connect toolsMenuItems to MenuButtons menu
sap.ui.ux3.Feed.prototype.getToolsMenuItems = function() {

	if (this.oToolsButton){
		// as parent of items is the menu use menus aggregation
		return this.oToolsButton.getMenu().getItems();
	}

};

sap.ui.ux3.Feed.prototype.insertToolsMenuItem = function(oToolsMenuItem, iIndex) {

	this.initToolsButton();
	// as parent of items is the menu use menus aggregation
	this.oToolsButton.getMenu().insertItem(oToolsMenuItem, iIndex);
	return this;

};

sap.ui.ux3.Feed.prototype.addToolsMenuItem = function(oToolsMenuItem) {

	this.initToolsButton();
	// as parent of items is the menu use menus aggregation
	this.oToolsButton.getMenu().addItem(oToolsMenuItem);
	return this;

};

sap.ui.ux3.Feed.prototype.removeToolsMenuItem = function(vToolsMenuItem) {

	if (this.oToolsButton){
		// as parent of items is the menu use menus aggregation
		return this.oToolsButton.getMenu().removeItem(vToolsMenuItem);
	}

};

sap.ui.ux3.Feed.prototype.removeAllToolsMenuItems = function() {

	if (this.oToolsButton){
		// as parent of items is the menu use menus aggregation
		return this.oToolsButton.getMenu().removeAllItems();
	}

};

sap.ui.ux3.Feed.prototype.indexOfToolsMenuItem = function(oToolsMenuItem) {

	if (this.oToolsButton){
		// as parent of items is the menu use menus aggregation
		return this.oToolsButton.getMenu().indexOfItem(oToolsMenuItem);
	}

};

sap.ui.ux3.Feed.prototype.destroyToolsMenuItems = function() {

	if (this.oToolsButton){
		// as parent of items is the menu use menus aggregation
		this.oToolsButton.getMenu().destroyItems();
	}

	return this;

};

sap.ui.ux3.Feed.prototype.bindToolsMenuItems = function(sPath, oTemplate, oSorter, aFilters) {

	this.initToolsButton();
	// as parent of items is the menu use menus aggregation
	this.oToolsButton.getMenu().bindItems(sPath, oTemplate, oSorter, aFilters);

	return this;

};

sap.ui.ux3.Feed.prototype.unbindToolsMenuItems = function() {

	if (this.oToolsButton){
		this.oToolsButton.getMenu().unbindItems();
	}

	return this;

};

// connect filterItems to filter
sap.ui.ux3.Feed.prototype.getFilterItems = function() {

	return this.oFilter.getItems();

};

sap.ui.ux3.Feed.prototype.insertFilterItem = function(oFilterItem, iIndex) {

	this.oFilter.insertItem(oFilterItem, iIndex);
	return this;

};

sap.ui.ux3.Feed.prototype.addFilterItem = function(oFilterItem) {

	this.oFilter.addItem(oFilterItem);
	return this;

};

sap.ui.ux3.Feed.prototype.removeFilterItem = function(vFilterItem) {

	return this.oFilter.removeItem(vFilterItem);

};

sap.ui.ux3.Feed.prototype.removeAllFilterItems = function() {

	return this.oFilter.removeAllItems();

};

sap.ui.ux3.Feed.prototype.indexOfFilterItem = function(oFilterItem) {

	return this.oFilter.indexOfItem(oFilterItem);

};

sap.ui.ux3.Feed.prototype.destroyFilterItems = function() {

	this.oFilter.destroyItems();

	return this;

};

sap.ui.ux3.Feed.prototype.bindFilterItems = function(sPath, oTemplate, oSorter, aFilters) {

	this.oFilter.bindItems(sPath, oTemplate, oSorter, aFilters);

	return this;

};

sap.ui.ux3.Feed.prototype.unbindFilterItems = function() {

	this.oFilter.unbindItems();

	return this;

};

}; // end of sap/ui/ux3/Feed.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FeedChunk') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.FeedChunk.
jQuery.sap.declare("sap.ui.ux3.FeedChunk");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FeedChunk.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getThumbnailSrc thumbnailSrc} : sap.ui.core.URI</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getSender sender} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getDeletionAllowed deletionAllowed} : boolean (default: false)</li>
 * <li>{@link #getCommentChunk commentChunk} : boolean (default: false)</li>
 * <li>{@link #getFeederThumbnailSrc feederThumbnailSrc} : sap.ui.core.URI</li>
 * <li>{@link #getFeederSender feederSender} : string</li>
 * <li>{@link #getFlagged flagged} : boolean (default: false)</li>
 * <li>{@link #getFavorite favorite} : boolean</li>
 * <li>{@link #getShared shared} : boolean (default: false)</li>
 * <li>{@link #getEnableFlag enableFlag} : boolean (default: true)</li>
 * <li>{@link #getEnableShare enableShare} : boolean (default: true)</li>
 * <li>{@link #getEnableComment enableComment} : boolean (default: true)</li>
 * <li>{@link #getEnableInspect enableInspect} : boolean (default: true)</li>
 * <li>{@link #getEnableFavorite enableFavorite} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getComments comments} : sap.ui.ux3.FeedChunk[]</li>
 * <li>{@link #getActionMenuItems actionMenuItems} : sap.ui.commons.MenuItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.FeedChunk#event:deleted deleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.FeedChunk#event:commentAdded commentAdded} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.FeedChunk#event:toggleFlagged toggleFlagged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.FeedChunk#event:senderClicked senderClicked} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.FeedChunk#event:referenceClicked referenceClicked} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.FeedChunk#event:toggleFavorite toggleFavorite} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.FeedChunk#event:inspect inspect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.FeedChunk#event:toggleShared toggleShared} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.FeedChunk#event:actionItemSelected actionItemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The unit that is embedded - single-wise or in a multiple way - into a Feed control.
 * The control provides a set of properties for text, sender information, time stamp,
 * comments, and functions such as flagging the entry to be favorite, shared, or flagged.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @experimental Since version 1.2. 
 * The whole Feed/Feeder API is still under discussion, significant changes are likely. Especially text presentation (e.g. @-references and formatted text) is not final. Also the Feed model topic is still open.
 * @name sap.ui.ux3.FeedChunk
 */
sap.ui.core.Control.extend("sap.ui.ux3.FeedChunk", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"thumbnailSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"text" : {type : "string", group : "Data", defaultValue : null},
		"sender" : {type : "string", group : "Data", defaultValue : null},
		"timestamp" : {type : "string", group : "Data", defaultValue : null},
		"deletionAllowed" : {type : "boolean", group : "Behavior", defaultValue : false},
		"commentChunk" : {type : "boolean", group : "Appearance", defaultValue : false, deprecated: true},
		"feederThumbnailSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"feederSender" : {type : "string", group : "Data", defaultValue : null},
		"flagged" : {type : "boolean", group : "Data", defaultValue : false},
		"favorite" : {type : "boolean", group : "Data", defaultValue : null},
		"shared" : {type : "boolean", group : "Data", defaultValue : false},
		"enableFlag" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enableShare" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enableComment" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enableInspect" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enableFavorite" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	aggregations : {
    	"comments" : {type : "sap.ui.ux3.FeedChunk", multiple : true, singularName : "comment", bindable : "bindable"}, 
    	"actionMenuItems" : {type : "sap.ui.commons.MenuItem", multiple : true, singularName : "actionMenuItem", bindable : "bindable"}
	},
	events : {
		"deleted" : {}, 
		"commentAdded" : {}, 
		"toggleFlagged" : {}, 
		"senderClicked" : {}, 
		"referenceClicked" : {}, 
		"toggleFavorite" : {}, 
		"inspect" : {}, 
		"toggleShared" : {}, 
		"actionItemSelected" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.FeedChunk with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.FeedChunk.extend
 * @function
 */

sap.ui.ux3.FeedChunk.M_EVENTS = {'deleted':'deleted','commentAdded':'commentAdded','toggleFlagged':'toggleFlagged','senderClicked':'senderClicked','referenceClicked':'referenceClicked','toggleFavorite':'toggleFavorite','inspect':'inspect','toggleShared':'toggleShared','actionItemSelected':'actionItemSelected'};


/**
 * Getter for property <code>thumbnailSrc</code>.
 * URL to the thumbnail image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>thumbnailSrc</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getThumbnailSrc
 * @function
 */

/**
 * Setter for property <code>thumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sThumbnailSrc  new value for property <code>thumbnailSrc</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setThumbnailSrc
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The FeedChunk text. @References are supported.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setText
 * @function
 */


/**
 * Getter for property <code>sender</code>.
 * Sender of the chunk
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sender</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getSender
 * @function
 */

/**
 * Setter for property <code>sender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSender  new value for property <code>sender</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setSender
 * @function
 */


/**
 * Getter for property <code>timestamp</code>.
 * Format is ISO 8601 YYYY-MM-DDThh:mm:ss.sZ, Z meaning the time is in UTC time zone
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getTimestamp
 * @function
 */

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTimestamp  new value for property <code>timestamp</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setTimestamp
 * @function
 */


/**
 * Getter for property <code>deletionAllowed</code>.
 * Flag if the deletion of the chunk shall be allowed
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>deletionAllowed</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getDeletionAllowed
 * @function
 */

/**
 * Setter for property <code>deletionAllowed</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDeletionAllowed  new value for property <code>deletionAllowed</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setDeletionAllowed
 * @function
 */


/**
 * Getter for property <code>commentChunk</code>.
 * This flag changes a FeedChunk into a CommentChunk. In this case, it can not have own comments,
 * furthermore it must be assigned to a FeedChunk.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>commentChunk</code>
 * @public
 * @deprecated Since version 1.4.0. 
 * Not longer used. If a chunk is a comment is determined from hierarchy. If the parent is a chunk it's automatically a comment.
 * @name sap.ui.ux3.FeedChunk#getCommentChunk
 * @function
 */

/**
 * Setter for property <code>commentChunk</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCommentChunk  new value for property <code>commentChunk</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.4.0. 
 * Not longer used. If a chunk is a comment is determined from hierarchy. If the parent is a chunk it's automatically a comment.
 * @name sap.ui.ux3.FeedChunk#setCommentChunk
 * @function
 */


/**
 * Getter for property <code>feederThumbnailSrc</code>.
 * URL to the thumbnail image for the comment feeder.
 * This property is optional if the chunk is a sub-control of a feed control. In this case the value of the feed control is used if it's not set. So it must be only set once on the feed control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>feederThumbnailSrc</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getFeederThumbnailSrc
 * @function
 */

/**
 * Setter for property <code>feederThumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sFeederThumbnailSrc  new value for property <code>feederThumbnailSrc</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setFeederThumbnailSrc
 * @function
 */


/**
 * Getter for property <code>feederSender</code>.
 * Sender for the comment feeder
 * This property is optional if the chunk is a sub-control of a feed control. In this case the value of the feed control is used if it's not set. So it must be only set once on the feed control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>feederSender</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getFeederSender
 * @function
 */

/**
 * Setter for property <code>feederSender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFeederSender  new value for property <code>feederSender</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setFeederSender
 * @function
 */


/**
 * Getter for property <code>flagged</code>.
 * Defines whether the entry is flagged. This property is not supported for comment chunks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>flagged</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getFlagged
 * @function
 */

/**
 * Setter for property <code>flagged</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFlagged  new value for property <code>flagged</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setFlagged
 * @function
 */


/**
 * Getter for property <code>favorite</code>.
 * Defines whether the entry shall be displayed as favorite. This property is not supported for comment chunks.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>favorite</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getFavorite
 * @function
 */

/**
 * Setter for property <code>favorite</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bFavorite  new value for property <code>favorite</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setFavorite
 * @function
 */


/**
 * Getter for property <code>shared</code>.
 * Defines whether the entry shall be shared. This property is not supported for comment chunks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>shared</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getShared
 * @function
 */

/**
 * Setter for property <code>shared</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShared  new value for property <code>shared</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setShared
 * @function
 */


/**
 * Getter for property <code>enableFlag</code>.
 * If true the flag action is enabled.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableFlag</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getEnableFlag
 * @function
 */

/**
 * Setter for property <code>enableFlag</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableFlag  new value for property <code>enableFlag</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setEnableFlag
 * @function
 */


/**
 * Getter for property <code>enableShare</code>.
 * If true the share action is enabled.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableShare</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getEnableShare
 * @function
 */

/**
 * Setter for property <code>enableShare</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableShare  new value for property <code>enableShare</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setEnableShare
 * @function
 */


/**
 * Getter for property <code>enableComment</code>.
 * If true the comment action is enabled.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableComment</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getEnableComment
 * @function
 */

/**
 * Setter for property <code>enableComment</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableComment  new value for property <code>enableComment</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setEnableComment
 * @function
 */


/**
 * Getter for property <code>enableInspect</code>.
 * If true the inspect action is enabled.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableInspect</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getEnableInspect
 * @function
 */

/**
 * Setter for property <code>enableInspect</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableInspect  new value for property <code>enableInspect</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setEnableInspect
 * @function
 */


/**
 * Getter for property <code>enableFavorite</code>.
 * If true the favorite action is enabled.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableFavorite</code>
 * @public
 * @name sap.ui.ux3.FeedChunk#getEnableFavorite
 * @function
 */

/**
 * Setter for property <code>enableFavorite</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableFavorite  new value for property <code>enableFavorite</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#setEnableFavorite
 * @function
 */


/**
 * Getter for aggregation <code>comments</code>.<br/>
 * Comments on this chunk
 * 
 * @return {sap.ui.ux3.FeedChunk[]}
 * @public
 * @name sap.ui.ux3.FeedChunk#getComments
 * @function
 */


/**
 * Inserts a comment into the aggregation named <code>comments</code>.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *          oComment the comment to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the comment should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the comment is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the comment is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#insertComment
 * @function
 */

/**
 * Adds some comment <code>oComment</code> 
 * to the aggregation named <code>comments</code>.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *            oComment the comment to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#addComment
 * @function
 */

/**
 * Removes an comment from the aggregation named <code>comments</code>.
 *
 * @param {int | string | sap.ui.ux3.FeedChunk} vComment the comment to remove or its index or id
 * @return {sap.ui.ux3.FeedChunk} the removed comment or null
 * @public
 * @name sap.ui.ux3.FeedChunk#removeComment
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>comments</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.FeedChunk[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.FeedChunk#removeAllComments
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.FeedChunk</code> in the aggregation named <code>comments</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *            oComment the comment whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.FeedChunk#indexOfComment
 * @function
 */
	

/**
 * Destroys all the comments in the aggregation 
 * named <code>comments</code>.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#destroyComments
 * @function
 */


/**
 * Binder for aggregation <code>comments</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#bindComments
 * @function
 */

/**
 * Unbinder for aggregation <code>comments</code>.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#unbindComments
 * @function
 */


/**
 * Getter for aggregation <code>actionMenuItems</code>.<br/>
 * MenuItems to open when there is a click on the action menu button
 * 
 * @return {sap.ui.commons.MenuItem[]}
 * @public
 * @name sap.ui.ux3.FeedChunk#getActionMenuItems
 * @function
 */


/**
 * Inserts a actionMenuItem into the aggregation named <code>actionMenuItems</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *          oActionMenuItem the actionMenuItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the actionMenuItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the actionMenuItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the actionMenuItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#insertActionMenuItem
 * @function
 */

/**
 * Adds some actionMenuItem <code>oActionMenuItem</code> 
 * to the aggregation named <code>actionMenuItems</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oActionMenuItem the actionMenuItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#addActionMenuItem
 * @function
 */

/**
 * Removes an actionMenuItem from the aggregation named <code>actionMenuItems</code>.
 *
 * @param {int | string | sap.ui.commons.MenuItem} vActionMenuItem the actionMenuItem to remove or its index or id
 * @return {sap.ui.commons.MenuItem} the removed actionMenuItem or null
 * @public
 * @name sap.ui.ux3.FeedChunk#removeActionMenuItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>actionMenuItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.MenuItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.FeedChunk#removeAllActionMenuItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.MenuItem</code> in the aggregation named <code>actionMenuItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oActionMenuItem the actionMenuItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.FeedChunk#indexOfActionMenuItem
 * @function
 */
	

/**
 * Destroys all the actionMenuItems in the aggregation 
 * named <code>actionMenuItems</code>.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#destroyActionMenuItems
 * @function
 */


/**
 * Binder for aggregation <code>actionMenuItems</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#bindActionMenuItems
 * @function
 */

/**
 * Unbinder for aggregation <code>actionMenuItems</code>.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#unbindActionMenuItems
 * @function
 */


/**
 * Event is fired when the deletion button is pressed. 
 *
 * @name sap.ui.ux3.FeedChunk#deleted
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deleted' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself. 
 *  
 * Event is fired when the deletion button is pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#attachDeleted
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deleted' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#detachDeleted
 * @function
 */

/**
 * Fire event deleted to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FeedChunk#fireDeleted
 * @function
 */


/**
 * Event is raised when a comment is added to the entry. This event is not supported for comment chunks. 
 *
 * @name sap.ui.ux3.FeedChunk#commentAdded
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.FeedChunk} oControlEvent.getParameters.comment New comment chunk
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'commentAdded' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself. 
 *  
 * Event is raised when a comment is added to the entry. This event is not supported for comment chunks. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#attachCommentAdded
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'commentAdded' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#detachCommentAdded
 * @function
 */

/**
 * Fire event commentAdded to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'comment' of type <code>sap.ui.ux3.FeedChunk</code> New comment chunk</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FeedChunk#fireCommentAdded
 * @function
 */


/**
 * Event is raised when the user clicks to flag the entry. This event is not supported for comment chunks. 
 *
 * @name sap.ui.ux3.FeedChunk#toggleFlagged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.flagged Current flagged state
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'toggleFlagged' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself. 
 *  
 * Event is raised when the user clicks to flag the entry. This event is not supported for comment chunks. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#attachToggleFlagged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'toggleFlagged' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#detachToggleFlagged
 * @function
 */

/**
 * Fire event toggleFlagged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'flagged' of type <code>boolean</code> Current flagged state</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FeedChunk#fireToggleFlagged
 * @function
 */


/**
 * Event is fired when the thumbnail or the name of the sender is clicked. 
 *
 * @name sap.ui.ux3.FeedChunk#senderClicked
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'senderClicked' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself. 
 *  
 * Event is fired when the thumbnail or the name of the sender is clicked. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#attachSenderClicked
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'senderClicked' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#detachSenderClicked
 * @function
 */

/**
 * Fire event senderClicked to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FeedChunk#fireSenderClicked
 * @function
 */


/**
 * Click on a @-reference 
 *
 * @name sap.ui.ux3.FeedChunk#referenceClicked
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.text Text of the @-reference
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'referenceClicked' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself. 
 *  
 * Click on a @-reference 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#attachReferenceClicked
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'referenceClicked' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#detachReferenceClicked
 * @function
 */

/**
 * Fire event referenceClicked to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'text' of type <code>string</code> Text of the @-reference</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FeedChunk#fireReferenceClicked
 * @function
 */


/**
 * Event is raised when the user clicks to set the entry as favorite. This event is not supported for comment chunks. 
 *
 * @name sap.ui.ux3.FeedChunk#toggleFavorite
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.favorite Current favorite state
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'toggleFavorite' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself. 
 *  
 * Event is raised when the user clicks to set the entry as favorite. This event is not supported for comment chunks. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#attachToggleFavorite
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'toggleFavorite' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#detachToggleFavorite
 * @function
 */

/**
 * Fire event toggleFavorite to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'favorite' of type <code>boolean</code> Current favorite state</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FeedChunk#fireToggleFavorite
 * @function
 */


/**
 * Event is fired when the inspect button was pressed 
 *
 * @name sap.ui.ux3.FeedChunk#inspect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'inspect' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself. 
 *  
 * Event is fired when the inspect button was pressed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#attachInspect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'inspect' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#detachInspect
 * @function
 */

/**
 * Fire event inspect to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FeedChunk#fireInspect
 * @function
 */


/**
 * Event is raised when the user clicks to share the entry. This event is not supported for comment chunks. 
 *
 * @name sap.ui.ux3.FeedChunk#toggleShared
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.shareed Current shared state
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'toggleShared' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself. 
 *  
 * Event is raised when the user clicks to share the entry. This event is not supported for comment chunks. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#attachToggleShared
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'toggleShared' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#detachToggleShared
 * @function
 */

/**
 * Fire event toggleShared to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'shareed' of type <code>boolean</code> Current shared state</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FeedChunk#fireToggleShared
 * @function
 */


/**
 * Event is fired when an item from the action menu button was selected. 
 *
 * @name sap.ui.ux3.FeedChunk#actionItemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId The Id of the selected item
 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item The selected item
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'actionItemSelected' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself. 
 *  
 * Event is fired when an item from the action menu button was selected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.FeedChunk</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#attachActionItemSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'actionItemSelected' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.FeedChunk#detachActionItemSelected
 * @function
 */

/**
 * Fire event actionItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> The Id of the selected item</li>
 * <li>'item' of type <code>sap.ui.commons.MenuItemBase</code> The selected item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.FeedChunk#fireActionItemSelected
 * @function
 */


// Start of sap\ui\ux3\FeedChunk.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuButton'); // unlisted dependency retained



///**
// * This file defines behavior for the control,
// */

sap.ui.ux3.FeedChunk.prototype.init = function(){
   this.maxComments = 2; // max. number of comments displayed initially
   this.allComments = false; // initially render only maxComments
   this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
   this.expanded = false;
};

sap.ui.ux3.FeedChunk.prototype.initCommentFeeder = function(){

	// create comment feeder if needed
	if (!this.oCommentFeeder) {
		this.oCommentFeeder = new sap.ui.ux3.Feeder( this.getId()+'-CommentFeeder', {
			type: sap.ui.ux3.FeederType.Comment
		}).setParent(this);
		this.oCommentFeeder.attachEvent('submit', this.handleCommentFeederSubmit, this); // attach event this way to have the right this-reference in handler
		this.showCommentFeeder = true;
	}

};

sap.ui.ux3.FeedChunk.prototype.initToolsButton = function(){

	if (!this.oToolsButton) {
		this.oToolsButton = new sap.ui.commons.MenuButton( this.getId()+'-toolsButton', {
			tooltip: this.rb.getText('FEED_TOOLS'),
			lite: true,
			menu: new sap.ui.commons.Menu(this.getId()+'-toolsMenu')
		}).setParent(this);
		this.oToolsButton.attachEvent('itemSelected', this.handleToolsButtonSelected, this); // attach event this way to have the right this-reference in handler

		var sIcon = sap.ui.core.theming.Parameters.get('sap.ui.ux3.Feed:sapUiFeedToolsIconUrl');
		var sIconHover = sap.ui.core.theming.Parameters.get('sap.ui.ux3.Feed:sapUiFeedToolsIconHoverUrl');
		if (sIcon) {
			this.oToolsButton.setProperty('icon', jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIcon, true);
		}
		if (sIconHover) {
			this.oToolsButton.setProperty('iconHovered', jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIconHover, true);
		}
	}

};

sap.ui.ux3.FeedChunk.prototype.exit = function(){

	if (this.oCommentFeeder) {
		this.oCommentFeeder.destroy();
		delete this.oCommentFeeder;
	}
	if (this.oToolsButton) {
		this.oToolsButton.destroy();
		delete this.oToolsButton;
	}
	this.rb = undefined;
	this.showCommentFeeder = undefined;
	this.expanded = undefined;
	this.oText = undefined;
	if (this.oHCMMenuButton) {
		this.oHCMMenuButton.destroy();
		delete this.oHCMMenuButton;
	}

};

sap.ui.ux3.FeedChunk.prototype.onAfterRendering = function(){

	// if text is cut show expand button
	this.oText = this.$().children(".sapUiFeedChunkText").get(0);
	if (this.oText.clientHeight < this.oText.scrollHeight) {
		// if tags are rendered put button in tag-DIV
		var oFather = this.$().children(".sapUiFeedChunkByline").get(0);
		jQuery(oFather).append(sap.ui.ux3.FeedChunkRenderer.renderExpander(this));

		if (this.expanded) {
			// expanded
			jQuery(this.oText).css('height', 'auto');
		}
	}

};

/**
 * handler for click event
 *
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.onclick = function(oEvent){

	var sTargetId = oEvent.target.getAttribute( 'ID' );

	if(sTargetId){
		switch ( sTargetId ){
		case ( this.getId() + '-delete' ):
			// Click on delete button
			this.fireDeleted();
		break;
		case ( this.getId() + '-sender'):
			// Click on sender
			this.fireSenderClicked();
		break;
		case ( this.getId() + '-thumb' ):
			// Click on sender
			this.fireSenderClicked();
		break;
		case ( this.getId() + '-exp' ):
			// Click on expand/collapse button
			var sNewTitle = '';
			if (this.expanded) {
				// collapse
				jQuery(this.oText).css('height', '');
				sNewTitle = this.rb.getText("FEED_EXPAND");
				this.expanded = false;
			} else {
				// expand
				jQuery(this.oText).css('height', 'auto');
				sNewTitle = this.rb.getText("FEED_COLLAPSE");
				this.expanded = true;
			}
			jQuery.sap.byId(sTargetId).attr('title',sNewTitle).toggleClass('sapUiFeedChunkExpand sapUiFeedChunkCollapse');
		break;
		case ( this.getId() + '-all' ):
			// Click on sender
			this.showAllComments();
		break;
		case ( this.getId() + '-ActComment' ):
			// Click Add comment button
			if(!this.showCommentFeeder){
				this.initCommentFeeder();
				this.rerender();
			}
		break;
		case ( this.getId() + '-ActFlag' ):
			// Click flag button
			this.setFlagged(!this.getFlagged());
			this.fireToggleFlagged({flagged: this.getFlagged()});
		break;
		case ( this.getId() + '-ActFavorite' ):
			// Click favorite button
			this.setFavorite(!this.getFavorite());
			this.fireToggleFavorite({favorite: this.getFavorite()});
		break;
		case ( this.getId() + '-ActInspect' ):
			// Click inspect button
			this.fireInspect();
		break;
		case ( this.getId() + '-ActShare' ):
			// Click favorite button
			this.setShared(!this.getShared());
			this.fireToggleShared({shared: this.getShared()});
		break;
		default:
			//Reference
			if(sTargetId.search(this.getId() + '-Ref') != -1){
				this.fireReferenceClicked({text: jQuery(oEvent.target).text()});
			}

		break;
		}
	}

	oEvent.stopPropagation(); //to prevent comment chunks to propagate event to parentChunk

};

/**
 * show all comments
 * rerender comment section
 *
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.showAllComments = function(){

	this.allComments = !this.allComments;

	var $commentSection = jQuery.sap.byId(this.getId() + " > section"); // use sap function instead of jQuery child selector because of escaping ID
	if ($commentSection.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this.getRenderer().renderComments(rm, this);
		rm.flush($commentSection[0]);
		rm.destroy();
	}

};

/**
 * Handler for Comment feeder submit event
 *
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.handleCommentFeederSubmit = function(oEvent){

	var oDate = new Date();
//	var sDate = String(oDate.getFullYear()) + String(oDate.getMonth()) + String(oDate.getDate()) + String(oDate.getHours()) + String(oDate.getMinutes()) + String(oDate.getSeconds());
	var sDate = String(oDate);

	var oNewComment = new sap.ui.ux3.FeedChunk(this.getId()+'-new-'+this.getComments().length, {
		text: oEvent.getParameter('text'),
		commentChunk: true,
		deletionAllowed: true,
		timestamp: sDate,
		sender: this.getFeederSender(),
		thumbnailSrc: this.getFeederThumbnailSrc()
	});

	// new comments are shown at the bottom
	this.addComment(oNewComment);
	this.fireCommentAdded({comment: oNewComment});

};

/**
 * Handler for tools menu button item selection
 *
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.handleToolsButtonSelected = function(oEvent){

	if(oEvent.getParameter('itemId') == this.getId() + '-actDelete'){
		this.fireDeleted();
	}else{
		// just forward event
		this.fireActionItemSelected(oEvent.mParameters);
	}

};

/*
 * Overwrite generated function
 */
sap.ui.ux3.FeedChunk.prototype.insertComment = function(oComment, iIndex) {

	this.insertAggregation("comments", oComment, iIndex);
	this.initCommentFeeder();
	return this;

};

sap.ui.ux3.FeedChunk.prototype.addComment = function(oComment) {

	this.addAggregation("comments", oComment);
	this.initCommentFeeder();
	return this;

};

sap.ui.ux3.FeedChunk.prototype.setDeletionAllowed = function(bDeletionAllowed) {

	if (bDeletionAllowed == this.getDeletionAllowed()) {
		// nothing to do
		return this;
	}

	this.setProperty("deletionAllowed", bDeletionAllowed);
	if (bDeletionAllowed) {
		this.initToolsButton();
		//add deletion item from menu
		this.oToolsButton.getMenu().insertItem(new sap.ui.commons.MenuItem(this.getId() + '-actDelete',{text: this.rb.getText('FEED_DELETE')}), 0);
	}else{
		//remove deletion item from menu
		if (this.oToolsButton) {
			this.oToolsButton.getMenu().removeItem(this.getId() + '-actDelete');
		}
	}

	return this;

};

// connect ActionMenuItems to MenuButtons menu
sap.ui.ux3.FeedChunk.prototype.getActionMenuItems = function() {

	if (this.oToolsButton){
		// as parent of items is the menu use menus aggregation
		var aItems = this.oToolsButton.getMenu().getItems();
		// remove delete item
		if (aItems.length > 0 && aItems[0].getId() == (this.getId() + '-actDelete')) {
			aItems.shift();
		}
		return aItems;
	}

};

sap.ui.ux3.FeedChunk.prototype.insertActionMenuItem = function(oActionMenuItem, iIndex) {

	this.initToolsButton();
	// if there is a delete item adjust index
	var aItems = this.oToolsButton.getMenu().getItems();
	if (aItems.length > 0 && aItems[0].getId() == (this.getId() + '-actDelete')) {
		iIndex++;
	}
	this.oToolsButton.getMenu().insertItem(oActionMenuItem, iIndex);
	return this;

};

sap.ui.ux3.FeedChunk.prototype.addActionMenuItem = function(oActionMenuItem) {

	this.initToolsButton();
	// as parent of items is the menu use menus aggregation
	this.oToolsButton.getMenu().addItem(oActionMenuItem);
	return this;

};

sap.ui.ux3.FeedChunk.prototype.removeActionMenuItem = function(vActionMenuItem) {

	if (this.oToolsButton){
		return this.oToolsButton.getMenu().removeItem(vActionMenuItem);
	}

};

sap.ui.ux3.FeedChunk.prototype.removeAllActionMenuItems = function() {

	if (this.oToolsButton){
		// if there is a delete item do not remove it
		var aItems = this.oToolsButton.getMenu().getItems();
		if (aItems.length > 0 && aItems[0].getId() == (this.getId() + '-actDelete')) {
			aItems.shift();
			for ( var i = 0; i < aItems.length; i++) {
				this.oToolsButton.getMenu().removeItem(aItems[i]);
			}
			return aItems;
		}else{
			return this.oToolsButton.getMenu().removeAllItems();
		}
	}

};

sap.ui.ux3.FeedChunk.prototype.indexOfActionMenuItem = function(oActionMenuItem) {

	if (this.oToolsButton){
		var iIndex = this.oToolsButton.getMenu().indexOfItem(oActionMenuItem);
		// if there is a delete item adjust index
		var aItems = this.oToolsButton.getMenu().getItems();
		if (aItems.length > 0 && aItems[0].getId() == (this.getId() + '-actDelete')) {
			iIndex--;
		}
		return iIndex;
	}

};

sap.ui.ux3.FeedChunk.prototype.destroyActionMenuItems = function() {

	if (this.oToolsButton){
		// if there is a delete item only remove all other items
		var aItems = this.oToolsButton.getMenu().getItems();
		if (aItems.length > 0 && aItems[0].getId() == (this.getId() + '-actDelete')) {
			this.removeAllActionMenuItems();
		}else{
			this.oToolsButton.getMenu().destroyItems();
		}
	}

	return this;

};

sap.ui.ux3.FeedChunk.prototype.bindActionMenuItems = function(sPath, oTemplate, oSorter, aFilters) {

	this.initToolsButton();
	// as parent of items is the menu use menus aggregation
	this.oToolsButton.getMenu().bindItems(sPath, oTemplate, oSorter, aFilters);

	return this;

};

sap.ui.ux3.FeedChunk.prototype.unbindActionMenuItems = function() {

	if (this.oToolsButton){
		this.oToolsButton.getMenu().unbindItems();
	}

	return this;

};

/*
 * Overwrite standard getter for feeder thumbnail source:
 * If not set and feedChunk is child of a Feed or FeedChunk use the thumbnailsource of the parent
 * So it must not be set manual for each sub-control and is always synchron
 */
sap.ui.ux3.FeedChunk.prototype.getFeederThumbnailSrc = function() {
	var sThumbnailSrc =  this.getProperty("feederThumbnailSrc");

	if (!sThumbnailSrc || sThumbnailSrc == "") {
		var oParent = this.getParent();
		if (oParent &&(oParent instanceof sap.ui.ux3.Feed || oParent instanceof sap.ui.ux3.FeedChunk)) {
			sThumbnailSrc = oParent.getFeederThumbnailSrc();
		}
	}

	return sThumbnailSrc;
};

/*
 * Overwrite standard getter for feeder sender:
 * If not set and feedChunk is child of a Feed or FeedChunk use the feederSender of the parent
 * So it must not be set manual for each sub-control and is always synchron
 */
sap.ui.ux3.FeedChunk.prototype.getFeederSender = function() {
	var sSender =  this.getProperty("feederSender");

	if (!sSender || sSender == "") {
		var oParent = this.getParent();
		if (oParent &&(oParent instanceof sap.ui.ux3.Feed || oParent instanceof sap.ui.ux3.FeedChunk)) {
			sSender = oParent.getFeederSender();
		}
	}

	return sSender;
};

sap.ui.ux3.FeedChunk.prototype.initHCMMenuButton = function(){

	if (!this.oHCMMenuButton) {
		this.oHCMMenuButton = new sap.ui.commons.MenuButton(this.getId()+"-HCMMenu",{
			lite: true
		}).setParent(this);
		this.oHCMMenuButton.attachEvent('itemSelected', this.handleHCMMenuButtonSelected, this); // attach event this way to have the right this-reference in handler
	}

};

/**
 * Sets the MenuButton for HCM applications
 * This is NOT an official API method and must be only uses with approval of SAPUI5 team
 * @param(sap.ui.commons.Menu) oMenu Menu control
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.setHCMMenu = function(oMenu) {

	this.initHCMMenuButton();
	this.oHCMMenuButton.setMenu(oMenu);

	return this;

};

/**
 * Handler for HCM menu button item selection
 *
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.handleHCMMenuButtonSelected = function(oEvent){

	this.fireEvent("HCMMenuItemSelected", oEvent.mParameters);

};
}; // end of sap/ui/ux3/FeedChunk.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingInspector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ThingInspector.
jQuery.sap.declare("sap.ui.ux3.ThingInspector");




/**
 * Constructor for a new ThingInspector.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFirstTitle firstTitle} : string</li>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getSecondTitle secondTitle} : string</li>
 * <li>{@link #getFollowState followState} : sap.ui.ux3.FollowActionState (default: sap.ui.ux3.FollowActionState.Default)</li>
 * <li>{@link #getFlagState flagState} : boolean (default: false)</li>
 * <li>{@link #getFavoriteState favoriteState} : boolean (default: false)</li>
 * <li>{@link #getFavoriteActionEnabled favoriteActionEnabled} : boolean (default: true)</li>
 * <li>{@link #getUpdateActionEnabled updateActionEnabled} : boolean (default: true)</li>
 * <li>{@link #getFollowActionEnabled followActionEnabled} : boolean (default: true)</li>
 * <li>{@link #getFlagActionEnabled flagActionEnabled} : boolean (default: true)</li>
 * <li>{@link #getHeaderType headerType} : sap.ui.ux3.ThingViewerHeaderType (default: sap.ui.ux3.ThingViewerHeaderType.Standard)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getActions actions} : sap.ui.ux3.ThingAction[]</li>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.ux3.ThingGroup[]</li>
 * <li>{@link #getFacets facets} : sap.ui.ux3.NavigationItem[]</li>
 * <li>{@link #getFacetContent facetContent} : sap.ui.ux3.ThingGroup[]</li>
 * <li>{@link #getActionBar actionBar} : sap.ui.ux3.ActionBar</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedFacet selectedFacet} : string | sap.ui.ux3.NavigationItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.ThingInspector#event:actionSelected actionSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.ThingInspector#event:facetSelected facetSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.ThingInspector#event:feedSubmit feedSubmit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.Overlay#constructor sap.ui.ux3.Overlay}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Thing Inspector
 * @extends sap.ui.ux3.Overlay
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.ui.ux3.ThingInspector
 */
sap.ui.ux3.Overlay.extend("sap.ui.ux3.ThingInspector", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"firstTitle" : {type : "string", group : "Misc", defaultValue : null},
		"type" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"secondTitle" : {type : "string", group : "Misc", defaultValue : null},
		"followState" : {type : "sap.ui.ux3.FollowActionState", group : "Misc", defaultValue : sap.ui.ux3.FollowActionState.Default},
		"flagState" : {type : "boolean", group : "Misc", defaultValue : false},
		"favoriteState" : {type : "boolean", group : "Misc", defaultValue : false},
		"favoriteActionEnabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"updateActionEnabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"followActionEnabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"flagActionEnabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"headerType" : {type : "sap.ui.ux3.ThingViewerHeaderType", group : "Misc", defaultValue : sap.ui.ux3.ThingViewerHeaderType.Standard}
	},
	aggregations : {
    	"actions" : {type : "sap.ui.ux3.ThingAction", multiple : true, singularName : "action"}, 
    	"headerContent" : {type : "sap.ui.ux3.ThingGroup", multiple : true, singularName : "headerContent"}, 
    	"facets" : {type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "facet"}, 
    	"facetContent" : {type : "sap.ui.ux3.ThingGroup", multiple : true, singularName : "facetContent"}, 
    	"actionBar" : {type : "sap.ui.ux3.ActionBar", multiple : false}, 
    	"thingViewer" : {type : "sap.ui.ux3.ThingViewer", multiple : false, visibility : "hidden"}
	},
	associations : {
		"selectedFacet" : {type : "sap.ui.ux3.NavigationItem", multiple : false}
	},
	events : {
		"actionSelected" : {}, 
		"facetSelected" : {allowPreventDefault : true}, 
		"feedSubmit" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.ThingInspector with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.ThingInspector.extend
 * @function
 */

sap.ui.ux3.ThingInspector.M_EVENTS = {'actionSelected':'actionSelected','facetSelected':'facetSelected','feedSubmit':'feedSubmit'};


/**
 * Getter for property <code>firstTitle</code>.
 * First Line of the Thing Inspector Title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>firstTitle</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getFirstTitle
 * @function
 */

/**
 * Setter for property <code>firstTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFirstTitle  new value for property <code>firstTitle</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setFirstTitle
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Thing type
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setType
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Thing Icon Url
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setIcon
 * @function
 */


/**
 * Getter for property <code>secondTitle</code>.
 * Second Line of the Thing Inspector Title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>secondTitle</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getSecondTitle
 * @function
 */

/**
 * Setter for property <code>secondTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSecondTitle  new value for property <code>secondTitle</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setSecondTitle
 * @function
 */


/**
 * Getter for property <code>followState</code>.
 * Follow State of a Thing
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.ui.ux3.FollowActionState} the value of property <code>followState</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getFollowState
 * @function
 */

/**
 * Setter for property <code>followState</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.ui.ux3.FollowActionState} oFollowState  new value for property <code>followState</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setFollowState
 * @function
 */


/**
 * Getter for property <code>flagState</code>.
 * State of Flag Action
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>flagState</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getFlagState
 * @function
 */

/**
 * Setter for property <code>flagState</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFlagState  new value for property <code>flagState</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setFlagState
 * @function
 */


/**
 * Getter for property <code>favoriteState</code>.
 * State Of favorite Action
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>favoriteState</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getFavoriteState
 * @function
 */

/**
 * Setter for property <code>favoriteState</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFavoriteState  new value for property <code>favoriteState</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setFavoriteState
 * @function
 */


/**
 * Getter for property <code>favoriteActionEnabled</code>.
 * Favorite action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>favoriteActionEnabled</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getFavoriteActionEnabled
 * @function
 */

/**
 * Setter for property <code>favoriteActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFavoriteActionEnabled  new value for property <code>favoriteActionEnabled</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setFavoriteActionEnabled
 * @function
 */


/**
 * Getter for property <code>updateActionEnabled</code>.
 * Update action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>updateActionEnabled</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getUpdateActionEnabled
 * @function
 */

/**
 * Setter for property <code>updateActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bUpdateActionEnabled  new value for property <code>updateActionEnabled</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setUpdateActionEnabled
 * @function
 */


/**
 * Getter for property <code>followActionEnabled</code>.
 * Follow action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>followActionEnabled</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getFollowActionEnabled
 * @function
 */

/**
 * Setter for property <code>followActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFollowActionEnabled  new value for property <code>followActionEnabled</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setFollowActionEnabled
 * @function
 */


/**
 * Getter for property <code>flagActionEnabled</code>.
 * Flag action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>flagActionEnabled</code>
 * @public
 * @name sap.ui.ux3.ThingInspector#getFlagActionEnabled
 * @function
 */

/**
 * Setter for property <code>flagActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFlagActionEnabled  new value for property <code>flagActionEnabled</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setFlagActionEnabled
 * @function
 */


/**
 * Getter for property <code>headerType</code>.
 * Defines which header type should be used.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.ux3.ThingViewerHeaderType} the value of property <code>headerType</code>
 * @public
 * @since 1.16.3
 * @name sap.ui.ux3.ThingInspector#getHeaderType
 * @function
 */

/**
 * Setter for property <code>headerType</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.ux3.ThingViewerHeaderType} oHeaderType  new value for property <code>headerType</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * @name sap.ui.ux3.ThingInspector#setHeaderType
 * @function
 */


/**
 * Getter for aggregation <code>actions</code>.<br/>
 * Actions of a Thing
 * 
 * @return {sap.ui.ux3.ThingAction[]}
 * @public
 * @name sap.ui.ux3.ThingInspector#getActions
 * @function
 */


/**
 * Inserts a action into the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingAction}
 *          oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the action should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the action is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#insertAction
 * @function
 */

/**
 * Adds some action <code>oAction</code> 
 * to the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingAction}
 *            oAction the action to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#addAction
 * @function
 */

/**
 * Removes an action from the aggregation named <code>actions</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingAction} vAction the action to remove or its index or id
 * @return {sap.ui.ux3.ThingAction} the removed action or null
 * @public
 * @name sap.ui.ux3.ThingInspector#removeAction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>actions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingAction[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ThingInspector#removeAllActions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingAction</code> in the aggregation named <code>actions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingAction}
 *            oAction the action whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ThingInspector#indexOfAction
 * @function
 */
	

/**
 * Destroys all the actions in the aggregation 
 * named <code>actions</code>.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#destroyActions
 * @function
 */


/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * ThingGroups for the header content
 * 
 * @return {sap.ui.ux3.ThingGroup[]}
 * @public
 * @name sap.ui.ux3.ThingInspector#getHeaderContent
 * @function
 */


/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#insertHeaderContent
 * @function
 */

/**
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#addHeaderContent
 * @function
 */

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingGroup} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.ux3.ThingGroup} the removed headerContent or null
 * @public
 * @name sap.ui.ux3.ThingInspector#removeHeaderContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingGroup[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ThingInspector#removeAllHeaderContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingGroup</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ThingInspector#indexOfHeaderContent
 * @function
 */
	

/**
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#destroyHeaderContent
 * @function
 */


/**
 * Getter for aggregation <code>facets</code>.<br/>
 * Thing Inspector facets
 * 
 * @return {sap.ui.ux3.NavigationItem[]}
 * @public
 * @name sap.ui.ux3.ThingInspector#getFacets
 * @function
 */


/**
 * Inserts a facet into the aggregation named <code>facets</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *          oFacet the facet to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facet should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facet is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facet is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#insertFacet
 * @function
 */

/**
 * Adds some facet <code>oFacet</code> 
 * to the aggregation named <code>facets</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oFacet the facet to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#addFacet
 * @function
 */

/**
 * Removes an facet from the aggregation named <code>facets</code>.
 *
 * @param {int | string | sap.ui.ux3.NavigationItem} vFacet the facet to remove or its index or id
 * @return {sap.ui.ux3.NavigationItem} the removed facet or null
 * @public
 * @name sap.ui.ux3.ThingInspector#removeFacet
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>facets</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.NavigationItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ThingInspector#removeAllFacets
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.NavigationItem</code> in the aggregation named <code>facets</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oFacet the facet whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ThingInspector#indexOfFacet
 * @function
 */
	

/**
 * Destroys all the facets in the aggregation 
 * named <code>facets</code>.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#destroyFacets
 * @function
 */


/**
 * Getter for aggregation <code>facetContent</code>.<br/>
 * ThingGroups for content of the selected facet
 * 
 * @return {sap.ui.ux3.ThingGroup[]}
 * @public
 * @name sap.ui.ux3.ThingInspector#getFacetContent
 * @function
 */


/**
 * Inserts a facetContent into the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *          oFacetContent the facetContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facetContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facetContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facetContent is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#insertFacetContent
 * @function
 */

/**
 * Adds some facetContent <code>oFacetContent</code> 
 * to the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oFacetContent the facetContent to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#addFacetContent
 * @function
 */

/**
 * Removes an facetContent from the aggregation named <code>facetContent</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingGroup} vFacetContent the facetContent to remove or its index or id
 * @return {sap.ui.ux3.ThingGroup} the removed facetContent or null
 * @public
 * @name sap.ui.ux3.ThingInspector#removeFacetContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>facetContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingGroup[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.ThingInspector#removeAllFacetContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingGroup</code> in the aggregation named <code>facetContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oFacetContent the facetContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.ThingInspector#indexOfFacetContent
 * @function
 */
	

/**
 * Destroys all the facetContent in the aggregation 
 * named <code>facetContent</code>.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#destroyFacetContent
 * @function
 */


/**
 * Getter for aggregation <code>actionBar</code>.<br/>
 * ActionBar. If no actionBar is set a default ActionBar will be created.
 * 
 * @return {sap.ui.ux3.ActionBar}
 * @public
 * @name sap.ui.ux3.ThingInspector#getActionBar
 * @function
 */


/**
 * Setter for the aggregated <code>actionBar</code>.
 * @param {sap.ui.ux3.ActionBar} oActionBar
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setActionBar
 * @function
 */
	

/**
 * Destroys the actionBar in the aggregation 
 * named <code>actionBar</code>.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#destroyActionBar
 * @function
 */


/**
 * The Facet that is currently selected.
 * 
 *
 * @return {string} Id of the element which is the current target of the <code>selectedFacet</code> association, or null
 * @public
 * @name sap.ui.ux3.ThingInspector#getSelectedFacet
 * @function
 */

/**
 * The Facet that is currently selected.
 * 
 *
 * @param {string | sap.ui.ux3.NavigationItem} vSelectedFacet 
 *    Id of an element which becomes the new target of this <code>selectedFacet</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#setSelectedFacet
 * @function
 */


	
/**
 * Further thing related Action selected 
 *
 * @name sap.ui.ux3.ThingInspector#actionSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of selected ThingAction
 * @param {sap.ui.ux3.ThingAction} oControlEvent.getParameters.action Selected ThingAction
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'actionSelected' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ThingInspector</code>.<br/> itself. 
 *  
 * Further thing related Action selected 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ThingInspector</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#attachActionSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'actionSelected' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#detachActionSelected
 * @function
 */

/**
 * Fire event actionSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of selected ThingAction</li>
 * <li>'action' of type <code>sap.ui.ux3.ThingAction</code> Selected ThingAction</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ThingInspector#fireActionSelected
 * @function
 */


/**
 * Event for facet selection. The application is responsible for displaying the correct content for the selected one. The ThingInspector will currently always mark the first facet as selected. 
 *
 * @name sap.ui.ux3.ThingInspector#facetSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of selected NavigationItem
 * @param {sap.ui.ux3.NavigationItem} oControlEvent.getParameters.item The selected NavigationItem
 * @param {string} oControlEvent.getParameters.key Key of selected NavigationItem
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'facetSelected' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ThingInspector</code>.<br/> itself. 
 *  
 * Event for facet selection. The application is responsible for displaying the correct content for the selected one. The ThingInspector will currently always mark the first facet as selected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ThingInspector</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#attachFacetSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'facetSelected' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#detachFacetSelected
 * @function
 */

/**
 * Fire event facetSelected to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of selected NavigationItem</li>
 * <li>'item' of type <code>sap.ui.ux3.NavigationItem</code> The selected NavigationItem</li>
 * <li>'key' of type <code>string</code> Key of selected NavigationItem</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.ux3.ThingInspector#fireFacetSelected
 * @function
 */


/**
 * Fired when a new feed entry is submitted. 
 *
 * @name sap.ui.ux3.ThingInspector#feedSubmit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.text Feed text
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'feedSubmit' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.ThingInspector</code>.<br/> itself. 
 *  
 * Fired when a new feed entry is submitted. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.ThingInspector</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#attachFeedSubmit
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'feedSubmit' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.ThingInspector#detachFeedSubmit
 * @function
 */

/**
 * Fire event feedSubmit to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'text' of type <code>string</code> Feed text</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.ThingInspector#fireFeedSubmit
 * @function
 */


// Start of sap\ui\ux3\ThingInspector.js




(function() {
	/**
	 * Initialization hook for the Thinginspector. It creates the instance of the
	 * Popup helper service and does some basic configuration for it.
	 *
	 * @private
	 */
	sap.ui.ux3.ThingInspector.prototype.init = function() {
		var oActionBar, that = this;
		sap.ui.ux3.Overlay.prototype.init.apply(this);
		this._oThingViewer = new sap.ui.ux3.ThingViewer(this.getId()+"-thingViewer");
		this.setAggregation("thingViewer",this._oThingViewer);
		this._oThingViewer.attachFacetSelected(function(oEvent) {
			var item = oEvent.getParameters().item;
			if(that.fireFacetSelected({id:item.getId(), key:item.getKey(),item:item})) {
				that.setSelectedFacet(item);
			} else {
				 oEvent.preventDefault();
			}
		});
		this._oSocialActions = {};
		if (this.getActionBar() == null) { 
			oActionBar = new sap.ui.ux3.ActionBar(this.getId()+"-actionBar");
			oActionBar.setShowOpen(false);
			oActionBar.setAlwaysShowMoreMenu(false);
			oActionBar.setDividerWidth("252px");
			oActionBar.attachActionSelected(function (oEvent) {
				var sActionID = oEvent.getParameters().id,
						oBarAction = oEvent.getParameters().action,
						oThingAction;
				if (sActionID.indexOf('Favorite') != -1 ||
				    sActionID.indexOf('Follow') != -1 ||
					sActionID.indexOf('Flag') != -1) {
					if (that._oSocialActions[sActionID]) {
						oThingAction = that._oSocialActions[sActionID];
					} else { 
						oThingAction =  new sap.ui.ux3.ThingAction({
							id: that.getId() + "-" + sActionID.toLowerCase(),
							text: oBarAction.text,
							enabled: oBarAction.enabled
						});
						that._oSocialActions[sActionID] = oThingAction;
					}
					that.fireActionSelected({
						id : sActionID.toLowerCase(),
						action : oThingAction
					});
				} else {
					that.fireActionSelected({
						id : oEvent.getParameters().id,
						action : oEvent.getParameters().action
					});
				}
			});
			oActionBar.attachFeedSubmit(function (oEvent) {
				that.fireFeedSubmit({
					text : oEvent.getParameters().text
				});
			});
			this.setActionBar(oActionBar);
		}
	};
	
	/*
	 * Set size of TI after rendering: If running in Shell we sync with shell
	 * canvas. The size will then be set by the shell.
	 */
	sap.ui.ux3.ThingInspector.prototype.onAfterRendering = function() {
		sap.ui.ux3.Overlay.prototype.onAfterRendering.apply(this,arguments);
		var oShell = this._getShell();
		this._bShell = !!oShell;
		if(!oShell) {
			this._applyChanges({showOverlay:false});
		}
	};
	
	sap.ui.ux3.ThingInspector.prototype.onBeforeRendering = function() {
		sap.ui.ux3.Overlay.prototype.onBeforeRendering.apply(this,arguments);
	}
	
	/**
	 * Destroys this instance of ThingInspector, called by Element#destroy()
	 *
	 * @private
	 */
	sap.ui.ux3.ThingInspector.prototype.exit = function() {
		this._oThingViewer.exit(arguments);
		this._oThingViewer.destroy();
		sap.ui.ux3.Overlay.prototype.exit.apply(this,arguments);
	};
	
	/**
	 * Opens this instance of ThingIspector
	 *
	 * @public
	 */
	sap.ui.ux3.ThingInspector.prototype.open = function(initialFocusId) {
		if (this.getDomRef()) {
			this.rerender();
		}
		sap.ui.ux3.Overlay.prototype.open.apply(this,arguments);
		this._selectDefault();
	};
	
	/**
	 * get Navigation Bar control
	 *
	 * @private
	 */
	sap.ui.ux3.ThingInspector.prototype._getNavBar = function() {
		return this._oThingViewer._oNavBar;
	};
	
	/**
	 * setDefault NavBar selection and fire SelectedItem Event
	 *
	 * @private
	 */
	sap.ui.ux3.ThingInspector.prototype._selectDefault = function() {
		this._oThingViewer._selectDefault();
	};
	
	/**
	 * equal Columns
	 *
	 * @private
	 */
	sap.ui.ux3.ThingInspector.prototype._equalColumns = function() {
		this._oThingViewer._equalColumns();
	};
	
	/**
	 * set trigger value for resize handler
	 * 
	 * @private
	 */
	sap.ui.ux3.ThingInspector.prototype._setTriggerValue = function() {
		this._oThingViewer._setTriggerValue();
	};
	
	/**
	 * Focus Last Element
	 *
	 * @private
	 */
	sap.ui.ux3.ThingInspector.prototype._setFocusLast = function() {
		var oFocus = this.$("thingViewer-toolbar").lastFocusableDomRef();
		if (!oFocus && this.getCloseButtonVisible() && this.$("close").is(":sapFocusable")) {
			oFocus = this.getDomRef("close")
		} else if (!oFocus && this.getOpenButtonVisible() && this.$("openNew").is(":sapFocusable")) {
			oFocus = this.getDomRef("openNew")
		}
		jQuery.sap.focus(oFocus);
	};
	
	/**
	 * Focus First Element
	 *
	 * @private
	 */
	sap.ui.ux3.ThingInspector.prototype._setFocusFirst = function() {
		if (this.getOpenButtonVisible() && this.$("openNew").is(":sapFocusable")) {
			jQuery.sap.focus(this.getDomRef("openNew"));
		} else if (this.getCloseButtonVisible() && this.$("close").is(":sapFocusable")) {
			jQuery.sap.focus(this.getDomRef("close"));
		} else {
			jQuery.sap.focus(this.$("thingViewer-content").firstFocusableDomRef());
		}
	};
	
	/* Redefinition of generated API methods */
	
	// Implementation of API method insertAction
	sap.ui.ux3.ThingInspector.prototype.insertAction = function(oAction, iIndex) {
		if (this.getActionBar()) {
			this.getActionBar().insertBusinessAction(oAction, iIndex);
		}
		return this;
	};
	
	// Implementation of API method addAction
	sap.ui.ux3.ThingInspector.prototype.addAction = function(oAction) {
		if (this.getActionBar()) {
			this.getActionBar().addBusinessAction(oAction);
		}
		return this;
	};
	
	// Implementation of API method removeAction
	sap.ui.ux3.ThingInspector.prototype.removeAction = function(oAction) {
		var result;
		if (this.getActionBar()) {
			result = this.getActionBar().removeBusinessAction(oAction);
		}
		return result;
	};
	
	// Implementation of API method removeAllActions
	sap.ui.ux3.ThingInspector.prototype.removeAllActions = function() {
		var result;
		if (this.getActionBar()) {
			result = this.getActionBar().removeAllBusinessActions();
		}
		return result;
	};
	
	// Implementation of API method getActions
	sap.ui.ux3.ThingInspector.prototype.getActions = function() {
		var result;
		if (this.getActionBar()) {
			result = this.getActionBar().getBusinessActions();
		}
		return result;
	}
	
	// Implementation of API method destroyActions
	sap.ui.ux3.ThingInspector.prototype.destroyActions = function() {
		if (this.getActionBar()) {
			this.getActionBar().destroyBusinessActions();
		}
		return this;
	};
	
	sap.ui.ux3.ThingInspector.prototype.indexOfAction = function(oAction) {
		var result = -1;
		if (this.getActionBar()) {
			result = this.getActionBar().indexOfBusinessAction(oAction);
		}
		return result;
	};
	
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getFacets = function() {
		return this._oThingViewer.getFacets();
	};
	
	// Implementation of API method insertFacet
	sap.ui.ux3.ThingInspector.prototype.insertFacet = function(oFacet, iIndex) {
		this._oThingViewer.insertFacet(oFacet, iIndex);
		return this;
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.addFacet = function(oFacet) {
		this._oThingViewer.addFacet(oFacet);
		return this;
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.removeFacet = function(vElement) {
		return this._oThingViewer.removeFacet(vElement);
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.removeAllFacets = function() {
		return this._oThingViewer.removeAllFacets();
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.destroyFacets = function() {
		this._oThingViewer.destroyFacets();
		return this;
	};
	
	sap.ui.ux3.ThingInspector.prototype.indexOfFacet = function(oFacet) {
		return this._oThingViewer.indexOfFacet(oFacet);
	};
	
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setFollowState = function(oFollowState) {
		if (this.getActionBar()) {
			this.getActionBar().setFollowState(oFollowState);
		}
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getFollowState = function() {
		var result = null;
		if (this.getActionBar()) {
			result = this.getActionBar().getFollowState(); 
		}
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setFlagState = function(oFlagState) {
		if (this.getActionBar()) {
			this.getActionBar().setFlagState(oFlagState);
		}
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getFlagState = function() {
		var result = null;
		if (this.getActionBar()) {
			result = this.getActionBar().getFlagState(); 
		}
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setFavoriteState = function(oFavoriteState) {
		if (this.getActionBar()) {
			this.getActionBar().setFavoriteState(oFavoriteState);
		}
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getFavoriteState = function() {
		var result = null;
		if (this.getActionBar()) {
			result = this.getActionBar().getFavoriteState(); 
		}
		return result;
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setIcon = function(oIcon) {
		this._oThingViewer.setIcon(oIcon);
		if (this.getActionBar()) {
			this.getActionBar().setThingIconURI(oIcon);
		}
		return this;
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getIcon = function() {
		return this._oThingViewer.getIcon();
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setType = function(sType) {
		this._oThingViewer.setType(sType);
		return this;
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getType = function() {
		return this._oThingViewer.getType();
	};
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.insertFacetContent = function(oFacetContent, iIndex) {
		this._oThingViewer.insertFacetContent(oFacetContent, iIndex);
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.addFacetContent = function(oFacetContent) {
		this._oThingViewer.addFacetContent(oFacetContent);
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.removeFacetContent = function(vFacetContent) {
		var result = this._oThingViewer.removeFacetContent(vFacetContent);
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.removeAllFacetContent = function() {
		var result = this._oThingViewer.removeAllFacetContent();
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.destroyFacetContent = function() {
		this._oThingViewer.destroyFacetContent();
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getFacetContent = function() {
		return this._oThingViewer.getFacetContent();
	};
	
	sap.ui.ux3.ThingInspector.prototype.indexOfFacetContent = function(oFacetContent) {
		return this._oThingViewer.indexOfFacetContent(oFacetContent);
	};
	
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setActionBar = function(oActionBar) {
		this._oThingViewer.setActionBar(oActionBar);
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getActionBar = function() {
		return this._oThingViewer.getActionBar();
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.destroyActionBar = function() {
		this._oThingViewer.destroyActionBar();
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.insertHeaderContent = function(oHeaderContent, iIndex) {
		this._oThingViewer.insertHeaderContent(oHeaderContent, iIndex);
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.addHeaderContent = function(oHeaderContent) {
		this._oThingViewer.addHeaderContent(oHeaderContent);
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getHeaderContent = function() {
		return this._oThingViewer.getHeaderContent();
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.removeHeaderContent = function(vHeaderContent) {
		var result = this._oThingViewer.removeHeaderContent(vHeaderContent);
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.removeAllHeaderContent = function() {
		var result = this._oThingViewer.removeAllHeaderContent();
		return result;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.destroyHeaderContent = function() {
		this._oThingViewer.destroyHeaderContent();
		return this;
	};
	
	sap.ui.ux3.ThingInspector.prototype.indexOfHeaderContent = function(oHeaderContent) {
		return this._oThingViewer.indexOfHeaderContent(oHeaderContent);
	};
	
	
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setSelectedFacet = function(selectedFacet) {
		this._oThingViewer.setSelectedFacet(selectedFacet);
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getSelectedFacet = function(selectedFacet) {
		return this._oThingViewer.getSelectedFacet();
	}
	//Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setFavoriteActionEnabled = function(bEnabled) {
		if (this.getActionBar()) {
			this.getActionBar().setShowFavorite(bEnabled);
		}
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getFavoriteActionEnabled = function() {
		var result;
		if (this.getActionBar()) {
			result = this.getActionBar().getShowFavorite();
		}
		return result;
	}
	
	//Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setFlagActionEnabled = function(bEnabled) {
		if (this.getActionBar()) {
			this.getActionBar().setShowFlag(bEnabled);
		}
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getFlagActionEnabled = function() {
		var result;
		if (this.getActionBar()) {
			result = this.getActionBar().getShowFlag();
		}
		return result;
	}
	
	//Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setUpdateActionEnabled = function(bEnabled) {
		if (this.getActionBar()) {
			this.getActionBar().setShowUpdate(bEnabled);
		}
		return this;
	};
	// Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getUpdateActionEnabled = function() {
		var result;
		if (this.getActionBar()) {
			result = this.getActionBar().getShowUpdate();
		}
		return result;
	}
	
	//Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setFollowActionEnabled = function(bEnabled) {
		if (this.getActionBar()) {
			this.getActionBar().setShowFollow(bEnabled);
		}
		return this;
	};
	//Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getFollowActionEnabled = function() {
		var result;
		if (this.getActionBar()) {
			result = this.getActionBar().getShowFollow();
		}
		return result;
	}
	//Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setFirstTitle = function(sTitle) {
		this._oThingViewer.setTitle(sTitle);
	};
	
	//Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getFirstTitle = function() {
		return this._oThingViewer.getTitle();
	};
	
	//Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.setSecondTitle = function(sTitle) {
		this._oThingViewer.setSubtitle(sTitle);
	};
	
	//Implementation of API method
	sap.ui.ux3.ThingInspector.prototype.getSecondTitle = function() {
		return this._oThingViewer.getSubtitle();
	};
	sap.ui.ux3.ThingInspector.prototype.setHeaderType = function(vHeaderType) {
		this._oThingViewer.setHeaderType(vHeaderType);
		return this;
	};
	sap.ui.ux3.ThingInspector.prototype.getHeaderType = function() {
		var result = this._oThingViewer.getHeaderType();
		return result;
	};
	
	sap.ui.ux3.ThingInspector.prototype._applyChanges = function(oChanges) {
		this.oChanges = oChanges;
		if( oChanges.showOverlay ) {
			this.$().removeClass("sapUiUx3TINoFrame");
		}else{
			this.$().addClass("sapUiUx3TINoFrame");
		}
		return this;
	};
}());

}; // end of sap/ui/ux3/ThingInspector.js
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Exact') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Exact.
jQuery.sap.declare("sap.ui.ux3.Exact");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Exact.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getResultText resultText} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSettingsMenu settingsMenu} : sap.ui.commons.Menu</li>
 * <li>{@link #getAttributes attributes} <strong>(default aggregation)</strong> : sap.ui.ux3.ExactAttribute[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.ux3.Exact#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.ux3.Exact#event:refineSearch refineSearch} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A comprehensive UI design approach with graphical and functional elements for searching data, exploring data, and acting on the data
 * ("Explore and Act (Exact) Pattern").
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @experimental Since version 1.2. 
 * API is not yet finished and might change completely
 * @name sap.ui.ux3.Exact
 */
sap.ui.core.Control.extend("sap.ui.ux3.Exact", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getResultArea", "getSearchField"
	],

	// ---- control specific ----
	library : "sap.ui.ux3",
	properties : {
		"resultText" : {type : "string", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "attributes",
	aggregations : {
    	"settingsMenu" : {type : "sap.ui.commons.Menu", multiple : false}, 
    	"attributes" : {type : "sap.ui.ux3.ExactAttribute", multiple : true, singularName : "attribute"}, 
    	"controls" : {type : "sap.ui.core.Control", multiple : true, singularName : "control", visibility : "hidden"}
	},
	events : {
		"search" : {}, 
		"refineSearch" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.ux3.Exact with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.ux3.Exact.extend
 * @function
 */

sap.ui.ux3.Exact.M_EVENTS = {'search':'search','refineSearch':'refineSearch'};


/**
 * Getter for property <code>resultText</code>.
 * A title text which is displayed above the result section
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>resultText</code>
 * @public
 * @name sap.ui.ux3.Exact#getResultText
 * @function
 */

/**
 * Setter for property <code>resultText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sResultText  new value for property <code>resultText</code>
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#setResultText
 * @function
 */


/**
 * Getter for aggregation <code>settingsMenu</code>.<br/>
 * Defines the 'Settings' button in the browse section tool bar
 * 
 * @return {sap.ui.commons.Menu}
 * @public
 * @name sap.ui.ux3.Exact#getSettingsMenu
 * @function
 */


/**
 * Setter for the aggregated <code>settingsMenu</code>.
 * @param {sap.ui.commons.Menu} oSettingsMenu
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#setSettingsMenu
 * @function
 */
	

/**
 * Destroys the settingsMenu in the aggregation 
 * named <code>settingsMenu</code>.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#destroySettingsMenu
 * @function
 */


/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * The attributes which shall be available to refine the search
 * 
 * <strong>Note</strong>: this is the default aggregation for Exact.
 * @return {sap.ui.ux3.ExactAttribute[]}
 * @public
 * @name sap.ui.ux3.Exact#getAttributes
 * @function
 */


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#insertAttribute
 * @function
 */

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#addAttribute
 * @function
 */

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.ui.ux3.ExactAttribute} the removed attribute or null
 * @public
 * @name sap.ui.ux3.Exact#removeAttribute
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactAttribute[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.ux3.Exact#removeAllAttributes
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ExactAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.ux3.Exact#indexOfAttribute
 * @function
 */
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#destroyAttributes
 * @function
 */


/**
 * Event is fired when the search button is clicked 
 *
 * @name sap.ui.ux3.Exact#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The query string which was entered in the search field.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.ui.ux3.Exact</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Exact</code>.<br/> itself. 
 *  
 * Event is fired when the search button is clicked 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Exact</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.ui.ux3.Exact</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The query string which was entered in the search field.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Exact#fireSearch
 * @function
 */


/**
 * Event which is fired when an attribute is selected or unselected. 
 *
 * @name sap.ui.ux3.Exact#refineSearch
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The query string which was entered in the search field
 * @param {sap.ui.ux3.ExactAttribute} oControlEvent.getParameters.changedAttribute The attribute which was selected or unselected recently
 * @param {object} oControlEvent.getParameters.allSelectedAttributes Array of all selected ExcatAttribute.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'refineSearch' event of this <code>sap.ui.ux3.Exact</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.ux3.Exact</code>.<br/> itself. 
 *  
 * Event which is fired when an attribute is selected or unselected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.ux3.Exact</code>.<br/> itself.
 *
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#attachRefineSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'refineSearch' event of this <code>sap.ui.ux3.Exact</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.ux3.Exact#detachRefineSearch
 * @function
 */

/**
 * Fire event refineSearch to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The query string which was entered in the search field</li>
 * <li>'changedAttribute' of type <code>sap.ui.ux3.ExactAttribute</code> The attribute which was selected or unselected recently</li>
 * <li>'allSelectedAttributes' of type <code>object</code> Array of all selected ExcatAttribute.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.ux3.Exact#fireRefineSearch
 * @function
 */


/**
 * Returns the ExactArea representing the result section. Arbitrary content can be added here.
 *
 * @name sap.ui.ux3.Exact.prototype.getResultArea
 * @function

 * @type sap.ui.ux3.ExactArea
 * @public
 */


/**
 * Returns the SearchField control which is used by the Exact control.
 *
 * @name sap.ui.ux3.Exact.prototype.getSearchField
 * @function

 * @type sap.ui.commons.SearchField
 * @public
 */


// Start of sap\ui\ux3\Exact.js



jQuery.sap.require('sap.ui.commons.SearchField'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Menu'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.TextView'); // unlisted dependency retained



(function() {

/**
 * Does the setup when the Exact is created.
 * @private
 */
sap.ui.ux3.Exact.prototype.init = function(){
	var that = this;

	//Init the used subcontrols
	//Init Search Area
	this._searchArea = new sap.ui.ux3.ExactArea(this.getId()+"-searchArea", {toolbarVisible: false});
	this._searchArea.addStyleClass("sapUiUx3ExactSearchArea");
	this.addAggregation("controls", this._searchArea);

	this._search_input = new sap.ui.commons.SearchField(this.getId()+"-searchTF", {enableListSuggest: false});
	this._search_input.attachSearch(function(oEvent){
		_handleSearch(that, oEvent);
	});
	this._search_input.addStyleClass("sapUiUx3ExactSearchText");
	this._searchArea.addContent(this._search_input);

	//Init Browse Area
	this._browser = new sap.ui.ux3.ExactBrowser(this.getId()+"-browser", {title: "Attributes"}); //TODO: I18n
	this._browser.addStyleClass("sapUiUx3ExactBrowseArea");
	this.addAggregation("controls", this._browser);
	this._browser.attachAttributeSelected(function(oEvent){
		_handleAttributeSelected(that, oEvent);
	});

	//Init Result Area
	this._resultArea = new sap.ui.ux3.ExactArea(this.getId()+"-resultArea");
	this.addAggregation("controls", this._resultArea);

	this._resultText = new sap.ui.commons.TextView(this.getId()+"-resultAreaTitle", {design: sap.ui.commons.TextViewDesign.Bold});
	this._resultText.addStyleClass("sapUiUx3ExactViewTitle");
	this.addAggregation("controls", this._resultText);

	this._bDetailsVisible = false;
};


//*** Overridden API functions ***


sap.ui.ux3.Exact.prototype.getSettingsMenu = function() {
	return this._browser.getOptionsMenu();
};


sap.ui.ux3.Exact.prototype.setSettingsMenu = function(oSettingsMenu) {
	this._browser.setOptionsMenu(oSettingsMenu);
	return this;
};


sap.ui.ux3.Exact.prototype.destroySettingsMenu = function() {
	this._browser.destroyOptionsMenu();
	return this;
};


sap.ui.ux3.Exact.prototype.getResultText = function() {
	return this._resultText.getText();
};


sap.ui.ux3.Exact.prototype.setResultText = function(sResultText) {
	this._resultText.setText(sResultText);
	return this;
};


sap.ui.ux3.Exact.prototype.getAttributes = function() {
	return this._browser.getAttributes();
};


sap.ui.ux3.Exact.prototype.insertAttribute = function(oAttribute, iIndex) {
	this._browser.insertAttribute(oAttribute, iIndex);
	return this;
};


sap.ui.ux3.Exact.prototype.addAttribute = function(oAttribute) {
	this._browser.addAttribute(oAttribute);
	return this;
};


sap.ui.ux3.Exact.prototype.removeAttribute = function(vElement) {
	return this._browser.removeAttribute(vElement);
};


sap.ui.ux3.Exact.prototype.removeAllAttributes = function() {
	return this._browser.removeAllAttributes();
};


sap.ui.ux3.Exact.prototype.indexOfAttribute = function(oAttribute) {
	return this._browser.indexOfAttribute(oAttribute);
};


sap.ui.ux3.Exact.prototype.destroyAttributes = function() {
	this._browser.destroyAttributes();
	return this;
};


sap.ui.ux3.Exact.prototype.getResultArea = function() {
	return this._resultArea;
};

sap.ui.ux3.Exact.prototype.getSearchField = function() {
	return this._search_input;
};


//*** Behavior functions ***





//*** Private helper functions ***


//Handles the search event
var _handleSearch = function(oThis, oEvent){
	oThis._sSearchQuery = oEvent.getParameter("query"); //Store the value until next Search
	oThis.fireSearch({query: oThis._sSearchQuery});
	oThis._bDetailsVisible = true;
	oThis.invalidate();
};


//Handles attribute selections
var _handleAttributeSelected = function(oThis, oEvent){
	oThis.fireRefineSearch({
		query: oThis._sSearchQuery,
		changedAttribute: oEvent.getParameter("attribute"),
		allSelectedAttributes: oEvent.getParameter("allAttributes")
	});
};


}());
}; // end of sap/ui/ux3/Exact.js
