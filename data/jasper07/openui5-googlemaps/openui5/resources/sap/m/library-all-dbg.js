// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.m.library-all');
if ( !jQuery.sap.isDeclared('sap.m.ActionSheetRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.ActionSheetRenderer");

/**
 * @class ActionSheet renderer. 
 * @static
 */
sap.m.ActionSheetRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ActionSheetRenderer.render = function(oRm, oControl){ 
	var aActionButtons = oControl.getButtons(), i, bMixedButtons;
	
	for(i = 0 ; i < aActionButtons.length ; i++){
		if(aActionButtons[i].getIcon()){
			bMixedButtons = true;
			break;
		}
	}
	
	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMActionSheet");
	if(bMixedButtons){
		oRm.addClass("sapMActionSheetMixedButtons");
	}
	oRm.writeClasses();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	
	oRm.write(">");
	
	for(i = 0 ; i < aActionButtons.length ; i++){
		oRm.renderControl(aActionButtons[i].addStyleClass("sapMActionSheetButton"));
	}
	 
	if((jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && sap.ui.Device.system.phone)) && oControl.getShowCancelButton()){
		oRm.renderControl(oControl._getCancelButton());
	}
	
	oRm.write("</div>");
};

}; // end of sap/m/ActionSheetRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.BarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.BarRenderer");

/**
 * @class Bar renderer.
 * @static
 */
sap.m.BarRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.BarRenderer.render = function(oRenderManager, oControl) { 
	var i = 0;

	//_context is set by the page control
	switch (oControl._context) {
	case 'header':
		//render header element 
		oRenderManager.write("<header");
		break;
	case 'footer':
		//render footer element 
		oRenderManager.write("<footer");
		oRenderManager.addClass("sapMFooter-CTX");
		break;
	default: 
		//render div element as default 
		oRenderManager.write("<div");
		break;
	}
	oRenderManager.writeControlData(oControl);
	oRenderManager.addClass("sapMBar");

	if (oControl.getTranslucent() && (sap.ui.Device.support.touch  || jQuery.sap.simulateMobileOnDesktop)) {
		oRenderManager.addClass("sapMBarTranslucent");
	}

	oRenderManager.addClass("sapMBar-CTX");
	oRenderManager.writeClasses();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRenderManager.writeAttributeEscaped("title", sTooltip);
	}
	
	oRenderManager.write(">"); 

	//left content area
	oRenderManager.write("<div id='"); 
	oRenderManager.write(oControl.getId());
	oRenderManager.write("-BarLeft' class='sapMBarLeft' >");
	var aLContent = oControl.getContentLeft();
	for(i=0; i< aLContent.length; i++){
		oRenderManager.renderControl(aLContent[i]);
	}
	oRenderManager.write("</div>");

	//middle content area 
	oRenderManager.write("<div id='"); 
	oRenderManager.write(oControl.getId());
	oRenderManager.write("-BarMiddle' class='sapMBarMiddle' >");
	if (oControl.getEnableFlexBox()){
		oControl._oflexBox = oControl._oflexBox || new sap.m.HBox(oControl.getId() + "-BarPH", {alignItems: "Center"}).addStyleClass("sapMBarPH").setParent(oControl, null, true);
		aMContent = oControl.getContentMiddle();
		for(i=0; i<aMContent.length; i++){
			oControl._oflexBox.addItem(aMContent[i]);
		}
		oRenderManager.renderControl(oControl._oflexBox);
	} else {
		oRenderManager.write("<div id='" + oControl.getId() + "-BarPH' class='sapMBarPH' >"); //place holder
		var aMContent = oControl.getContentMiddle();
		for(i=0; i<aMContent.length; i++){
			oRenderManager.renderControl(aMContent[i]);
		}
		oRenderManager.write("</div>");
	}
	oRenderManager.write("</div>");


	//right content area
	oRenderManager.write("<div id='" + oControl.getId() + "-BarRight'");
	oRenderManager.addClass('sapMBarRight');
	if(sap.ui.getCore().getConfiguration().getRTL()){
		oRenderManager.addClass("sapMRTL");
	}
	oRenderManager.writeClasses();
	oRenderManager.write(">");
	var aRContent = oControl.getContentRight();
	for(i=0; i<aRContent.length; i++){
		oRenderManager.renderControl(aRContent[i]);
	}
	oRenderManager.write("</div>");
	
	switch (oControl._context) {
	case 'header':
		oRenderManager.write("</header>");
		break;
	case 'footer':
		oRenderManager.write("</footer>");
		break;
	default: 
		oRenderManager.write("</div>");
		break;
	}
	
};
}; // end of sap/m/BarRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.BusyDialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.BusyDialogRenderer");

/**
 * @class BusyDialog renderer. 
 * @static
 */
sap.m.BusyDialogRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.BusyDialogRenderer.render = function(oRm, oControl){ 
	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMBusyDialog sapMCommonDialog");
	if(jQuery.device.is.iphone){
		oRm.addClass("sapMDialogHidden");
	}
	if(!oControl._isPlatformDependent) {
		if(!oControl.getText() && !oControl.getTitle() && !oControl.getShowCancelButton()) {
			oRm.addClass("sapMBusyDialogSimple");
		}
	}
	oRm.writeClasses();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	oRm.write(">");
	if(oControl.getTitle()) {
		oRm.write("<header class=\"sapMDialogTitle\">");
		oRm.writeEscaped(oControl.getTitle());
		oRm.write("</header>");
	}
	if(sap.ui.Device.os.ios || !oControl._isPlatformDependent) {
		oRm.renderControl(oControl._oLabel);
		oRm.renderControl(oControl._busyIndicator);
	} else {
		oRm.renderControl(oControl._busyIndicator);
		oRm.renderControl(oControl._oLabel);
	}
	
	if(oControl.getShowCancelButton()){
		oRm.write("<footer class='sapMBusyDialogFooter sapMFooter-CTX'>");
		oRm.renderControl(oControl._oButton);
		oRm.write("</footer>");
	}
	oRm.write("</div>");
};

}; // end of sap/m/BusyDialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.BusyIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.BusyIndicatorRenderer");

/**
 * @class BusyIndicator renderer. 
 * @static
 */
sap.m.BusyIndicatorRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.BusyIndicatorRenderer.render = function(oRm, oControl){ 

	var sSize = oControl.getSize();
	var iDesignClass = "";
	
	if(oControl.getDesign() == "auto") {
		iDesignClass = "sapMBusyIndicator";
	} else {
		iDesignClass = oControl.getDesign() == "dark" ? "sapMBusyIndicatorDark" : "sapMBusyIndicatorLight";
	}
	
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass(iDesignClass);
	oRm.writeClasses();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	if(!oControl.getVisible()) {
		oRm.addStyle("visibility", "hidden");
		oRm.writeStyles();
	}
	oRm.write(">");
	
	if(oControl.getCustomIcon()){
		oRm.renderControl(oControl._iconImage);
	}else if (oControl._bUseSvg){
		this._renderSvg(oRm, oControl, sSize);
	}else if (oControl._bUseCanvas){
		this._renderCanvas(oRm, oControl, sSize);
	}else{
		this._renderNative(oRm, oControl, sSize);
	}
	
	if (oControl.getText()) {
		oRm.renderControl(oControl._oLabel);
	}
	
	oRm.write("</div>");
};

// SVG based loading indicator for blue crystal 
sap.m.BusyIndicatorRenderer._renderSvg = function(oRm, oControl, sSize){
	oRm.write('<svg');
	oRm.writeAttribute('id', oControl.getId() +  '-svg');
	oRm.writeAttribute('viewBox','0 0 100 100'); 
	oRm.writeAttribute('class','sapMBusySvg'); 
	if(sSize){
		oRm.addStyle('width', sSize);
		oRm.addStyle('height', sSize);
		oRm.writeStyles();
	}
	oRm.write('><g transform = translate(50,50)>');
	oRm.write('<path d="M0,-36A36,36 0 1,0 36,0" stroke-width="20%" fill="none" class="sapMSpinSvg">');
	oRm.write('<animateTransform attributeName="transform" attributeType="XML" type="rotate" ');
	oRm.write('from="0" to="360" dur="1.1s" repeatCount="indefinite" />');
	oRm.write('</path></g></svg>');
};

// Canvas based loading indicator for blue crystal 
sap.m.BusyIndicatorRenderer._renderCanvas = function(oRm, oControl, sSize){
	oRm.write('<canvas');
	oRm.writeAttribute("id", oControl.getId() +  "-canvas");
	oRm.writeAttribute("class","sapMSpinCanvas"); 
	oRm.writeAttribute("width","32"); // initially 2em * 16px
	oRm.writeAttribute("height","32");
	if(sSize){
		oRm.addStyle('width', sSize);
		oRm.addStyle('height', sSize);
		oRm.writeStyles();
	}
	oRm.write('></canvas>');
};

// "Native" ios and android style for mvi
sap.m.BusyIndicatorRenderer._renderNative = function(oRm, oControl, sSize){

	var iSpinBar = (oControl._bIosStyle) ? 13 :4;
	
	oRm.write("<div");
	oRm.writeAttribute("class","sapMSpinner"); 
	if(sSize){
		oRm.addStyle('width', sSize);
		oRm.addStyle('height', sSize);
		oRm.writeStyles();
	}
	oRm.write(">");

	for (var i=1; i<iSpinBar; i++) {
		var sBarClass = 'sapMSpinBar' + i;
		if(!oControl._bIosStyle) {
			if(i === 3) {
				var sBarClass1 = 'sapMSpinBar' + 4;
				oRm.write('<div class="'+ sBarClass + '"><div class="'+ sBarClass1 + '"></div></div>');
				break;
			}
		}
		oRm.write('<div class="'+ sBarClass + '"></div>');
	}
	oRm.write("</div>");
}; 

}; // end of sap/m/BusyIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ButtonRenderer");

/**
 * @class Button renderer.
 * @static
 */
sap.m.ButtonRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.m.ButtonRenderer.render = function(rm, oButton) {

	// return immediately if control is invisible
	if (!oButton.getVisible()) {
		return;
	}

	// get control properties
	var sType = oButton.getType();
	var sWidth = oButton.getWidth();
	var bEnabled = oButton.getEnabled();
	var bExtraContentDiv = false;

	// start button tag
	rm.write("<button type=\"button\"");
	rm.writeControlData(oButton);

	// button style class
	if (sType !== sap.m.ButtonType.Unstyled) {
		rm.addClass("sapMBtn");
	}

	if (sap.ui.Device.system.desktop) {
		rm.addClass("sapMBtnDesktop");
	}

	// special for platform independent themes (like BlueCrystal)
	if (!oButton._isPlatformDependent) {

		// set padding depending on icons left or right or none
		if (!oButton.getIcon()) {
			if (sType != sap.m.ButtonType.Back && sType != sap.m.ButtonType.Up) {
				rm.addClass("sapMBtnPaddingLeft");
			}

			if (oButton.getText()) {
				rm.addClass("sapMBtnPaddingRight");
			}
		} else {
			if (oButton.getIcon() && oButton.getText() && oButton.getIconFirst()) {
				rm.addClass("sapMBtnPaddingRight");
			}

			if (oButton.getIcon() && oButton.getText() && !oButton.getIconFirst()) {
				rm.addClass("sapMBtnPaddingLeft");
			}
		}
	}

	if (oButton._isPlatformDependent) { //platform dependent themes (like MVI)

		// check if button is disabled
		if (!bEnabled) {
			if (sType == sap.m.ButtonType.Back || sType == sap.m.ButtonType.Up) {
				rm.addClass("sapMBtn" + jQuery.sap.escapeHTML(sType) + "Disabled");
			} else {
				if (sType != sap.m.ButtonType.Unstyled) {
					rm.addClass("sapMBtnDisabled");
				}
			}
		} else {
			if (sType != "" && sType != sap.m.ButtonType.Unstyled) {
				rm.addClass("sapMBtn" + jQuery.sap.escapeHTML(sType));
			}
		}
	} else if (sType !== sap.m.ButtonType.Unstyled) {

		// platform independent themes (like BlueCrystal)
		if (sType !== "") {
			rm.addClass("sapMBtn" + jQuery.sap.escapeHTML(sType));
		}

		// check if button is disabled
		if (!bEnabled) {
			rm.addClass("sapMBtnDisabled");
			rm.writeAttribute("tabindex", "-1");
		} else if( sap.ui.Device.system.desktop ) {
			rm.writeAttribute("tabindex", "0");

			// add classes for focus outline;
			rm.addClass("sapMFocusable");
			switch (sType) {
				case sap.m.ButtonType.Accept:
				case sap.m.ButtonType.Reject:
				case sap.m.ButtonType.Emphasized:
					rm.addClass("sapMBtnInverted");
			}
		}
	}

	// only for iOS buttons in bar control: if only an icon and no text is provided the button should be transparent and the active state is a background glow 
	if (oButton.getIcon() && !oButton.getText() && sType != sap.m.ButtonType.Back){
		if (!bEnabled) {
			rm.addClass("sapMBtnIconDisabled");
		} else {
			rm.addClass("sapMBtnIcon");
		}
	}

	// set user defined width
	if (sWidth != "" || sWidth.toLowerCase() == "auto") {
		bExtraContentDiv = false;
		rm.writeAttribute("style", "width:" + sWidth + ";");
	}

	// add all classes to button tag
	rm.writeClasses();

	var sTooltip = oButton.getTooltip_AsString();

	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}

	// close start button tag
	rm.write(">");

	// hook for inheriting controls to add their HTML
	if (this.renderButtonContentBefore) {
		this.renderButtonContentBefore(rm, oButton);
	}

	// check if additional content-DIV needs to rendered
	if (sType === sap.m.ButtonType.Accept) {
		bExtraContentDiv = true;
	}

	if (sType === sap.m.ButtonType.Reject) {
		bExtraContentDiv = true;
	}

	if (sType === sap.m.ButtonType.Up) {
		bExtraContentDiv = true;
	}

	// special for platform independent themes (like BlueCrystal)
	if (!oButton._isPlatformDependent && sType === sap.m.ButtonType.Back) {
		bExtraContentDiv = true;
	}

	if (oButton.getIcon()) {
		bExtraContentDiv = true;
	}

	// render button content tag if image control is loaded	
	if (bExtraContentDiv) {
		rm.write("<div");
		if (sType != sap.m.ButtonType.Unstyled) {
			rm.addClass("sapMBtnContent");

			if(oButton.getIcon()) {
				rm.addClass("sapMBtnContentWithIcon");
			}

			rm.writeClasses();
		}
		rm.write(">");
	}

	// special for platform independent themes (like BlueCrystal)
	if (!oButton._isPlatformDependent) {

		// set image for internal image control (back)
		var sBackURI = sap.ui.core.IconPool.getIconURI("nav-back");
		this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Back, sBackURI);
		this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Up, sBackURI);
	} else {

		// special for non iOS
		if (!sap.ui.Device.os.ios) {

			// set image for internal image control (accept)
			var sAcceptURI = sap.ui.core.IconPool.getIconURI("accept");
			this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Accept, sAcceptURI);
	
			// set image for internal image control (reject)
			var sRejectURI = sap.ui.core.IconPool.getIconURI("decline");
			this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Reject, sRejectURI);

			// set image for internal image control (up)
			var sUpURI = sap.ui.core.IconPool.getIconURI("navigation-left-arrow");
			this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Up, sUpURI);
		}
	}

	// write icon left
	if (oButton.getIcon() && oButton.getIconFirst()) {
		this.writeImgHtml(rm, oButton);
	}

	// write button text
	this.writeTextHtml(rm, oButton, bExtraContentDiv, sType);

	// write icon right
	if (oButton.getIcon() && !oButton.getIconFirst()) {
		this.writeImgHtml(rm, oButton);
	}

	// close button content tag
	if (bExtraContentDiv) {
		rm.write("</div>");
	}

	// hook for inheriting controls to add their HTML
	if(this.renderButtonContentAfter){
		this.renderButtonContentAfter(rm, oButton);
	}

	// end button tag
	rm.write("</button>");
};

/**
 * HTML for button text
 */
sap.m.ButtonRenderer.writeTextHtml = function(rm, oButton, bExtraContentDiv, sType) {
	if (oButton.getText()) {
		rm.write("<span");

		if (!bExtraContentDiv && sType !== sap.m.ButtonType.Unstyled) {
			rm.addClass("sapMBtnContent");
			rm.writeClasses();
		}

		if (oButton.getIcon() && oButton.getText()) {
			rm.addClass("sapMBtnContentSpan");
			rm.writeClasses();
		}

		rm.write(">");
		rm.writeEscaped(oButton.getText());
		rm.write("</span>");
	}
};

/**
 * HTML for image
 */
sap.m.ButtonRenderer.writeImgHtml = function(rm, oButton) {
	rm.renderControl(oButton._getImage((oButton.getId() + "-img"), oButton.getIcon(), oButton.getActiveIcon(), oButton.getIconDensityAware()));	
};

/**
 * HTML for internal image (icon pool)
 */
sap.m.ButtonRenderer.writeInternalIconPoolHtml = function(rm, oButton, sType, sCheckType, sURI) {
	if (sType === sCheckType) {

		if (oButton._imageBtn) {
			oButton._imageBtn.setSrc(sURI);
		} else {
			rm.renderControl(oButton._getInternalIconBtn((oButton.getId() + "-iconBtn"), sURI));
		}
	}
};

}; // end of sap/m/ButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.CarouselRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
 
jQuery.sap.declare("sap.m.CarouselRenderer");

/**
 * @class Carousel renderer. 
 * @static
 */
sap.m.CarouselRenderer = {
};

/**
 * Renders the Carousel's HTML, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.CarouselRenderer.render = function(rm, oCarousel){ 
	// Return immediately if control is invisible or if there are no pages to be rendered
	if (!oCarousel.getVisible()) {
		return;
	}
	

	//Outer carousel div
	rm.write("<div");
	rm.writeControlData(oCarousel);

	rm.addStyle("width", oCarousel.getWidth());
	rm.addStyle("height", oCarousel.getHeight());
	rm.writeStyles();
	
	rm.addClass("sapMCrsl");
	//'sapMCrslFluid' is originally from mobify-carousel
	rm.addClass("sapMCrslFluid");
	
	
	// add all classes (also custom classes) to carousel tag
	rm.writeClasses();
	
	var sTooltip = oCarousel.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	
	rm.write(">");
	
	var aPages = oCarousel.getPages();
	var iPageCount = aPages.length;
	var sPageIndicatorPlacement = oCarousel.getShowPageIndicator() ? 
		oCarousel.getPageIndicatorPlacement() : null; 
	
	
	//visual indicator
	if(sPageIndicatorPlacement === sap.m.PlacementType.Top) {
		this._renderPageIndicator(rm, iPageCount);
	}
	
	//inner carousel div
	rm.write("<div class='sapMCrslInner'>");
	//do housekeeping
	oCarousel._cleanUpScrollContainer();
	
	var fnRenderPage = function(oPage, iIndex) {
		//item div
		rm.write("<div class='sapMCrslItem");
		if(sPageIndicatorPlacement === sap.m.PlacementType.Bottom) {
			rm.write(" sapMCrslBottomOffset");
		}
		rm.write("'>");
			//Invisible element which is used to determine when desktop keyboard navigation
			//has reached the FIRST focusable element of a page and went beyond. In that case, the controller
			//will focus the last focusable element of the previous page
			rm.write("<span class='sapMCrslFirstFE' pageIndex=\"" + iIndex + "\" tabIndex=\"0\"/>");
			rm.renderControl(oCarousel._createScrollContainer(oPage, iIndex));
			//Invisible element which is used to determine when desktop keyboard navigation
			//has reached the LAST focusable element of a page and went beyond. In that case, the controller
			//will focus the first focusable element of the next page
			rm.write("<span class='sapMCrslLastFE' pageIndex=\"" + iIndex + "\" tabIndex=\"0\"/>");
		rm.write("</div>");	
	};
	
	//Render Pages
	aPages.forEach(fnRenderPage);
	
	
	rm.write("</div>");	
	//inner div ends
	
	
	if (sap.ui.Device.system.desktop && iPageCount > 1) {
		//heads up controls for desktop browsers
		rm.write("<div class='sapMCrslControls sapMCrslHud'>");
			rm.write("<a class='sapMCrslPrev' href='#' data-slide='prev' tabIndex=1><div class='sapMCrslHudInner'>");
			rm.renderControl(oCarousel._getNavigationArrow('left'));
			rm.write("</div></a>");
			
			rm.write("<a class='sapMCrslNext' href='#' data-slide='next' tabIndex=1><div class='sapMCrslHudInner'>");
			rm.renderControl(oCarousel._getNavigationArrow('right'));
			rm.write("</div></a>");
		rm.write("</div>");
	}
	
	
	//visual indicator
	if(sPageIndicatorPlacement === sap.m.PlacementType.Bottom) {
		this._renderPageIndicator(rm, iPageCount, true);
	}
	rm.write("</div>");	
	
	//page-wrap ends
};


/**
 * Renders the page indicator, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param aPages array of controls to be rendered
 * @private
 */
sap.m.CarouselRenderer._renderPageIndicator = function(rm, iPageCount, bBottom){
	//page indicator div
	rm.write("<div class='sapMCrslControls sapMCrslBulleted" + 
			(bBottom ? " sapMCrslBottomOffset" : "") +
			"'>");
	for ( var i = 1; i <= iPageCount; i++) {
		//item span
		rm.write("<span data-slide=" + i + ">" + i + "</span>");
	}
	rm.write("</div>");	
};




}; // end of sap/m/CarouselRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.CheckBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.CheckBoxRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class CheckBox renderer.
 * @static
 */
sap.m.CheckBoxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oCheckBox an object representation of the control that should be rendered
 */
sap.m.CheckBoxRenderer.render = function(oRm, oCheckBox){
	// Return immediately if control is invisible
	if (!oCheckBox.getVisible()) {
		return;
	}

	// get control properties
	var bEnabled = oCheckBox.getEnabled();
	var iTabIndex = bEnabled ? 0 : -1;

	// CheckBox wrapper
	oRm.write("<div");
	oRm.addClass("sapMCb");
	if(bEnabled) {
		oRm.addClass("sapMPointer");
	}
	oRm.writeControlData(oCheckBox);
	oRm.writeClasses();

	var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oCheckBox, oCheckBox.getTooltip_AsString());
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}

	oRm.write(">");		// DIV element

	// write the HTML into the render manager
	oRm.write("<div id='");
	oRm.write(oCheckBox.getId() + "-CbBg'");

	// CheckBox style class
	oRm.addClass("sapMCbBg");

	if (!bEnabled) {
		oRm.addClass("sapMCbBgDis");
	} else if(sap.ui.Device.system.desktop) {
		oRm.addClass("sapMCbHoverable");
	}

	if (!oCheckBox.getActiveHandling()){
		oRm.addClass("sapMCbActiveStateOff");
	}
	oRm.writeAttribute("tabindex", oCheckBox.hasOwnProperty("_iTabIndex") ? oCheckBox._iTabIndex : iTabIndex);
	oRm.addClass("sapMCbMark"); // TODO: sapMCbMark is redundant, remove it and simplify CSS

	if (oCheckBox.getSelected()) {
		oRm.addClass("sapMCbMarkChecked");
	}
	oRm.writeClasses();

	oRm.write(">");		// DIV element

	oRm.write("<input type='CheckBox' tabindex='-1' id='");
	oRm.write(oCheckBox.getId() + "-CB'");

	if (oCheckBox.getSelected()) {
		oRm.writeAttribute("checked", "checked");
	}

	if (oCheckBox.getName()) {
		oRm.writeAttributeEscaped('name', oCheckBox.getName());
	}

	if (!bEnabled) {
		oRm.write(" disabled='disabled'");
	}

	oRm.write(" /></div>");
	oRm.renderControl(oCheckBox._oLabel);
	oRm.write("</div>");
};

}; // end of sap/m/CheckBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.DialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.DialogRenderer");


/**
 * @class Dialog renderer. 
 * @static
 */
sap.m.DialogRenderer = {};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.DialogRenderer.render = function(oRm, oControl) {
	var id = oControl.getId(),
		bShowHeader = oControl.getShowHeader(),
		sType = oControl.getType(),
		oHeader = oControl._getAnyHeader(),
		oSubHeader = oControl.getSubHeader(),
		bMessage = (sType === sap.m.DialogType.Message),
		oLeftButton = oControl.getBeginButton(),
		oRightButton = oControl.getEndButton(),
		bHorizontalScrolling = oControl.getHorizontalScrolling(),
		bVerticalScrolling = oControl.getVerticalScrolling();
	
	if(oHeader){
		oHeader._context = "header";
	}
	
	if(oSubHeader){
		oSubHeader._context = "header";
	}

	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMDialog");
	oRm.addClass("sapMDialog-CTX");
	oRm.addClass("sapMPopup-CTX");
	oRm.addClass(sap.m.Dialog._mStateClasses[oControl.getState()]);
	if(oControl._forceDisableScrolling){
		oRm.addClass("sapMDialogWithScrollCont");
	}
	
	if(oSubHeader){
		oRm.addClass("sapMDialogWithSubHeader");
	}
	
	if(bMessage){
		oRm.addClass("sapMMessageDialog");
	}
	
	if(!bVerticalScrolling) {
		oRm.addClass("sapMDialogVerScrollDisabled");
	}
	if(!bHorizontalScrolling) {
		oRm.addClass("sapMDialogHorScrollDisabled");
	}
	
	if(!sap.m.Dialog._bOneDesign){
		if(sap.ui.Device.os.ios && !oHeader){
			oRm.addClass("sapMDialogNoHeader");
		}
		
		if(bMessage){
			oRm.addClass("sapMCommonDialog");
		}else{
			if(jQuery.device.is.iphone){
				oRm.addClass("sapMDialogHidden sapMDialogIPhone");
			}
		}
	}else{
		if(sap.ui.Device.system.phone){
			oRm.addClass("sapMDialogPhone");
		}
	}
	
	oRm.writeClasses();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}

	oRm.writeAttribute("tabindex", "-1");

	oRm.write(">");
	if(sap.ui.Device.system.desktop) {
		//Invisible element which is used to determine when desktop keyboard navigation
		//has reached the first focusable element of a dialog and went beyond. In that case, the controller
		//will focus the last focusable element
		oRm.write("<span id='" + oControl.getId() + "-firstfe' tabindex='0'/>");
	}

	if(!sap.m.Dialog._bOneDesign){
		if(sap.ui.Device.os.ios) {
			if(bMessage){
				if(bShowHeader && oControl.getTitle()) {
					oRm.write("<header class=\"sapMDialogTitle\">");
					oRm.writeEscaped(oControl.getTitle());
					oRm.write("</header>");
				}
			}else{
				if(oHeader){
					oRm.renderControl(oHeader);
				}
			}
		} else {
			if(bShowHeader && (oControl.getIcon() || oControl.getTitle())){
				oRm.write("<header class=\"sapMDialogTitle\">");
				oRm.write("<h1>");
				if(oControl._iconImage){
					oRm.renderControl(oControl._iconImage);
				}
				oRm.write("<span>");
				oRm.renderControl(oControl._headerTitle);
				oRm.write("</span>");
				oRm.write("</h1>");
				oRm.write("</header>");
			}
		}
	}else{
		if(oHeader){
			oRm.renderControl(oHeader);
		}
	}
	
	if(oSubHeader){
		oRm.renderControl(oSubHeader.addStyleClass("sapMDialogSubHeader"));
	} 

	oRm.write("<section id='" + id + "-cont' style='width:" + oControl.getContentWidth() + "'>");
	oRm.write("<div id='" + id + "-scroll' class='sapMDialogScroll'>");
	oRm.write("<div id='" + id + "-scrollCont' class='sapMDialogScrollCont'>");
	var aContent = oControl.getContent();
	for(var i = 0; i < aContent.length; i++) {
		oRm.renderControl(aContent[i]);
	}
	oRm.write("</div>");
	oRm.write("</div>");
	oRm.write("</section>");
	
	if((sap.m.Dialog._bOneDesign || !sap.ui.Device.os.ios || bMessage) && (oLeftButton || oRightButton)) {
		
		oRm.write("<footer class='sapMDialogActions sapMBar-CTX sapMFooter-CTX'>");

		// Render actions
		if(oLeftButton){
			oRm.write("<div class='sapMDialogAction'>");
			oRm.renderControl(oLeftButton.addStyleClass("sapMDialogBtn", true));
			oRm.write("</div>");
		}
		if(oRightButton){
			oRm.write("<div class='sapMDialogAction'>");
			oRm.renderControl(oRightButton.addStyleClass("sapMDialogBtn", true));
			oRm.write("</div>");
		}
		
		oRm.write("</footer>");
	}
	if(sap.ui.Device.system.desktop) {
		//Invisible element which is used to determine when desktop keyboard navigation
		//has reached the last focusable element of a dialog and went beyond. In that case, the controller
		//will focus the first focusable element
		oRm.write("<span id='" + oControl.getId() + "-lastfe' tabindex='0'/>");
	}
	oRm.write("</div>");
};
}; // end of sap/m/DialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.FacetFilterRenderer') ) {
/*
* @copyright
*/

jQuery.sap.declare("sap.m.FacetFilterRenderer");

/**
 * @class FacetFilter renderer. 
 * @static
 */
sap.m.FacetFilterRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.FacetFilterRenderer.render = function(oRm, oControl){ 
	
	// Return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	switch (oControl.getType()) {

	case sap.m.FacetFilterType.Simple:
		sap.m.FacetFilterRenderer.renderSimpleFlow(oRm, oControl);
		break;

	case sap.m.FacetFilterType.Light:
		sap.m.FacetFilterRenderer.renderSummaryBar(oRm, oControl);
		break;
	}
};

/**
 * 
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.FacetFilterRenderer.renderSimpleFlow = function(oRm, oControl) {
	
	oRm.write("<div");
	oRm.writeControlData(oControl);		
	oRm.addClass("sapMFF");
	
	if(oControl.getShowSummaryBar()) {
		
		oRm.write(">");
		sap.m.FacetFilterRenderer.renderSummaryBar(oRm, oControl);
	} else {
		
		if (oControl._lastScrolling) { 
			
			oRm.addClass("sapMFFScrolling");
		} else {
			
			oRm.addClass("sapMFFNoScrolling");
		}		
		
		if(oControl.getShowReset()) {		
			
			oRm.addClass("sapMFFResetSpacer");
		}
		oRm.writeClasses();
		oRm.write(">");		
		
		
		if (sap.ui.Device.system.desktop) {
			oRm.renderControl(oControl._getScrollingArrow("left"));
		}		
		
		// Render the div for the carousel
		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-head");
		oRm.writeControlData(oControl);
		oRm.addClass("sapMFFHead");
		oRm.writeClasses();
		oRm.write(">");	
		
		var aLists = oControl._getSequencedLists();
		for(var i=0; i < aLists.length; i++) {
			
			oRm.renderControl(oControl._getButtonForList(aLists[i]));
			if (oControl.getShowPersonalization()) {
				
				oRm.renderControl(oControl._getFacetRemoveIcon(aLists[i]));
			}			
		}
		
		if (oControl.getShowPersonalization()) {
			oRm.renderControl(oControl.getAggregation("addFacetButton"));
		}		
		oRm.write("</div>"); // Close carousel div
		
		if (sap.ui.Device.system.desktop) {
			oRm.renderControl(oControl._getScrollingArrow("right"));
		}	
		
		if(oControl.getShowReset()) {
			
			oRm.write("<div");
			oRm.addClass("sapMFFResetDiv");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl.getAggregation("resetButton"));
			oRm.write("</div>");
		}				
	}
	oRm.write("</div>");
};


/**
 * 
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.FacetFilterRenderer.renderSummaryBar = function(oRm, oControl) {

	// We cannot just render the toolbar without the parent div.  Otherwise it is
	// not possible to switch type from light to simple.
	oRm.write("<div");
	oRm.writeControlData(oControl);		
	oRm.addClass("sapMFF");
	oRm.writeClasses();
	oRm.write(">");		
	var oSummaryBar = oControl.getAggregation("summaryBar");
	oRm.renderControl(oSummaryBar);
	oRm.write("</div>");
};

}; // end of sap/m/FacetFilterRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.FlexBoxCssPropertyMap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.FlexBoxCssPropertyMap");

sap.m.FlexBoxCssPropertyMap = {
	'spec0907': {
		'display': {
			'flex': {
				'display': 'box'
			},
			'inline-flex': {
				'display': 'inline-box'
			}
		},
		'flex-direction': {
			'row': {
				'box-orient': 'horizontal',
				'box-direction': 'normal'
			},
			'row-reverse': {
				'box-orient': 'horizontal',
				'box-direction': 'reverse'
			},
			'column': {
				'box-orient': 'vertical',
				'box-direction': 'normal'
			},
			'column-reverse': {
				'box-orient': 'vertical',
				'box-direction': 'reverse'
			}
		},
		'flex-wrap': {
			'no-wrap': {
				'box-lines': 'single'
			},
			'wrap': {
				'box-lines': 'multiple'
			},
			'wrap-reverse': null
		},
		'flex-flow': null,
		'order': {
			'<number>': {
				'box-ordinal-group': '<integer>'
			}
		},
		'flex-grow': {
			'<number>': {
				'box-flex': '<number>'
			}
		},
		'flex-shrink': null,
		'flex-basis': null,
		'flex': {
			'[flex-grow] | [flex-shrink] | [flex-basis]': {
				'box-flex': '[flex-grow]'
			}
		},
		'justify-content': {
			'flex-start': {
				'box-pack': 'start'
			},
			'flex-end': {
				'box-pack': 'end'
			},
			'center': {
				'box-pack': 'center'
			},
			'space-between': {
				'box-pack': 'justify'
			},
			'space-around': null
		},
		'align-items': {
			'flex-start': {
				'box-align': 'start'
			},
			'flex-end':{
				'box-align': 'end'
			},
			'center': {
				'box-align': 'center'
			},
			'baseline': {
				'box-align': 'baseline'
			},
			'stretch': {
				'box-align': 'stretch'
			}
		},
		'align-self': null,
		'align-content': null
	},
	'specie10': {
		'display': {
			'flex': {
				'display': 'flexbox'
			},
			'inline-flex': {
				'display': 'inline-flexbox'
			}
		},
		'flex-direction': {
			'row': {
				'flex-direction': 'row'
			},
			'row-reverse': {
				'flex-direction': 'row-reverse'
			},
			'column': {
				'flex-direction': 'column'
			},
			'column-reverse': {
				'flex-direction': 'column-reverse'
			}
		},
		'flex-wrap': {
			'no-wrap': {
				'flex-wrap': 'none'
			},
			'wrap': {
				'flex-wrap': 'wrap'
			},
			'wrap-reverse': 'wrap-reverse'
		},
		'flex-flow': null,
		'order': {
			'<number>': {
				'flex-order': '<integer>'
			}
		},
		'flex-grow': {
			'<number>': {
				'flex-positive': '<number>',
				'flex-preferred-size': 'auto'
			}
		},
		'flex-shrink': {
			'<number>': {
				'flex-negative': '<number>' 
			}
		},
		'flex-basis': {
			'<number>': {
				'flex-preferred-size': '<number>'
			}
		},
		'flex': {
			'[flex-grow] | [flex-shrink] | [flex-basis]': {
				'flex': '[flex-grow] | [flex-shrink] | [flex-basis]'
			}
		},
		'justify-content': {
			'flex-start': {
				'flex-pack': 'start'
			},
			'flex-end': {
				'flex-pack': 'end'
			},
			'center': {
				'flex-pack': 'center'
			},
			'space-between': {
				'flex-pack': 'justify'
			},
			'space-around': null
		},
		'align-items': {
			'flex-start': {
				'flex-align': 'start'
			},
			'flex-end':{
				'flex-align': 'end'
			},
			'center': {
				'flex-align': 'center'
			},
			'baseline': {
				'flex-align': 'baseline'
			},
			'stretch': {
				'flex-align': 'stretch'
			}
		},
		'align-self': null,
		'align-content': null
	}
};
}; // end of sap/m/FlexBoxCssPropertyMap.js
if ( !jQuery.sap.isDeclared('sap.m.FlexBoxStylingHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */


if(jQuery.support.useFlexBoxPolyfill) {
	jQuery.sap.require('sap.ui.thirdparty.flexie'); // unlisted dependency retained

}
jQuery.sap.declare("sap.m.FlexBoxStylingHelper");

/**
 * @class FlexBox styling helper
 * @static
 */
sap.m.FlexBoxStylingHelper = {};

/**
 * Goes through applicable styles and calls function to sets them on the given control.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.FlexBoxStylingHelper.setFlexBoxStyles = function(oRm, oControl) {
	var sDisplay;

	// Prepare values by converting camel-case to dash and lower-casing
	var bInline = oControl.getDisplayInline();
	var sDirection = oControl.getDirection().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
	var bFitContainer = oControl.getFitContainer();
	var sJustifyContent = oControl.getJustifyContent().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
	var sAlignItems = oControl.getAlignItems().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();

	if(bInline) {
		sDisplay = "inline-flex";
	} else {
		sDisplay = "flex";
	}

	// Set width and height for outermost FlexBox only if FitContainer is set
	if(bFitContainer && !(oControl.getParent() instanceof sap.m.FlexBox)) {
		if(oControl.getParent() instanceof sap.m.Page) {
			var $page = oControl.getParent().$();
			$page.find("sapMPageScroll").height("100%"); // Set height of scroll area to 100% because it's currently not automatically set
		}
		//jQuery.sap.log.info("FlexBox fitContainer set to true. Remember, if the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.");
		oRm.addStyle("width", "auto");
		oRm.addStyle("height", "100%");
	}

	// Add flex prefix to start and end values
	if(sJustifyContent === "start" || sJustifyContent === "end") {
		sJustifyContent = "flex-" + sJustifyContent;
	}

	if(sAlignItems === "start" || sAlignItems === "end") {
		sAlignItems = "flex-" + sAlignItems;
	}

	// Set values (if different from default)
	sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "display", sDisplay);
	if(sDirection !== "row") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "flex-direction", sDirection);
	}

	if(sJustifyContent !== "flex-start") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "justify-content", sJustifyContent);
	}
	if(sAlignItems !== "stretch") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "align-items", sAlignItems);
	}
//	if(jQuery.support.newFlexBoxLayout) {
//		var sWrap = oControl.getWrap().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
//		var sAlignContent = oControl.getAlignContent().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
//
//		if(sWrap !== "nowrap") {
//			sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "flex-wrap", sWrap);
//		}
//		if(sAlignContent === "start" || sAlignContent === "end") {
//			sAlignContent = "flex-" + sAlignContent;
//		}
//		if(sAlignContent !== "stretch") {
//			sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "align-content", sAlignContent);
//		}
//	}
};

/**
 * Goes through applicable item styles and sets them on the given control.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.FlexItemData} oLayoutData an object representation of the layout data
 */
sap.m.FlexBoxStylingHelper.setFlexItemStyles = function(oRm, oLayoutData) {
	var order = "";
	var growFactor = "";
	var alignSelf = "";

	// Set values if different from default
	order = oLayoutData.getOrder();
	if(order) {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "order", order);
	}

	growFactor = oLayoutData.getGrowFactor();
	if(growFactor !== undefined) {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "flex-grow", growFactor);
	}

	alignSelf = oLayoutData.getAlignSelf().toLowerCase();

	// Add flex prefix to start and end values to create CSS value
	if(alignSelf === "start" || alignSelf === "end") {
		alignSelf = "flex-" + alignSelf;
	}

	if(alignSelf && alignSelf !== "auto") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "align-self", alignSelf);
	}

//	if(jQuery.support.newFlexBoxLayout) {
//		var shrinkFactor = "";
// 		var baseSize = "";
//
//		shrinkFactor = oLayoutData.getShrinkFactor();
//		if(shrinkFactor !== 1) {
//			sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "flex-shrink", shrinkFactor);
//		}
//
//		baseSize = oLayoutData.getBaseSize().toLowerCase();
//		if(baseSize !== undefined) {
//			sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "flex-basis", baseSize);
//		}
//	}
};

/**
 * Sets style (including fall-back styles) to the given control, using the provided {@link sap.ui.core.RenderManager}.
 * This method does NOT apply a polyfill in browsers that don't support flex box natively.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param sProperty name of the property
 * @param sValue value of the property
 */
sap.m.FlexBoxStylingHelper.setStyle = function(oRm, oControl, sProperty, sValue) {
	if(typeof(sValue) === "string") {
		sValue = sValue.toLowerCase();
	}

	// Determine vendor prefix
	var sVendorPrefix = "";

	if(jQuery.support.flexBoxPrefixed) {
		if(sap.ui.Device.browser.webkit) {
			sVendorPrefix = "-webkit-";
		} else if(jQuery.browser.mozilla) {
			sVendorPrefix = "-moz-";
		} else if(sap.ui.Device.browser.internet_explorer) {
			sVendorPrefix = "-ms-";
		}
	}

	// Choose flex box styling method
	if(jQuery.support.newFlexBoxLayout) {
		// New spec
		sap.m.FlexBoxStylingHelper.setFinalSpecStyle(oRm, oControl, sProperty, sValue, sVendorPrefix);
	} else if(jQuery.support.flexBoxLayout || jQuery.support.ie10FlexBoxLayout) {
		// Old spec
		sap.m.FlexBoxStylingHelper.setOldSpecStyle(oRm, oControl, sProperty, sValue, sVendorPrefix);
	}
};

/**
 * Sets style for the FINAL flex box spec to the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param sProperty name of the property
 * @param sValue value of the property
 * @param sVendorPrefix vendor prefix
 */
sap.m.FlexBoxStylingHelper.setFinalSpecStyle = function(oRm, oControl, sProperty, sValue, sVendorPrefix) {
	if(jQuery.support.flexBoxPrefixed) {
		// With vendor prefix
		sap.m.FlexBoxStylingHelper.writeStyle(oRm, oControl, sProperty, sValue, sVendorPrefix);
	}

	// Pure standard
	sap.m.FlexBoxStylingHelper.writeStyle(oRm, oControl, sProperty, sValue);
};

/**
 * Sets style for the OLD or the IE10 flex box spec to the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param sProperty name of the property
 * @param sValue value of the property
 * @param sVendorPrefix vendor prefix
 */
sap.m.FlexBoxStylingHelper.setOldSpecStyle = function(oRm, oControl, sProperty, sValue, sVendorPrefix) {
	// Choose specification
	var sSpec = "";
	if(sVendorPrefix == "-ms-") {
		sSpec = "specie10"; // IE10 specification
	} else {
		sSpec = "spec0907";	// old specification
	}

	// Nothing to do if final standard is supported or property doesn't exist in this spec or is the same as standard
	// Else map to old property
	if(sap.m.FlexBoxCssPropertyMap[sSpec][sProperty] !== null && sap.m.FlexBoxCssPropertyMap[sSpec][sProperty] !== "<idem>") {
		// Prepare mapped properties and values
		var mLegacyMap = null;
		if(typeof(sap.m.FlexBoxCssPropertyMap[sSpec][sProperty]) === "object") {
			if(sap.m.FlexBoxCssPropertyMap[sSpec][sProperty]["<number>"]) {
				mLegacyMap = sap.m.FlexBoxCssPropertyMap[sSpec][sProperty]["<number>"];
				for(var key in mLegacyMap) {
					mLegacyMap[key] = sValue;
				}
			} else {
				mLegacyMap = sap.m.FlexBoxCssPropertyMap[sSpec][sProperty][sValue];
			}
		} else {
			mLegacyMap = sap.m.FlexBoxCssPropertyMap[sSpec][sProperty][sValue];
		}

		// Nothing to do if value doesn't exist or is the same as standard
		if(mLegacyMap !== null && mLegacyMap !== "<idem>") {
			if(typeof(mLegacyMap) === "object") {
				for(var sLegacyProperty in mLegacyMap) {
					// Write property/value to control
					sap.m.FlexBoxStylingHelper.writeStyle(oRm, oControl, sLegacyProperty, mLegacyMap[sLegacyProperty], sVendorPrefix);
				}
			}
		}
	}
};

/**
 * Writes the style to the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param sProperty name of the property
 * @param sValue value of the property
 * @param sVendorPrefix vendor prefix
 */
sap.m.FlexBoxStylingHelper.writeStyle = function(oRm, oControl, sProperty, sValue, sVendorPrefix) {
	var sPropertyPrefix = "";
	var sValuePrefix = "";
	sVendorPrefix = typeof sVendorPrefix !== "undefined" ? sVendorPrefix : "";	// default: empty string

	// Set prefix to value for display property
	// As display is a long-standing standard property the values are vendor-prefixed instead of the property name
	if(sProperty !== "display") {
		sPropertyPrefix = sVendorPrefix;
	} else {
		sValuePrefix = sVendorPrefix;
	}

	// Finally write property value to control using either renderer or element directly
	if(oRm) {
		oRm.addStyle(sPropertyPrefix + sProperty, sValuePrefix + sValue);
	} else {
		jQuery(oControl).css(sPropertyPrefix + sProperty, sValuePrefix + sValue);
	}
};

/**
 * Applies flex box polyfill styling to the given DOM element and its children (if polyfill is being used at all)
 *
 * @param sId DOM ID of the control that should be turned into a flex box
 * @param oSettings object holding the flex box settings
 */
sap.m.FlexBoxStylingHelper.applyFlexBoxPolyfill = function(sId, oSettings) {
	// Return if polyfill is not being used
	if(!jQuery.support.useFlexBoxPolyfill) {
		jQuery.sap.log.warning("FlexBox Polyfill is not being used");
		return;
	}
	var justifyContent = {
		Start: "start",
		Center: "center",
		End: "end",
		SpaceBetween : "justify"
	};
	var alignItems = {
		Start: "start",
		Center: "center",
		End: "end",
		Stretch : "stretch"
	};
	
	var orient = "";
	var direction = "";
	
	switch(oSettings.direction) {
		case "Column" :
			orient = "vertical";
			direction = "normal";
			break;
		case "RowReverse" : 
			orient = "horizontal";
			direction = "reverse";
			break;
		case "ColumnReverse" : 
			orient = "vertical";
			direction = "reverse";
			break;
		case "Row" :
		default:
			orient = "horizontal";
			direction = "normal";
	}

	var box = new window.Flexie.box({
		target : document.getElementById(sId),
		orient : orient,
		align : alignItems[oSettings.alignItems],
		direction : direction,
		pack : justifyContent[oSettings.justifyContent],
		flexMatrix : oSettings.flexMatrix,
		ordinalMatrix : oSettings.ordinalMatrix,
	    dynamic: true
	});
	
	return box;
};
}; // end of sap/m/FlexBoxStylingHelper.js
if ( !jQuery.sap.isDeclared('sap.m.GrowingEnablement') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.m.GrowingEnablement
jQuery.sap.declare("sap.m.GrowingEnablement");
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained


sap.ui.base.Object.extend("sap.m.GrowingEnablement", {

	/**
	 * Creates a GrowingEnablement delegate that can be attached to ListBase Controls requiring capabilities for growing
	 *
	 * @extends sap.ui.base.Object
	 * @name sap.m.GrowingEnablement
	 * @experimental Since 1.16. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 *
	 * @param {sap.m.ListBase} oControl the ListBase control of which this Growing is the delegate
	 *
	 * @constructor
	 * @protected
	 */
	constructor : function(oControl) {
		sap.ui.base.Object.apply(this);
		this._oControl = oControl;
		this._oControl.bUseExtendedChangeDetection = true;
		this._oControl.addDelegate(this);

		/* init growing list */
		var iRenderedItemsLength = this._oControl.getItems().length;
		this._iRenderedDataItems = iRenderedItemsLength;
		this._iItemCount = iRenderedItemsLength;
		this._bRebuilding = false;
		this._fnRebuildQ = null;
		this._bLoading = false;
		this._sGroupingPath = "";
		this._bDataRequested = false;
	},

	/**
	 * Destroys this GrowingEnablement delegate.
	 * This function must be called by the control which uses this delegate in the <code>exit</code> function.
	 */
	destroy : function() {
		if (this._oBusyIndicator) {
			this._oBusyIndicator.destroy();
			delete this._oBusyIndicator;
		}
		if (this._oTrigger) {
			this._oTrigger.destroy();
			delete this._oTrigger;
		}
		if (this._oLoading) {
			this._oLoading.destroy();
			delete this._oLoading;
		}
		if (this._oScrollDelegate) {
			this._oScrollDelegate.setGrowingList(null);
			this._oScrollDelegate = null;
		}

		jQuery(this._oControl.getId() + "-triggerList").remove();
		this._oControl.bUseExtendedChangeDetection = false;
		this._oControl.removeDelegate(this);
		this._sGroupingPath = "";
		this._bLoading = false;
		this._oControl = null;
	},

	/**
	 * Renders loading indicator or load more trigger
	 */
	render : function(rm) {
		var bHasScrollToLoadAndScrollbars = this._oControl.getGrowingScrollToLoad() && this._getHasScrollbars();

		rm.write("<ul id='" + this._oControl.getId() + "-triggerList'");

		if (bHasScrollToLoadAndScrollbars) {
			rm.addStyle("display", "none");
			rm.writeStyles();
		}

		// no header or footer no div
		rm.addClass("sapMListUl");
		rm.addClass("sapMGrowingList");
		if (this._oControl.setBackgroundDesign) {
			rm.addClass("sapMListBG" + this._oControl.getBackgroundDesign());
		}
		if (this._oControl.getInset()) {
			rm.addClass("sapMListInset");
		}
		rm.writeClasses();
		rm.write(">");

		var oActionItem;
		if (bHasScrollToLoadAndScrollbars) {
			this._showsLoading = true;
			oActionItem = this._getLoading(this._oControl.getId() + "-loading");
		} else {
			this._showsTrigger = true;
			oActionItem = this._getTrigger(this._oControl.getId() + "-trigger");
		}

		// this variable is needed to render loading indicator in list even in table mode
		oActionItem._renderInList = true;
		rm.renderControl(oActionItem);
		rm.write("</ul>");
	},

	/**
	 * Called after rendering phase of the given control
	 */
	onAfterRendering : function() {
		if (this._oControl.getGrowingScrollToLoad()) {
			var oScrollDelegate = sap.m.getScrollDelegate(this._oControl);
			if (oScrollDelegate) {
				this._oScrollDelegate = oScrollDelegate;
				oScrollDelegate.setGrowingList(this._oControl, jQuery.proxy(this._triggerLoadingByScroll, this));
			}
		} else if (this._oScrollDelegate) {
			this._oScrollDelegate.setGrowingList(null);

			this._oScrollDelegate = null;
		}

		this._updateTrigger();
	},

	setTriggerText : function(sText) {
		if (this._oTrigger) {
			this._oTrigger.$().find(".sapMSLITitle").text(sText);
		}
	},

	// call to reset paging
	reset : function() {
		this._iItemCount = 0;
		this._bLastAsyncCheck = false;
	},

	// get actual and total info
	getInfo : function() {
		return {
			total : this._oControl.getMaxItemsCount(),
			actual : this._iRenderedDataItems
		};
	},

	// call to request new page
	requestNewPage : function(oEvent) {
		// if max item count not reached
		if (this._oControl && !this._bLoading && this._iItemCount < this._oControl.getMaxItemsCount()) {
			this._showIndicator();
			this._iItemCount += this._oControl.getGrowingThreshold();
			this.updateItems("Growing");
		}
	},

	// called before new page loaded
	_onBeforePageLoaded : function(sChangeReason) {
		this._bLoading = true;
		this._oControl.onBeforePageLoaded(this.getInfo(), sChangeReason);
	},

	// called after new page loaded
	_onAfterPageLoaded : function(sChangeReason) {
		this._hideIndicator();
		this._updateTrigger();
		this._bLoading = false;
		this._oControl.onAfterPageLoaded(this.getInfo(), sChangeReason);
	},

	/**
	 *
	 * this._oRenderManager is optionally used if defined in order to improve performance. It indicates a state where multiple items can be subsequently rendered.
	 * If this._oRenderManager is defined, it is the responsibility of the caller to flush and destroy the RenderManager after the last call.
	 */
	_renderItemIntoContainer : function(oItem, bDoNotPreserve, vInsert, oDomRef) {
		oDomRef = oDomRef || this._oContainerDomRef;
		if (oDomRef) {
			var rm = this._oRenderManager || sap.ui.getCore().createRenderManager();
			rm.renderControl(oItem);
			if (!this._oRenderManager) {
				rm.flush(oDomRef, bDoNotPreserve, vInsert);
				rm.destroy();
			}
		}
	},

	_getBusyIndicator : function() {
		return this._oBusyIndicator || (this._oBusyIndicator = new sap.m.BusyIndicator({
			size : "2.0em"
		}));
	},

	/**
	 * returns loading indicator
	 */
	_getLoading : function(sId) {
		var that = this;
		return this._oLoading || (this._oLoading = new sap.m.CustomListItem({
			id : sId,
			content : new sap.ui.core.HTML({
				content :	"<div class='sapMSLIDiv sapMGrowingListLoading'>" +
								"<div class='sapMGrowingListBusyIndicator' id='" + sId + "-busyIndicator'></div>" +
							"</div>",
				afterRendering : function(e) {
					var oBusyIndicator = that._getBusyIndicator();
					var rm = sap.ui.getCore().createRenderManager();
					rm.render(oBusyIndicator, this.getDomRef().firstChild);
					rm.destroy();
				}
			})
		}).setParent(this._oControl, null, true));
	},

	/**
	 * returns load more trigger
	 */
	_getTrigger : function(sId) {
		var that = this;

		var sTriggerText = sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("LOAD_MORE_DATA");
		if (this._oControl.getGrowingTriggerText()) {
			sTriggerText = this._oControl.getGrowingTriggerText();
		}

		this._oControl.addNavSection(sId);

		return this._oTrigger || (this._oTrigger = new sap.m.CustomListItem({
			id : sId,
			content : new sap.ui.core.HTML({
				content :	"<div class='sapMGrowingListTrigger'>" +
								"<div class='sapMGrowingListBusyIndicator' id='" + sId + "-busyIndicator'></div>" +
								"<div class='sapMSLITitleDiv sapMGrowingListTitel'>" +
									"<h1 class='sapMSLITitle'>" + jQuery.sap.encodeHTML(sTriggerText) + "</h1>" +
								"</div>" +
								"<div class='sapMGrowingListDescription'>" +
									"<div class='sapMSLIDescription' id='" + sId + "-itemInfo'>" + that._getListItemInfo() + "</div>" +
								"</div>" +
							"</div>",
				afterRendering : function(e) {
					var oBusyIndicator = that._getBusyIndicator();
					var rm = sap.ui.getCore().createRenderManager();
					rm.render(oBusyIndicator, this.getDomRef().firstChild);
					rm.destroy();
				}
			}),
			type : sap.m.ListType.Active
		}).setParent(this._oControl, null, true).attachPress(this.requestNewPage, this).addEventDelegate({
			onsapenter : function(oEvent) {
				this.requestNewPage();
				oEvent.preventDefault();
			},
			onsapspace : function(oEvent) {
				this.requestNewPage(oEvent);
				oEvent.preventDefault();
			}
		}, this));
	},

	/**
	 * Returns the information about the list items.
	 * -> how many items are displayed
	 * -> maximum items to be displayed
	 */
	_getListItemInfo : function() {
		return ("[ " + this._iRenderedDataItems + " / " + this._oControl.getMaxItemsCount() + " ]");
	},

	/**
	 * Only call when grouped
	 */
	_getGroupForContext : function(oContext) {
		// TODO: we should document that group header depends on the first sorter
		var oNewGroup = this._oControl.getBinding("items").aSorters[0].fnGroup(oContext);
		if (typeof oNewGroup == "string") {
			oNewGroup = {
				key: oNewGroup
			};
		}
		return oNewGroup;
	},

	/**
	 * returns the first sorters grouping path when available
	 */
	_getGroupingPath : function(oBinding) {
		oBinding = oBinding || this._oControl.getBinding("items") || {};
		var aSorters = oBinding.aSorters || [];
		var oSorter = aSorters[0] || {};
		if (oSorter.fnGroup) {
			return oSorter.sPath;
		}
		return "";
	},

	/**
	 * If table has pop-in then we have two rows for one item
	 * So this method finds the correct DOM position to insert item
	 * This function should not be called within insertItem
	 */
	_getDomIndex : function(iIndex) {
		if (this._oControl.hasPopin && this._oControl.hasPopin()) {
			iIndex *= 2;
		}
		return iIndex;
	},

	/**
	 * Checks if the Scrollcontainer of the list has scrollbars
	 * @returns {Boolean}
	 */
	_getHasScrollbars : function() {
		//the containter height is needed because it gets hidden if there are scrollbars and this might lead to the list not having scrollbars again
		return this._oScrollDelegate && this._oScrollDelegate.getMaxScrollTop() > this._oControl.$("triggerList").height();
	},

	/**
	 * function is called to destroy all items in list
	 */
	destroyListItems : function() {
		this._oControl.destroyAggregation("items");
		this._iRenderedDataItems = 0;
	},

	/**
	 * function is called to add single list item or row
	 */
	addListItem : function(oItem, bSuppressInvalidate) {
		this._iRenderedDataItems++;

		// Grouping support
		var oBinding = this._oControl.getBinding("items"),
			oBindingInfo = this._oControl.getBindingInfo("items");

		if (oBinding.isGrouped() && oBindingInfo) {
			var bNewGroup = false,
				aItems = this._oControl.getItems(),
				sModelName = oBindingInfo.model || undefined,
				oNewGroup = this._getGroupForContext(oItem.getBindingContext(sModelName));

			if (aItems.length == 0) {
				bNewGroup = true;
			} else if (oNewGroup.key !== this._getGroupForContext(aItems[aItems.length-1].getBindingContext(sModelName)).key) {
				bNewGroup = true;
			}

			if (bNewGroup) {
				var oGroupHeader = null;
				if (oBindingInfo.groupHeaderFactory) {
					oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
				}
				this.addItemGroup(oNewGroup, oGroupHeader);
			}
		}

		this._oControl.addAggregation("items", oItem, bSuppressInvalidate);
		if (bSuppressInvalidate) {
			this._renderItemIntoContainer(oItem, false, true);
		}
		return this;
	},

	/**
	 * function is called to add multiple items
	 */
	addListItems : function(aContexts, oBindingInfo, bSuppressInvalidate) {
		if (oBindingInfo && aContexts) {
			for (var i = 0, l = aContexts.length; i < l; i++) {
				var oClone = oBindingInfo.factory("", aContexts[i]);
				oClone.setBindingContext(aContexts[i], oBindingInfo.model);
				this.addListItem(oClone, bSuppressInvalidate);
			}
		}
	},

	/**
	 * destroy all list items and then insert
	 * this function take care async calls during the insertion
	 */
	rebuildListItems : function(aContexts, oBindingInfo, bSuppressInvalidate) {
		// check if building already started
		if (this._bRebuilding) {
			this._fnRebuildQ = jQuery.proxy(this, "rebuildListItems", aContexts, oBindingInfo, bSuppressInvalidate);
			return;
		}

		// rebuild list items
		this._bRebuilding = true;
		this.destroyListItems();
		this.addListItems(aContexts, oBindingInfo, bSuppressInvalidate);
		this._bRebuilding = false;

		// check if something is in the queue
		if (this._fnRebuildQ) {
			var fnRebuildQ = this._fnRebuildQ;
			this._fnRebuildQ = null;
			fnRebuildQ();
		}
	},

	/**
	 * adds a new GroupHeaderListItem
	 */
	addItemGroup : function(oGroup, oHeader) {
		oHeader = this._oControl.addItemGroup(oGroup, oHeader, true);
		this._renderItemIntoContainer(oHeader, false, true);
		return this;
	},

	/**
	 * function is called to insert single list item or row.
	 */
	insertListItem : function(oItem, iIndex) {
		this._oControl.insertAggregation("items", oItem, iIndex, true);
		this._iRenderedDataItems++;
		this._renderItemIntoContainer(oItem, false, this._getDomIndex(iIndex));
		return this;
	},

	/**
	 * function is called to remove single list item or row
	 */
	deleteListItem : function(oItem) {
		this._iRenderedDataItems--;
		oItem.destroy(true);
		return this;
	},

	/**
	 * refresh items ... called from oData model.
	 */
	refreshItems : function(sChangeReason) {
		// set iItemCount to initial value if not set or filtered
		if (!this._iItemCount || sChangeReason == sap.ui.model.ChangeReason.Filter) {
			this._iItemCount = this._oControl.getGrowingThreshold();
		}
		if (!this._bDataRequested) {
			this._bDataRequested = true;
			this._onBeforePageLoaded(sChangeReason);
		}
		this._oControl.getBinding("items").getContexts(0, this._iItemCount);
	},

	/**
	 * update loaded items ... 2nd time called from oData model.
	 */
	updateItems : function(sChangeReason) {
		var oBindingInfo = this._oControl.getBindingInfo("items"),
			oBinding = oBindingInfo.binding,
			fnFactory = oBindingInfo.factory,
			oChangeReason = sap.ui.model.ChangeReason;

		// set iItemCount to initial value if not set or filtered
		if (!this._iItemCount || sChangeReason == sap.ui.model.ChangeReason.Filter) {
			this._iItemCount = this._oControl.getGrowingThreshold();
		}

		// fire growing started event
		if (this._bDataRequested) {
			// if data is already requested this should be oDataModel
			// here items binding is updated because data is came from server
			// so we can convert the internal flag for the next request
			this._bDataRequested = false;
		} else {
			// here we handle the JSON model
			this._onBeforePageLoaded(sChangeReason);
		}

		// get the context from binding
		var aContexts = oBinding ? oBinding.getContexts(0, this._iItemCount) || [] : [];

		// if the binding context is already requested
		if (aContexts.dataRequested) {
			this._bDataRequested = true;
			return;
		}

		// cache dom ref for internal functions not to lookup again and again
		this._oContainerDomRef = this._oControl.getItemsContainerDomRef();

		// aContexts.diff ==> undefined : New data we should build from scratch
		// aContexts.diff ==> [] : There is no diff, means data did not changed but maybe it was already grouped and we need to handle group headers
		// aContexts.diff ==> [{index : 0, type: "delete"}, ...] :Run the diff logic
		if (oBinding.isGrouped()) {
			var bFromScratch = true;
			if (aContexts.length > 0) {
				if (this._oContainerDomRef) {
					// check if diff array exists
					if (aContexts.diff) {
						// check if the model diff-array is empty
						if (!aContexts.diff.length) {
							// no diff, we do not need to rebuild list when grouping is not changed
							if (this._sGroupingPath == this._getGroupingPath(oBinding)) {
								bFromScratch = false;
							}
						} else {
							// check the diff array and whether rebuild is required
							bFromScratch = false;
							var bFirstAddedItemChecked = false;
							for (var i = 0, l = aContexts.diff.length; i < l; i++) {
								if (aContexts.diff[i].type === "delete") {
									bFromScratch = true;
									break;
								}
								else if (aContexts.diff[i].type === "insert") {
									if (!bFirstAddedItemChecked && aContexts.diff[i].index !== this._iRenderedDataItems) {
										bFromScratch = true;
										break;
									}
									bFirstAddedItemChecked = true;
									var oClone = fnFactory("", aContexts[aContexts.diff[i].index]);
									oClone.setBindingContext(aContexts[aContexts.diff[i].index], oBindingInfo.model);
									this.addListItem(oClone, true);
								}
							}
						}
					}
					if (bFromScratch) {
						// renderer available - fill the aggregation and render list items
						this.rebuildListItems(aContexts, oBindingInfo, false);
					}
				} else {
					// no renderer - fill only the aggregation
					this.rebuildListItems(aContexts, oBindingInfo, true);
				}
			} else {
				// no context
				this.destroyListItems();
			}

		} else { // no grouping, stable implementation
			if (aContexts.length > 0) {
				if (this._oContainerDomRef) {
					// check if model diff-array exists and execute
					if (aContexts.diff) {
						// if previously grouped
						if (this._sGroupingPath) {
							// we need to remove all GroupHeaders first
							this._oControl.removeGroupHeaders(true);
						}

						this._oRenderManager = sap.ui.getCore().createRenderManager(); // one shared RenderManager for all the items that need to be rendered

						var aItems, oClone, iIndex, iFlushIndex = -1, iLastIndex = -1;
						for (var i = 0, l = aContexts.diff.length; i < l; i++) {
							iIndex = aContexts.diff[i].index;

							if (aContexts.diff[i].type === "delete") { // case 1: element is removed
								if (iFlushIndex !== -1) {
									this._oRenderManager.flush(this._oContainerDomRef, false, this._getDomIndex(iFlushIndex));
									iFlushIndex = -1;
									iLastIndex = -1;
								}

								aItems = this._oControl.mAggregations["items"]; // access via getItems() copies the array, so direct access... it is only used in the next line to give the item instance, so it's fine
								this.deleteListItem(aItems[iIndex]);
							}
							else if (aContexts.diff[i].type === "insert") { // case 2: element is added
								oClone = fnFactory("", aContexts[iIndex]);
								oClone.setBindingContext(aContexts[iIndex], oBindingInfo.model);

								// start a new burst of subsequent items
								if (iFlushIndex === -1) {
									iFlushIndex = iIndex; // the subsequent run/burst of items needs to be inserted at this position

								// otherwise check for the end of a burst of subsequent items
								} else if (iLastIndex >= 0 && iIndex !== iLastIndex + 1) { // this item is not simply appended to the last one that has been inserted, so we need to flush what we have so far
									this._oRenderManager.flush(this._oContainerDomRef, false, this._getDomIndex(iFlushIndex));
									iFlushIndex = iIndex;
								}

								this.insertListItem(oClone, iIndex);
								iLastIndex = iIndex;
							}
						}
						// update context on all items after applying diff
						aItems = this._oControl.getItems();
						for (var i = 0, l = aContexts.length; i < l; i++) {
							aItems[i].setBindingContext(aContexts[i], oBindingInfo.model);
						}

						if (iFlushIndex !== -1) {
							this._oRenderManager.flush(this._oContainerDomRef, false, this._getDomIndex(iFlushIndex));
						}
						// clean up the shared RenderManager
						this._oRenderManager.destroy();
						delete this._oRenderManager; // make sure there is no instance anymore

					} else {
						// most likely a new binding is set in this case - therefore remove all items and fill again
						this.rebuildListItems(aContexts, oBindingInfo, false);
					}
				} else {
					// no renderer - fill only the aggregation
					this.rebuildListItems(aContexts, oBindingInfo, true);
				}
			} else {
				// there is no context
				this.destroyListItems();
			}
		}

		// remove dom cache
		this._oContainerDomRef = null;

		// remember the old grouping path
		this._sGroupingPath = this._getGroupingPath(oBinding);

		// fire growing finished event
		this._onAfterPageLoaded(sChangeReason);

	},

	/**
	 * hide or show loading trigger according to list item count.
	 */
	_updateTrigger : function() {
		if (this._oControl.getGrowingScrollToLoad() && this._getHasScrollbars()) {
			return;
		}

		// check trigger list DOM first
		var oTriggerListDomRef = document.getElementById(this._oControl.getId() + "-triggerList");
		if (!oTriggerListDomRef) {
			return;
		}

		// hide trigger if no items or maximum of items reached
		var iMaxItems = this._oControl.getMaxItemsCount();
		var iItemsLength = this._oControl.getItems().length;
		var sDisplay = (!iItemsLength || !this._iItemCount || this._iItemCount >= iMaxItems) ? "none" : "block";

		// if we are in the popover then hiding the trigger removes focus and closes popup
		if (sap.ui.Device.system.desktop && sDisplay == "none" && oTriggerListDomRef.contains(document.activeElement)) {
			jQuery(oTriggerListDomRef).closest("[data-sap-ui-popup]").focus();
		}

		// update trigger info
		oTriggerListDomRef.style.display = sDisplay;
		this._oControl.$("trigger-itemInfo").text(this._getListItemInfo());
	},

	/**
	 * show loading indicator
	 */
	_showIndicator : function() {
		var bHasScrollToLoad = this._oControl.getGrowingScrollToLoad(),
			bHasScrollbars = this._getHasScrollbars();

		if (bHasScrollToLoad && bHasScrollbars) {

			this._checkTriggerType(bHasScrollToLoad, bHasScrollbars);

			var $trigger = this._oControl.$("triggerList").css("display", "block");
			if (sap.ui.Device.support.touch && this._oScrollDelegate) {
				if (this._oScrollDelegate.getMaxScrollTop() - this._oScrollDelegate.getScrollTop() < $trigger.height()) {
					this._oScrollDelegate.refresh();
					this._oScrollDelegate.scrollTo(this._oScrollDelegate.getScrollLeft(), this._oScrollDelegate.getMaxScrollTop());
				}
			}
		} else {
			this._oControl.$("trigger-busyIndicator").addClass("sapMGrowingListBusyIndicatorVisible");
		}

		this._getBusyIndicator().setVisible(true);
	},

	/**
	 * Emties the trigger and puts the Loading indicator in it, without rerendering the whole control.
	 *
	 * If scroll to load is disabled, this will do nothing.
	 * If the button is shown and there are scrollbars, the loading indicator will show up.
	 * If the button is not shown and there are no scrollbars, the button will show up.
	 *
	 * @private
	 */
	_checkTriggerType : function(bHasScrollToLoad, bHasScrollbars) {

		if (!bHasScrollToLoad) {
			this._showsTrigger = this._showsLoading = false;
			return;
		}

		if (!this._showsLoading && bHasScrollbars) {
			this._showsLoading = true;
			this._showsTrigger = false;
			this._switchTriggerWithLoadingIndicator(true);
		}

		if (!this._showsTrigger && !bHasScrollbars) {
			this._showsTrigger = true;
			this._showsLoading = false;
			this._switchTriggerWithLoadingIndicator(false);
		}
	},

	/**
	 * Empties the trigger and puts the Loading indicator in it, without rerendering the whole control.
	 *
	 * @private
	 */
	_switchTriggerWithLoadingIndicator : function(bShowLoading) {
		var rm = sap.ui.getCore().createRenderManager(),
			oActionItem,
			$TriggerList = this._oControl.$("triggerList");

		if (bShowLoading) {
			oActionItem = this._getLoading();
		} else {
			oActionItem = this._getTrigger();
		}

		// this variable is needed to render loading indicator in list even in table mode
		oActionItem._renderInList = true;

		$TriggerList.empty();

		rm.render(oActionItem, $TriggerList[0]);
	},

	/**
	 * hide loading indicator
	 */
	_hideIndicator : function() {
		jQuery.sap.delayedCall(0, this, function() {
			if (this._oControl) {	// maybe control is already destroyed
				this._getBusyIndicator().setVisible(false);
				if (this._oControl.getGrowingScrollToLoad() && this._getHasScrollbars()) {
					this._oControl.$("triggerList").css("display", "none");
				} else {
					this._oControl.$("trigger-itemInfo").html(this._getListItemInfo());
					this._oControl.$("trigger-busyIndicator").removeClass("sapMGrowingListBusyIndicatorVisible");
				}
			}
		});
	},

	/**
	 * ScrollDelegate call this method to inform new page needs to load
	 */
	_triggerLoadingByScroll : function() {
		this.requestNewPage();
	}
});

}; // end of sap/m/GrowingEnablement.js
if ( !jQuery.sap.isDeclared('sap.m.IconTabBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.IconTabBarRenderer");
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

/**
 * @class HBox renderer.
 * @static
 */
sap.m.IconTabBarRenderer = {
};

/**
 * Array of all available icon color CSS classes
 * 
 * @private
 */
sap.m.IconTabBarRenderer._aAllIconColors = ['sapMITBFilterCritical', 'sapMITBFilterPositive', 'sapMITBFilterNegative', 'sapMITBFilterDefault'];


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.IconTabBarRenderer.render = function(oRM, oControl){
	
	// return immediately if control is not visible
	if (!oControl.getVisible()) {
		return;
	}
	
	var aItems = oControl.getItems();
	var bTextOnly = oControl._checkTextOnly(aItems);
	var bNoText = oControl._checkNoText(aItems);

	oRM.write("<div ");
	oRM.addClass("sapMITB sapMITBNotScrollable");
	oRM.writeControlData(oControl);
	oRM.writeClasses();
	oRM.write(">");
	oRM.renderControl(oControl._getScrollingArrow("left"));

	if (!sap.ui.Device.system.desktop || (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8)) {
		oRM.write("<div id='" + oControl.getId() + "-scrollContainer' class='sapMITBScrollContainer'>");
	}

	oRM.write("<div id='" + oControl.getId() + "-head'");
	oRM.addClass("sapMITBHead");

	if (bTextOnly) {
		oRM.addClass("sapMITBTextOnly");
	}

	if (bNoText) {
		oRM.addClass("sapMITBNoText");
	}

	oRM.writeClasses();
	oRM.write(">");

	jQuery.each(aItems, function(iIndex, oItem) {
		if(!(oItem instanceof sap.m.IconTabSeparator) && !oItem.getVisible()) {
			return; // only render visible items
		}
		oRM.write("<div ");
		oRM.writeElementData(oItem);
		oRM.addClass("sapMITBItem");

		if (oItem instanceof sap.m.IconTabFilter) {

			if(oItem.getDesign() === sap.m.IconTabFilterDesign.Vertical) {
				oRM.addClass("sapMITBVertical");
			} else if (oItem.getDesign() === sap.m.IconTabFilterDesign.Horizontal) {
				oRM.addClass("sapMITBHorizontal");
			}

			if (oItem.getShowAll()) {
				oRM.addClass("sapMITBAll");
			} else {
				oRM.addClass("sapMITBFilter");
				oRM.addClass("sapMITBFilter" + oItem.getIconColor());
			}

			if (!oItem.getEnabled()) {
				oRM.addClass("sapMITBDisabled");
			}

			var sTooltip = oItem.getTooltip_AsString();
			if (sTooltip) {
				oRM.writeAttributeEscaped("title", sTooltip);
			}

			oRM.writeClasses();
			oRM.write(">");
			oRM.write("<div id='" + oItem.getId() + "-tab' class='sapMITBTab'>");

			if (!oItem.getShowAll() || !oItem.getIcon()) {
				oRM.renderControl(oItem._getImageControl(['sapMITBFilterIcon', 'sapMITBFilter' + oItem.getIconColor()], oControl, sap.m.IconTabBarRenderer._aAllIconColors));	
			}

			if (!oItem.getShowAll() && !oItem.getIcon() && !bTextOnly)  {
				oRM.write("<span class='sapMITBFilterNoIcon'> </span>");
			}

			if (oItem.getDesign() === sap.m.IconTabFilterDesign.Horizontal) {
				oRM.write("</div>");
				oRM.write("<div class='sapMITBHorizontalWrapper'>");
			}

			oRM.write("<span ");
			oRM.addClass("sapMITBCount");
			oRM.writeClasses();
			oRM.write(">");

			if ((oItem.getCount() === "") && (oItem.getDesign() === sap.m.IconTabFilterDesign.Horizontal)) {
				//this is needed for the correct placement of the text in the horizontal design
				oRM.write("&nbsp;");
			} else {
				oRM.writeEscaped(oItem.getCount());
			}

			oRM.write("</span>");

			if (oItem.getDesign() === sap.m.IconTabFilterDesign.Vertical) {
				oRM.write("</div>");
			}

			if (oItem.getText().length) {
				oRM.write("<div id='" + oItem.getId() + "-text' class=\"sapMITBText\">");
				oRM.writeEscaped(oItem.getText());
				oRM.write("</div>");
			}

			if (oItem.getDesign() === sap.m.IconTabFilterDesign.Horizontal) {
				oRM.write("</div>");
			}

		} else { // separator
			oRM.addClass("sapMITBSep");

			if (!oItem.getIcon()) {
				oRM.addClass("sapMITBSepLine");
			}
			oRM.writeClasses();
			oRM.write(">");
			
			if (oItem.getIcon()) {
				oRM.renderControl(oItem._getImageControl(['sapMITBSepIcon'], oControl));	
			}
		}
		oRM.write("</div>");
	});

	oRM.write("</div>");

	if (!sap.ui.Device.system.desktop || (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8)) {
		oRM.write("</div>"); //scrollContainer
	}

		oRM.renderControl(oControl._getScrollingArrow("right"));

	var oContent = oControl.getContent();

	oRM.write("<div id=\"" + oControl.getId() + "-containerContent\" ");
	oRM.addClass("sapMITBContainerContent");

	if(!oControl.getExpanded()) { // add special styles  when closed
		oRM.addClass("sapMITBContentClosed");
	}

	oRM.writeClasses();
	oRM.write(">");

	// content arrow
	oRM.write("<div id=\"" + oControl.getId() + "-contentArrow\" ");
	oRM.addClass("sapMITBContentArrow");

	if(!oControl.getExpanded()) { // hide arrow when closed
		oRM.addClass("sapMITBNoContentArrow");
	}

	oRM.writeClasses();
	oRM.write("></div>");

	// inner content div
	oRM.write("<div id=\"" + oControl.getId() + "-content\" class=\"sapMITBContent\" ");
	if(!oControl.getExpanded()) { // hide content when closed
		oRM.write("style=\"display: none\"");
	}
	oRM.write(">");
		
	if (oControl.getExpanded()) {
		// content from selected item
		if (oControl.oSelectedItem && oControl.oSelectedItem.getContent()) {
			var oContentSelectedTab = oControl.oSelectedItem.getContent();
			if (oContentSelectedTab.length > 0) {
				oContent = oContentSelectedTab;
			}
		}
		// render the content
		if (oContent.length > 0) {
			for (var i = 0; i < oContent.length; i++) {
				oRM.renderControl(oContent[i]);
			}
		}
	}

	oRM.write("</div>");
	oRM.write("</div>");
	oRM.write("</div>");
};


}; // end of sap/m/IconTabBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ImageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
 
// Provides default renderer for control sap.m.Image
jQuery.sap.declare("sap.m.ImageRenderer");

/**
 * @class Image renderer. 
 * @author D051016
 * @static
 */
sap.m.ImageRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ImageRenderer.render = function(rm, oImage){ 
	// Return immediately if control is invisible
	if (!oImage.getVisible()) {
		return;
	}
	
	// Open the <img> tag
	rm.write("<img");

	rm.writeAttributeEscaped("src", oImage._getDensityAwareSrc());
	rm.writeControlData(oImage);
	
	rm.addClass("sapMImg");
	if(oImage.hasListeners("press") || oImage.hasListeners("tap")){
		rm.addClass("sapMPointer");
	}
	rm.writeClasses();
	
	//TODO need further discussion to decide if tooltip is still needed for mobile
	var tooltip = oImage.getTooltip_AsString();
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}

	//TODO implement the ImageMap control
	var sUseMap = oImage.getUseMap();
	if (sUseMap) {
		if (!(jQuery.sap.startsWith(sUseMap, "#"))) {
			sUseMap = "#" + sUseMap;
		}
		rm.writeAttributeEscaped("useMap", sUseMap);
	}
	
	// determine tab index and write alt attribute - both depending on "decorative" state (which is overridden by the "useMap" property
	var myTabIndex = 0;
	if ((oImage.getDecorative() && (!sUseMap))) {
		myTabIndex = -1;
		rm.writeAttribute("role", "presentation");
		rm.write(" alt=''"); // accessibility requirement: write always empty alt attribute for decorative images
	} else {
		if (oImage.getAlt()) {
			rm.writeAttributeEscaped("alt", oImage.getAlt() || tooltip); // accessibility requirement: use tooltip for alt if alt is not set
		} else if (tooltip) {
			rm.writeAttributeEscaped("alt", tooltip);
		}
	}
	rm.writeAttribute("tabIndex", myTabIndex);
	
	// Dimensions

	if (oImage.getWidth() && oImage.getWidth() != '') {
		rm.addStyle("width", oImage.getWidth());
	}
	if (oImage.getHeight() && oImage.getHeight() != '') {
		rm.addStyle("height", oImage.getHeight());
	}
	rm.writeStyles();
	
	var sTooltip = oImage.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	
	rm.write(" />"); // close the <img> element
};

}; // end of sap/m/ImageRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.InputBaseRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.InputBaseRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class Input renderer.
 * @static
 */
sap.m.InputBaseRenderer = {};

sap.m.InputBaseRenderer.render = function(rm, oControl) {
	if (!oControl.getVisible()) {
		return;
	}

	rm.write("<div");
	rm.writeControlData(oControl);

	// outer styles
	this.addOuterStyles(rm, oControl);
	oControl.getWidth() && rm.addStyle("width", oControl.getWidth());
	rm.writeStyles();

	// outer classes
	rm.addClass("sapMInputBase");
	this.addCursorClass(rm, oControl);
	this.addOuterClasses(rm, oControl);
	!oControl.getEnabled() && rm.addClass("sapMInputBaseDisabled");
	!oControl.getEditable() && rm.addClass("sapMInputBaseReadonly");
	oControl.getValueState() != "None" && rm.addClass("sapMInputBase" + oControl.getValueState());
	rm.writeClasses();

	// outer attributes
	this.writeOuterAttributes(rm, oControl);
	var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oControl, oControl.getTooltip_AsString());
	sTooltip && rm.writeAttributeEscaped("title", sTooltip);
	rm.write(">");

	// enable self-made placeholder
	if (oControl._bShowLabelAsPlaceholder) {
		rm.write("<label class='sapMInputBasePlaceholder'");
		rm.writeAttribute("id", oControl.getId() + "-placeholder");
		rm.writeAttribute("for", oControl.getId() + "-inner");
		rm.write(">");
		rm.writeEscaped(oControl.getPlaceholder());
		rm.write("</label>");
	}

	// start inner
	this.openInputTag(rm, oControl);

	// inner attributes
	rm.writeAttribute("id", oControl.getId() + "-inner");

	// write the name of input
	if (oControl.getName()) {
		rm.writeAttributeEscaped("name", oControl.getName());
	}

	// let the browser handle placeholder
	if (!oControl._bShowLabelAsPlaceholder && oControl.getPlaceholder()) {
		rm.writeAttributeEscaped("placeholder", oControl.getPlaceholder());
	}

	// check if there is a maxLength property
	if (oControl.getMaxLength && oControl.getMaxLength() > 0) {
		rm.writeAttribute("maxlength", oControl.getMaxLength());
	}

	// check disable and readonly
	if (!oControl.getEnabled()) {
		rm.writeAttribute("disabled", "disabled");
	} else  if (!oControl.getEditable()) {
		rm.writeAttribute("tabindex", "-1");
		rm.writeAttribute("readonly", "readonly");
		rm.addClass("sapMInputBaseReadonlyInner");
	}

	this.writeInnerValue(rm, oControl);
	this.writeInnerAttributes(rm, oControl);

	// inner classes
	rm.addClass("sapMInputBaseInner");
	this.addInnerClasses(rm, oControl);
	oControl.getValueState() != "None" && rm.addClass("sapMInputBase" + oControl.getValueState() + "Inner");
	rm.writeClasses();

	// inner styles
	this.addInnerStyles(rm, oControl);
	rm.writeStyles();
	rm.write(">");

	// finish inner
	this.writeInnerContent(rm, oControl);
	this.closeInputTag(rm, oControl);

	// finish outer
	rm.write("</div>");
};

/**
 * This function is reserved for derived class to add extra attributes to Input
 *
 * @deprecated sap.m.InputBaseRenderer#writeInnerAttributes should be called instead of this method
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.writeAttributes = function(oRm, oControl) {
	jQuery.sap.log.warning("Usage of deprecated function: sap.m.InputBaseRenderer#writeAttributes");
	this.writeInnerAttributes(oRm, oControl);
};

/**
 * Adds extra CSS class
 *
 * @deprecated sap.m.InputBaseRenderer#addOuterClasses should be called instead of this method
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.addClasses = function(oRm, oControl) {
	jQuery.sap.log.warning("Usage of deprecated function: sap.m.InputBaseRenderer#addClasses");
	this.addOuterClasses(oRm, oControl);
};


/**
 * Write the opening tag name of the input
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.openInputTag = function(oRm, oControl) {
	oRm.write("<input");
};

/**
 * Write the value of the input
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.writeInnerValue = function(oRm, oControl) {
	oRm.writeAttributeEscaped("value", oControl.getValue());
};


/**
 * Add cursor class to input container
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.addCursorClass = function(oRm, oControl) {
	if (oControl.getEnabled()) {
		oRm.addClass("sapMInputBaseCursor");
	}
};


/**
 * This function is reserved for derived class to add extra styles for input container
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.addOuterStyles = function(oRm, oControl) {
};

/**
 * This function is reserved for derived class to add extra classes for input container
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.addOuterClasses = function(oRm, oControl) {
};

/**
 * This function is reserved for derived class to add extra attributes for input container
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.writeOuterAttributes = function(oRm, oControl) {
};

/**
 * This function is reserved for derived class to add extra styles for input element
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.addInnerStyles = function(oRm, oControl) {
};

/**
 * This function is reserved for derived class to add extra classes for input element
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.addInnerClasses = function(oRm, oControl) {
};

/**
 * This function is reserved for derived class to add extra attributes for input element
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.writeInnerAttributes = function(oRm, oControl) {
};

/**
 * Write the value of the input
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.writeInnerContent = function(oRm, oControl) {
};

/**
 * Write the closing tag name of the input
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.closeInputTag = function(oRm, oControl) {
};
}; // end of sap/m/InputBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.InputRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


jQuery.sap.declare("sap.m.InputRenderer");

/**
 * @class Input renderer.
 * @static
 *
 * InputRenderer extends the InputBaseRenderer
 */
sap.m.InputRenderer = sap.ui.core.Renderer.extend(sap.m.InputBaseRenderer);

/**
 * Adds control specific class
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputRenderer.addOuterClasses = function(oRm, oControl) {
	oRm.addClass("sapMInput");
	if(oControl.getShowValueHelp() && oControl.getEnabled() && oControl.getEditable()) {
		oRm.addClass("sapMInputVH");
	}
};

/**
 * add extra attributes to Input
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputRenderer.writeInnerAttributes = function(oRm, oControl) {
	oRm.writeAttribute("type", oControl.getType().toLowerCase());
	if ((!oControl.getEnabled() && oControl.getType() == "Password")
			|| (oControl.getShowSuggestion() && sap.ui.Device.system.phone)){
		// required for JAWS reader on password fields on desktop:
		oRm.writeAttribute("readonly", "readonly");
	}
};

/**
 * Adds inner css classes to the input field
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputRenderer.addInnerClasses = function(oRm, oControl) {
};

/**
 * add extra content to Input
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputRenderer.writeInnerContent = function(oRm, oControl) {
	 if(oControl.getShowValueHelp() && oControl.getEnabled() && oControl.getEditable()) {
		oRm.write('<div class="sapMInputValHelp">');
		oRm.renderControl(oControl._getValueHelpIcon());
		oRm.write("</div>");
	 }
};
}; // end of sap/m/InputRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.InstanceManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.m.InstanceManager
jQuery.sap.declare("sap.m.InstanceManager");
/**
 * @class Provides methods to manage instances. This is specifically designed for managing the opened Popover, Dialog, ActionSheet,
 * and it's possible to close all of the opened Popover, Dialog, ActionSheet in history handling.
 *
 * As <code>InstanceManager</code> is a static class, a <code>jQuery.sap.require("sap.m.InstanceManager");</code> statement
 * must be explicitly executed before the class can be used. Example:
 * <pre>
 *   jQuery.sap.require("sap.m.InstanceManager");
 *   sap.m.InstanceManager.closeAllPopovers();
 * </pre>
 *
 * @static
 * @public
 * @since 1.9.2
 */
sap.m.InstanceManager = {};

(function() {
	var mRegistry = {},
		aEmptyArray = [];
	
	var sPopoverCategoryId = "_POPOVER_",
		sDialogCategoryId = "_DIALOG_";

	/**
	 * Adds an instance to the given category.
	 *
	 * @param {string} sCategoryId The category's id.
	 * @param {object} oInstance The instance that will be added to the given category.
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.addInstance = function(sCategoryId, oInstance) {
		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.addInstance method, the parameter sCategoryId can't be null or empty string");
		jQuery.sap.assert(oInstance instanceof Object, "In sap.m.InstanceManager.addInstance method, the parameter oInstance should be an object");

		if (!mRegistry[sCategoryId]) {
			mRegistry[sCategoryId] = [];
		}

		mRegistry[sCategoryId].push(oInstance);

		return this;
	};

	/**
	 * Removes a managed instance from the given category.
	 *
	 * @param {string} sCategoryId The category's id.
	 * @param {object} oInstance The instance that will be removed from the given category.
	 * @returns The removed instance or null. If the instance isn't managed, this method returns null instead of the instance object.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.removeInstance = function(sCategoryId, oInstance) {
		var aCategory = mRegistry[sCategoryId],
			i;

		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.removeInstance method, the parameter sCategoryId can't be null or empty string");
		jQuery.sap.assert(oInstance instanceof Object, "In sap.m.InstanceManager.removeInstance method, the parameter oInstance should be an object");

		if (!aCategory) {
			jQuery.sap.log.warning("Can't remove control from a non-managed category id: " + sCategoryId);
			return null;
		}

		i = aCategory.indexOf(oInstance);

		return (i === -1) ? null : aCategory.splice(i, 1);
	};

	/**
	 * Returns an array of managed instances in the given category.
	 *
	 * @param {string} sCategoryId The category's id.
	 * @returns {object} Managed instances in the given category.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.getInstancesByCategoryId = function(sCategoryId) {
		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.getInstancesByCategoryId method, the parameter sCategoryId can't be null or empty string");

		return mRegistry[sCategoryId] || aEmptyArray;
	};

	/**
	 * Checks if an instance is managed under the given category.
	 * 
	 * @param {string} sCategoryId The category that the instance is supposed to be in.
	 * @param {object} oInstance The instance that needs to be checked.
	 * @returns {boolean} Whether the instance is managed in the given category.
	 * @protected
	 * @function
	 */
	sap.m.InstanceManager.isInstanceManaged = function(sCategoryId, oInstance) {
		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.isInstanceManaged method, the parameter sCategoryId can't be null or empty string");
		jQuery.sap.assert(oInstance instanceof Object, "In sap.m.InstanceManager.isInstanceManaged method, the parameter oInstance should be an object");

		var aCategory = mRegistry[sCategoryId];

		if (!aCategory || !oInstance) {
			return false;
		}

		return aCategory.indexOf(oInstance) !== -1;
	};

	/**
	 * Returns if there's no managed instance in the given category.
	 *
	 * @param {string} sCategoryId The category's id.
	 * @returns {boolean} Whether the category is empty.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.isCategoryEmpty = function(sCategoryId) {
		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.isCategoryEmpty method, the parameter sCategoryId can't be null or empty string");

		var aCategory = mRegistry[sCategoryId];

		return !aCategory || aCategory.length === 0;
	};

	/**
	 * Adds a control to predefined popover category in instance manager.
	 *
	 * @param {sap.ui.core.Control} oPopover Popover to be added to instance manager. Custom popover which doesn't inherit from sap.m.Popover can also be added as long as it has a close method.
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.addPopoverInstance = function(oPopover){
		if (typeof oPopover.close === "function") {
			sap.m.InstanceManager.addInstance(sPopoverCategoryId, oPopover);
		}else{
			jQuery.sap.log.warning("In method addPopoverInstance: the parameter doesn't have a close method and can't be managed.");
		}
		return this;
	};
	
	/**
	 * Adds a control to predefined dialog category in instance manager.
	 *
	 * @param {sap.ui.core.Control} oDialog Dialog to be added to instance manager. Dialog which doesn't inherit from sap.m.Dialog can also be added as long as it has a close method.
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.addDialogInstance = function(oDialog){
		if (typeof oDialog.close === "function" ) {
			sap.m.InstanceManager.addInstance(sDialogCategoryId, oDialog);
		}else{
			jQuery.sap.log.warning("In method addDialogInstance: the parameter doesn't have a close method and can't be managed.");
		}
		return this;
	};
	
	/**
	 * Removes control from predefined popover category in instance manager.
	 *
	 * @param {sap.ui.core.Control} Popover to be removed from instance manager.
	 * @returns The removed popover or null. If the popover isn't managed, this method returns null instead of the removed popover.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.removePopoverInstance = function(oPopover){
		return sap.m.InstanceManager.removeInstance(sPopoverCategoryId, oPopover);
	};
	
	/**
	 * Removes control from predefined dialog category in instance manager.
	 *
	 * @param {sap.ui.core.Control} Dialog to be removed from instance manager.
	 * @returns The removed popover or null. If the popover isn't managed, this method returns null instead of the removed popover.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.removeDialogInstance = function(oDialog){
		return sap.m.InstanceManager.removeInstance(sDialogCategoryId, oDialog);
	};
	
	/**
	 * Returns true if there's popover(s) managed in predefined popover category, otherwise it returns false.
	 *
	 * @returns {boolean} Whether there's popover(s) open.
	 * @public
	 * @function
	*/
	sap.m.InstanceManager.hasOpenPopover = function(){
		return !sap.m.InstanceManager.isCategoryEmpty(sPopoverCategoryId);
	};
	
	/**
	 * Returns true if there's dialog(s) managed in predefined dialog category, otherwise it returns false.
	 *
	 * @returns {boolean} Whether there's dialog(s) open.
	 * @public
	 * @function
	*/
	sap.m.InstanceManager.hasOpenDialog = function(){
		return !sap.m.InstanceManager.isCategoryEmpty(sDialogCategoryId);
	};
	
	/**
	 * Check if the given dialog instance is managed under the dialog category.
	 * For dialog instances, managed means the dialog is open.
	 * 
	 * This function is specially provided for customized controls which doesn't have the possibility to check whether it's open.
	 * If the given dialog is an instance of sap.m.Dialog, sap.m.ActionSheet, the isOpen() method on the instance is 
	 * preferred to be called than this function.
	 * 
	 * @param {sap.ui.core.Control} oDialog The dialog that is checked for the openness.
	 * @returns Whether the given dialog is open.
	 * @public
	 * @function
	 */
	sap.m.InstanceManager.isDialogOpen = function(oDialog){
		return sap.m.InstanceManager.isInstanceManaged(sDialogCategoryId, oDialog);
	};
	
	/**
	 * Check if the given popover instance is managed under the popover category.
	 * For popover instances, managed means the popover is open.
	 * 
	 * This function is specially provided for customized controls which doesn't have the possibility to check whether it's open. 
	 * If the given popover is an instance of sap.m.Popover, sap.m.ActionSheet, the isOpen() method on the instance is 
	 * preferred to be called than this function.
	 * 
	 * @param {sap.ui.core.Control} oPopover The popover that is checked for the openness.
	 * @returns Whether the given popover is open.
	 * @public
	 * @function
	 */
	sap.m.InstanceManager.isPopoverOpen= function(oPopover){
		return sap.m.InstanceManager.isInstanceManaged(sPopoverCategoryId, oPopover);
	};
	
	/**
	 * Gets all of the open popovers. If there's no popover open, it returns an empty array.
	 *
	 * @return {sap.ui.core.Control[]} The open popovers.
	 * @public
	 * @function
	*/
	sap.m.InstanceManager.getOpenPopovers = function(){
		return sap.m.InstanceManager.getInstancesByCategoryId(sPopoverCategoryId);
	};
	
	/**
	 * Gets all of the open dialogs. If there's no dialog open, it returns an empty array.
	 *
	 * @return {sap.ui.core.Control[]} The open dialogs.
	 * @public
	 * @function
	*/
	sap.m.InstanceManager.getOpenDialogs = function(){
		return sap.m.InstanceManager.getInstancesByCategoryId(sDialogCategoryId);
	};
	
	/**
	 * Closes all open popovers.
	 *
	 * @public
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @function
	*/
	sap.m.InstanceManager.closeAllPopovers = function(){
		var aIntances = sap.m.InstanceManager.getOpenPopovers(), i;
		for(i = 0 ; i < aIntances.length ; i++){
			aIntances[i].close();
		}
		return this;
	};
	
	/**
	 * Closes all of the open dialogs.
	 *
	 * @public
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @function
	*/
	sap.m.InstanceManager.closeAllDialogs = function(fnCallback) {
		var oDeferred,
			aDeferred = [], 
			aIntances = sap.m.InstanceManager.getOpenDialogs(), 
			dialog,
			i;
		
		for(i = 0 ; i < aIntances.length; i++){
			dialog = aIntances[i];
			
			if (fnCallback) {
				oDeferred = new jQuery.Deferred().done();
				aDeferred.push(oDeferred);

				dialog.attachEvent("afterClose", function(def){
					return function() {
						def.resolve();
					};
				} (oDeferred));

			}
			
			dialog.close();
		}
		
		if(fnCallback) {
			jQuery.when.apply(this, aDeferred).then(fnCallback);
		}
  
		return this;
	};
}());
}; // end of sap/m/InstanceManager.js
if ( !jQuery.sap.isDeclared('sap.m.LabelRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */


jQuery.sap.declare("sap.m.LabelRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Label renderer.
 * @static
 */
sap.m.LabelRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oLabel an object representation of the control that should be rendered
 */
sap.m.LabelRenderer.render = function(rm, oLabel){
	// return immediately if control is invisible
	if (!oLabel.getVisible()) {
		return;
	}

	// convenience variable
	var r = sap.m.LabelRenderer;

	// write the HTML into the render manager
	rm.write("<label");
	rm.writeControlData(oLabel);

	// Styles
	rm.addClass("sapMLabel");
	//set design to bold
	if (oLabel.getDesign() == sap.m.LabelDesign.Bold) {
		rm.addStyle("font-weight", "bold");
	}

	if (oLabel.getRequired()) {
		rm.addClass("sapMLabelRequired");
	}

	if (oLabel.getLabelForRendering()) {
		var oFor = sap.ui.getCore().byId(oLabel.getLabelForRendering());
		rm.write(" for=\"");
		// for some controls the label must point to a special HTML element, not the outer one.
		if ( oFor && oFor.getIdForLabel) {
			rm.write(oFor.getIdForLabel());
		} else{
			rm.write(oLabel.getLabelForRendering());
		}
		rm.write("\"");
	}

	// Text direction
	var sTextDir = oLabel.getTextDirection();
	if (sTextDir) {
		rm.addStyle("direction", sTextDir.toLowerCase());
	}

	// Style for width
	var sWidth = oLabel.getWidth();
	if (sWidth) {
		rm.addStyle("width", sWidth);
	} else {
		rm.addClass("sapMLabelMaxWidth");
	}

	// Style for text alignment
	var sTextAlign = oLabel.getTextAlign();
	if(sTextAlign) {
		var sTextAlign = r.getTextAlign(sTextAlign, sTextDir);
		if (sTextAlign) {
			rm.addStyle("text-align", sTextAlign);
		}
	}

	var sLabelText = oLabel.getText();
	if (sLabelText =="") {
		rm.addClass("sapMLabelNoText");
	}

	rm.writeStyles();
	rm.writeClasses();

	var sTooltip = oLabel.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}

	rm.write(">");

	// Write the label text

	if (sLabelText) {
		rm.writeEscaped(sLabelText);
	}
	rm.write("</label>");
};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.m.LabelRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;

}; // end of sap/m/LabelRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.LinkRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

 jQuery.sap.declare("sap.m.LinkRenderer");

/**
 * @class Link renderer
 * @static
 */
sap.m.LinkRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.LinkRenderer.render = function(rm, oControl) {
	// Return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	// Link is rendered as a "<a>" element
	rm.write("<a");
	rm.writeControlData(oControl);

	rm.addClass("sapMLnk");
	if (!oControl.getEnabled()) {
		rm.addClass("sapMLnkDsbl");
		rm.writeAttribute("disabled", "true");
		rm.writeAttribute("tabIndex", "-1");
	} else {
		rm.writeAttribute("tabIndex", "0");
	}
	if (oControl.getWrapping()) {
		rm.addClass("sapMLnkWrapping");
	}

	if (oControl.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
	}

	if (oControl.getHref()) {
		rm.writeAttributeEscaped("href", oControl.getHref());
	}	else {
		rm.writeAttribute("href", "javascript:void(0);");
	}

	if (oControl.getTarget()) {
		rm.writeAttributeEscaped("target", oControl.getTarget());
	}

	if (oControl.getWidth()) {
		rm.addStyle("width", oControl.getWidth());
	} else {
		rm.addClass("sapMLnkMaxWidth");
	}

	rm.writeClasses();
	rm.writeStyles();
	rm.write(">"); // opening <a> tag

	if (oControl.getText()) {
		rm.writeEscaped(oControl.getText());
	}

	rm.write("</a>");
};

}; // end of sap/m/LinkRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ListBaseRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ListBaseRenderer");
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/**
 * @class List renderer.
 * @static
 */
sap.m.ListBaseRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ListBaseRenderer.render = function(rm, oControl) {
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	// container
	rm.write("<div");
	rm.addClass("sapMList");
	rm.writeControlData(oControl);
	rm.writeAttribute("tabindex", "-1");
	if (oControl.getInset()) {
		rm.addClass("sapMListInsetBG");
	}
	if (oControl.getWidth()) {
		rm.addStyle("width", oControl.getWidth());
	}

	// background
	if (oControl.getBackgroundDesign) {
		rm.addClass("sapMListBG" + oControl.getBackgroundDesign());
	}

	// run hook method
	this.renderContainerAttributes(rm, oControl);

	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");

	// dummy before focusable area
	rm.write("<div tabindex='-1'");
	rm.writeAttribute("id", oControl.getId("before"));
	rm.write("></div>");

	// render header
	var sHeaderText = oControl.getHeaderText();
	var oHeaderTBar = oControl.getHeaderToolbar();
	if (oHeaderTBar) {
		oHeaderTBar.setDesign(sap.m.ToolbarDesign.Transparent, true);
		rm.renderControl(oHeaderTBar);
	} else if (sHeaderText) {
		rm.write("<div class='sapMListHdr'>");
		rm.writeEscaped(sHeaderText);
		rm.write("</div>");
	}

	// render info bar
	var oInfoTBar = oControl.getInfoToolbar();
	if (oInfoTBar) {
		oInfoTBar.setDesign(sap.m.ToolbarDesign.Info, true);
		rm.renderControl(oInfoTBar);
	}

	// run hook method to start building list
	this.renderListStartAttributes(rm, oControl);

	// list attributes
	rm.addClass("sapMListUl");
	rm.writeAttribute("tabindex", "-1");
	rm.writeAttribute("id", oControl.getId("listUl"));

	// separators
	rm.addClass("sapMListShowSeparators" + oControl.getShowSeparators());

	// modes
	rm.addClass("sapMListMode" + oControl.getMode());

	// inset
	oControl.getInset() && rm.addClass("sapMListInset");

	// write inserted styles and classes
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");

	// run hook method to render list head attributes
	this.renderListHeadAttributes(rm, oControl);

	// render child controls
	var aItems = oControl.getItems();
	var bRenderItems = oControl.shouldRenderItems();

	//TODO: There should be a better way to set these private variables
	bRenderItems && aItems.forEach(function(oItem) {
		oControl._applySettingsToItem(oItem, true);
		rm.renderControl(oItem);
	});

	// render no-data if needed
	if ((!bRenderItems || !aItems.length) && oControl.getShowNoData()) {
		// hook method to render no data
		this.renderNoData(rm, oControl);
	}

	// run hook method to finish building list
	this.renderListEndAttributes(rm, oControl);

	// render growing delegate if available
	if (bRenderItems && oControl._oGrowingDelegate) {
		oControl._oGrowingDelegate.render(rm);
	}

	// footer
	if (oControl.getFooterText()) {
		rm.write("<footer class='sapMListFtr'>");
		rm.writeEscaped(oControl.getFooterText());
		rm.write("</footer>");
	}

	// dummy after focusable area
	rm.write("<div tabindex='-1'");
	rm.writeAttribute("id", oControl.getId("after"));
	rm.write("></div>");

	// done
	rm.write("</div>");
};

/**
 * This hook method is called to render container attributes
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ListBaseRenderer.renderContainerAttributes = function(rm, oControl) {
};

/**
 * This hook method is called after <ul> and before first <li>
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ListBaseRenderer.renderListHeadAttributes = function(rm, oControl) {
};

/**
 * This hook method is called to render list tag
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ListBaseRenderer.renderListStartAttributes = function(rm, oControl) {
	rm.write("<ul");
	oControl.addNavSection(oControl.getId("listUl"));
};

/**
 * This hook method is called to finish list rendering
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ListBaseRenderer.renderListEndAttributes = function(rm, oControl) {
	rm.write("</ul>");
};

/**
 * This hook method is called to render no data field
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ListBaseRenderer.renderNoData = function(rm, oControl) {
	rm.write("<li id='" + oControl.getId("nodata") + "' class='sapMLIB sapMListNoData sapMLIBTypeInactive'>");
	rm.write("<span id='" + oControl.getId("nodata-text") + "'>");
	rm.writeEscaped(oControl.getNoDataText(true));
	rm.write("</span></li>");
};

}; // end of sap/m/ListBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ListItemBaseRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ListItemBaseRenderer");
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * @class ListitemBase renderer.
 * @static
 */
sap.m.ListItemBaseRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ListItemBaseRenderer.render = function(rm, oLI) {
	// return immediately if control is invisible
	if (!oLI.getVisible()) {
		return;
	}

	var _bShowUnreadBubble = (sap.ui.core.theming.Parameters.get("sapUiLIUnreadAsBubble") == "true");

	// define behavior: list or table
	var sId = oLI.getId(),
		oParent = oLI.getParent(),
		isTable = !oLI.hasOwnProperty("_renderInList") && oParent && oParent.getColumns && oParent.getColumns().length,
		bNoFlex = oLI._bNoFlex, // IE9 does not support flex-box: render as a table
		rowEndTag, rowStartTag, openCellTag, closeCellTag, hasPopin = false,
		sTooltip = oLI.getTooltip_AsString();

	if (!isTable) {
		rowEndTag = "</li>";
		rowStartTag = "<li tabindex='-1'";
		openCellTag = function() {
			rm.write("<div");
		};
		closeCellTag = function() {
			rm.write("</div>");
		};
	} else {
		rowEndTag = "</tr>";
		rowStartTag = "<tr tabindex='-1'";
		hasPopin = oParent.hasPopin() && sap.m.ColumnListItem && oLI instanceof sap.m.ColumnListItem;
		openCellTag = function(cls, bDontCreateDiv) {
			rm.write("<td");
			if (cls) {
				rm.addClass(cls);
				rm.writeClasses();
			}
			if (!bDontCreateDiv) {
				rm.write("><div");
			}
		};
		closeCellTag = function(bDontCreateDiv) {
			if (!bDontCreateDiv) {
				rm.write("</div>");
			}
			rm.write("</td>");
		};
	}

	rm.write(rowStartTag);
	sTooltip && rm.writeAttributeEscaped("title", sTooltip);
	rm.writeControlData(oLI);
	rm.addClass("sapMLIB");
	rm.addClass("sapMLIB-CTX");
	if(!isTable && bNoFlex){ // switch to the no-flex rendering
		rm.addClass("sapMLIBNoFlex");
	}

	rm.addClass("sapMLIBShowSeparator");

	if (oLI._includeItemInSelection || oLI._mode == "SingleSelectMaster" || (oLI.getType() != "Inactive" && oLI.getType() != "Detail")) {
		rm.addClass("sapMLIBCursor");
	}

	//unread switch... bubble or is shown as bold text
	if (oLI._showUnread && oLI.getUnread()) {
		rm.addClass("sapMLIBUnread");
		if(!_bShowUnreadBubble){
			rm.addClass("sapMLIBUnreadBold");
		}
	}
	if (hasPopin) {
		rm.addClass("sapMListTblSupRow");
	}

	// TODO: Remove this unnecessary class name sapMLIBUnread is enough
	if (oLI._showUnread && oLI.getUnread()) {
		rm.addClass("sapMLIBUnreadRow");
	}

	// LI attributes hook
	if (this.renderLIAttributes) {
		this.renderLIAttributes(rm, oLI);
	}

	rm.addClass("sapMLIBType" + oLI.getType());

	// LI content hook
	if (this.renderLIContent) {

		// depending on the mode of the list a checkbox or radiobutton will be
		// rendered. If a switch between list modes happens, an animation will be
		// added for the selection area
		var oSelectControl = null;

		switch (oLI._mode) {
		case "SingleSelectLeft":
			oSelectControl = oLI._getRadioButton((sId + "-selectSingle"), oLI._listId + "_selectGroup");
			if (oLI.getSelected()) {
				rm.addClass("sapMLIBSelected");
			}
			rm.writeClasses();
			rm.write(">");

			openCellTag("sapMListTblSelCol");
			rm.addClass("sapMLIBSelectSL");
			if (oLI._oldMode === "None" && oLI._modeAnimationOn) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", sId + "-mode");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oSelectControl);
			closeCellTag();
			oLI._oldMode = oLI._mode;
			break;
		case "SingleSelect":
			oSelectControl = oLI._getRadioButton((sId + "-selectSingle"), oLI._listId + "_selectGroup");
			if (oLI.getSelected()) {
				rm.addClass("sapMLIBSelected");
			}
			rm.writeClasses();
			rm.write(">");
			break;
		case "SingleSelectMaster":
			oSelectControl = oLI._getRadioButton((sId + "-selectSingleMaster"), oLI._listId + "_selectMasterGroup");
			if (oLI.getSelected()) {
				rm.addClass("sapMLIBSelected");
			}
			rm.writeClasses();
			rm.write(">");
			openCellTag("sapMListTblNone");
			rm.addClass("sapMLIBSelectSM");
			rm.writeAttribute("id", sId + "-mode");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oSelectControl);
			closeCellTag();
			oLI._oldMode = oLI._mode;
			break;
		case "MultiSelect":
			oSelectControl = oLI._getCheckBox((sId + "-selectMulti"));
			if (oLI.getSelected()) {
				rm.addClass("sapMLIBSelected");
			}
			rm.writeClasses();
			rm.write(">");
			openCellTag("sapMListTblSelCol");
			rm.addClass("sapMLIBSelectM");
			if (oLI._oldMode === "None" && oLI._modeAnimationOn) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", sId + "-mode");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oSelectControl);
			closeCellTag();
			oLI._oldMode = oLI._mode;
			break;
		case "Delete":
			rm.writeClasses();
			rm.write(">");
			if(sap.ui.core.theming.Parameters.get("sapMPlatformDependent") === "true"){
				openCellTag("sapMListTblSelCol");
				rm.addClass("sapMLIBSelectD");
				if (oLI._oldMode === "None" && oLI._modeAnimationOn) {
					rm.addClass("sapMLIBSelectAnimation");
				}
				rm.writeAttribute("id", sId + "-mode");
				rm.writeClasses();
				rm.write(">");
				var delIcon = null;
				if (sap.ui.core.theming.Parameters.get("sapUiLIDelIcon") == "false"){
					delIcon = oLI._getDelImage((sId + "-imgDel"), "sapMLIBImgDel", "delete_icon.png");
				}
				else{
					var sURI = sap.ui.core.IconPool.getIconURI("sys-cancel");
					delIcon = oLI._delIcon || new sap.ui.core.Icon(sId + "-imgDel",{src:sURI}).setParent(oLI, null, true).addStyleClass("sapMLIBIconDel").attachPress(oLI._delete);;
				}
				if (delIcon) {
					oLI._delIcon = delIcon;
					rm.renderControl(delIcon);
				}
				closeCellTag();
				oLI._oldMode = oLI._mode;
			}
			break;
		case "None":
			rm.writeClasses();
			rm.write(">");
			if (!isTable && !bNoFlex && oLI._oldMode && oLI._oldMode !== "None"
					&& oLI._oldMode !== "SingleSelect" && oLI._oldMode !== "SingleSelectMaster"
					&& !(oLI._oldMode == "Delete" && sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== "true")
					&& oLI._modeAnimationOn) {
				openCellTag();
				rm.addClass("sapMLIBUnselectAnimation");
				rm.writeAttribute("id", sId + "-mode");
				rm.writeClasses();
				rm.write(">");
				closeCellTag();
			}
			break;
		}

		if (oLI._showUnread && _bShowUnreadBubble) {
			openCellTag("sapMListTblUnreadCol");
			rm.writeAttribute("id", sId + "-unread");
			rm.addClass("sapMLIBUnreadBase");
			if (oLI.getUnread()) {
				rm.addClass("sapMLIBUnreadBubble");
			}
			rm.writeClasses();
			rm.write(">");
			closeCellTag();
		}

		var type = oLI.getType(), navIcon = "";
		switch (type) {
			case "Navigation":
				navIcon = "NAV";
				break;
			case "Detail":
			case "DetailAndActive":
				navIcon = "DET";
				break;
		}

		if (isTable) {
			this.renderLIContent(rm, oLI, oParent);
		} else {
			openCellTag();
			rm.addClass("sapMLIBContent");

			// there will be a margin on the right, if no navigation icon or counter is shown
			if ((type == "Active" || type == "Inactive")  && !oLI.getCounter()) {
				rm.addClass("sapMLIBContentMargin");
			}

			rm.writeClasses();
			rm.write(">");
			if(bNoFlex){
				// additional content table inside for the no-flex case
				rm.write('<div class="sapMLIBContentNF">');
			}
			this.renderLIContent(rm, oLI);
			if(bNoFlex){
				rm.write("</div>");
			}
			closeCellTag();
		}

		// if we are not in table mode than counter different than 0 bubble will be shown
		if (!isTable && oLI.getCounter()) {
			rm.write("<div");
			rm.writeAttribute("id", sId + "-counter");
			rm.addClass("sapMLIBCounter");
			if (!navIcon) {
				rm.addClass("sapMLIBContentMargin");
			}
			rm.writeClasses();
			rm.write(">");
			rm.write(oLI.getCounter());
			rm.write("</div>");
		}
		if (navIcon == "NAV" && (jQuery.os.ios || sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== "true") && oLI.getType() == "Navigation") {
			isTable && openCellTag("sapMListTblNavCol", true);
			if(jQuery.os.ios && sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true"){
				!isTable && rm.write("<div");
				rm.addClass("sapMLIBImgNav");
				rm.writeAttribute("id", sId + "-imgNav");
				rm.writeClasses();
				rm.write(">");
				!isTable && rm.write("</div>");
			} else {
				isTable && rm.write(">");
				var sURI = sap.ui.core.IconPool.getIconURI("slim-arrow-right");
				var	oNavIcon = oLI._navIcon || new sap.ui.core.Icon(sId + "-imgNav",{src:sURI}).setParent(oLI, null, true).addStyleClass("sapMLIBImgNav");
				if (oNavIcon) {
					oLI._navIcon = oNavIcon;
					rm.renderControl(oNavIcon);
				}
			}
			isTable && closeCellTag(true);
			oParent._navRenderedBy = sId + "-imgNav";
		} else if (navIcon == "DET") {
			openCellTag("sapMListTblNavCol");
			rm.addClass("sapMLIBCursor");
			rm.writeClasses();
			rm.write(">");
			var detailIcon = null;
			if (sap.ui.core.theming.Parameters.get("sapUiLIDetailIcon") == "false"){
				detailIcon = oLI._getNavImage((sId + "-imgDet"), "sapMLIBImgDet", "detail_disclosure.png", "detail_disclosure_pressed.png");
			}
			else{
				var sURI = sap.ui.core.IconPool.getIconURI("edit");
				detailIcon = oLI._detailIcon || new sap.ui.core.Icon(sId + "-imgDet",{src:sURI}).setParent(oLI, null, true).addStyleClass("sapMLIBIconDet");
			}
			if (detailIcon) {
				oLI._detailIcon = detailIcon;
				rm.renderControl(detailIcon);
			}

			closeCellTag();
			oParent._navRenderedBy = sId + "-imgDet";
		} else if (isTable) {
			// create empty cells for table
			rm.write("<td></td>");
		}

		switch (oLI._mode) {
		case "SingleSelect":
			openCellTag("sapMListTblSelCol");
			rm.addClass("sapMLIBSelectS");
			if (oLI._oldMode === "None" && oLI._modeAnimationOn) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", sId + "-mode");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oSelectControl);
			closeCellTag();
			oLI._oldMode = oLI._mode;
			break;
		case "Delete":
			if(sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== "true"){
				openCellTag("sapMListTblSelCol");
				rm.addClass("sapMLIBSelectD");
				if (oLI._oldMode === "None" && oLI._modeAnimationOn) {
					rm.addClass("sapMLIBSelectAnimation");
				}
				rm.writeAttribute("id", sId + "-mode");
				rm.writeClasses();
				rm.write(">");
				//toDo: this happens twice...put it in a method...
				var delIcon = null;
				if (sap.ui.core.theming.Parameters.get("sapUiLIDelIcon") == "false"){
					delIcon = oLI._getDelImage((sId + "-imgDel"), "sapMLIBImgDel", "delete_icon.png");
				}
				else{
					var sURI = sap.ui.core.IconPool.getIconURI("sys-cancel");
					delIcon = oLI._delIcon || new sap.ui.core.Icon(sId + "-imgDel",{src:sURI}).setParent(oLI, null, true).addStyleClass("sapMLIBIconDel").attachPress(oLI._delete);;
				}
				if (delIcon) {
					oLI._delIcon = delIcon;
					rm.renderControl(delIcon);
				}
				closeCellTag();
				oLI._oldMode = oLI._mode;
			}
			break;
		case "None":
			if (!isTable && !bNoFlex && oLI._oldMode && oLI._oldMode !== "None" && (oLI._oldMode === "SingleSelect" || (oLI._oldMode === "Delete" && sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== "true")) && oLI._modeAnimationOn) {
				openCellTag();
				rm.addClass("sapMLIBUnselectAnimation");
				rm.writeAttribute("id", sId + "-mode");
				rm.writeClasses();
				rm.write(">");
				closeCellTag();
			}
			oLI._oldMode = oLI._mode;
			break;
		}
	} else {
		rm.writeClasses();
		rm.write(">");
	}
	rm.write(rowEndTag);

	if (hasPopin) {
		this.renderPopin(rm, oLI, oParent);
	}
};
}; // end of sap/m/ListItemBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


jQuery.sap.declare("sap.m.ListRenderer");

/**
 * @class List renderer.
 * @static
 *
 * ListRenderer extends the ListBaseRenderer
 */
sap.m.ListRenderer = sap.ui.core.Renderer.extend(sap.m.ListBaseRenderer);

sap.m.ListRenderer.render = function(rm, oControl) {
	// if "columns" aggregation is not in use then we do not need backwards compatibility
	if (!oControl.getColumns().length) {
		sap.m.ListBaseRenderer.render.call(this, rm, oControl);
		return;
	}
	
	/**
	 * For backwards compatibility we need to render List with columns
	 * However, if the compatibility version is 1.16 or higher then
	 * we stop rendering to force using Table control with columns
	 */
	if (oControl._isColumnsIncompatible()) {
		jQuery.sap.log.warning("Does not render sap.m.List#" + oControl.getId() + " with columns aggregation when compatibility version is 1.16 or higher. Instead use sap.m.Table control!");
		return;
	}
	
	/**
	 * FIXME: Here to support old API if columns are set
	 * We are trying to extend renderer to render list as table
	 * This is so ugly and we need to get rid of it ASAP
	 */
	jQuery.sap.require("sap.m.TableRenderer");
	var oRenderer = jQuery.extend({}, this, sap.m.TableRenderer);
	sap.m.ListBaseRenderer.render.call(oRenderer, rm, oControl);
};


}; // end of sap/m/ListRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.MessageToast') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.MessageToast");
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained



/**
 * @class
 * A message toast notification offers simple feedback about an operation in a pop-up.
 * Toasts automatically disappear after a timeout and will never receive focus in order
 * to be unobtrusive as possible.
 * Toasts appears close the bottom of the screen, centered horizontally, but you can change
 * this position which is not dependent on the default values of the position settings.
 * The default position applies as long as the application does not do any position setting.
 * Position settings are "my", "at", "of" and "offset".
 *
 * Beware that only one message toast can be shown at a time in the same place.
 * If you want to have multiple message toasts visible at the same time, you need to position
 * the message toasts in different places.
 * This positioning needs to be handled in the application logic.
 *
 * Message toast example:
 *
 * <pre>
 * sap.m.MessageToast.show("This message should appear in the message toast", {
 *     duration: 3000,                  // default
 *     width: "15em",                   // default
 *     my: "center bottom",             // default
 *     at: "center bottom",             // default
 *     of: window,                      // default
 *     offset: "0 0",                   // default
 *     collision: "fit fit"             // default
 *     onClose: null,                   // default
 *     autoClose: true,                 // default
 *     animationTimingFunction: "ease", // default
 *     animationDuration: 1000,         // default
 *     closeOnBrowserNavigation: true   // default
 * });
 * </pre>
 *
 * @author SAP AG
 * @since 1.9.2
 *
 * @static
 * @public
 * @name sap.m.MessageToast
 */
sap.m.MessageToast = {};

/* =========================================================== */
/* Internal methods and properties                             */
/* =========================================================== */

sap.m.MessageToast._OFFSET = "0 -64";

sap.m.MessageToast._CSSCLASS = "sapMMessageToast";

sap.m.MessageToast._mSettings = {
	duration: 3000,
	width: "15em",
	my: "center bottom",
	at: "center bottom",
	of: document.defaultView,
	offset: "0 0",
	collision: "fit fit",
	onClose: null,
	animationTimingFunction: "ease",
	animationDuration: 1000,
	autoClose: true,
	closeOnBrowserNavigation: true
};

sap.m.MessageToast._aPopups = [];

sap.m.MessageToast._iOpenedPopups = 0;

sap.m.MessageToast._bBoundedEvents = false;

sap.m.MessageToast._validateSettings = function(mSettings) {

	// duration
	this._isFiniteInteger(mSettings.duration);

	// width
	this._validateWidth(mSettings.width);

	// my
	this._validateDockPosition(mSettings.my);

	// at
	this._validateDockPosition(mSettings.at);

	// of
	this._validateOf(mSettings.of);

	// offset
	this._validateOffset(mSettings.offset);

	// collision
	this._validateCollision(mSettings.collision);

	// onClose
	this._validateOnClose(mSettings.onClose);

	// autoClose
	this._validateAutoClose(mSettings.autoClose);

	// animationTimingFunction
	this._validateAnimationTimingFunction(mSettings.animationTimingFunction);

	// animationDuration
	this._isFiniteInteger(mSettings.animationDuration);
};

sap.m.MessageToast._isFiniteInteger = function(iNumber) {
	if (typeof iNumber !== "number" || !isFinite(iNumber) || !(Math.floor(iNumber) === iNumber) || iNumber <= 0) {
		jQuery.sap.log.error('"iNumber" needs to be a finite positive nonzero integer on ' + this + "._isFiniteInteger");
	}
};

sap.m.MessageToast._validateWidth = function(sWidth) {
	if (!sap.ui.core.CSSSize.isValid(sWidth)) {
		jQuery.sap.log.error(sWidth + ' is not of type ' + '"sap.ui.core.CSSSize" for property "width" on ' + this + "._validateWidth");
	}
};

sap.m.MessageToast._validateDockPosition = function(sDock) {
	if (!sap.ui.core.Dock.isValid(sDock)) {
		jQuery.sap.log.error('"' + sDock + '"' + ' is not of type ' + '"sap.ui.core.Popup.Dock" on ' + this + "._validateDockPosition");
	}
};

sap.m.MessageToast._validateOf = function(vElement) {
	if (!(vElement instanceof jQuery) &&
		!jQuery.isWindow(vElement) &&
		!(vElement && vElement.nodeType === 1) &&
		!(vElement instanceof sap.ui.core.Control)) {

		jQuery.sap.log.error('"of" needs to be an instance of sap.ui.core.Control or an Element or a jQuery object or the window on ' + this + "._validateOf");
	}
};

sap.m.MessageToast._validateOffset = function(sOffset) {
	if (typeof sOffset !== "string") {
		jQuery.sap.log.error(sOffset + ' is of type ' + typeof sOffset + ', expected "string" for property "offset" on ' + this + "._validateOffset");
	}
};

sap.m.MessageToast._validateCollision = function(sCollision) {
	var rValidCollisions = /^(fit|flip|none|flipfit|flipflip|flip flip|flip fit|fitflip|fitfit|fit fit|fit flip)$/i;

	if (!rValidCollisions.test(sCollision)) {
		jQuery.sap.log.error('"collision" needs to be a single value “fit”, “flip”, or “none”, or a pair for horizontal and vertical e.g. "fit flip”, "fit none", "flipfit" on ' + this + "._validateOffset");
	}
};

sap.m.MessageToast._validateOnClose = function(fn) {
	if (typeof fn !== "function" && fn !== null) {
		jQuery.sap.log.error('"onClose" should be a function or null on ' + this + "._validateOnClose");
	}
};

sap.m.MessageToast._validateAutoClose = function(b) {
	if (typeof b !== "boolean") {
		jQuery.sap.log.error('"autoClose" should be a boolean on ' + this + "._validateAutoClose");
	}
};

sap.m.MessageToast._validateAnimationTimingFunction = function(sTimingFunction) {
	var rValidTimingFn = /^(ease|linear|ease-in|ease-out|ease-in-out)$/i;

	if (!rValidTimingFn.test(sTimingFunction)) {
		jQuery.sap.log.error('"animationTimingFunction" should be a string, expected values: ' + "ease, linear, ease-in, ease-out, ease-in-out on " + this + "._validateAnimationTimingFunction");
	}
};

sap.m.MessageToast._hasDefaulPosition = function(mOptions) {
	for (var aPositionOptions = ["my", "at", "of", "offset"], i = 0; i < aPositionOptions.length; i++) {
		if (mOptions[aPositionOptions[i]] !== undefined) {
			return false;
		}
	}

	return true;
};

sap.m.MessageToast._createHTMLMarkup = function(mSettings) {
	var oMessageToastDomRef = document.createElement("div");

	oMessageToastDomRef.style.width = mSettings.width;
	oMessageToastDomRef.className = sap.m.MessageToast._CSSCLASS;
	oMessageToastDomRef.appendChild(document.createTextNode(mSettings.message));

	return oMessageToastDomRef;
};

sap.m.MessageToast._normalizeOptions = function(mOptions) {
	if (mOptions) {

		// if no position options are provided
		if (this._hasDefaulPosition(mOptions)) {

			// change the default offset
			mOptions.offset = this._OFFSET;
		}

		// if the document object is provided as an option, replace it with the window object,
		// the message toast should be showed relative to the visual viewport instead to the layout viewport
		if (mOptions.of && mOptions.of.nodeType === 9) {
			mOptions.of = document.defaultView;
		}
	} else {

		mOptions = {

			// if no options are provided, change the default offset
			offset: this._OFFSET
		};
	}

	return mOptions;
};

/* =========================================================== */
/* Event handlers                                              */
/* =========================================================== */

sap.m.MessageToast._handleResizeEvent = function() {

	if (sap.ui.Device.system.phone || sap.ui.Device.system.tablet) {
		this._resetPosition(this._aPopups);
	}

	jQuery.sap.delayedCall(0, this, "_applyPositions", [this._aPopups]);
};

sap.m.MessageToast._handleMouseDownEvent = function(oEvent) {

	if (oEvent.isMarked("delayedMouseEvent")) {
		return;
	}

	this._aPopups.forEach(function(oPopup) {
		oPopup && oPopup.getAutoClose() && oPopup.close();
	});
};

sap.m.MessageToast._resetPosition = function(aPopups) {
	for (var i = 0, oMessageToastDomRef; i < aPopups.length; i++) {
		oMessageToastDomRef = aPopups[i] && aPopups[i].getContent();

		if (oMessageToastDomRef) {
			oMessageToastDomRef.style.visibility = "hidden";
			oMessageToastDomRef.style.left = 0;
		}
	};
};

sap.m.MessageToast._applyPositions = function(aPopups) {
	for (var i = 0, oPopup, mPosition; i < aPopups.length; i++) {
		oPopup = aPopups[i];
		if (oPopup) {
			mPosition = oPopup._oPosition;	// TODO _oPosition is a private property

			if (sap.ui.Device.system.phone || sap.ui.Device.system.tablet) {
				jQuery.sap.delayedCall(0, this, "_applyPosition", [oPopup, mPosition]);
			} else {
				oPopup.setPosition(mPosition.my, mPosition.at, mPosition.of, mPosition.offset);
			}
		}
	}
};

sap.m.MessageToast._applyPosition = function(oPopup, mPosition) {
	var mPosition = mPosition || oPopup._oPosition,
		oMessageToastDomRef = oPopup.getContent();

	oPopup.setPosition(mPosition.my, mPosition.at, mPosition.of, mPosition.offset);
	oMessageToastDomRef.style.visibility = "visible";
};

sap.m.MessageToast._setCloseAnimation = function($MessageToastDomRef, iDuration, fnClose, mSettings) {
	var sCssTransition = "opacity " + mSettings.animationTimingFunction + " " + mSettings.animationDuration + "ms",
		sTransitionEnd = "webkitTransitionEnd." + sap.m.MessageToast._CSSCLASS + " transitionend." + sap.m.MessageToast._CSSCLASS;

	if (mSettings.animationDuration > 0) {
		$MessageToastDomRef[0].style.webkitTransition = sCssTransition;
		$MessageToastDomRef[0].style.transition = sCssTransition;
		$MessageToastDomRef[0].style.opacity = 0;

		$MessageToastDomRef.on(sTransitionEnd, function handleMTTransitionEnd() {

			// unbound the event handler after its first invocation
			$MessageToastDomRef.off(sTransitionEnd);

			// handleMTClosed() function is called
			fnClose();
		});
	} else {
		fnClose();
	}
};

/* =========================================================== */
/* API methods                                                 */
/* =========================================================== */

/**
 * Creates and displays a simple message toast notification message with the given text, and optionally other options.
 *
 * The only mandatory parameter is <code>sMessage</code>.
 *
 * @param {string} sMessage The message to be displayed.
 * @param {object} [mOptions] Optionally other options.
 * @param {int} [mOptions.duration=3000] Time in milliseconds before the close animation starts. Needs to be a finite positive nonzero integer.
 * @param {sap.ui.core.CSSSize} [mOptions.width='15em'] The width of the message toast, this value can be provided in %, em, px and all possible CSS measures.
 * @param {sap.ui.core.Popup.Dock} [mOptions.my='center bottom'] Specifies which point of the message toast should be aligned.
 * @param {sap.ui.core.Popup.Dock} [mOptions.at='center bottom'] Specifies the point of the reference element to which the message toast should be aligned.
 * @param {sap.ui.core.Control|Element|jQuery|Window|undefined} [mOptions.of=window] Specifies the reference element to which the message toast should be aligned, by default it is aligned to the browser visual viewport.
 * @param {string} [mOptions.offset='0 0'] The offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the message toast 10 pixels to the right).
 * @param {string} [mOptions.collision='fit fit'] Specifies how the position of the message toast should be adjusted in case it overflows the screen in some direction. Possible values “fit”, “flip”, “none”, or a pair for horizontal and vertical e.g. "fit flip”, "fit none".
 * @param {function} [mOptions.onClose=null] Function to be called when the message toast closes.
 * @param {boolean} [mOptions.autoClose=true] Specify whether the message toast should close as soon as the end user touches the screen.
 * @param {string} [mOptions.animationTimingFunction='ease'] Describes how the close animation will progress. Possible values "ease", "linear", "ease-in", "ease-out", "ease-in-out". This feature is not supported in android and ie9 browsers.
 * @param {int} [mOptions.animationDuration=1000] Time in milliseconds that the close animation takes to complete. Needs to be a finite positive integer. For not animation set to 0. This feature is not supported in android and ie9 browsers.
 * @param {boolean} [mOptions.closeOnBrowserNavigation=true] Whether the message toast closes on browser navigation.
 *
 * @type void
 * @public
 * @name sap.m.MessageToast.show
 * @function
 */
sap.m.MessageToast.show = function(sMessage, mOptions) {
	var self = this,
		mSettings = jQuery.extend({}, this._mSettings, { message: sMessage }),
		oPopup = new sap.ui.core.Popup(),
		handleMTClosed,
		iPos,
		oMessageToastDomRef;

	mOptions = this._normalizeOptions(mOptions);

	// merge mOptions into mSettings
	jQuery.extend(mSettings, mOptions);

	// validate all settings
	this._validateSettings(mSettings);

	// create the message toast HTML markup
	oMessageToastDomRef = this._createHTMLMarkup(mSettings);

	// save this pop-up instance and the position,
	// to be used inside fnMTAttachClosed closure
	iPos = this._aPopups.push(oPopup) - 1;

	// sets the content of the pop-up
	oPopup.setContent(oMessageToastDomRef);

	// sets the position of the pop-up
	oPopup.setPosition(mSettings.my, mSettings.at, mSettings.of, mSettings.offset, mSettings.collision);

	if (jQuery.support.cssTransitions) {

		// sets the animation functions to use for opening and closing the message toast
		// note: this custom animations are using CSS3 transitions
		oPopup.setAnimations(function fnMessageToastOpen($MessageToast, iDuration, fnOpened) {
			fnOpened();
		}, function fnMessageToastClose($MessageToastDomRef, iDuration, fnClose) {
			self._setCloseAnimation($MessageToastDomRef, iDuration, fnClose, mSettings);
		});
	}

	// no shadow
	oPopup.setShadow(false);

	//
	oPopup.setAutoClose(mSettings.autoClose);

	if (mSettings.closeOnBrowserNavigation) {

		// add the pop-up instance to the InstanceManager to handle browser back navigation
		sap.m.InstanceManager.addPopoverInstance(oPopup);
	}

	// do not bind if already bound
	if (!this._bBoundedEvents) {

		// bind to the resize event to handle orientation change and resize events
		jQuery(window).on("resize." + sap.m.MessageToast._CSSCLASS, jQuery.proxy(this._handleResizeEvent, this));
		jQuery(document).on("mousedown." + sap.m.MessageToast._CSSCLASS, jQuery.proxy(this._handleMouseDownEvent, this));

		this._bBoundedEvents = true;
	}

	// opens the popup's content at the position specified via #setPosition
	oPopup.open();
	this._iOpenedPopups++;

	// attach event handler fnFunction to the "closed" event
	oPopup.attachClosed(function handleMTClosed() {
		sap.m.InstanceManager.removePopoverInstance(self._aPopups[iPos]);
		jQuery(self._aPopups[iPos].getContent()).remove();
		self._aPopups[iPos].detachClosed(handleMTClosed);
		self._aPopups[iPos].destroy();
		self._aPopups[iPos] = null;
		self._iOpenedPopups--;

		if (self._iOpenedPopups === 0) {
			self._aPopups = [];
			jQuery(window).off("resize." + sap.m.MessageToast._CSSCLASS);
			jQuery(document).off("mousedown." + sap.m.MessageToast._CSSCLASS);

			self._bBoundedEvents = false;
		}

		if (typeof mSettings.onClose === "function") {
			mSettings.onClose.call(self);
		}
	});

	// close the message toast
	jQuery.sap.delayedCall(mSettings.duration, oPopup, "close");
};

sap.m.MessageToast.toString = function() {
	return "sap.m.MessageToast";
};
}; // end of sap/m/MessageToast.js
if ( !jQuery.sap.isDeclared('sap.m.NavContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.NavContainerRenderer");

/**
 * @class NavContainer renderer. 
 * @static
 */
sap.m.NavContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.NavContainerRenderer.render = function(rm, oControl) { 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}
	
	rm.write("<div");
	rm.writeControlData(oControl);
	
	rm.addClass("sapMNav");
	rm.addStyle("width", oControl.getWidth());
	rm.addStyle("height", oControl.getHeight());

	if (this.renderAttributes) {
		this.renderAttributes(rm, oControl); // may be used by inheriting renderers, but DO NOT write class or style attributes! Instead, call addClass/addStyle.
	}
	
	rm.writeClasses();
	rm.writeStyles();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">"); // div element

	if (this.renderBeforeContent) {
		this.renderBeforeContent(rm, oControl); // may be used by inheriting renderers
	}
	
	var oContent = oControl.getCurrentPage();
	if (oContent) {
		rm.renderControl(oContent);
	}

	rm.write("</div>");
};

}; // end of sap/m/NavContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectAttributeRenderer') ) {
/*
 * @copyright
 */
jQuery.sap.declare("sap.m.ObjectAttributeRenderer");

/**
 * @class ObjectAttributeA renderer. 
 * @static
 */
sap.m.ObjectAttributeRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ObjectAttributeRenderer.render = function(oRm, oOA) {

	// return immediately if control is invisible
	if(oOA.getVisible() && !oOA._isEmpty()) {
		oRm.write("<div");
		oRm.writeControlData(oOA);
		oRm.addClass("sapMObjectAttributeDiv"); 
		if(oOA.getActive()){
			oRm.addClass("sapMObjectAttributeActive");
		}
		oRm.writeClasses();
		
		var sTooltip = oOA.getTooltip_AsString();
		if (sTooltip) {
			oRm.writeAttributeEscaped("title", sTooltip);
		}		
		
		oRm.write(">");
		oRm.write("<span>");
		var oText = new sap.m.Text({text: oOA.getText()});
		oText.setMaxLines(2);
		oRm.renderControl(oText);
		oRm.write("</span>");
		oRm.write("</div>");
	}
};

}; // end of sap/m/ObjectAttributeRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectHeaderRenderer') ) {
/*
 * @copyright
 */
jQuery.sap.declare("sap.m.ObjectHeaderRenderer");
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * @class ObjectHeader renderer.
 * @static
 */
sap.m.ObjectHeaderRenderer = {};

/**
 * Check if the object exists. In case object has _isEmpty() method then this method is called. If there is no such method then object is not empty.
 * 
 * @param {sap.ui.core.Control}
 *            oObject to be checked
 * 
 * @returns true is the object is not empty, false - otherwise.
 * 
 * @private
 */
sap.m.ObjectHeaderRenderer._isEmptyObject = function(oObject) {

	if (!oObject) {
		return true;
	}

	if ((!oObject._isEmpty || !oObject._isEmpty())&&(!oObject.getVisible || oObject.getVisible())) {
		return false;
	}
	return true;
};

/**
 * Array is considered empty if it is null or undefined or has no controls or all the controls are empty.
 * 
 * @param {sap.ui.core.Control[]}
 *            aArray array of controls to be checked
 * 
 * @returns true if array is empty, false - otherwise.
 * @private
 */
sap.m.ObjectHeaderRenderer._isEmptyArray = function(aArray) {

	if (aArray) {
		for ( var i = 0; i < aArray.length; i++) {
			if (!sap.m.ObjectHeaderRenderer._isEmptyObject(aArray[i])) {
				return false;
			}
		}
	}
	return true;
};

/**
 * A row is considered empty if both input parameters are empty.
 * 
 * @param {sap.ui.core.Control}
 *            aLeft control to be checked
 * 
 * @param {sap.ui.core.Control[]}
 *            aRight array of controls to be checked
 * 
 * @returns true if array is empty, false - otherwise.
 * @private
 */
sap.m.ObjectHeaderRenderer._isEmptyRow = function(oLeft, aRight) {

	return sap.m.ObjectHeaderRenderer._isEmptyObject(oLeft) && sap.m.ObjectHeaderRenderer._isEmptyArray(aRight);
};

/**
 * Render an array of controls.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * 
 * @param {sap.ui.core.Control[]}
 *            aObjects array of controls to be rendered
 * @private
 */
sap.m.ObjectHeaderRenderer._renderObjects = function(rm, aObjects) {

	for ( var i = 0; i < aObjects.length; i++) {
		if (aObjects[i] instanceof sap.ui.core.Control) {
			rm.renderControl(aObjects[i]);
		}
	}
};

/**
 * Returns the array of icons from ObjectHeader.
 * 
 * @param {sap.m.ObjectHeader}
 *            oOH the ObjectHeader that contains icons
 * 
 * @returns array of {sap.m.Image} controls
 * 
 * @private
 */
sap.m.ObjectHeaderRenderer._getIcons = function(oOH) {

	var icons = [];

	if (oOH.getShowMarkers()) {
		oOH._oFavIcon.setVisible(oOH.getMarkFavorite());
		oOH._oFlagIcon.setVisible(oOH.getMarkFlagged());

		icons.push(oOH._oPlaceholderIcon);
		icons.push(oOH._oFavIcon);
		icons.push(oOH._oFlagIcon);
	}

	return icons;
};




/**
 * Renders the HTML for Attribute.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.ObjectHeader}
 *            oOH an object to be rendered
 * @param {sap.m.ObjectAttribute}
 *            oAttr an attribute to be rendered
 * @param {boolean} bFullWidth set the attribute width to 100%
 */
sap.m.ObjectHeaderRenderer.renderAttribute = function(rm, oOH, oAttr, bFullWidth) {
	rm.write("<div");
	rm.addClass("sapMOHAttr");
	rm.writeClasses();
	if (bFullWidth) {
		rm.addStyle("width", "100%");
		rm.writeStyles();
	}
	rm.write(">");
	rm.renderControl(oAttr);
	rm.write("</div>");
};

/**
 * Renders the HTML for single line of Attribute and Status.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.ObjectHeader}
 *            oOH an object to be rendered
 * @param {sap.m.ObjectAttribute}
 *            oLeft an attribute to be rendered
 * @param {sap.ui.core.Control[]} aRight a status or Progress Indicator Array to be rendered
 */
sap.m.ObjectHeaderRenderer.renderRow = function(rm, oOH, oLeft, aRight) {

	if (sap.m.ObjectHeaderRenderer._isEmptyRow(oLeft, aRight)) {
		return; // nothing to render
	}
    
	rm.write("<div"); // Start attribute row container
	rm.addClass("sapMOHAttrRow");
	rm.writeClasses();
	rm.write(">");

	if (!sap.m.ObjectHeaderRenderer._isEmptyObject(oLeft)) {
		this.renderAttribute(rm, oOH, oLeft, sap.m.ObjectHeaderRenderer._isEmptyArray(aRight));
	} else if (sap.m.ObjectHeaderRenderer._isEmptyObject(oLeft) && !sap.m.ObjectHeaderRenderer._isEmptyArray(aRight)) {						
		if (aRight[0] instanceof sap.m.ProgressIndicator) {				
			rm.write("<div");
			rm.addClass("sapMOHAttr");
			rm.writeClasses();
			rm.write(">");
			rm.write("</div>");
		}		
	}

	if (!sap.m.ObjectHeaderRenderer._isEmptyArray(aRight)) {
		rm.write("<div");
		if (aRight[0] instanceof sap.m.ProgressIndicator) {
			rm.addClass("sapMOHStatusFixedWidth");
		}
		else if (aRight[0] instanceof sap.ui.core.Icon) {
			rm.addClass("sapMOHStatusFixedWidth");
			rm.addClass("sapMObjStatusMarker");
		}
		else {
			rm.addClass("sapMOHStatus");
		}
		rm.writeClasses();
		rm.write(">");
		sap.m.ObjectHeaderRenderer._renderObjects(rm, aRight);
		rm.write("</div>");
	}

	rm.write("</div>"); // Start attribute row container
};

/**
 * Renders the HTML for attributes and statuses, using the provided {@link sap.ui.core.RenderManager}. Validate the statuses control list to only display ObjectStatus and
 * ProgressIndicator
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.ObjectHeader}
 *            oOH an object to be rendered
 */
sap.m.ObjectHeaderRenderer.renderAttributesAndStatuses = function(rm, oOH) {

	var aAttribs = oOH.getAttributes();
	var aVisibleAttribs = [];

	for( var i = 0; i < aAttribs.length; i ++){
		if( aAttribs[i].getVisible()){
			aVisibleAttribs.push(aAttribs[i]);
		}
	}

	var iAttribsLength = aVisibleAttribs.length;

	var aIconsAndStatuses = [];
	var aIcons = sap.m.ObjectHeaderRenderer._getIcons(oOH);
	if (!sap.m.ObjectHeaderRenderer._isEmptyArray(aIcons)) {
		aIconsAndStatuses.push(aIcons);
	}

	if (oOH.getFirstStatus()) {
		aIconsAndStatuses.push([ oOH.getFirstStatus() ]);
	}
	if (oOH.getSecondStatus()) {
		aIconsAndStatuses.push([ oOH.getSecondStatus() ]);
	}
	if (oOH.getStatuses()) {
		var aStatuses = oOH.getStatuses();
		for ( var i = 0; i < aStatuses.length; i++) {
			if(!aStatuses[i].getVisible || aStatuses[i].getVisible()){
				if (aStatuses[i] instanceof sap.m.ObjectStatus || aStatuses[i] instanceof sap.m.ProgressIndicator) {
					aIconsAndStatuses.push([ aStatuses[i] ]);
				} else {
					jQuery.sap.log.warning("Only sap.m.ObjectStatus or sap.m.ProgressIndicator are allowed in \"sap.m.ObjectHeader.statuses\" aggregation." + " Current object is "
							+ aStatuses[i].constructor.getMetadata().getName() + " with id \"" + aStatuses[i].getId() + "\"");
				}
			}
		}
	}

	var iIconsAndStatusesLength = aIconsAndStatuses.length;

	var iNoOfRows = iAttribsLength > iIconsAndStatusesLength ? iAttribsLength : iIconsAndStatusesLength;

	for ( var i = 0; i < iNoOfRows; i++) {
		this.renderRow(rm, oOH, aVisibleAttribs[i], aIconsAndStatuses[i]);
	}
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.Control}
 *            oOH an object representation of the control that should be rendered
 */
sap.m.ObjectHeaderRenderer.renderNumber = function(rm, oOH) {
	if (oOH.getNumber()) {
		// Container for a number and a units qualifier.
		rm.write("<div"); // Start Number/units container
		rm.writeAttribute("id", oOH.getId() + "-numberdiv");
		rm.addClass("sapMOHNumberDiv");
		rm.writeClasses();
		rm.write(">");

		rm.write("<span");
		rm.writeAttribute("id", oOH.getId() + "-number");
		rm.addClass("sapMOHNumber");
		rm.addClass("sapMOHNumberState" + oOH.getNumberState());

		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oOH.getNumber());

		rm.write("</span>");

		if (oOH.getNumberUnit()) {
			rm.write("<span");
			rm.writeAttribute("id", oOH.getId() + "-numberUnit");
			rm.addClass("sapMOHNumberUnit");
			rm.addClass("sapMOHNumberState" + oOH.getNumberState());
			
			rm.writeClasses();
			rm.write(">");
			rm.writeEscaped(oOH.getNumberUnit());
			rm.write("</span>");
		}

		rm.write("</div>"); // End Number/units container
	}
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.Control}
 *            oOH an object representation of the control that should be rendered
 */
sap.m.ObjectHeaderRenderer.renderTitle = function(rm, oOH) {
	// Start title text and title arrow container
	oOH._oTitleArrowIcon.setVisible(oOH.getShowTitleSelector());
	if(oOH.getShowTitleSelector() && oOH._oTitleArrowIcon.getVisible()){
		rm.write("<div");
		rm.addClass("sapMOHTitleAndArrow");
		rm.writeClasses();
		rm.write(">");
	}

	if (oOH.getTitle()) {
		oOH._titleText.setText(oOH.getTitle());
		rm.write("<span"); // Start Title Text container
		rm.writeAttribute("id", oOH.getId() + "-title");
		rm.addClass("sapMOHTitle");
		if (oOH.getTitleActive()) {
			rm.addClass("sapMOHTitleActive");
		}
		if(oOH.getShowTitleSelector()){
			rm.addClass("sapMOHTitleFollowArrow");
		}
		rm.writeClasses();
		rm.write(">");	
		oOH._titleText.addStyleClass("sapMOHTitle");
		
		rm.renderControl(oOH._titleText);
		rm.write("</span>"); // End Title Text container
	}	
	
	if(oOH.getShowTitleSelector()){
		rm.write("<span"); // Start title arrow container				
		rm.addClass("sapMOHTitleArrow");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oOH._oTitleArrowIcon);
		rm.write("</span>"); // end title arrow container	
	}
	
	if(oOH.getShowTitleSelector() && oOH._oTitleArrowIcon.getVisible()){
		rm.write("</div>"); // end title text and title arrow container	
	}
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.Control}
 *            oOH an object representation of the control that should be rendered
 */
sap.m.ObjectHeaderRenderer.renderFullTitle = function(rm, oOH) {
	if (!oOH.getNumber()) {
		rm.addClass("sapMOHTitleDivFull");
	}
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.Control}
 *            oOH an object representation of the control that should be rendered
 */
sap.m.ObjectHeaderRenderer.renderFullOH = function(rm, oOH) {
	// Introductory text at the top of the item, like "On behalf of Julie..."
	if (oOH.getIntro()) {
		rm.write("<div");
		rm.addClass("sapMOHIntro");
		if (oOH.getIntroActive()) {
			rm.addClass("sapMOHIntroActive");
		}
		rm.writeClasses();
		rm.write(">");
		rm.write("<span");
		rm.writeAttribute("id", oOH.getId() + "-intro");
		rm.write(">");
		rm.writeEscaped(oOH.getIntro());
		rm.write("</span>");
		rm.write("</div>");
	}

	// Container for fields placed on the top half of the item, below the intro. This
	// includes title icon, title, title arrow, number, and number units.
	rm.write("<div"); // Start Top row container
	rm.addClass("sapMOHTopRow");
	rm.writeClasses();
	rm.write(">");

	// Title container displayed to the left of the number and number units container.
	rm.write("<div"); // Start Title container
	rm.writeAttribute("id", oOH.getId() + "-titlediv");
	rm.addClass("sapMOHTitleDiv");
	if (oOH._hasIcon()) {
		rm.addClass("sapMOHTitleIcon");
	}
	
	this.renderFullTitle(rm, oOH);
	rm.writeClasses();
	rm.write(">");

	// Container for icon
	if (oOH._hasIcon()) {
		rm.write("<div"); // Start icon container
		rm.addClass("sapMOHIcon");
		if (oOH.getIconActive()) {
			rm.addClass("sapMPointer");
		}
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oOH._getImageControl());
		rm.write("</div>"); // end icon container
	}
	
	this.renderTitle(rm, oOH);
	
	rm.write("</div>"); // End Title container

	this.renderNumber(rm, oOH);
	
	rm.write("<div class=\"sapMOHDivider\"/>");
	rm.write("</div>"); // End Top row container

	if (oOH._hasBottomContent()) {
		rm.write("<div"); // Start Bottom row container
		rm.addClass("sapMOHBottomRow");
		rm.writeClasses();
		rm.write(">");

		this.renderAttributesAndStatuses(rm, oOH);

		rm.write("<div class=\"sapMOHDivider\"/>");
		rm.write("</div>"); // End Bottom row container
	}
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.Control}
 *            oOH an object representation of the control that should be rendered
 */
sap.m.ObjectHeaderRenderer.renderCondensedOH = function(rm, oOH) {
	// Title container displayed to the left of the number and number units container.
	rm.write("<div"); // Start Title container
	rm.writeAttribute("id", oOH.getId() + "-titlediv");
	rm.addClass("sapMOHTitleDiv");
	
	this.renderFullTitle(rm, oOH);

	rm.writeClasses();
	rm.write(">");
	
	this.renderTitle(rm, oOH);
	
	rm.write("</div>"); // End Title container
	
	this.renderNumber(rm, oOH);
	
	var oFirstAttr = oOH.getAttributes()[0];
	
	if (oFirstAttr && !oFirstAttr._isEmpty()){
		this.renderAttribute(rm, oOH, oFirstAttr);
	}
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.Control}
 *            oOH an object representation of the control that should be rendered
 */
sap.m.ObjectHeaderRenderer.render = function(rm, oOH) {

	// return immediately if control is invisible
	if (!oOH.getVisible()) {
		return;
	}

	var bCondensed = oOH.getCondensed();
	
	rm.write("<div"); // Start Main container
	rm.writeControlData(oOH);
	rm.addClass("sapMOH");
	if (bCondensed){
		rm.addClass("sapMOHC");
		rm.addClass("sapMOHBg" + oOH.getBackgroundDesign());
	}
	
	rm.writeClasses();
	var sTooltip = oOH.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}

	rm.write(">");

	if (bCondensed) {
		this.renderCondensedOH(rm, oOH);
	} else {
		this.renderFullOH(rm, oOH);
	}
	
	rm.write("<div class=\"sapMOHLastDivider\"/>");

	rm.write("</div>"); // End Main container\

};

}; // end of sap/m/ObjectHeaderRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectIdentifierRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ObjectIdentifierRenderer");

/**
 * @class ObjectIdentifier renderer.
 * @static
 */
sap.m.ObjectIdentifierRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oOI an object representation of the control that should be
 *            rendered
 */
sap.m.ObjectIdentifierRenderer.render = function(oRm, oOI) {

	// write the HTML into the render manager
	oRm.write("<div"); // Identifier begins
	oRm.writeControlData(oOI);
	oRm.addClass("sapMObjectIdentifier");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div"); // Top row begins
	oRm.addClass("sapMObjectIdentifierTopRow");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div"); // Icons begin
	oRm.addClass("sapMObjectIdentifierIcons");
	oRm.writeClasses();
	oRm.write(">");

	if (oOI.getBadgeAttachments()) {
		oRm.write("<span"); // Icon span begins
		oRm.addClass("sapMObjectIdentifierIconSpan");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oOI._getAttachmentsIcon());
		oRm.write("</span>"); // Icon span ends
	}
	if (oOI.getBadgeNotes()) {
		oRm.write("<span"); // Icon span begins
		oRm.addClass("sapMObjectIdentifierIconSpan");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oOI._getNotesIcon());
		oRm.write("</span>"); // Icon span ends
	}
	if (oOI.getBadgePeople()) {
		oRm.write("<span"); // Icon span begins
		oRm.addClass("sapMObjectIdentifierIconSpan");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oOI._getPeopleIcon());
		oRm.write("</span>"); // Icon span ends
	}
	
	oRm.write("</div>"); // Icons end

	oRm.write("<div"); // Title begins
	oRm.addClass("sapMObjectIdentifierTitle");
	oRm.writeClasses();
	oRm.write(">");
	oRm.writeEscaped(oOI.getTitle());
	oRm.write("</div>"); // Title ends

	oRm.write("</div>"); // Top row ends

	oRm.write("<div"); // Text begins
	oRm.addClass("sapMObjectIdentifierText");
	oRm.writeClasses();
	oRm.write(">");
	oRm.writeEscaped(oOI.getText());
	oRm.write("</div>"); // Text ends

	oRm.write("</div>"); // Identifier ends
};

}; // end of sap/m/ObjectIdentifierRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ObjectListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class ObjectListItem renderer.
 * @static
 */
sap.m.ObjectListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for single line of Attribute and Status.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.ObjectListItem}
 *            oLI an object to be rendered
 * @param {sap.m.ObjectAttribute}
 *            oAttribute an attribute to be rendered
 * @param {sap.m.ObjectStatus}
 *            oStatus a status to be rendered
 */
sap.m.ObjectListItemRenderer.renderAttributeStatus = function(rm, oLI, oAttribute, oStatus) {

	if (!oAttribute && !oStatus || (oAttribute && oAttribute._isEmpty() && oStatus && oStatus._isEmpty())) {
		return; // nothing to render
	}

	rm.write("<div"); // Start attribute row container
	rm.addClass("sapMObjLAttrRow");
	rm.writeClasses();
	rm.write(">");

	if (oAttribute && !oAttribute._isEmpty()) {
		rm.write("<div");
		rm.addClass("sapMObjLAttrDiv");
		
		// Add padding to push attribute text down since it will be raised up due
		// to markers height
		if (oStatus && (!oStatus._isEmpty())) {
			if(oStatus instanceof Array) {
				rm.addClass("sapMObjAttrWithMarker");
			}
		}
		
		rm.writeClasses();
		
		if (!oStatus || oStatus._isEmpty()) {
			rm.addStyle("width", "100%");
			rm.writeStyles();
		}
		rm.write(">");
		rm.renderControl(oAttribute);		
		rm.write("</div>");
	}

	if (oStatus && (!oStatus._isEmpty())) {
		rm.write("<div");		
		rm.addClass("sapMObjLStatusDiv");
		
		// Object marker icons (flag, favorite) are passed as an array
		if(oStatus instanceof Array) {
			rm.addClass("sapMObjStatusMarker");
		}
		rm.writeClasses();
		if (!oAttribute || oAttribute._isEmpty()) {
			rm.addStyle("width", "100%");
			rm.writeStyles();
		}
		rm.write(">");
		if(oStatus instanceof Array) {
			while(oStatus.length > 0) {
				rm.renderControl(oStatus.shift());
			}
		} else {
			rm.renderControl(oStatus);
		}		
		rm.write("</div>");
	}

	rm.write("</div>"); // Start attribute row container
};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ObjectListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMObjLItem");
	rm.addClass("sapMObjLListModeDiv");
};

sap.m.ObjectListItemRenderer.renderLIContent = function(rm, oLI) {
	
	rm.write("<div"); // Start Main container
	rm.writeControlData(oLI);
	rm.write(">");

	// Introductory text at the top of the item, like "On behalf of Julie..."
	if(oLI.getIntro()) {
		rm.write("<div");
		rm.addClass("sapMObjLIntro");
		rm.writeClasses();
		rm.writeAttribute("id", oLI.getId() + "-intro");
		rm.write(">");
		rm.write("<span>");
		rm.writeEscaped(oLI.getIntro());
		rm.write("</span>");
		rm.write("</div>");
	}

	
	// Container for fields placed on the top half of the item, below the intro. This
	// includes title, number, and number units.
	rm.write("<div");  // Start Top row container     
	rm.addClass("sapMObjLTopRow");
	rm.writeClasses();
	rm.write(">");
	
	if(!!oLI.getIcon()) {
		rm.write("<div");
		rm.addClass("sapMObjLIconDiv");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oLI._getImageControl());
		rm.write("</div>");
	}
	
	// Container for a number and a units qualifier.
	rm.write("<div"); // Start Number/units container
	rm.addClass("sapMObjLNumberDiv");
	rm.writeClasses();
	rm.write(">");
	
	if (oLI.getNumber()) {
		rm.write("<div");
		rm.writeAttribute("id", oLI.getId() + "-number");
		rm.addClass("sapMObjLNumber");
		rm.addClass("sapMObjLNumberState" + oLI.getNumberState());
		rm.writeClasses();
		
		rm.write(">");
		rm.writeEscaped(oLI.getNumber());
		rm.write("</div>");
		
		if (oLI.getNumberUnit()) {
			rm.write("<div");
			rm.writeAttribute("id", oLI.getId() + "-numberUnit");
			rm.addClass("sapMObjLNumberUnit");
			rm.addClass("sapMObjLNumberState" + oLI.getNumberState());
			rm.writeClasses();
			rm.write(">");
			rm.writeEscaped(oLI.getNumberUnit());
			rm.write("</div>");
		}
	}
	
	rm.write("</div>"); // End Number/units container
	
	// Title container displayed to the left of the number and number units container.
	rm.write("<div"); // Start Title container
	rm.addStyle("display","-webkit-box");
	rm.addStyle("overflow","hidden");
	rm.writeStyles();
	rm.write(">");
	var oTitleText = oLI._getTitleText();
	if (oTitleText) {
		oTitleText.setText(oLI.getTitle());
		oTitleText.addStyleClass("sapMObjLTitle");
		rm.renderControl(oTitleText);
	}
	
	rm.write("</div>"); // End Title container	
	
	rm.write("</div>"); // End Top row container
	
	rm.write('<div style="clear:both"/>');
	
	// Bottom row container.
	if(oLI._hasBottomContent()) {
		rm.write("<div"); // Start Bottom row container
		rm.addClass("sapMObjLBottomRow");
		rm.writeClasses();
		rm.write(">");

		var aAttribs = oLI._getVisibleAttributes();
		var statuses = new Array();
		var markers = null;
		
		if(oLI.getShowMarkers()) {
			var placeholderIcon = oLI._getPlaceholderIcon();
			var favIcon = oLI._getFavoriteIcon();
			var flagIcon = oLI._getFlagIcon();
			favIcon.setVisible(oLI.getMarkFavorite());
			flagIcon.setVisible(oLI.getMarkFlagged());
			
			//Markers will be rendered LTR in the order they're added to the array
			markers = [placeholderIcon, favIcon, flagIcon];
			statuses.push(markers);
			
			markers._isEmpty = function() {
				return false;
			};			
		}
		
		statuses.push(oLI.getFirstStatus());
		statuses.push(oLI.getSecondStatus());
		
		while(aAttribs.length > 0) {
			this.renderAttributeStatus(rm, oLI, aAttribs.shift(), statuses.shift());
		}
		
		while(statuses.length > 0) {
			this.renderAttributeStatus(rm, oLI, null, statuses.shift());
		}

		rm.write("</div>"); // End Bottom row container
	}
	rm.write("</div>"); // End Main container
};

}; // end of sap/m/ObjectListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectNumberRenderer') ) {
/*
 * @copyright
 */

jQuery.sap.declare("sap.m.ObjectNumberRenderer");

/**
 * @class ObjectNumber renderer. 
 * @static
 */
sap.m.ObjectNumberRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ObjectNumberRenderer.render = function(oRm, oON){
	// return immediately if control is invisible
	if (!oON.getVisible()) {
		return;
	}

	// write the HTML into the render manager
	oRm.write("<div"); // Number begins
	oRm.writeControlData(oON);
	oRm.addClass("sapMObjectNumber");
	if (oON.getEmphasized()) {
		oRm.addClass("sapMObjectNumberEmph");
	}
	oRm.addClass(oON._sCSSPrefixObjNumberStatus + oON.getState());
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<span"); // Number text begins
	oRm.addClass("sapMObjectNumberText");
	oRm.writeClasses();
	oRm.write(">");
	oRm.writeEscaped(oON.getNumber()); 
	oRm.write("</span>"); // Number text ends

	oRm.write("<span"); // Number unit begins
	oRm.addClass("sapMObjectNumberUnit");
	oRm.writeClasses();
	oRm.write(">");
	
	var unit = oON.getUnit();
	if(!unit){
		unit = oON.getNumberUnit(); 
	}
	oRm.writeEscaped(unit);		
	oRm.write("</span>"); // Number unit ends

	oRm.write("</div>"); // Number ends
};

}; // end of sap/m/ObjectNumberRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectStatusRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ObjectStatusRenderer");

/**
 * @class ObjectStatus renderer. 
 * @static
 */
sap.m.ObjectStatusRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ObjectStatusRenderer.render = function(oRm, oObjStatus){
	// Return immediately if control is invisible
	if (!oObjStatus.getVisible()) {
		return;
	}
	
	if(!oObjStatus._isEmpty()) {
		oRm.write("<div");
		oRm.writeControlData(oObjStatus);
		
		var sTooltip = oObjStatus.getTooltip_AsString();
		if (sTooltip) {
			oRm.writeAttributeEscaped("title", sTooltip);
		}
		
		oRm.addClass("sapMObjStatus"); 
		oRm.addClass("sapMObjStatus" + oObjStatus.getState());
		oRm.writeClasses();
		oRm.write(">");
				
		if (oObjStatus.getIcon()) {
			oRm.write("<span");
			oRm.addClass("sapMObjStatusIcon");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oObjStatus._getImageControl());
			oRm.write("</span>");
		}

		if (oObjStatus.getText()) {
			oRm.write("<span");
			oRm.addClass("sapMObjStatusText");
			oRm.writeClasses();
			oRm.write(">");
			oRm.writeEscaped(oObjStatus.getText());
			oRm.write("</span>");
		}
		oRm.write("</div>");			
	}
};
}; // end of sap/m/ObjectStatusRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.PageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.PageRenderer");

/**
 * @class Page renderer.
 * @static
 */
sap.m.PageRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.PageRenderer.render = function(rm, oPage) {
	var oHeader = null,
		oFooter = null,
		sEnableScrolling = oPage.getEnableScrolling() ? " sapMPageScrollEnabled" : "";

	if (oPage.getShowHeader()) {
		oHeader = oPage._getAnyHeader();
	}

	var oSubHeader = oPage.getSubHeader();
	
	if (oPage.getShowFooter()){
		oFooter = oPage.getFooter();
	}
	rm.write("<div");
	rm.writeControlData(oPage);
	rm.addClass("sapMPage");

	rm.addClass("sapMPageBg" + oPage.getBackgroundDesign());
	
	if (oHeader) {
		rm.addClass("sapMPageWithHeader");
	}

	if (oSubHeader) {
		rm.addClass("sapMPageWithSubHeader");
	}

	if (oFooter) {
		// it is used in the PopOver to remove additional margin bottom for page with footer
		rm.addClass("sapMPageWithFooter");
	}

	rm.writeClasses();

	var sTooltip = oPage.getTooltip_AsString();

	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}

	rm.write(">");

	// render header
	if (oHeader) {
		rm.renderControl(oHeader);
	}

	if (oSubHeader) {
		oSubHeader._context = 'header';
		rm.renderControl(oSubHeader.addStyleClass("sapMSubHeader-CTX sapMPageSubHeader"));
	}

	// render child controls
	rm.write('<section id="' + oPage.getId() + '-cont">');
	rm.write('<div id="' + oPage.getId() + '-scroll" class="sapMPageScroll' + sEnableScrolling + '">');

	var aContent = oPage.getContent();
	var l = aContent.length;

	for (var i = 0; i < l; i++) {
		rm.renderControl(aContent[i]);
	}

	rm.write("</div>");

	rm.write("</section>");

	// render footer Element
	if (oFooter) {
		oFooter._context = 'footer';
		rm.renderControl(oFooter);
	}

	rm.write("</div>");
};
}; // end of sap/m/PageRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.PanelRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.PanelRenderer");

/**
 * @class Panel renderer
 * @static
 */
sap.m.PanelRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.PanelRenderer.render = function(oRm, oControl) {
	// Return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	// start Panel
	oRm.write("<section");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMPanel");
	oRm.addStyle("width", oControl.getWidth());
	oRm.addStyle("height", oControl.getHeight());
	oRm.writeClasses();
	oRm.writeStyles();
	oRm.write(">");

	// render header
	var sHeaderText = oControl.getHeaderText();
	var oHeaderTBar = oControl.getHeaderToolbar();
	if (oHeaderTBar) {
		oHeaderTBar.setDesign(sap.m.ToolbarDesign.Transparent, true);
		oRm.renderControl(oHeaderTBar);
	} else if (sHeaderText) {
		oRm.write("<div class='sapMPanelHdr'>");
		oRm.writeEscaped(sHeaderText);
		oRm.write("</div>");
	}

	// render info bar
	var oInfoTBar = oControl.getInfoToolbar();
	if (oInfoTBar) {
		oInfoTBar.setDesign(sap.m.ToolbarDesign.Info, true);
		oRm.renderControl(oInfoTBar);
	}

	// render content
	oRm.write("<div");
	oRm.addClass("sapMPanelContent");
	oRm.addClass("sapMPanelBG");
	oRm.writeClasses();
	oRm.write(">");
	var aChildren = oControl.getContent();
	var iLength = aChildren.length;
	for (var i = 0; i < iLength; i++) {
		oRm.renderControl(aChildren[i]);
	}
	oRm.write("</div>");
	oRm.write("</section>");
};
}; // end of sap/m/PanelRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.PopoverRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.PopoverRenderer");

/**
 * @class Popover renderer. 
 * @static
 */
sap.m.PopoverRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.PopoverRenderer.render = function(rm, oControl){ 
	var aClassNames,
		oSubHeader = oControl.getSubHeader();
	
	if(oSubHeader){
		oSubHeader._context = "header";
	}
	
	//container
	rm.write("<div");
	rm.writeControlData(oControl);

	aClassNames= this.generateRootClasses(oControl);
	aClassNames.forEach(function(sClassName, index){
		rm.addClass(sClassName);
	});
	rm.writeClasses();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.writeAttribute("tabindex", "-1");

	rm.write(">");

	this.renderContent(rm, oControl);

	rm.write("</div>");// container
};

sap.m.PopoverRenderer.isButtonFooter = function(footer){
	if(footer instanceof sap.m.Bar){
		var aContentLeft = footer.getContentLeft(),
			aContentRight = footer.getContentRight(),
			aContentMiddle = footer.getContentMiddle(),
			bLeftEmpty = (!aContentLeft || aContentLeft.length === 0),
			bRightEmpty = (!aContentRight || aContentRight.length === 0),
			bMiddleTwoButtons = false;

		if(aContentMiddle && aContentMiddle.length ===2){
			if((aContentMiddle[0] instanceof sap.m.Button) && (aContentMiddle[1] instanceof sap.m.Button)){
				bMiddleTwoButtons = true;
			}
		}
		
		return bLeftEmpty && bRightEmpty && bMiddleTwoButtons;
	}else{
		return false;
	}
};

sap.m.PopoverRenderer.renderContent = function(rm, oControl){
	var oHeaderControl,
		sId = oControl.getId(),
		i = 0,
		contents = oControl.getContent(),
		oFooter = oControl.getFooter(),
		oSubHeader = oControl.getSubHeader(),
		sContentWidth = oControl.getContentWidth(),
		sContentHeight = oControl.getContentHeight(),
		sFooterClass = "sapMPopoverFooter ";
	
	if(oControl.getShowHeader()){
		oHeaderControl = oControl._getAnyHeader();
	}
	
	if(sap.ui.Device.system.desktop) {
		//Invisible element for cycling keyboard navigation
		rm.write("<span id='" + oControl.getId() + "-firstfe' tabindex='0'></span>");
	}

	if(!sap.ui.Device.os.ios && !sap.m.Popover._bOneDesign){
		//arrow
		rm.write("<span");
		rm.writeAttribute("id", sId+"-arrow");
		rm.addClass("sapMPopoverArr");
		rm.writeClasses();
		rm.write("></span>");//arrow tip
	}

	//header
	if(oHeaderControl){
		rm.renderControl(oControl._getAnyHeader().addStyleClass("sapMPopoverHeader sapMPageHeader"));
	}//header
	
	if(oSubHeader){
		rm.renderControl(oSubHeader.addStyleClass("sapMPopoverSubHeader"));
	}
	
	// content container
	rm.write("<div");
	rm.writeAttribute("id",sId + "-cont");
	if(sContentWidth){
		rm.addStyle("width",sContentWidth);
	}
	if(sContentHeight){
		rm.addStyle("height",sContentHeight);
	}
	rm.writeStyles();
	rm.addClass("sapMPopoverCont");
	rm.writeClasses();
	rm.write(">");
	
	//scroll area
	rm.write("<div id='" + oControl.getId() + "-scroll" +"' class='sapMPopoverScroll " +"'>");
	for(i = 0 ; i < contents.length ; i++){
		rm.renderControl(contents[i]);
	}
	rm.write("</div>");//scrollArea
	
	rm.write("</div>");//content container
	
	//footer
	if (oFooter) {
		oFooter._context = 'footer';
		if(this.isButtonFooter(oFooter)){
			sFooterClass += "sapMPopoverSpecialFooter";
		}
		rm.renderControl(oFooter.addStyleClass(sFooterClass));
	}//footer
	
	if(sap.ui.Device.os.ios || sap.m.Popover._bOneDesign){
		//arrow
		rm.write("<span");
		rm.writeAttribute("id", sId+"-arrow");
		rm.addClass("sapMPopoverArr");
		rm.writeClasses();
		rm.write("></span>");//arrow tip
	}

	if(sap.ui.Device.system.desktop) {
		//Invisible element for desktop keyboard navigation
		rm.write("<span id='" + oControl.getId() + "-lastfe' tabindex='0'></span>");
	}
};

sap.m.PopoverRenderer.generateRootClasses = function(oControl){
	var aClassNames = ["sapMPopover"],
		oSubHeader = oControl.getSubHeader(),
		oFooter = oControl.getFooter(),
		bVerScrollable = oControl.getVerticalScrolling() && !oControl._forceDisableScrolling,
		bHorScrollable = oControl.getHorizontalScrolling() && !oControl._forceDisableScrolling,
		oHeaderControl;
	
	if(oControl.getShowHeader()){
		oHeaderControl = oControl._getAnyHeader();
	}
	
	if(oHeaderControl){
		aClassNames.push("sapMPopoverWithBar");
	}else{
		aClassNames.push("sapMPopoverWithoutBar");
	}
	
	if(oSubHeader){
		aClassNames.push("sapMPopoverWithSubHeader");
	}else{
		aClassNames.push("sapMPopoverWithoutSubHeader");
	}
	
	if(oControl._hasSingleNavContent()){
		aClassNames.push("sapMPopoverNav");
	}
	
	if(oControl._hasSinglePageContent()){
		aClassNames.push("sapMPopoverPage");
	}
	if(oFooter){
		aClassNames.push("sapMPopoverWithFooter");
	}else{
		aClassNames.push("sapMPopoverWithoutFooter");
	}
	
	if(oControl.getPlacement() === sap.m.PlacementType.Top){
		aClassNames.push("sapMPopoverPlacedTop");
	}
	if(!bVerScrollable) {
		aClassNames.push("sapMPopoverVerScrollDisabled");
	}
	if(!bHorScrollable) {
		aClassNames.push("sapMPopoverHorScrollDisabled");
	}
	
	aClassNames.push("sapMPopup-CTX");
	
	return aClassNames;
};

sap.m.PopoverRenderer.rerenderContentOnly = function(oControl){
	var $Popover = oControl.$(),
		oPopoverDomRef = oControl.getDomRef(),
		aClassNames, oRm;

	if(!oPopoverDomRef){
		//popover isn't rendered yet, just return
		return;
	}

	$Popover.removeClass();
	aClassNames = this.generateRootClasses(oControl);
	$Popover.addClass(aClassNames.join(" "));

	oRm = sap.ui.getCore().createRenderManager();
	this.renderContent(oRm, oControl);

	oRm.flush(oPopoverDomRef, true);
	oRm.destroy();

	//recalculate the size and position of popover
	oControl._onOrientationChange();
};
}; // end of sap/m/PopoverRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ProgressIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.ProgressIndicatorRenderer");

/**
 * @class ProgressIndicator renderer.
 * @static
 */
sap.m.ProgressIndicatorRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ProgressIndicatorRenderer.render = function(oRm, oC) {

	// return immediately if control is not visible
	if (!oC.getVisible()) {
		return;
	}

	var fWidthBar = oC.getPercentValue();
	var iWidthControl = oC.getWidth();
	var iHeightControl = oC.getHeight();
	var sTextValue = oC.getDisplayValue();
	var bShowText = oC.getShowValue();
	var sState = oC.getState();

	// write the HTML into the render manager
	//PI border
	oRm.write("<div");
	oRm.writeControlData(oC);
	oRm.addClass("sapMPI");
	if (fWidthBar > 50) {
		oRm.addClass("sapMPIValueGreaterHalf");
	}
	oRm.writeAttribute("style", "width:" + iWidthControl + "; height:" + iHeightControl);

	if (oC.getEnabled()) {
		oRm.writeAttribute('tabIndex', '-1');
	} else {
		oRm.addClass("sapMPIBarDisabled");
	}
	oRm.writeClasses();
	oRm.write(">"); // div element

	//PI bar
	oRm.write("<div");
	oRm.addClass("sapMPIBar");

	switch (sState) {
	case sap.ui.core.ValueState.Warning:
		oRm.addClass("sapMPIBarCritical");
		break;
	case sap.ui.core.ValueState.Error:
		oRm.addClass("sapMPIBarNegative");
		break;
	case sap.ui.core.ValueState.Success:
		oRm.addClass("sapMPIBarPositive");
		break;
	case sap.ui.core.ValueState.None:
		oRm.addClass("sapMPIBarNeutral");
		break;
	default:
		oRm.addClass("sapMPIBarNeutral");
		break;
	}

	oRm.writeClasses();
	oRm.writeAttribute("id", oC.getId() + "-bar");
	oRm.writeAttribute("style", "width:" + fWidthBar + "%");
	oRm.write(">"); // div element

	//PI textLeft
	oRm.write("<span class='sapMPIText sapMPITextLeft' id='" + oC.getId() + "-textLeft'>");
	
	//textvalue is only showed if showValue set
	if (bShowText) {
		oRm.writeEscaped(sTextValue);
	}

	oRm.write("</span>");
	oRm.write("</div>"); // div element pi bar
	
	//PI textRight
	oRm.write("<span class='sapMPIText sapMPITextRight' id='" + oC.getId() + "-textRight'>");

	//textvalue is only showed if showValue set
	if (bShowText) {
		oRm.writeEscaped(sTextValue);
	}
	oRm.write("</span>");

	oRm.write("</div>"); //div element pi text
};

}; // end of sap/m/ProgressIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.PullToRefreshRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.PullToRefreshRenderer");
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
 // TODO: consider making this conditional 
sap.ui.core.IconPool.insertFontFaceStyle();

/**
 * @class PullToRefresh renderer. 
 * @static
 */
sap.m.PullToRefreshRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.PullToRefreshRenderer.render = function(oRm, oControl){

	// do not render invisible P2R
	if(!oControl.getVisible()) return;
	
	var bShowIcon = oControl.getShowIcon();
	var sCustomIcon = oControl.getCustomIcon();

	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMPullDown");
	if (!oControl._bTouchMode) {
		oRm.addClass("sapMPullDownNontouch");
	} else {
		oRm.addClass("sapMPullDownTouch");
	}
	if(bShowIcon && !sCustomIcon){ // if no custom icon is provided, use SAP logo as background
		oRm.addClass("sapMPullDownLogo");
	}
	oRm.writeClasses();
	oRm.write(">"); // div element

	if(bShowIcon && sCustomIcon){
		var oCustomImage = oControl.getCustomIconImage();
		if(oCustomImage){
			oRm.write("<div class=\"sapMPullDownCI\">");
			oRm.renderControl(oCustomImage);
			oRm.write("</div>");
		}
	}

	// Pull down arrow icon
	oRm.write("<span class=\"sapMPullDownIcon\"></span>");

	// Busy Indicator
	oRm.write("<span class=\"sapMPullDownBusy\">");
	oRm.renderControl(oControl._oBusyIndicator);
	oRm.write("</span>");

	// Text - Pull down to refresh
	oRm.write("<span id=" + oControl.getId() + "-T class=\"sapMPullDownText\">");
	oRm.writeEscaped(oControl.oRb.getText(oControl._bTouchMode ? "PULL2REFRESH_PULLDOWN" : "PULL2REFRESH_REFRESH"));
	oRm.write("</span>");

	// Info - last updated at xx:xx:xx
	oRm.write("<span id=" + oControl.getId() + "-I class=\"sapMPullDownInfo\">");
	oRm.writeEscaped(oControl.getDescription());
	oRm.write("</span>");

	oRm.write("</div>");
};

}; // end of sap/m/PullToRefreshRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.RadioButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.RadioButtonRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class RadioButton renderer.
 * @static
 */
sap.m.RadioButtonRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oRadioButton an object representation of the control that should be rendered
 */
sap.m.RadioButtonRenderer.render = function(oRm, oRadioButton){
	// Return immediately if control is invisible
	if (!oRadioButton.getVisible()) {
		return;
	}

	// get control properties
	var bEnabled = oRadioButton.getEnabled();
	var iTabIndex = bEnabled ? 0 : -1;
	var bReadOnly = false;

	// Radio Button style class
	oRm.addClass("sapMRb");

	if(bEnabled) {
		oRm.addClass("sapMPointer");
	}

	// write the HTML into the render manager
	oRm.write("<div");						// Control - DIV
	oRm.writeControlData(oRadioButton);

	// ARIA
	oRm.writeAccessibilityState(oRadioButton, {
		role: "radio",
		checked: oRadioButton.getSelected() === true,
		disabled: !bEnabled
	});

	// Add classes and properties depending on the state
	if (oRadioButton.getSelected()) {
		oRm.addClass("sapMRbSel");
	}

	if (!bEnabled) {
		bReadOnly = true;
		oRm.addClass("sapMRbDis");
	}

	oRm.writeClasses();
	oRm.writeAttribute("tabIndex", "-1");

	var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oRadioButton, oRadioButton.getTooltip_AsString());
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}

	oRm.write(">");		// DIV element

	oRm.write("<div class='sapMRbB'");

	//set an id on this this to be able to focus it, on ApplyFocusInfo (rerenderAllUiAreas)
	oRm.writeAttribute("id", oRadioButton.getId() + "-Button");

	oRm.writeAttribute("tabindex", oRadioButton.hasOwnProperty("_iTabIndex") ? oRadioButton._iTabIndex : iTabIndex);
	oRm.write(">");

	oRm.write("<div");
	oRm.addClass("sapMRbBOut");

	if(bEnabled && sap.ui.Device.system.desktop) {
		oRm.addClass("sapMRbHoverable");
	}

	oRm.writeAttribute("id", oRadioButton.getId() + "-out");
	oRm.writeAttribute("tabindex", oRadioButton.hasOwnProperty("_iTabIndex") ? oRadioButton._iTabIndex : iTabIndex);
	oRm.writeClasses();
	oRm.write(">");		// DIV element
	oRm.write("<div");
	oRm.addClass("sapMRbBInn");
	oRm.writeClasses();
	oRm.write(">");		// DIV element

	// Write the real - potentially hidden - HTML RadioButton element
	oRm.write("<input type='radio' tabindex='-1'");
	oRm.writeAttribute("id", oRadioButton.getId() + "-RB");
	oRm.writeAttributeEscaped("name", oRadioButton.getGroupName());
	if (oRadioButton.getSelected()) {
		oRm.writeAttribute("checked", "checked");
	}
	if (!bEnabled) {
		oRm.writeAttribute("disabled", "disabled");
	}
	//oRm.writeAttributeEscaped("title", oRadioButton.getTooltip_AsString());
	if(bReadOnly) {
		oRm.writeAttribute("readonly", "readonly");
		oRm.writeAttribute("disabled", "disabled");
	}
	oRm.write(" />");	// Close RadioButton-input-element
//	if(sap.ui.Device.os.android || sap.ui.Device.os.blackberry) {
		oRm.write("</div></div>");	// Control - DIVs close
//	}
	oRm.write("</div>");
	oRm.renderControl(oRadioButton._oLabel);
	oRm.write("</div>");	// Control - DIVs close
};

}; // end of sap/m/RadioButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.RatingIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.RatingIndicatorRenderer");
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/* =========================================================== */
/*           temporary flags for jslint syntax check           */
/* =========================================================== */
/*jslint nomen: false */

/**
 * @class RatingIndicator renderer.
 * @static
 */
sap.m.RatingIndicatorRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.RatingIndicatorRenderer.render = function (oRm, oControl) {

	var fRatingValue = oControl._roundValueToVisualMode(oControl.getValue()),
		iSymbolCount = oControl.getMaxValue(),
		fIconSize = oControl._iPxIconSize,
		fIconPadding = oControl._iPxPaddingSize,
		sIconSizeMeasure = 'px',
		iSelectedWidth = fRatingValue * fIconSize + (Math.round(fRatingValue) - 1) * fIconPadding,
		iWidth = iSymbolCount * (fIconSize + fIconPadding) - fIconPadding,
		oIconSel,
		oIconUnsel,
		oIconHov,
		i = 0,
		sTooltip = oControl.getTooltip_AsString();

	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	if (iSelectedWidth < 0) { //width should not be negative
		iSelectedWidth = 0;
	}

	// render the control container div
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.writeAttribute("style", "width: " + iWidth + sIconSizeMeasure);
	if (!oControl.getEnabled()) {
		oRm.writeAttribute("tabindex", "-1");
	} else {
		oRm.writeAttribute("tabindex", "0");
	}
	oRm.addClass("sapMRI");
	if (oControl.getEnabled()) {
		oRm.addClass("sapMPointer");
	} else {
		oRm.addClass("sapMRIDisabled");
	}
	oRm.writeClasses();
	// add tooltip if available
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}	
	oRm.write(">");
	

	// render selected items div
	oRm.write("<div class='sapMRISel'");
	oRm.writeAttribute("id", oControl.getId() + "-sel");
	oRm.writeAttribute("style", "width: " + iSelectedWidth + sIconSizeMeasure);
	oRm.write(">");
	// for defined count of icons, create selected icons with oControl._getIcon(0)
	for (i = 0; i < iSymbolCount; i++) {
		oIconSel = oControl._getIcon(0);
		//check if icon is icon or image
		if (oIconSel instanceof sap.ui.core.Icon) {
			oIconSel.setSize(fIconSize +sIconSizeMeasure);
		}
		// always set width and height because icon fonts can have different dimensions
		oIconSel.setWidth(fIconSize + sIconSizeMeasure);
		oIconSel.setHeight(fIconSize + sIconSizeMeasure);

		oIconSel.addStyleClass("sapMRIIconSel");
		oRm.renderControl(oIconSel);
	}
	oRm.write("</div>");

	// render unselected items div (container and relative child)
	oRm.write("<div class='sapMRIUnselWrapper'");
	oRm.writeAttribute("id", oControl.getId() + "-unsel-wrapper");
	oRm.writeAttribute("style", "width: " + (iWidth - iSelectedWidth) + sIconSizeMeasure);
	oRm.write(">");
	oRm.write("<div class='sapMRIUnsel' id='" + oControl.getId() + "-unsel'>");
	// for defined count of icons, create unselected icons with oControl._getIcon(1)
	for (i = 0; i < iSymbolCount; i++) {
		oIconUnsel = oControl._getIcon(1);
		//check if icon is icon or image
		if (oIconUnsel instanceof sap.ui.core.Icon) {
			oIconUnsel.setSize(fIconSize + sIconSizeMeasure);
		}
		// always set width and height because icon fonts can have different dimensions
		oIconUnsel.setWidth(fIconSize + sIconSizeMeasure);
		oIconUnsel.setHeight(fIconSize + sIconSizeMeasure);

		oIconUnsel.addStyleClass("sapMRIIconUnsel");
		if (fIconSize <= 1) {
			oIconUnsel.addStyleClass("sapMRIIconUnselSmall");
		}
		oRm.renderControl(oIconUnsel);
	}
	oRm.write("</div>");
	oRm.write("</div>");

	// render hovered item div
	if (oControl.getEnabled()) {
		oRm.write("<div class='sapMRIHov' id='" + oControl.getId() + "-hov'>");
		// for defined count of icons, create hovered icons with oControl._getIcon(2)
		for (i = 0; i < iSymbolCount; i++) {
			oIconHov = oControl._getIcon(2);
			//check if icon is icon or image
			if (oIconHov instanceof sap.ui.core.Icon) {
				oIconHov.setSize(fIconSize + sIconSizeMeasure);
			}
			// always set width and height because icon fonts can have different dimensions
			oIconHov.setWidth(fIconSize + sIconSizeMeasure);
			oIconHov.setHeight(fIconSize + sIconSizeMeasure);

			oIconHov.addStyleClass("sapMRIIconHov");
			oRm.renderControl(oIconHov);
		}
		oRm.write("</div>");

		// render selector items div
		oRm.write("<div class='sapMRISelector' id='" + oControl.getId() + "-selector'>");
		oRm.write("</div>");
	}

	// close control div
	oRm.write("</div>");
};
}; // end of sap/m/RatingIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ResponsivePopoverRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.ResponsivePopoverRenderer");

/**
 * @class ResponsivePopover renderer.
 * @static
 */
sap.m.ResponsivePopoverRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ResponsivePopoverRenderer.render = function (oRm, oControl) {
};
}; // end of sap/m/ResponsivePopoverRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ScrollContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ScrollContainerRenderer");

/**
 * @class ScrollContainer renderer. 
 * @static
 */
sap.m.ScrollContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ScrollContainerRenderer.render = function(oRm, oControl) { 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	oRm.write("<div");
	oRm.writeControlData(oControl);

	var width = oControl.getWidth(),
	height = oControl.getHeight();
	if (width) {
		oRm.addStyle("width", width);
	}
	if (height) {
		oRm.addStyle("height", height);
	}
	oRm.writeStyles();

	if (oControl.getVertical()) {
		if (!oControl.getHorizontal()) {
			oRm.addClass("sapMScrollContV");
		} else {
			oRm.addClass("sapMScrollContVH");
		}
	} else if (oControl.getHorizontal()) {
		oRm.addClass("sapMScrollContH");
	}

	oRm.addClass("sapMScrollCont");
	oRm.writeClasses();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	
	oRm.write("><div id='" + oControl.getId() + "-scroll' class='sapMScrollContScroll'>");

	// render child controls
	var aContent = oControl.getContent(), 
	l = aContent.length;
	for (var i = 0; i < l; i++) {
		oRm.renderControl(aContent[i]);
	}

	oRm.write("</div></div>");
};

}; // end of sap/m/ScrollContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.SearchFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.SearchFieldRenderer");

/**
 * @class SearchField renderer.
 * @static
 */
sap.m.SearchFieldRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.SearchFieldRenderer.render = function(oRenderManager, oSF){
	// render nothing if control is invisible
	if (!oSF.getVisible()) {
		return;
	}

	var rm = oRenderManager;
	var bShowMagnifier = oSF.getShowMagnifier();
	var sPlaceholder = oSF.getPlaceholder();
	var sValue = oSF.getValue();
	var sWidth = oSF.getProperty("width");

	// container
	rm.write("<div");
	rm.writeControlData(oSF);
	if (sWidth) { rm.writeAttribute("style", "width:" + sWidth + ";"); }

	rm.addClass("sapMSF");
	if (bShowMagnifier) { rm.addClass("sapMSFM"); }
	if(sap.ui.Device.os.android && !(sap.ui.Device.browser.chrome)){
		if(sap.ui.Device.os.version < 3){
			rm.addClass("sapMSFA2"); // specific Android 2.+ rendering
		} else if (sap.ui.Device.os.version <= 4){
			rm.addClass("sapMSFA4"); // specific Android 4.0* rendering
		}
	}
	if(sValue){
		rm.addClass("sapMSFVal");
	}
	if (!oSF.getEnabled()){
		rm.addClass("sapMSFDisabled");
	}
	rm.writeClasses();
	var sTooltip = oSF.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");

	if(oSF._sDesign){
		this.renderBcd(rm, oSF, bShowMagnifier, sPlaceholder, sValue);
	} else {
		this.renderMvi(rm, oSF, bShowMagnifier, sPlaceholder, sValue);
	}

	rm.write("</div>");

};

/**
 * Render MVI style (platform dependent, magnifier to the left, no button)
 */
sap.m.SearchFieldRenderer.renderMvi = function(rm, oSF, bShowMagnifier, sPlaceholder, sValue){

	var sId = oSF.getId();

	// 1. magnifier icon
	if (bShowMagnifier) { rm.write('<div class="sapMSFMG"></div>'); }

	// 2. Input type="search".
	//    Enclose input into a <form> to show a correct keyboard
	//    method="post" to prevent unneeded "?" at the end of URL
	rm.write('<form method="post" action="javascript:void(0);">');

	// self-made placeholder
	if (!oSF._hasPlacehoder && sPlaceholder) {
		rm.write("<label ");
		rm.writeAttribute("id", sId + "-P");
		rm.writeAttribute("for", sId + "-I");

		rm.addClass("sapMSFPlaceholder");
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(sPlaceholder);
		rm.write("</label>");
	}

	rm.write('<input type="search" autocorrect="off"');
	rm.writeAttribute("id", oSF.getId() + "-I");

	rm.addClass("sapMSFI");

	if (sap.ui.Device.os.ios && sap.ui.Device.os.version > 5) {
			rm.addClass("sapMSFIIos6"); // specific Ios6+ rendering
	}

	if (!oSF.getEnabled()){
		// hide the reset button even if value is not empty: user cannot press it
		rm.addClass("sapMSFIDisabled");
	}
	rm.writeClasses();

	if (!oSF.getEnabled()) { rm.writeAttribute("disabled","disabled"); }
	if (bShowMagnifier) { rm.writeAttribute("results", 0); }
	if (sPlaceholder) { rm.writeAttributeEscaped("placeholder", sPlaceholder); }
	if (oSF.getMaxLength()) { rm.writeAttribute("maxLength", oSF.getMaxLength()); }
	if (sValue) { rm.writeAttributeEscaped("value", sValue); }

	rm.write("></form>");

	// 3. Reset button (transparent, lies over "X" of input, reacts on touch correctly)
	// in sap_bluecrystal: x is placed on the reset button
	if (oSF.getEnabled()) {
		rm.write("<div");
		rm.writeAttribute("id", oSF.getId() + "-reset");
		rm.addClass("sapMSFR");
		rm.writeClasses();
		rm.write("></div>");
	}
}; // render MVI

/**
 * Render blue-crystal design (platform independent, magnifier to the right, with the button)
 */
sap.m.SearchFieldRenderer.renderBcd = function(rm, oSF, bShowMagnifier, sPlaceholder, sValue){

	var sId = oSF.getId();

	// 1. extra block around input form
	rm.write('<div');
	rm.addClass('sapMSFB');
	if(oSF.getShowRefreshButton() && !oSF.getValue()){
		rm.addClass('sapMSFReload');
	}
	if(oSF._bNoFlex){
		rm.addClass('sapMSFNoFlex');
	}
	rm.writeClasses();
	rm.write('>');

	// 2. Input type="search".
	//    Enclose input into a <form> to show a correct keyboard
	//    method="post" to prevent unneeded "?" at the end of URL
	rm.write('<form method="post" action="javascript:void(0);">');

	// self-made placeholder
	if (!oSF._hasPlacehoder && sPlaceholder) {
		rm.write("<label ");
		rm.writeAttribute("id", sId + "-P");
		rm.writeAttribute("for", sId + "-I");

		rm.addClass("sapMSFPlaceholder");
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(sPlaceholder);
		rm.write("</label>");
	}

	rm.write('<input type="search" autocorrect="off"');
	rm.writeAttribute("id", oSF.getId() + "-I");

	rm.addClass("sapMSFI");

	if(sap.ui.Device.os.android && sap.ui.Device.os.version >= 4 && sap.ui.Device.os.version < 4.1 ){
		rm.addClass("sapMSFIA4"); // specific CSS layout for Android 4.0x
	}

	if (!oSF.getEnabled()){
		// hide the reset button even if value is not empty: user cannot press it
		rm.addClass("sapMSFIDisabled");
	}
	rm.writeClasses();

	if (!oSF.getEnabled()) { rm.writeAttribute("disabled","disabled"); }
	//if (bShowMagnifier) { rm.writeAttribute("results", 0); }
	if (sPlaceholder) { rm.writeAttributeEscaped("placeholder", sPlaceholder); }
	if (oSF.getMaxLength()) { rm.writeAttribute("maxLength", oSF.getMaxLength()); }
	if (sValue) { rm.writeAttributeEscaped("value", sValue); }
	rm.write(">");

	// 3. Reset button (transparent, lies over "X" of input, reacts on touch correctly)
	// in sap_bluecrystal: x is placed on the reset button
	if (oSF.getEnabled()) {
		rm.write("<div");
		rm.writeAttribute("id", oSF.getId() + "-reset");
		rm.addClass("sapMSFR");
		rm.writeClasses();
		rm.write("></div>");
	}

	rm.write("</form>");

	if(oSF._oButton){
		rm.renderControl(oSF._oButton);
	}

	rm.write("</div>"); // extra block
}; // render BC
}; // end of sap/m/SearchFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.SegmentedButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.SegmentedButtonRenderer");

/**
 * @class Segmented renderer. 
 * @static
 */
sap.m.SegmentedButtonRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.SegmentedButtonRenderer.render = function(rm, oControl){ 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	var aItems = oControl.getButtons(),
	aItemsLength = aItems.length;
	if(!oControl.getVisible()) {
		return;
	}
	// write the HTML into the render manager
	rm.write("<ul");
	rm.addClass("sapMSegB");
	rm.addClass("sapMSegBHide");
	rm.writeClasses();
	if (oControl.getWidth() && oControl.getWidth() !== '') {
		rm.addStyle('width', oControl.getWidth());
	}
	rm.writeStyles();
	rm.writeControlData(oControl);
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	
	if(!oControl.getSelectedButton()) {
		if(aItems.length > 0)
			oControl.setSelectedButton(aItems[0].getId(), true);
	}
	
	for (var i = 0; i < aItemsLength; i++) {
		var oItem = aItems[i];
		
		rm.write("<li");
		rm.writeControlData(oItem);
		rm.addClass("sapMSegBBtn");
		if(oControl.getSelectedButton() === oItem.getId()) {
			rm.addClass("sapMSegBBtnSel");
		}
		if(!oItem.getEnabled()) {
			rm.addClass("sapMSegBBtnDis");
		}
		var tooltip = oItem.getTooltip_AsString();
		if (tooltip) {
			rm.writeAttributeEscaped("title", tooltip);
		}
		rm.writeAttribute("tabindex", oItem.getEnabled() ? "0" : "-1");
		rm.writeClasses();
		var buttonWidth = oItem.getWidth();
		if(buttonWidth){
			rm.addStyle('width', buttonWidth);
			rm.writeStyles();
		}
		rm.write('>');
		if(oItem.getIcon() === '' && oItem.getText() !== '') {
			rm.writeEscaped(oItem.getText(), false);
		} else if (oItem.getIcon() !== '' && oItem.getText() === '') {
			var oImage = oItem._getImage((oItem.getId() + "-img"), oItem.getIcon());
			oImage.onload = function() {
				sap.m.Image.prototype.onload.call(oImage);
				window.setTimeout(function() {
					oControl._fCalcBtnWidth();
				},20);
			}
			rm.renderControl(oImage);	

		} else if(oItem.getIcon() !== '' && oItem.getText() !== '' ){
			jQuery.sap.log.error("SEGMENTED: "+oItem.getId()+": Icon and Label is not allowed");
		}
		rm.write("</li>");
	}
	rm.write("</ul>");
	
};

}; // end of sap/m/SegmentedButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.SelectDialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.SelectDialogRenderer");

/**
 * @class SelectDialog renderer.
 * @static
 */
sap.m.SelectDialogRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.SelectDialogRenderer.render = function (oRm, oControl) {
};
}; // end of sap/m/SelectDialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.SelectRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.SelectRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class Select renderer.
 * @static
 */
sap.m.SelectRenderer = {};

/**
 * CSS class to be applied to the HTML root element of the Select control.
 *
 * @type {string}
 */
sap.m.SelectRenderer.CSS_CLASS = "sapMSlt";

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.m.Select} oSelect An object representation of the control that should be rendered.
 */
sap.m.SelectRenderer.render = function(oRm, oSelect) {
	var	oSelectedItem = oSelect.getSelectedItem(),
		sSelectedItemText = oSelectedItem ? oSelectedItem.getText() : "",
		sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oSelect, oSelect.getTooltip_AsString()),
		sId = oSelect.getId() + "-nat",
		sType = oSelect.getType(),
		sIconURI = oSelect.getIcon(),
		bAutoAdjustWidth = oSelect.getAutoAdjustWidth(),
		bEnabled = oSelect.getEnabled(),
		CSS_CLASS = sap.m.SelectRenderer.CSS_CLASS;

	// suppress rendering if not visible
	if (!oSelect.getVisible()) {
		return;
	}

	oRm.write("<div");
	this.addStyleClass(oRm, oSelect);
	oRm.addClass(CSS_CLASS);

	oRm.addClass(CSS_CLASS + oSelect.getType());

	if (!bEnabled) {
		oRm.addClass(CSS_CLASS + "Disabled");
	}

	if (bAutoAdjustWidth) {
		oRm.addClass(CSS_CLASS + "AutoAdjustedWidth");
	} else {
		oRm.addStyle("width", oSelect.getWidth());
	}

	if (sIconURI) {
		oRm.addClass(CSS_CLASS + "WithIcon");
	}

	oRm.addClass(CSS_CLASS + "WithArrow");

	oRm.addStyle("max-width", oSelect.getMaxWidth());

	oRm.writeControlData(oSelect);

	oRm.writeStyles();
	oRm.writeClasses();

	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}

	if (bEnabled) {
		oRm.writeAttribute("tabindex", "0");
	}

	oRm.write(">");

		switch (sType) {
			case sap.m.SelectType.Default:
				this._renderLabel(oRm, oSelect, sId, sSelectedItemText);
				this._renderArrow(oRm);
				break;

			case sap.m.SelectType.IconOnly:
				this._renderIcon(oRm, sIconURI);
				break;

			// no default
		}

		if (oSelect._isRequiredSelectElement()) {
			this._renderSelectElement(oRm, oSelect, sId, bEnabled, sSelectedItemText);
		}

	oRm.write("</div>");
};

/**
 * Renders the select's label, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.m.Select} oSelect An object representation of the control that should be rendered.
 * @param {string} sId
 * @param {string} sSelectedItemText
 * @private
 */
sap.m.SelectRenderer._renderLabel = function(oRm, oSelect, sId, sSelectedItemText) {
	oRm.write('<label class="' + sap.m.SelectRenderer.CSS_CLASS + 'Label"');
	oRm.writeAttribute("for", sId);

	oRm.write(">");
		oRm.writeEscaped(sSelectedItemText);
	oRm.write('</label>');
};

/**
 * Renders the select's arrow, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @private
 */
sap.m.SelectRenderer._renderArrow = function(oRm) {
	oRm.write('<span class="' + sap.m.SelectRenderer.CSS_CLASS + 'Arrow"></span>');
};

/**
 * Renders the select's icon, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {string} sIconURI
 * @private
 */
sap.m.SelectRenderer._renderIcon = function(oRm, sIconURI) {
	oRm.writeIcon(sIconURI, sap.m.SelectRenderer.CSS_CLASS + "Icon");
};

/**
 * Renders the HTMLSelectElement for the select control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.m.Select} oSelect An object representation of the select that should be rendered.
 * @param {string} sId
 * @param {boolean} bEnabled
 * @param {string} sSelectedItemText
 * @private
 */
sap.m.SelectRenderer._renderSelectElement = function(oRm, oSelect, sId, bEnabled, sSelectedItemText) {
	var sName = oSelect.getName();

	oRm.write("<select");
	oRm.writeAttribute("id", sId);

	if (sName) {
		oRm.writeAttributeEscaped("name", sName);
	}

	if (!bEnabled) {
		oRm.write(" disabled");
	}

	oRm.writeAttribute("tabindex", "-1");

	oRm.write(">");

		this._renderOptions(oRm, oSelect, sSelectedItemText);

	oRm.write("</select>");
};

/**
 * Renders the HTMLOptionElement(s) for the select control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.m.Select} oSelect An object representation of the select that should be rendered.
 * @param {string} sSelectedItemText
 * @private
 */
sap.m.SelectRenderer._renderOptions = function(oRm, oSelect, sSelectedItemText) {
	var aItems = oSelect.getItems(),
		aItemsLength = aItems.length,
		sSelectedItemId = oSelect.getAssociation("selectedItem"),
		i = 0;

	// rendering options
	for (; i < aItemsLength; i++) {
		oRm.write("<option");
			oRm.writeAttribute("id", aItems[i].getId());
			oRm.writeAttributeEscaped("value", (aItems[i].getKey() !== "") ? aItems[i].getKey() : aItems[i].getId());

			if (aItems[i].getId() === sSelectedItemId) {
				oRm.write(" selected");
			}

			if (!aItems[i].getEnabled()) {
				oRm.write(" disabled");
			}

			oRm.write(">");
			oRm.writeEscaped(aItems[i].getText());
		oRm.write("</option>");
	}

	if (aItemsLength === 0) {
		oRm.write("<option>" + sSelectedItemText + "</option>");
	}
};

/**
 * This method is reserved for derived class to add extra classes to the HTML root element of the control.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oSelect An object representation of the control that should be rendered.
 * @protected
 */
sap.m.SelectRenderer.addStyleClass = function(oRm, oSelect) {};
}; // end of sap/m/SelectRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ShellRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
 
 jQuery.sap.declare("sap.m.ShellRenderer");

/**
 * @class Shell renderer. 
 * @static
 */
sap.m.ShellRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ShellRenderer.render = function(rm, oControl) { 
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapMShell");
	if (oControl.getAppWidthLimited()) {
		rm.addClass("sapMShellAppWidthLimited");
	}
	
	sap.m.BackgroundHelper.addBackgroundColorStyles(rm, oControl.getBackgroundColor(),  oControl.getBackgroundImage());
	
	rm.writeClasses();
	rm.writeStyles();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	
	rm.write(">");
	
	sap.m.BackgroundHelper.renderBackgroundImageTag(rm, oControl, "sapMShellBG",  oControl.getBackgroundImage(), oControl.getBackgroundRepeat(), oControl.getBackgroundOpacity());
	
	rm.write("<div class='sapMShellBrandingBar'></div>");
	
	
	rm.write("<div class='sapMShellCentralBox'>");
	
	
	// header
	var extraHeaderClass= "", extraBGClass= ""; 
	if (!oControl.getBackgroundImage()) {
		extraHeaderClass = "sapMShellBackgroundColorOnlyIfDefault";
		extraBGClass = "sapMGlobalBackgroundImageOnlyIfDefault";
	}
	rm.write("<header class='sapMShellHeader " + extraHeaderClass + "' id='" + oControl.getId() + "-hdr'>");
	rm.write("<div class='" + extraBGClass + "'></div>");
	// logo
	rm.write(sap.m.ShellRenderer.getLogoImageHtml(oControl));
	
	// header title
	rm.write("<h1 id='" + oControl.getId() + "-hdrTxt' class='sapMShellHeaderText'>");
	rm.writeEscaped(oControl.getTitle());
	rm.write("</h1>");
	
	// header right area
	rm.write("<span class='sapMShellHeaderRight'>");
	
	// headerRightText
	rm.write("<span id='" + oControl.getId() + "-hdrRightTxt' ");
	if (!oControl.getHeaderRightText()) {
		rm.writeAttribute("style", "display:none;");
	}
	rm.write("class='sapMShellHeaderRightText'>" + jQuery.sap.encodeHTML(oControl.getHeaderRightText()) + "</span>");

	
	// logout button
	if (oControl.getShowLogout()) {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");
		rm.write("<a id='" + oControl.getId() + "-logout' tabindex='0' role='button' class='sapMShellHeaderLogout'>" + rb.getText("SHELL_LOGOUT") + "</a>");
	}
	
	rm.write("</span></header>");
	
	
	
	// content
	rm.write("<section class='sapMShellContent' id='" + oControl.getId() + "-content' data-sap-ui-root-content='true'>");

	rm.renderControl(oControl.getApp());
	
	rm.write("</section></div></div>");
};

sap.m.ShellRenderer.getLogoImageHtml = function(oControl) {
	var sImage = oControl.getLogo(); // configured logo
	if (!sImage) {
		jQuery.sap.require("sap.ui.core.theming.Parameters");
		sImage = sap.ui.core.theming.Parameters.get('sapUiGlobalLogo'); // theme logo
		if (sImage) {
			var match = /url[\s]*\('?"?([^\'")]*)'?"?\)/.exec(sImage);
			if (match) {
				sImage = match[1];
			} else if (sImage === "''"){ // theme default
				sImage = null;
			}
		}
	}
	
	var result = "";
	if (sImage) {
		result = "<div class='sapMShellLogo'>";
		if (sap.ui.Device.browser.internet_explorer) {
			result += "<span class='sapMShellLogoImgAligner'></span>";
		}
		result += "<img id='" + oControl.getId() + "-logo' class='sapMShellLogoImg' src='";
		result += jQuery.sap.encodeHTML(sImage);
		result += "' /></div>";
	}
	return result;
};
}; // end of sap/m/ShellRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.SliderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.SliderRenderer");

/**
 * @class Slider renderer.
 * @static
 */
sap.m.SliderRenderer = {};

/**
 * CSS class to be applied to the HTML root element of the Slider control.
 *
 * @type {string}
 */
sap.m.SliderRenderer.CSS_CLASS = "sapMSlider";

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oSlider An object representation of the slider that should be rendered.
 */
sap.m.SliderRenderer.render = function(oRm, oSlider) {
	var fValue = oSlider.getValue(),
		sName = oSlider.getName(),
		bEnabled = oSlider.getEnabled(),
		sTooltip = oSlider.getTooltip_AsString();

	// avoid render when not visible
	if (!oSlider.getVisible()) {
		return;
	}

	oRm.write("<div");
	oRm.addClass(sap.m.SliderRenderer.CSS_CLASS);

	if (!bEnabled) {
		oRm.addClass(sap.m.SliderRenderer.CSS_CLASS + "Disabled");
	}

	oRm.addStyle("width", oSlider.getWidth());
	oRm.addStyle("visibility", "hidden");
	oRm.writeClasses();
	oRm.writeStyles();
	oRm.writeControlData(oSlider);

	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}

	oRm.write(">");

		oRm.write('<div');
			oRm.addClass(sap.m.SliderRenderer.CSS_CLASS + "Inner");

			if (!bEnabled) {
				oRm.addClass(sap.m.SliderRenderer.CSS_CLASS + "InnerDisabled");
			}

			oRm.writeClasses();
			oRm.writeStyles();
			oRm.write(">");

			if (oSlider.getProgress()) {
				oRm.write('<div class="' + sap.m.SliderRenderer.CSS_CLASS + 'Progress" style="width: ' +  oSlider._sProgressValue + '"></div>');
			}

			this._renderHandle(oRm, oSlider, fValue, bEnabled);

		oRm.write("</div>");

		if (sName) {
			this._renderInput(oRm, oSlider, fValue, bEnabled, sName);
		}

	oRm.write("</div>");
};

sap.m.SliderRenderer._renderHandle = function(oRm, oSlider, fValue, bEnabled) {
	oRm.write("<span");
	oRm.addClass(sap.m.SliderRenderer.CSS_CLASS + "Handle");
	oRm.addStyle(sap.m.Slider._bRtl ? "right" : "left", oSlider._sProgressValue);

	// WAI-ARIA
	oRm.writeAccessibilityState(oSlider, {
		role: "slider",
		orientation: "horizontal",
		valuemin: oSlider.getMin(),
		valuemax: oSlider.getMax(),
		valuenow: fValue,
		valuetext: fValue,
		live: "assertive",
		disabled: !oSlider.getEnabled()
	});

	oRm.writeClasses();
	oRm.writeStyles();

	oRm.writeAttribute("title", fValue);

	if (bEnabled) {
		oRm.writeAttribute("tabindex", "0");
	}

	oRm.write("></span>");
};

sap.m.SliderRenderer._renderInput = function(oRm, oSlider, fValue, bEnabled, sName) {
	oRm.write('<input type="text" class="' + sap.m.SliderRenderer.CSS_CLASS + 'Input"');

	if (!bEnabled) {
		oRm.write("disabled");
	}

	oRm.writeAttributeEscaped("name", sName);
	oRm.writeAttribute("value", fValue);

	oRm.write("/>");
};
}; // end of sap/m/SliderRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.SplitContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.SplitContainerRenderer");

/**
 * @class SplitContainer renderer. 
 * @static
 */
sap.m.SplitContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.SplitContainerRenderer.render = function(oRm, oControl){ 
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMSplitContainer");
	
	if (this.renderAttributes) {
		this.renderAttributes(oRm, oControl); // may be used by inheriting renderers, but DO NOT write class or style attributes! Instead, call addClass/addStyle.
	}
	
	if(!sap.ui.Device.system.phone) {
		if(sap.ui.Device.orientation.portrait) {
			oRm.addClass("sapMSplitContainerPortrait");
		}
		switch(oControl.getMode()) {
			case "ShowHideMode":
				oRm.addClass("sapMSplitContainerShowHide");
				break;
			case "StretchCompress":
				oRm.addClass("sapMSplitContainerStretchCompress");
				break;
			case "PopoverMode":
				oRm.addClass("sapMSplitContainerPopover");
				break;
			case "HideMode":
				oRm.addClass("sapMSplitContainerHideMode");
		}
	}
	oRm.writeClasses();
	oRm.writeStyles();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	oRm.write(">"); // div element
	
	if(this.renderBeforeContent){
		this.renderBeforeContent(oRm, oControl);
	}
	
	if(!sap.ui.Device.system.phone) {
		if(oControl.getMode() === "PopoverMode" && sap.ui.Device.orientation.portrait) {
			oControl._oDetailNav.addStyleClass("sapMSplitContainerDetail");
			oRm.renderControl(oControl._oDetailNav);
			//add master to popover if it's not yet added
			if(oControl._oPopOver.getContent().length === 0){
				oControl._oPopOver.addAggregation("content", oControl._oMasterNav, true);
			}
		} else {
			oControl._oMasterNav.addStyleClass("sapMSplitContainerMaster");
			oRm.renderControl(oControl._oMasterNav);
			
			oControl._oDetailNav.addStyleClass("sapMSplitContainerDetail");
			oRm.renderControl(oControl._oDetailNav);
		}
	}else {
		oControl._oMasterNav.addStyleClass("sapMSplitContainerMobile");
		oRm.renderControl(oControl._oMasterNav);
	}
	
	 oRm.write("</div>");
};

}; // end of sap/m/SplitContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.StandardListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.StandardListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class StandardListItem renderer.
 * @static
 */
sap.m.StandardListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.StandardListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMSLI");
	if(oLI._showSeparators  == sap.m.ListSeparators.None && !oLI.getIconInset()){
		rm.addClass("sapMSLIShowSeparatorNone");
	}
	if(oLI.getIcon())
		rm.addClass("sapMSLIIcon");
	if(!oLI.getIconInset())
		rm.addClass("sapMSLIIconThumb");
	if((oLI.getDescription() || !oLI.getAdaptTitleSize()) && oLI.getIcon() &&  oLI.getIconInset())
		rm.addClass("sapMSLIDescIcon");
	if((oLI.getDescription() || !oLI.getAdaptTitleSize()) && !oLI.getIcon())
		rm.addClass("sapMSLIDescNoIcon");
	if(!oLI.getDescription() && oLI.getIcon())
		rm.addClass("sapMSLINoDescIcon");
	if(oLI.getType() == sap.m.ListType.Detail || oLI.getType() == sap.m.ListType.DetailAndActive)
		rm.addClass("sapMSLIDetail");

};

sap.m.StandardListItemRenderer.renderLIContent = function(rm, oLI) {

	// image
	if (oLI.getIcon()) {
		if (oLI.getIconInset()) {
			var oList = sap.ui.getCore().byId(oLI._listId);
			if(oList && oList.getMode() == sap.m.ListMode.None &! oList.getShowUnread()){
				rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapMSLIImgFirst", oLI.getIcon(), oLI.getIconDensityAware()));
			}
			else{
				rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapMSLIImg", oLI.getIcon(), oLI.getIconDensityAware()));
			}
		} else {
			rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapMSLIImgThumb", oLI.getIcon(), oLI.getIconDensityAware()));
		}
	}

	var isDescription = oLI.getTitle() && (oLI.getDescription() || !oLI.getAdaptTitleSize())  || (oLI._showSeparators  == sap.m.ListSeparators.None && !oLI.getIconInset());
	var isInfo = oLI.getInfo();

	if (isDescription) {
		rm.write("<div");
		rm.addClass("sapMSLIDiv");
		rm.writeClasses();
		rm.write(">");
	}

	rm.write("<div");
	if (!isDescription){
		rm.addClass("sapMSLIDiv");
	}
	rm.addClass("sapMSLITitleDiv");
	rm.writeClasses();
	rm.write(">");

	//noFlex: make an additional div for the contents table
	if(!isDescription && oLI._bNoFlex){
		rm.write('<div class="sapMLIBNoFlex">');
	}
	// List item text (also written when no title for keeping the space)
	rm.write("<div");
	if (isDescription) {
		rm.addClass("sapMSLITitle");
	} else {
		rm.addClass("sapMSLITitleOnly");
	}
	rm.writeClasses();
	rm.write(">");
	rm.writeEscaped(oLI.getTitle());
	rm.write("</div>");

	//info div top when @sapUiInfoTop: true;
	if(isInfo && (sap.ui.core.theming.Parameters.get("sapUiInfoTop") == "true" || !isDescription)){
		rm.write("<div");
		rm.writeAttribute("id", oLI.getId() + "-info");
		rm.addClass("sapMSLIInfo");
		rm.addClass("sapMSLIInfo" + oLI.getInfoState());
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(isInfo);
		rm.write("</div>");
	}

	//noFlex: make an additional div for the contents table
	if(!isDescription && oLI._bNoFlex){
		rm.write('</div>');
	}
	rm.write("</div>");

	rm.write("<div");
	rm.addClass("sapMSLIDescriptionDiv");
	rm.writeClasses();
	rm.write(">");

	// List item text
	if (isDescription) {
		rm.write("<div");
		rm.addClass("sapMSLIDescription");
		rm.writeClasses();
		rm.write(">");
		if (oLI.getDescription()) {
			rm.writeEscaped(oLI.getDescription());
		} else {
			rm.write("&nbsp;");
		}
		rm.write("</div>");
	}

	if(isInfo && sap.ui.core.theming.Parameters.get("sapUiInfoTop") == "false" && isDescription){
		rm.write("<div");
		rm.writeAttribute("id", oLI.getId() + "-info");
		rm.addClass("sapMSLIInfo");
		if(oLI._showSeparators == sap.m.ListSeparators.None && oLI.getInfoState() == sap.ui.core.ValueState.None)
			rm.addClass("sapMSLIInfo" + oLI.getInfoState() + "ShowSeparatorNone");
		else
			rm.addClass("sapMSLIInfo" + oLI.getInfoState());
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(isInfo);
		rm.write("</div>");
	}
	rm.write("</div>");

	if (isDescription) {
		rm.write("</div>");
	}

};

}; // end of sap/m/StandardListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.Support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.Support");

/**
 * @class
 * <code>sap.m.Support</code> shows the technical information for SAPUI5 Mobile Applications.
 * This technical information includes
 *  * SAPUI5 Version
 *  * User Agent
 *  * Configurations (Bootstrap and Computed)
 *  * URI parameters
 *  * All loaded module names
 *
 * In order to show the device information, the user must follow the following gestures.
 * 	1 - Hold the device in "landscape" mode
 * 	2 - Tap on any element (possibly element which does not have touch event e.g text or header (because of the stopPropagation))
 * 	3 - Hold finger minimum 2 seconds, up to 5 seconds
 * 	4 - Change device rotation to "portrait" mode
 *  5 - Release finger
 *
 * NOTE: This class is internal and all its functions must not be used by an application
 *
 * As <code>sap.m.Support</code> is a static class, a <code>jQuery.sap.require("sap.m.Support");</code>
 * statement must be implicitly executed before the class is used.
 *
 * Enable Support:
 * <pre>
 * //import library
 * jQuery.sap.require("sap.m.Support");
 *
 * //By default after require, support is enabled but implicitly we can call
 * sap.m.Support.on();
 * </pre>
 *
 * Disable Support:
 * <pre>
 * sap.m.Support.off();
 * </pre>
 *
 * @author SAP AG
 * @since 1.11.0
 *
 * @static
 * @protected
 * @namespace
 * @name sap.m.Support
 */
sap.m.Support = (function($, document) {

	var dialog,
		startTime,
		isEventRegistered,
		timeMinLimit = 2000,
		timeMaxLimit = 5000,
		orientations = {
		    start : "landscape",
		    end : "portrait"
		};

	// copied from core
	function line(buffer, right, border, label, content) {
		buffer.push("<tr><td class='sapUiSupportTechInfoBorder'><label class='sapUiSupportLabel'>", jQuery.sap.escapeHTML(label), "</label><br>");
		var ctnt = content;
		if ($.isFunction(content)) {
			ctnt = content(buffer) || "";
		}
		buffer.push($.sap.escapeHTML(ctnt));
		buffer.push("</td></tr>");
	}

	// copied from core
	function multiline(buffer, right, border, label, content) {
		line(buffer, right, border, label, function(buffer) {
			buffer.push("<table border='0' cellspacing='5' cellpadding='5' width='100%'>");
			$.each(content, function(i, v) {
				var val = "";
				if (v) {
					if (typeof(v) == "string" || typeof(v) == "boolean" || ($.isArray(v) && v.length == 1)) {
						val = v;
					} else if(($.isArray(v) || $.isPlainObject(v)) && window.JSON) {
						val = window.JSON.stringify(v);
					}
				}
				line(buffer, false, false, i, "" + val);
			});
			buffer.push("</table>");
		});
	}

	// copied from core
	function getTechnicalContent() {
		var html,
			oConfig = sap.ui.getCore().getConfiguration(),
			oData = {
				version: sap.ui.version,
				build: sap.ui.buildinfo.buildtime,
				change: sap.ui.buildinfo.lastchange,
				useragent: navigator.userAgent,
				docmode: document.documentMode ||  "",
				debug: $.sap.debug(),
				bootconfig: window["sap-ui-config"] || {},
				modules: $.sap.getAllDeclaredModules(),
				uriparams: $.sap.getUriParameters().mParams,
				appurl: window.location.href,
				config: {
					theme: oConfig.getTheme(),
					language: oConfig.getLanguage(),
					formatLocale: oConfig.getFormatLocale(),
					accessibility: "" + oConfig.getAccessibility(),
					animation: "" + oConfig.getAnimation(),
					rtl: "" + oConfig.getRTL(),
					debug: "" + oConfig.getDebug(),
					inspect: "" + oConfig.getInspect(),
					originInfo: "" + oConfig.getOriginInfo(),
					noDuplicateIds: "" + oConfig.getNoDuplicateIds()
				}
			};

		html = ["<table border='0' cellspacing='5' cellpadding='5' width='100%'>"];
		line(html, true, true, "SAPUI5 Version", function(buffer) {
			buffer.push(oData.version, " (built at ", oData.build, ", last change ", oData.change, ")");
		});
		line(html, true, true, "User Agent", function(buffer) {
			buffer.push(oData.useragent, (oData.docmode ? ", Document Mode '" + oData.docmode + "'" : ""));
		});
		line(html, true, true, "Debug Sources", function(buffer) {
			buffer.push((oData.debug ? "ON" : "OFF") );
		});
		line(html, true, true, "Application", oData.appurl);
		multiline(html, true, true, "Configuration (bootstrap)", oData.bootconfig);
		multiline(html, true, true, "Configuration (computed)", oData.config);
		multiline(html, true, true, "URI Parameters", oData.uriparams);
		line(html, true, true, "Loaded Modules (" + oData.modules.length + ")", function(buffer) {
			buffer.push("<ul>");
			$.each(oData.modules.sort(), function(i, v) {
				if (v.indexOf("sap.ui.core.support") < 0) {
					buffer.push("<li>", v, "</li>");
				}
			});
			buffer.push("</ul>");
		});
		html.push("</table>");

		return new sap.ui.core.HTML({
			content : html.join("").replace(/\{/g, "&#123;").replace(/\}/g, "&#125;")
		});
	}

	// get or create dialog instance and return
	function getDialog() {
		if (dialog) {
			return dialog;
		}

		$.sap.require("sap.m.Dialog");
		$.sap.require("sap.m.Button");
		$.sap.require("sap.ui.core.HTML");

		dialog = new sap.m.Dialog({
			title : "Technical Information",
			horizontalScrolling: true,
			verticalScrolling: true,
			stretch: jQuery.device.is.phone,
			leftButton : new sap.m.Button({
				text : "Close",
				type : "Reject",
				press : function() {
					dialog.close();
				}
			}),
			afterOpen : function() {
				sap.m.Support.off();
			},
			afterClose : function() {
				sap.m.Support.on();
			}
		}).addStyleClass("sapMSupport");
		
		return dialog;
	}

	function onTouchStart() {
		var orientation = $.event.special.orientationchange.orientation();
		if (orientation == orientations.start) {
			startTime = Date.now();
			document.addEventListener('touchend', onTouchEnd);
		}
	}

	function onTouchEnd() {
		var timeDiff = Date.now() - startTime,
			orientation = $.event.special.orientationchange.orientation();
		
		document.removeEventListener('touchend', onTouchEnd);
		if (orientation == orientations.end && timeDiff > timeMinLimit && timeDiff < timeMaxLimit) {
			show();
		}
	}

	function show() {
		var container = getDialog();
		container.removeAllAggregation("content");
		container.addAggregation("content", getTechnicalContent());
		dialog.open();
	}

	return ({
		/**
		 * Enables support.
		 *
		 * @return {object} sap.m.Support
		 * @protected
		 * @name sap.m.Support.on
		 * @function
		 */
		on : function() {
			if (!isEventRegistered && "ontouchstart" in document) {
				isEventRegistered = true;
				document.addEventListener("touchstart", onTouchStart);
			}
			return this;
		},

		/**
		 * Disables support.
		 *
		 * @return {object} sap.m.Support
		 * @protected
		 * @name sap.m.Support.off
		 * @function
		 */
		off : function() {
			if (isEventRegistered) {
				isEventRegistered = false;
				document.removeEventListener("touchstart", onTouchStart);
			}
			return this;
		},
		
		open : function() {
			show();
		}
	}).on();

}(jQuery, document));
}; // end of sap/m/Support.js
if ( !jQuery.sap.isDeclared('sap.m.SwitchRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.SwitchRenderer");

/**
 * @class Switch renderer.
 * @static
 */
sap.m.SwitchRenderer = {};

/**
 * CSS class to be applied to the HTML root element of the Switch control.
 *
 * @type {string}
 */
sap.m.SwitchRenderer.CSS_CLASS = "sapMSwt";

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the Render-Output-Buffer.
 * @param {sap.ui.core.Control} oSwitch An object representation of the control that should be rendered.
 */
sap.m.SwitchRenderer.render = function(oRm, oSwitch) {
	var bState = oSwitch.getState(),
		sState = bState ? oSwitch._sOn : oSwitch._sOff,
		sTooltip = oSwitch.getTooltip_AsString(),
		sType = oSwitch.getType(),
		bDefault = (sType === "Default"),
		bDisabled =  !oSwitch.getEnabled(),
		sName = oSwitch.getName(),
		CSS_CLASS = sap.m.SwitchRenderer.CSS_CLASS;

	// suppress rendering if not visible
	if (!oSwitch.getVisible()) {
		return;
	}

	oRm.write('<div');
	oRm.addClass(CSS_CLASS + "Cont");

	if (bDisabled) {
		oRm.addClass(CSS_CLASS + "ContDisabled");
	}

	oRm.writeClasses();
	oRm.writeStyles();
	oRm.writeControlData(oSwitch);

	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}

	oRm.write(">");

		oRm.write("<div");
		oRm.addClass(CSS_CLASS);
		oRm.addClass(bState ? CSS_CLASS + "On" : CSS_CLASS + "Off");
		oRm.addClass(CSS_CLASS + sType);

		if (bDisabled) {
			oRm.addClass(CSS_CLASS + "Disabled");
		}

		oRm.writeClasses();
		oRm.write(">");
			oRm.write('<div class="' + CSS_CLASS + 'Inner">');

				// text
				this._renderText(oRm, oSwitch, bDefault);

				// handle
				this._renderHandle(oRm, oSwitch, sState, bDisabled);

			oRm.write("</div>");

		oRm.write("</div>");

		if (sName) {

			// checkbox
			this._renderCheckbox(oRm, oSwitch, sName, sState, bState, bDisabled);
		}

	oRm.write("</div>");
};

sap.m.SwitchRenderer._renderText = function(oRm, oSwitch, bDefault) {
	var CSS_CLASS = sap.m.SwitchRenderer.CSS_CLASS;

	// on
	oRm.write('<div class="' + CSS_CLASS + 'Text ' + CSS_CLASS + 'TextOn">');
		oRm.write("<span>");
			if (bDefault) {
				oRm.writeEscaped(oSwitch._sOn);
			}
		oRm.write("</span>");
	oRm.write("</div>");

	// off
	oRm.write('<div class="' + CSS_CLASS + 'Text ' + CSS_CLASS + 'TextOff">');
		oRm.write("<span>");
			if (bDefault) {
				oRm.writeEscaped(oSwitch._sOff);
			}
		oRm.write("</span>");
	oRm.write("</div>");
};

sap.m.SwitchRenderer._renderHandle = function(oRm, oSwitch, sState, bDisabled) {
	var CSS_CLASS = sap.m.SwitchRenderer.CSS_CLASS;

	oRm.write("<div");
	oRm.addClass(CSS_CLASS + "Handle");

	if (sap.ui.Device.browser.webkit && Number(sap.ui.Device.browser.webkitVersion).toFixed(2) === "537.35") {
		oRm.addClass(CSS_CLASS + "WebKit537-35");
	}

	oRm.writeClasses();

	if (!bDisabled) {
		oRm.writeAttribute("tabindex", "0");
	}

	oRm.writeAttributeEscaped("data-sap-ui-swt", sState);
	oRm.write(">");
	oRm.write("</div>");
};

sap.m.SwitchRenderer._renderCheckbox = function(oRm, oSwitch, sName, sState, bState, bDisabled) {
	oRm.write('<input type="checkbox"');

	oRm.writeAttributeEscaped("name", sName);

	oRm.writeAttribute("id", oSwitch.getId() + "-input");

	if (bState) {
		oRm.writeAttribute("checked", "checked");
	}

	if (bDisabled) {
		oRm.writeAttribute("disabled", "disabled");
	}

	oRm.writeAttributeEscaped("value", sState);

	oRm.write(">");
};
}; // end of sap/m/SwitchRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.TablePersoProvider') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides TablePersoProvider
jQuery.sap.declare("sap.m.TablePersoProvider");
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained



/**
 * This is an abstract TablePersoProvider, describing the interface for a real
 * TablePersoProvider.
 *
 * @public
 *
 * @class Table Personalization Provider
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @author SAP
 * @version 1.20.7
 * @name sap.m.TablePersoProvider
 */
sap.ui.base.ManagedObject.extend("sap.m.TablePersoProvider", /** @lends sap.m.TablePersoProvider */

{
	constructor: function(sId, mSettings) {

		sap.ui.base.ManagedObject.apply(this, arguments);

	},

	metadata: {
		"abstract": true,
		library: "sap.m"
	}

});


/**
 * Initializes the TablePersoProvider instance after creation.
 *
 * @function
 * @name sap.m.TablePersoDialog.prototype.init
 * @protected
 */
sap.m.TablePersoProvider.prototype.init = function() {

	jQuery.sap.log.warning("This is the abstract base class for a TablePersoProvider. Do not create instances of this class, but use a concrete sub class instead.");
	jQuery.sap.log.debug("TablePersoProvider init");

};

/**
 * Retrieves the personalization bundle. 
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 */
sap.m.TablePersoProvider.prototype.getPersData = function() {

	jQuery.sap.log.debug("TablePersoProvider getPersData");

};

/**
 * Stores the personalization bundle, overwriting any
 * previous bundle completely
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 */
sap.m.TablePersoProvider.prototype.setPersData = function(oBundle) {

	jQuery.sap.log.debug("TablePersoProvider setPersData");

};

/**
 * Removes the personalization bundle
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 */
sap.m.TablePersoProvider.prototype.delPersData = function() {

	jQuery.sap.log.debug("TablePersoProvider delPersData");

};

/**
 * Callback function which can be used to determine the title of a given column
 * within the TablePersoDialog. As a default, the column header controls are
 * asked for their 'text' or 'title' property. This works in most cases, for example
 * if the header control is a sap.m.Label (has 'text' property) or a sap.m.ObjectListItem
 * (has 'title' property). 
 * 
 * If the header control used in a column has neither 'text' nor 'title' property, or if you would like to 
 * display a modified column name for a certain column, this callback function can be used.
 * 
 * If the callback delivers null for a column (which is the default implementation), the default
 * texts described above are displayed for that column in the TablePersoDialog. 
 * 
 * In case neither the callback delovers null and neither 'text' nor ' title' property are at hand,
 * the TablePersoDialog will display the column id and a warning message is logged.
 * 
 * @param oColumn column control instance whose caption shall be determined
 * @public
 */
sap.m.TablePersoProvider.prototype.getCaption = function(oColumn) {
	return null;
};

}; // end of sap/m/TablePersoProvider.js
if ( !jQuery.sap.isDeclared('sap.m.TableRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


jQuery.sap.declare("sap.m.TableRenderer");

/**
 * @class List renderer.
 * @static
 *
 * TableRenderer extends the ListBaseRenderer
 */
sap.m.TableRenderer = sap.ui.core.Renderer.extend(sap.m.ListBaseRenderer);


/**
 * Renders the Header and/or Footer of the Table like List Control
 *
 * @param {sap.ui.core.RenderManager} rm RenderManager
 * @param {sap.m.ListBase} oTable Table control
 * @param {String} type Whether "Head" or "Foot"
 */
sap.m.TableRenderer.renderColumns = function(rm, oTable, type) {
	var index = 0,
		hiddens = 0,
		hasPopin = false,
		hasFooter = false,
		mode = oTable.getMode(),
		clsPrefix = "sapMListTbl",
		idPrefix = oTable.getId("tbl"),
		cellTag = (type == "Head") ? "th" : "td",
		groupTag = "t" + type.toLowerCase(),
		aColumns = oTable.getColumns(),
		isHeaderHidden = (type == "Head") && aColumns.every(function(oColumn) {
			return	!oColumn.getHeader() ||
					!oColumn.getVisible() ||
					oColumn.isPopin() ||
					oColumn.isNeverVisible() ||
					oColumn.isHidden();
		}),
		hasOneHeader = (type == "Head") && aColumns.filter(function(oColumn) {
			return	oColumn.getVisible() &&
					!oColumn.isPopin() &&
					!oColumn.isNeverVisible() &&
					!oColumn.isHidden();
		}).length == 1,
		isDeleteOnRight = (sap.ui.core.theming.Parameters.get("sapMPlatformDependent") != "true" && mode == "Delete"),
		createBlankCell = function(cls, id) {
			rm.write("<");
			rm.write(cellTag);
			id && rm.writeAttribute("id", idPrefix + id);
			rm.addClass(clsPrefix + cls);
			rm.writeClasses();
			rm.write("></");
			rm.write(cellTag);
			rm.write(">");
			index++;
		};

	rm.write("<" + groupTag + ">");
	rm.write("<tr");
	rm.writeAttribute("tabindex", -1);
	rm.writeAttribute("id", oTable.addNavSection(idPrefix + type + "er" ));

	if (isHeaderHidden) {
		rm.addClass("sapMListTblHeaderNone");
	} else {
		rm.addClass("sapMListTblRow sapMListTbl" + type + "er");
	}

	rm.writeClasses();
	rm.write(">");

	if (mode != "None" && mode != "SingleSelect" && !isDeleteOnRight) {
		if (mode == "SingleSelectMaster") {
			createBlankCell("None");
			hiddens++;
		} else if (mode == "MultiSelect" && type == "Head" && !isHeaderHidden) {
			rm.write("<th class='" + clsPrefix + "SelCol'><div class='sapMLIBSelectM'>");
			rm.renderControl(oTable._getSelectAllCheckbox());
			rm.write("</div></th>");
			index++;
		} else {
			createBlankCell("SelCol");
		}
	}

	if (sap.ui.core.theming.Parameters.get("sapUiLIUnreadAsBubble") == "true" && oTable.getShowUnread()) {
		createBlankCell("UnreadCol");
	}

	aColumns.forEach(function(oColumn, order) {
		oColumn.setIndex(-1);
		oColumn.setInitialOrder(order);
	});

	oTable.getColumns(true).forEach(function(oColumn, order) {
		if (!oColumn.getVisible()) {
			return;
		}
		if (oColumn.isPopin()) {
			hasPopin = true;
			return;
		}
		if (oColumn.isNeverVisible()) {
			return;
		}
		if (oColumn.isHidden()) {
			hiddens++;
		}

		var control = oColumn["get" + type + "er"](),
			width = hasOneHeader ? "" : oColumn.getWidth(),
			cls = oColumn.getStyleClass(true);

		rm.write("<" + cellTag);
		cls && rm.addClass(cls);
		rm.addClass(clsPrefix + "Cell");
		rm.writeAttribute("id", idPrefix + type + index);
		rm.writeAttribute("data-sap-orig-width", oColumn.getWidth());
		width && rm.addStyle("width", width);
		rm.addStyle("text-align", oColumn.getCssAlign());
		rm.writeClasses();
		rm.writeStyles();
		rm.write(">");
		if (control) {
			oColumn.applyAlignTo(control);
			rm.renderControl(control);
		}
		if (type == "Head" && !hasFooter) {
			hasFooter = !!oColumn.getFooter();
		}
		rm.write("</" + cellTag + ">");
		oColumn.setIndex(index++);
	});

	createBlankCell("NavCol", type + "Nav");

	if (mode == "SingleSelect" || isDeleteOnRight) {
		createBlankCell("SelCol");
	}

	rm.write("</tr></" + groupTag + ">");

	if (type == "Head") {
		oTable._hasPopin = hasPopin;
		oTable._colCount = index - hiddens;
		oTable._hasFooter = hasFooter;
		oTable._headerHidden = isHeaderHidden;
	}
};


/**
 * add table container class name
 */
sap.m.TableRenderer.renderContainerAttributes = function(rm, oControl) {
	oControl._bRendering = true;
	rm.addClass("sapMListTblCnt");
};

/**
 * render table tag and add required classes
 */
sap.m.TableRenderer.renderListStartAttributes = function(rm, oControl) {
	rm.write("<table");
	rm.addClass("sapMListTbl");
};

/**
 * generate table columns
 */
sap.m.TableRenderer.renderListHeadAttributes = function(rm, oControl) {
	this.renderColumns(rm, oControl, "Head");
	rm.write("<tbody");
	rm.writeAttribute("id", oControl.addNavSection(oControl.getId("tblBody")));
	rm.write(">");
};

/**
 * render footer and finish rendering table
 */
sap.m.TableRenderer.renderListEndAttributes = function(rm, oControl) {
	rm.write("</tbody>");	// items should be rendered before foot
	oControl._hasFooter && this.renderColumns(rm, oControl, "Foot");
	oControl._bRendering = false;
	rm.write("</table>");
};

/**
 * render no data
 */
sap.m.TableRenderer.renderNoData = function(rm, oControl) {
	rm.write("<tr");
	rm.writeAttribute("id", oControl.getId("nodata"));
	rm.addClass("sapMLIB sapMListTblRow sapMLIBTypeInactive");
	if (!oControl._headerHidden || (!oControl.getHeaderText() && !oControl.getHeaderToolbar()) ) {
		rm.addClass("sapMLIBShowSeparator");
	}
	rm.writeClasses();
	rm.write("><td");
	rm.writeAttribute("id", oControl.getId("nodata-text"));
	rm.writeAttribute("colspan", oControl.getColCount());
	rm.addClass("sapMListTblCell sapMListTblCellNoData");
	rm.writeClasses();
	rm.write(">");
	rm.writeEscaped(oControl.getNoDataText());
	rm.write("</td></tr>");
};

}; // end of sap/m/TableRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.TableSelectDialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.TableSelectDialogRenderer");

/**
 * @class SelectDialog renderer.
 * @static
 */
sap.m.TableSelectDialogRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.TableSelectDialogRenderer.render = function (oRm, oControl) {
};
}; // end of sap/m/TableSelectDialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.TextAreaRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


jQuery.sap.declare("sap.m.TextAreaRenderer");

/**
 * @class TextArea renderer.
 * @static
 */
sap.m.TextAreaRenderer = {};


/**
 * @class Input renderer.
 * @static
 *
 * TextAreaRenderer extends the TextAreaRenderer
 */
sap.m.TextAreaRenderer = sap.ui.core.Renderer.extend(sap.m.InputBaseRenderer);

// Adds control specific class
sap.m.TextAreaRenderer.addOuterClasses = function(oRm, oControl) {
	oRm.addClass("sapMTextArea");
};

// Write the opening tag name of the TextArea
sap.m.TextAreaRenderer.openInputTag = function(oRm, oControl) {
	oRm.write("<textarea");
};

// Write the closing tag name of the TextArea
sap.m.TextAreaRenderer.closeInputTag = function(oRm, oControl) {
	oRm.write("</textarea>");
};

// TextArea does not have value property as HTML element, so overwrite base method
sap.m.TextAreaRenderer.writeInnerValue = function() {
};

// Write the value of the TextArea
sap.m.TextAreaRenderer.writeInnerContent = function(oRm, oControl) {
	oRm.writeEscaped(oControl.getValue());
};

// Add extra classes for TextArea element
sap.m.TextAreaRenderer.addInnerClasses = function(oRm, oControl) {
	oRm.addClass("sapMTextAreaInner");
};

// Add extra attributes to TextArea
sap.m.TextAreaRenderer.writeInnerAttributes = function(oRm, oControl) {
	if (oControl.getWrapping() && oControl.getWrapping() != "None") {
		oRm.writeAttribute("wrap", oControl.getWrapping());
	}
	oRm.writeAttribute("rows", oControl.getRows());
	oRm.writeAttribute("cols", oControl.getCols());
};

// Add extra styles to TextArea
sap.m.TextAreaRenderer.addInnerStyles = function(oRm, oControl) {
	oControl.getHeight() && oRm.addStyle("height", oControl.getHeight());
};
}; // end of sap/m/TextAreaRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.TextRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.m.Text
jQuery.sap.declare("sap.m.TextRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Text renderer
 * @author SAP AG
 * @static
 */
sap.m.TextRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.m.Text} oText An object representation of the control that should be rendered.
 */
sap.m.TextRenderer.render = function(oRm, oText) {
	// return immediately if control is invisible
	if (!oText.getVisible()) {
		return;
	}

	// get control values
	var sWidth = oText.getWidth(),
		sText = oText.getText(true),
		sTextDir = oText.getTextDirection(),
		sTooltip = oText.getTooltip_AsString(),
		nMaxLines = oText.getMaxLines(),
		bWrapping = oText.getWrapping(),
		sTextAlign = oText.getTextAlign();

	// start writing html
	oRm.write("<span");
	oRm.writeControlData(oText);
	oRm.addClass("sapMText");

	// set classes for wrapping
	if (!bWrapping || nMaxLines == 1) {
		oRm.addClass("sapMTextNoWrap");
	} else if (bWrapping) {
		// no space text must break
		if (!/\s/.test(sText)) {
			oRm.addClass("sapMTextBreakWord");
		}
	}

	// write style and attributes
	sWidth ? oRm.addStyle("width", sWidth) : oRm.addClass("sapMTextMaxWidth");
	sTextDir && oRm.addStyle("direction", sTextDir.toLowerCase());
	sTooltip && oRm.writeAttributeEscaped("title", sTooltip);
	if (sTextAlign) {
		sTextAlign = sap.ui.core.Renderer.getTextAlign(sTextAlign, sTextDir);
		if (sTextAlign) {
			oRm.addStyle("text-align", sTextAlign);
		}
	}

	// finish writing html
	oRm.writeClasses();
	oRm.writeStyles();
	oRm.write(">");

	// handle max lines
	if (oText.hasMaxLines()) {
		this.renderMaxLines(oRm, oText);
	} else {
		this.renderText(oRm, oText);
	}

	// finalize
	oRm.write("</span>");
};

/**
 * Renders the max lines inner wrapper
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.m.Text} oText An object representation of the control that should be rendered.
 */
sap.m.TextRenderer.renderMaxLines = function(oRm, oText) {
	oRm.write("<div");
	oRm.writeAttribute("id", oText.getId() + "-inner");
	oRm.addClass("sapMTextMaxLine");

	// check native line clamp support
	if (oText.canUseNativeLineClamp()) {
		oRm.addClass("sapMTextLineClamp");
		oRm.addStyle("-webkit-line-clamp", oText.getMaxLines());
	}

	oRm.writeClasses();
	oRm.writeStyles();
	oRm.write(">");
	this.renderText(oRm, oText);
	oRm.write("</div>");
};

/**
 * Renders the normalized text property.
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.m.Text} oText An object representation of the control that should be rendered.
 */
sap.m.TextRenderer.renderText = function(oRm, oText) {
	var sText = oText.getText(true);
	oRm.writeEscaped(sText);
};
}; // end of sap/m/TextRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.TileContainerRenderer') ) {

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.TileContainerRenderer");

/**
 * @class Bar renderer. 
 * @static
 */
sap.m.TileContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.TileContainerRenderer.render = function(rm, oControl) { 
	var id =  oControl.getId();

	rm.write("<div tabindex=\"-1\""); 
	rm.writeControlData(oControl);
	rm.addStyle("height",oControl.getHeight());
	rm.addStyle("width",oControl.getWidth());
	rm.writeStyles();
	rm.addClass("sapMTC");
	rm.writeClasses();
	rm.write(" >");
	rm.write("<div id=\""+ id+"-scrl\" class=\"sapMTCScrl\" style=\"height:0px;");
	if(!oControl.bRtl){ 
		rm.write(" overflow: hidden;");
	}
	rm.write("\">");
	rm.write("<div id=\""+ id+"-blind\" class=\"sapMTCBlind\"></div>");
	rm.write("<div id=\""+ id+"-cnt\" class=\"sapMTCCnt sapMTCAnim\" style=\"height:0px; width:0px;\">");
	var aTiles = oControl.getTiles();
	for (var i=0;i<aTiles.length;i++) {
		aTiles[i]._setVisible(false);
		rm.renderControl(aTiles[i]);
	}
	rm.write("</div>");
	rm.write("</div>");
	rm.write("<div id=\""+ id+"-pager\" class=\"sapMTCPager\">"); 
	rm.write("</div>");
	rm.write("<div id=\""+ id+"-leftedge\" class=\"sapMTCEdgeLeft\"></div>"); 
	rm.write("<div id=\""+ id+"-rightedge\" class=\"sapMTCEdgeRight\"></div>"); 
	rm.write("<div id=\""+ id+"-leftscroller\" class=\"sapMTCScroller sapMTCLeft\"><div class=\"sapMTCInner\"></div></div>"); 
	rm.write("<div id=\""+ id+"-rightscroller\" class=\"sapMTCScroller sapMTCRight\"><div class=\"sapMTCInner\"></div></div>"); 
	rm.write("</div>");
};
}; // end of sap/m/TileContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.TileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.m.Text
jQuery.sap.declare("sap.m.TileRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Text renderer
 * @author SAP AG
 * @static
 */
sap.m.TileRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.
 */
sap.m.TileRenderer.render = function(rm, oControl) {
	rm.write("<div tabindex=\"0\"");
	rm.writeControlData(oControl);
	rm.addClass("sapMTile");
	rm.addClass("sapMPointer");
	rm.writeClasses();
	if(oControl._invisible){
		rm.addStyle("visibility", "hidden");
		rm.writeStyles();
	}
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	if (oControl.getRemovable()) {
		rm.write("<div id=\"" + oControl.getId() + "-remove\" class=\"sapMTCRemove\"></div>");
	} else {
		rm.write("<div id=\"" + oControl.getId() + "-remove\" class=\"sapMTCNoRemove\"></div>");
	}
	rm.write("<div class=\"sapMTileContent\">");
	this._renderContent(rm,oControl);
	rm.write("</div></div>");
};


sap.m.TileRenderer._renderContent = function(rm, oControl) {
};


}; // end of sap/m/TileRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ToolbarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ToolbarRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Toolbar renderer.
 * @static
 */
sap.m.ToolbarRenderer = {};

sap.m.ToolbarRenderer.render = function(rm, oToolbar) {
	if (oToolbar._isInvisible()) {
		return this.renderInvisible(rm, oToolbar);
	}

	rm.write("<div");
	rm.writeControlData(oToolbar);
	rm.addClass("sapMTB");

	if (!sap.m.Toolbar.hasFlexBoxSupport) {
		rm.addClass("sapMTBNoFlex");
	} else if (!sap.m.Toolbar.hasNewFlexBoxSupport) {
		rm.addClass("sapMTBOldFlex");
	} else {
		rm.addClass("sapMTBNewFlex");
	}

	if (oToolbar.getActive()) {
		rm.addClass("sapMTBActive");
		rm.writeAttribute("tabindex", "0");
	} else {
		rm.addClass("sapMTBInactive");
	}

	rm.addClass("sapMTB-" + oToolbar.getActiveDesign() + "-CTX");

	var sWidth = oToolbar.getWidth();
	var sHeight = oToolbar.getHeight();
	sWidth && rm.addStyle("width", sWidth);
	sHeight && rm.addStyle("height", sHeight);

	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");

	oToolbar.getContent().forEach(function(oContent) {
		rm.renderControl(oContent);
	});

	rm.write("</div>");
};


// TODO: Add this functionality to more central place that every control can use
sap.m.ToolbarRenderer.renderInvisible = function(rm, oToolbar) {
	rm.write("<div");
	rm.writeControlData(oToolbar);
	rm.addStyle("display", "none");
	rm.writeStyles();
	rm.write("></div>");
};
}; // end of sap/m/ToolbarRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ToolbarSpacerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ToolbarSpacerRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class ToolbarSpacer renderer.
 * @static
 */
sap.m.ToolbarSpacerRenderer = {};

sap.m.ToolbarSpacerRenderer.render = function(rm, oControl) {
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapMTBSpacer");

	var sWidth = oControl.getWidth();
	if (sWidth) {
		rm.addStyle("width", oControl.getWidth());
	} else {
		rm.addClass(sap.m.ToolbarSpacer.flexClass);
	}

	rm.writeStyles();
	rm.writeClasses();
	rm.write("></div>");
};
}; // end of sap/m/ToolbarSpacerRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ios7') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
/*global window, document *///declare unusual global vars for JSLint/SAPUI5 validation

jQuery.sap.declare("sap.m.ios7");

(function () {
	sap.ui.base.EventProvider.extend("sap.m._Ios7", {
		/**
		 * IOS 7 behaves strange if the keyboard is open and you do an orientation change:
		 * There will be a black space below the page and it will scroll away from the top in this case.
		 * Thats why we scroll to the top on orientation change.
		 * We also need to catch blur since if you do orientation change with keyboard open, close the Keyboard, Open it on another input, 
		 * the black box will appear again. Since closing the keyboard will fire blur, we attach on this one.
		 * @internal
		 */
		constructor : function() {
			var bIsIOS7Safari = sap.ui.Device.os.ios && sap.ui.Device.os.version >= 7 && sap.ui.Device.os.version < 8 && sap.ui.Device.browser.name === "sf";

			//call the base to properly init the event registry
			sap.ui.base.EventProvider.apply(this);

			if(!bIsIOS7Safari) {
				return;
			}

			this._bIntervallAttached = false;
			this._bInputIsOpen = false;
			this._bNavigationBarEventFired = false;

			var bIsLandscape = window.orientation === 90 || window.orientation === -90;
			if(bIsLandscape) {
				this._attachNavigationBarPolling();
			}

			sap.ui.Device.orientation.attachHandler(this._onOrientationChange, this);

			this._onFocusin =  jQuery.proxy(this._onFocusin, this);
			document.addEventListener("focusin", this._onFocusin , true);

			this._onFocusout = jQuery.proxy(this._onFocusout, this);
			//attach this event in the capturing phase, so noone can stop propagation
			document.addEventListener("focusout", this._onFocusout, true);
		}
	});

	/*****************************
	internals
	*****************************/
	/**
	 * gets the height of the navigation bar in px. Only returns a number < 0 in landscape mode - will return 0 for portrait mode or if no navigation bar is shown.
	 * @internal
	 * @returns {int} the height of the navigation bar
	 */
	sap.m._Ios7.prototype.getNavigationBarHeight = function () {
		if(!this._bNavigationBarEventFired) {
			return 0;
		}
		return this._iNavigationBarHeight;
	};

	/*****************************
	privates
	*****************************/

	sap.m._Ios7.prototype._attachNavigationBarPolling = function () {
		if (!sap.ui.Device.system.phone || this._bIntervallAttached) {
			return;
		}

		sap.ui.getCore().attachIntervalTimer(this._detectNavigationBar, this);
		this._bIntervallAttached = true;
	};

	sap.m._Ios7.prototype._detachNavigationBarPolling = function () {
		if (!sap.ui.Device.system.phone || !this._bIntervallAttached) {
			return;
		}

		sap.ui.getCore().detachIntervalTimer(this._detectNavigationBar, this);
		this._bIntervallAttached = false;
	};

	//We cannot turn this off in landscape mode, since the inner and outer height might be different when the soft-keyboard pops up.
	//So we need to do a lot of unnecessary scrolls, since keyboard and navigation bar cannot be distinguished.
	sap.m._Ios7.prototype._detectNavigationBar = function () {
		var iHeightDifference = window.outerHeight - window.innerHeight;

		if (iHeightDifference === 0 || this._bInputIsOpen || this._bNavigationBarEventFired) {
			this._iPreviousHeight = null;
			return;
		}

		if(this._iPreviousHeight === window.innerHeight) {
			window.scrollTo(0,0);
			var iNewWindowHeightDifference = window.outerHeight - window.innerHeight;
			if(iHeightDifference !== iNewWindowHeightDifference) {
				return;
			}

			this._iNavigationBarHeight = iHeightDifference;
			this._bNavigationBarEventFired = true;
			this.fireEvent("navigationBarShownInLandscape", { barHeight : iHeightDifference });
			this._detachNavigationBarPolling();
			this._iPreviousHeight = null;
		} else {
			this._iPreviousHeight = window.innerHeight;
		}
	};

	sap.m._Ios7.prototype.destroy = function() {
		sap.ui.base.EventProvider.prototype.destroy.apply(this, arguments);

		document.removeEventListener("focusin", this._onFocusin , true);
		document.removeEventListener("focusout", this._onFocusout, true);
	};
	/*****************************
	window / document event handling
	*****************************/

	/**
	 * @param oEvent the native focusin event
	 * @private
	 */
	sap.m._Ios7.prototype._onFocusin = function (oEvent) {
		var sTagName = oEvent.target.tagName;

		if (!sap.m._Ios7._rTagRegex.test(sTagName)) {
			return;
		}

		//we have to disable polling while the keyboard is open since scrollTop(0,0) will scroll the input out of the users view
		this._inputTarget = oEvent.target;
		this._detachNavigationBarPolling();
		this._bInputIsOpen = true;
		this.fireEvent("inputOpened");
	};

	sap.m._Ios7._rTagRegex = /INPUT|TEXTAREA|SELECT/;

	/**
	 * @param oEvent the native focusout event
	 * @private
	 */
	sap.m._Ios7.prototype._onFocusout = function (oEvent) {
		var sTagName = oEvent.srcElement.tagName;

		//only handle the focusout for elements that can bring up a soft-keyboard
		//there are a lot of input types that might not bring up the soft-keyboard - checking for them might be a bit too much
		if (sap.m._Ios7._rTagRegex.test(sTagName)) {
			window.scrollTo(0,0);

			//Attach the polling again, since it was disabled in the focus in. But only do it in landscape.
			if (window.orientation === 90 || window.orientation === -90) {
				this._attachNavigationBarPolling();
			}

			this._bInputIsOpen = false;
			this.fireEvent("inputClosed");
		}
	};

	/**
	 * @private handles the orientation change
	 */
	sap.m._Ios7.prototype._onOrientationChange = function (oEvent) {
		var bIsLandscape = oEvent.landscape;

		window.scrollTo(0,0);

		this._bNavigationBarEventFired = false;

		//The page gets messed up if the softkeyboard is opened
		if(this._bInputIsOpen && this._inputTarget && this._inputTarget.blur) {
			this._inputTarget.blur();
		} else if (bIsLandscape) {
			this._attachNavigationBarPolling();
			//in landscape mode the navigation bar is visible anyways - disable the polling
		} else if (!bIsLandscape) {
			this._detachNavigationBarPolling();
		}
	};

	//expose the singleton
	sap.m.ios7 = new sap.m._Ios7();
}());

}; // end of sap/m/ios7.js
if ( !jQuery.sap.isDeclared('sap.m.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.m (1.20.7)
 */
jQuery.sap.declare("sap.m.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library with controls specialized for mobile devices.
 *
 * @namespace
 * @name sap.m
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.m",
  dependencies : ["sap.ui.core"],
  types: [
    "sap.m.BackgroundDesign",
    "sap.m.ButtonType",
    "sap.m.DateTimeInputType",
    "sap.m.DialogType",
    "sap.m.FacetFilterType",
    "sap.m.FlexAlignItems",
    "sap.m.FlexAlignSelf",
    "sap.m.FlexDirection",
    "sap.m.FlexJustifyContent",
    "sap.m.FlexRendertype",
    "sap.m.HeaderLevel",
    "sap.m.IconTabFilterDesign",
    "sap.m.InputType",
    "sap.m.LabelDesign",
    "sap.m.ListHeaderDesign",
    "sap.m.ListMode",
    "sap.m.ListSeparators",
    "sap.m.ListType",
    "sap.m.PageBackgroundDesign",
    "sap.m.PlacementType",
    "sap.m.PopinDisplay",
    "sap.m.RatingIndicatorVisualMode",
    "sap.m.ScreenSize",
    "sap.m.SelectType",
    "sap.m.SplitAppMode",
    "sap.m.StandardTileType",
    "sap.m.SwipeDirection",
    "sap.m.SwitchType",
    "sap.m.ToolbarDesign"
  ],
  interfaces: [
    "sap.m.IconTab"
  ],
  controls: [
    "sap.m.ActionListItem",
    "sap.m.ActionSelect",
    "sap.m.ActionSheet",
    "sap.m.App",
    "sap.m.Bar",
    "sap.m.BusyDialog",
    "sap.m.BusyIndicator",
    "sap.m.Button",
    "sap.m.Carousel",
    "sap.m.CheckBox",
    "sap.m.ColumnListItem",
    "sap.m.CustomListItem",
    "sap.m.CustomTile",
    "sap.m.DateTimeInput",
    "sap.m.Dialog",
    "sap.m.DisplayListItem",
    "sap.m.FacetFilter",
    "sap.m.FacetFilterItem",
    "sap.m.FacetFilterList",
    "sap.m.FeedListItem",
    "sap.m.FlexBox",
    "sap.m.GroupHeaderListItem",
    "sap.m.GrowingList",
    "sap.m.HBox",
    "sap.m.IconTabBar",
    "sap.m.Image",
    "sap.m.Input",
    "sap.m.InputBase",
    "sap.m.InputListItem",
    "sap.m.Label",
    "sap.m.Link",
    "sap.m.List",
    "sap.m.ListBase",
    "sap.m.ListItemBase",
    "sap.m.NavContainer",
    "sap.m.ObjectAttribute",
    "sap.m.ObjectHeader",
    "sap.m.ObjectIdentifier",
    "sap.m.ObjectListItem",
    "sap.m.ObjectNumber",
    "sap.m.ObjectStatus",
    "sap.m.Page",
    "sap.m.Panel",
    "sap.m.Popover",
    "sap.m.ProgressIndicator",
    "sap.m.PullToRefresh",
    "sap.m.RadioButton",
    "sap.m.RatingIndicator",
    "sap.m.ResponsivePopover",
    "sap.m.ScrollContainer",
    "sap.m.SearchField",
    "sap.m.SegmentedButton",
    "sap.m.Select",
    "sap.m.SelectDialog",
    "sap.m.Shell",
    "sap.m.Slider",
    "sap.m.SplitApp",
    "sap.m.SplitContainer",
    "sap.m.StandardListItem",
    "sap.m.StandardTile",
    "sap.m.Switch",
    "sap.m.Table",
    "sap.m.TableSelectDialog",
    "sap.m.Text",
    "sap.m.TextArea",
    "sap.m.Tile",
    "sap.m.TileContainer",
    "sap.m.Toolbar",
    "sap.m.ToolbarSpacer",
    "sap.m.VBox",
    "sap.m.ViewSettingsDialog"
  ],
  elements: [
    "sap.m.Column",
    "sap.m.FlexItemData",
    "sap.m.IconTabFilter",
    "sap.m.IconTabSeparator",
    "sap.m.ToolbarLayoutData",
    "sap.m.ViewSettingsCustomItem",
    "sap.m.ViewSettingsFilterItem",
    "sap.m.ViewSettingsItem"
  ],
  version: "1.20.7"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.BackgroundDesign.
jQuery.sap.declare("sap.m.BackgroundDesign");


/**
 * @class Available Background Design.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.BackgroundDesign = {
  
    /**
     * A solid background color dependent on the theme. 
     * @public
     */
    Solid : "Solid",

    /**
     * Transparent background. 
     * @public
     */
    Transparent : "Transparent",

    /**
     * A translucent background depending on the opacity value of the theme. 
     * @public
     */
    Translucent : "Translucent"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ButtonType.
jQuery.sap.declare("sap.m.ButtonType");


/**
 * @class Different types for a button (predefined types)
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.ButtonType = {
  
    /**
     * default type (no special styling) 
     * @public
     */
    Default : "Default",

    /**
     * back type (back navigation button for header) 
     * @public
     */
    Back : "Back",

    /**
     * accept type (blue button) 
     * @public
     */
    Accept : "Accept",

    /**
     * reject style (red button) 
     * @public
     */
    Reject : "Reject",

    /**
     * transparent type 
     * @public
     */
    Transparent : "Transparent",

    /**
     * up type (up navigation button for header) 
     * @public
     */
    Up : "Up",

    /**
     * Unstyled type (no styling) 
     * @public
     */
    Unstyled : "Unstyled",

    /**
     * emphasized type 
     * @public
     */
    Emphasized : "Emphasized"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.DateTimeInputType.
jQuery.sap.declare("sap.m.DateTimeInputType");


/**
 * @class A subset of DateTimeInput types that fit to a simple API returning one string.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.DateTimeInputType = {
  
    /**
     * An input control for specifying a date value. The user can select a month, day of the month, and year. 
     * @public
     */
    Date : "Date",

    /**
     * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day. 
     * @public
     */
    DateTime : "DateTime",

    /**
     * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM. 
     * @public
     */
    Time : "Time"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.DialogType.
jQuery.sap.declare("sap.m.DialogType");


/**
 * @class Enum for the type of sap.m.Dialog control.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.DialogType = {
  
    /**
     * This is the default value for Dialog type. Stardard dialog in iOS has a header on the top and the left, right buttons are put inside the header. In android, the left, right buttons are put to the bottom of the Dialog. 
     * @public
     */
    Standard : "Standard",

    /**
     * Dialog with type Message looks the same as the Stardard Dialog in Android. And it puts the left, right buttons to the bottom of the Dialog in iOS. 
     * @public
     */
    Message : "Message"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FacetFilterType.
jQuery.sap.declare("sap.m.FacetFilterType");


/**
 * @class Used by the FacetFilter control to adapt its design according to type.
 * 
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.FacetFilterType = {
  
    /**
     * Forces FacetFilter to display facet lists as a row of buttons, one button per facet. The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays. 
     * @public
     */
    Simple : "Simple",

    /**
     * Forces FacetFilter to display in light mode. 
     * @public
     */
    Light : "Light"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexAlignItems.
jQuery.sap.declare("sap.m.FlexAlignItems");


/**
 * @class Available options for the layout of all elements along the cross axis of the flexbox layout.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.FlexAlignItems = {
  
    /**
     * The cross-start margin edges of the box items are placed flush with the cross-start edge of the line. 
     * @public
     */
    Start : "Start",

    /**
     * The cross-start margin edges of the box items are placed flush with the cross-end edge of the line. 
     * @public
     */
    End : "End",

    /**
     * The box items' margin boxes are centered in the cross axis within the line. 
     * @public
     */
    Center : "Center",

    /**
     * If the box items' inline axes are the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line. 
     * @public
     */
    Baseline : "Baseline",

    /**
     * Make the cross size of the items' margin boxes as close to the same size as the line as possible. 
     * @public
     */
    Stretch : "Stretch",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexAlignSelf.
jQuery.sap.declare("sap.m.FlexAlignSelf");


/**
 * @class Available options for the layout of individual elements along the cross axis of the flexbox layout overriding the default alignment.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.FlexAlignSelf = {
  
    /**
     * Takes up the value of alignItems from the parent FlexBox 
     * @public
     */
    Auto : "Auto",

    /**
     * The cross-start margin edges of the box item is placed flush with the cross-start edge of the line. 
     * @public
     */
    Start : "Start",

    /**
     * The cross-start margin edges of the box item is placed flush with the cross-end edge of the line. 
     * @public
     */
    End : "End",

    /**
     * The box item's margin box is centered in the cross axis within the line. 
     * @public
     */
    Center : "Center",

    /**
     * If the box item's inline axis is the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line. 
     * @public
     */
    Baseline : "Baseline",

    /**
     * Make the cross size of the item's margin box as close to the same size as the line as possible. 
     * @public
     */
    Stretch : "Stretch",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexDirection.
jQuery.sap.declare("sap.m.FlexDirection");


/**
 * @class Available directions for flex layouts.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.FlexDirection = {
  
    /**
     * Elements are layed out along the direction of the inline axis (text direction). 
     * @public
     */
    Row : "Row",

    /**
     * Elements are layed out along the direction of the block axis (usually top to bottom). 
     * @public
     */
    Column : "Column",

    /**
     * Elements are layed out along the reverse direction of the inline axis (against the text direction). 
     * @public
     */
    RowReverse : "RowReverse",

    /**
     * Elements are layed out along the reverse direction of the block axis (usually bottom to top). 
     * @public
     */
    ColumnReverse : "ColumnReverse",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexJustifyContent.
jQuery.sap.declare("sap.m.FlexJustifyContent");


/**
 * @class Available options for the layout of elements along the main axis of the flexbox layout.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.FlexJustifyContent = {
  
    /**
     * Box items are packed toward the start of the line. 
     * @public
     */
    Start : "Start",

    /**
     * Box items are packed toward the end of the line. 
     * @public
     */
    End : "End",

    /**
     * Box items are packed toward the center of the line. 
     * @public
     */
    Center : "Center",

    /**
     * Box items are evenly distributed in the line. 
     * @public
     */
    SpaceBetween : "SpaceBetween",

    /**
     * Box items are evenly distributed in the line, with half-size spaces on either end. 
     * @public
     */
    SpaceAround : "SpaceAround",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexRendertype.
jQuery.sap.declare("sap.m.FlexRendertype");


/**
 * @class Determines the type of HTML elements used for rendering controls.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.FlexRendertype = {
  
    /**
     * DIV elements are used for rendering 
     * @public
     */
    Div : "Div",

    /**
     * Unordered lists are used for rendering. 
     * @public
     */
    List : "List"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.HeaderLevel.
jQuery.sap.declare("sap.m.HeaderLevel");


/**
 * @class Different levels for headers
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.HeaderLevel = {
  
    /**
     * Header level 1 
     * @public
     */
    H1 : "H1",

    /**
     * Header level 2 
     * @public
     */
    H2 : "H2",

    /**
     * Header level 3 
     * @public
     */
    H3 : "H3",

    /**
     * Header level 4 
     * @public
     */
    H4 : "H4",

    /**
     * Header level 5 
     * @public
     */
    H5 : "H5",

    /**
     * Header level 6 
     * @public
     */
    H6 : "H6"

  };
/**
 * 
 *   Marker interface for controls which are suitable as items for the IconTabBar.
 *   These controls must implement a method isSelectable().
 *   
 *
 * @name sap.m.IconTab
 * @interface
 * @public
 */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.IconTabFilterDesign.
jQuery.sap.declare("sap.m.IconTabFilterDesign");


/**
 * @class Available Filter Item Design.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.IconTabFilterDesign = {
  
    /**
     * A horizontally layouted design providing more space for texts. 
     * @public
     */
    Horizontal : "Horizontal",

    /**
     * A vertically layouted design using minimum horizontal space. 
     * @public
     */
    Vertical : "Vertical"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.InputType.
jQuery.sap.declare("sap.m.InputType");


/**
 * @class A subset of input types that fit to a simple API returning one string.
 * Not available on purpose: button, checkbox, hidden, image, password, radio, range, reset, search, submit.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.InputType = {
  
    /**
     * default (text) 
     * @public
     */
    Text : "Text",

    /**
     * An input control for specifying a date value. The user can select a month, day of the month, and year. 
     * @public
     * @deprecated Since version 1.9.1. 
     * Please use sap.m.DateTimeInput control with type "Date" to create date input.
     */
    Date : "Date",

    /**
     * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day. 
     * @public
     * @deprecated Since version 1.9.1. 
     * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
     */
    Datetime : "Datetime",

    /**
     * An input control for specifying a date and time value where the format depends on the locale. 
     * @public
     * @deprecated Since version 1.9.1. 
     * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
     */
    DatetimeLocale : "DatetimeLocale",

    /**
     * A text field for specifying an email address. Brings up a keyboard optimized for email address entry. 
     * @public
     */
    Email : "Email",

    /**
     * An input control for selecting a month. 
     * @public
     * @deprecated Since version 1.9.1. 
     * There is no cross-platform support. Please do not use this Input type.
     */
    Month : "Month",

    /**
     * A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type. 
     * @public
     */
    Number : "Number",

    /**
     * A text field for specifying a phone number. Brings up a phone pad keyboard. 
     * @public
     */
    Tel : "Tel",

    /**
     * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM. 
     * @public
     * @deprecated Since version 1.9.1. 
     * Please use dedicated sap.m.DateTimeInput control with type "Time" to create time input.
     */
    Time : "Time",

    /**
     * A text field for specifying a URL. Brings up a keyboard optimized for URL entry. 
     * @public
     */
    Url : "Url",

    /**
     * An input control for selecting a week. 
     * @public
     * @deprecated Since version 1.9.1. 
     * There is no cross-platform support. Please do not use this Input type.
     */
    Week : "Week",

    /**
     * Password input where the user entry cannot be seen. 
     * @public
     */
    Password : "Password"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.LabelDesign.
jQuery.sap.declare("sap.m.LabelDesign");


/**
 * @class Available label display modes.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.LabelDesign = {
  
    /**
     * Displays the label in bold. 
     * @public
     */
    Bold : "Bold",

    /**
     * Displays the label in normal mode. 
     * @public
     */
    Standard : "Standard"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListHeaderDesign.
jQuery.sap.declare("sap.m.ListHeaderDesign");


/**
 * @class Defines the differnet header styles.
 *
 * @version 1.20.7
 * @static
 * @public
 * @deprecated Since version 1.16. 
 * Has no functionality since 1.16.
 */
sap.m.ListHeaderDesign = {
  
    /**
     * Standard header style 
     * @public
     */
    Standard : "Standard",

    /**
     * Plain header style 
     * @public
     */
    Plain : "Plain"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListMode.
jQuery.sap.declare("sap.m.ListMode");


/**
 * @class Different modes for the list selection (predefined modes)
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.ListMode = {
  
    /**
     * default mode (no selection) 
     * @public
     */
    None : "None",

    /**
     * right positioned single selection mode (only one list item can be selected) 
     * @public
     */
    SingleSelect : "SingleSelect",

    /**
     * multi selection mode (whole list item including checkbox will be selected) 
     * @public
     */
    MultiSelect : "MultiSelect",

    /**
     * delete mode (only one list item can be deleted) 
     * @public
     */
    Delete : "Delete",

    /**
     * Single selection master mode (only one list item can be selected), selected item is highlighted but no radiobutton is visible. 
     * @public
     */
    SingleSelectMaster : "SingleSelectMaster",

    /**
     * left positioned single selection mode (only one list item can be selected) 
     * @public
     */
    SingleSelectLeft : "SingleSelectLeft"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListSeparators.
jQuery.sap.declare("sap.m.ListSeparators");


/**
 * @class Defines which separator style will be taken.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.ListSeparators = {
  
    /**
     * Separators around all items. 
     * @public
     */
    All : "All",

    /**
     * Separators only between the items. 
     * @public
     */
    Inner : "Inner",

    /**
     * No Separators are used. 
     * @public
     */
    None : "None"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListType.
jQuery.sap.declare("sap.m.ListType");


/**
 * @class List types
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.ListType = {
  
    /**
     * Inactive 
     * @public
     */
    Inactive : "Inactive",

    /**
     * Detail 
     * @public
     */
    Detail : "Detail",

    /**
     * Navigation 
     * @public
     */
    Navigation : "Navigation",

    /**
     * Active 
     * @public
     */
    Active : "Active",

    /**
     * DetailAndActive 
     * @public
     */
    DetailAndActive : "DetailAndActive"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.PageBackgroundDesign.
jQuery.sap.declare("sap.m.PageBackgroundDesign");


/**
 * @class Available Page Background Design.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.PageBackgroundDesign = {
  
    /**
     * Standard Page background color. 
     * @public
     */
    Standard : "Standard",

    /**
     * Page background color when a List is set as the Page content. 
     * @public
     */
    List : "List",

    /**
     * A solid background color dependent on the theme. 
     * @public
     */
    Solid : "Solid",

    /**
     * Transparent background for the page. 
     * @public
     */
    Transparent : "Transparent"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.PlacementType.
jQuery.sap.declare("sap.m.PlacementType");


/**
 * @class Types for the placement of popover control.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.PlacementType = {
  
    /**
     * Popover will be placed at the left side of the reference control. 
     * @public
     */
    Left : "Left",

    /**
     * Popover will be placed at the right side of the reference control. 
     * @public
     */
    Right : "Right",

    /**
     * Popover will be placed at the top of the reference control. 
     * @public
     */
    Top : "Top",

    /**
     * Popover will be placed at the bottom of the reference control. 
     * @public
     */
    Bottom : "Bottom",

    /**
     * Popover will be placed at the top or bottom of the reference control. 
     * @public
     */
    Vertical : "Vertical",

    /**
     * Popover will be placed at the right or left side of the reference control. 
     * @public
     */
    Horizontal : "Horizontal",

    /**
     * Popover will be placed automatically at the reference control. 
     * @public
     */
    Auto : "Auto"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.PopinDisplay.
jQuery.sap.declare("sap.m.PopinDisplay");


/**
 * @class Defines the display of table pop-ins
 *
 * @version 1.20.7
 * @static
 * @public
 * @since 1.13.2
 */
sap.m.PopinDisplay = {
  
    /**
     * Inside the table popin, header is displayed in first line and value field is displayed in next line. 
     * @public
     */
    Block : "Block",

    /**
     * Inside the table popin, value field is displayed next to the header in the same line. Note: If there is no enough space for the value field then goes to next line. 
     * @public
     */
    Inline : "Inline"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.RatingIndicatorVisualMode.
jQuery.sap.declare("sap.m.RatingIndicatorVisualMode");


/**
 * @class Possible values for the visualization of float values in the RatingIndicator Control.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.RatingIndicatorVisualMode = {
  
    /**
     * Values are rounded to the nearest integer value (e.g. 1.7 -> 2). 
     * @public
     */
    Full : "Full",

    /**
     * Values are rounded to the nearest half value (e.g. 1.7 -> 1.5). 
     * @public
     */
    Half : "Half"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ScreenSize.
jQuery.sap.declare("sap.m.ScreenSize");


/**
 * @class Breakpoint names for different screen sizes.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.ScreenSize = {
  
    /**
     * 240px wide 
     * @public
     */
    Phone : "Phone",

    /**
     * 600px wide 
     * @public
     */
    Tablet : "Tablet",

    /**
     * 1024px wide 
     * @public
     */
    Desktop : "Desktop",

    /**
     * 240px wide 
     * @public
     */
    XXSmall : "XXSmall",

    /**
     * 320px wide 
     * @public
     */
    XSmall : "XSmall",

    /**
     * 480px wide 
     * @public
     */
    Small : "Small",

    /**
     * 560px wide 
     * @public
     */
    Medium : "Medium",

    /**
     * 768px wide 
     * @public
     */
    Large : "Large",

    /**
     * 960px wide 
     * @public
     */
    XLarge : "XLarge",

    /**
     * 1120px wide 
     * @public
     */
    XXLarge : "XXLarge"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.SelectType.
jQuery.sap.declare("sap.m.SelectType");


/**
 * @class Enumeration for different Select types.
 *
 * @version 1.20.7
 * @static
 * @public
 * @since 1.16
 */
sap.m.SelectType = {
  
    /**
     * Will show the text. 
     * @public
     */
    Default : "Default",

    /**
     * Will show only the specified icon. 
     * @public
     */
    IconOnly : "IconOnly"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.SplitAppMode.
jQuery.sap.declare("sap.m.SplitAppMode");


/**
 * @class The mode of SplitContainer or SplitApp control to show/hide the master area.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.SplitAppMode = {
  
    /**
     * Master will automatically be hidden in portrait mode. 
     * @public
     */
    ShowHideMode : "ShowHideMode",

    /**
     * Master will always be shown but in a compressed version when in portrait mode. 
     * @public
     */
    StretchCompressMode : "StretchCompressMode",

    /**
     * Master will be shown inside a Popover when in portrait mode 
     * @public
     */
    PopoverMode : "PopoverMode",

    /**
     * Master area is hidden initially both in portrait and landscape. Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled on mobile devices. Master will keep the open state when changing the orientation of the device. 
     * @public
     */
    HideMode : "HideMode"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.StandardTileType.
jQuery.sap.declare("sap.m.StandardTileType");


/**
 * @class Types for StandardTile
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.StandardTileType = {
  
    /**
     * Tile representing that something needs to be created 
     * @public
     */
    Create : "Create",

    /**
     * Monitor tile 
     * @public
     */
    Monitor : "Monitor",

    /**
     * Default type 
     * @public
     */
    None : "None"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.SwipeDirection.
jQuery.sap.declare("sap.m.SwipeDirection");


/**
 * @class Directions for swipe event.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.SwipeDirection = {
  
    /**
     * Swipe from left to right 
     * @public
     */
    LeftToRight : "LeftToRight",

    /**
     * Swipe from right to left. 
     * @public
     */
    RightToLeft : "RightToLeft",

    /**
     * Both directions (left to right or right to left) 
     * @public
     */
    Both : "Both"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.SwitchType.
jQuery.sap.declare("sap.m.SwitchType");


/**
 * @class Enumaration for different switch types.
 *
 * @version 1.20.7
 * @static
 * @public
 */
sap.m.SwitchType = {
  
    /**
     * Will show "ON" and "OFF" translated to the current language or the custom text if provided 
     * @public
     */
    Default : "Default",

    /**
     * Switch with accept and reject icons 
     * @public
     */
    AcceptReject : "AcceptReject"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ToolbarDesign.
jQuery.sap.declare("sap.m.ToolbarDesign");


/**
 * @class Types of the Toolbar Design
 *
 * @version 1.20.7
 * @static
 * @public
 * @since 1.16.8
 */
sap.m.ToolbarDesign = {
  
    /**
     * The toolbar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control. 
     * @public
     */
    Auto : "Auto",

    /**
     * The toolbar and its content will be displayed transparent. 
     * @public
     */
    Transparent : "Transparent",

    /**
     * The toolbar appears smaller than the regular size to show information(e.g: text, icon). 
     * @public
     */
    Info : "Info"

  };

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

/*global Element: true */

/*!
 * @copyright@
 */

// In case the Core decides to throw it out... This module shall always be available when using the mobile lib.
jQuery.sap.require('jquery.sap.mobile'); // unlisted dependency retained


//enable support feature


//lazy imports for MessageToast
sap.ui.lazyRequire("sap.m.MessageToast", "show");

//enable ios7 support
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained

if (sap.ui.Device.os.ios && sap.ui.Device.os.version >= 7 && sap.ui.Device.os.version < 8 && sap.ui.Device.browser.name === "sf") {
	
}

// central mobile functionality that should not go into the UI5 Core can go from here
// ----------------------------------------------------------------------------------

/**
 * Touch helper.
 *
 * @namespace
 * @name sap.m.touch
 * @public
 **/

if (sap.m && !sap.m.touch) {
	sap.m.touch = {};
}

/**
 * Given a list of touch objects, find the touch that matches the given one.
 *
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {Touch|number} oTouch A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch session.
 * @return {object|undefined} The touch matching if any.
 * @public
 * @name sap.m.touch.find
 * @function
*/
sap.m.touch.find = function(oTouchList, oTouch) {
	var i,
		iTouchListLength;

	if (!(oTouchList instanceof Object)) {
		jQuery.sap.assert(false, 'sap.m.touch.find(): oTouchList must be a touch list object');
		return;
	}

	if (oTouch instanceof Object && typeof oTouch.identifier !== "undefined") {
		oTouch = oTouch.identifier;
	} else if (typeof oTouch !== "number") {
		jQuery.sap.assert(false, 'sap.m.touch.find(): oTouch must be a touch object or a number');
		return;
	}

	iTouchListLength = oTouchList.length;

	// A TouchList is an object not an array, so we shouldn't use
	// Array.prototype.forEach, etc.
	for (i = 0; i < iTouchListLength; i++) {
		if (oTouchList[i].identifier === oTouch) {
			return oTouchList[i];
		}
	}

	// if the given touch object or touch identifier is not found in the touches list, then return undefined
};

/**
 * Given a list of touches, count the number of touches related with the given element.
 *
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {jQuery|Element|string} vElement A jQuery element or an element reference or an element id.
 * @return {number} The number of touches related with the given element.
 * @public
 * @name sap.m.touch.countContained
 * @function
*/
sap.m.touch.countContained = function(oTouchList, vElement) {
	var i,
		iTouchCount = 0,
		iTouchListLength,
		iElementChildrenL,
		$TouchTarget;

	if (!(oTouchList instanceof Object)) {
		jQuery.sap.assert(false, 'sap.m.touch.countContained(): oTouchList must be a TouchList object');
		return;
	}

	if (vElement instanceof Element) {
		vElement = jQuery(vElement);
	} else if (typeof vElement === "string") {
		vElement = jQuery.sap.byId(vElement);
	} else if (!(vElement instanceof jQuery)) {
		jQuery.sap.assert(false, 'sap.m.touch.countContained(): vElement must be a jQuery object or Element reference or a string');
		return;
	}

	iElementChildrenL = vElement.children().length;
	iTouchListLength = oTouchList.length;

	// A TouchList is an object not an array, so we shouldn't use
	// Array.prototype.forEach, etc.
	for (i = 0; i < iTouchListLength; i++) {
		$TouchTarget = jQuery(oTouchList[i].target);

		//	If the current target have only one HTML element or
		//	have a HTML element antecessor that match with the given element id.
		if ((iElementChildrenL === 0  && $TouchTarget.is(vElement)) ||
			(vElement[0].contains($TouchTarget[0]))) {

			iTouchCount++;
		}
	}

	return iTouchCount;
};

!function(oLib) {

	/**
	 * Returns invalid date value of UI5
	 *
	 * @deprecated Since 1.12 UI5 returns null for invalid date
	 * @returns {null}
	 * @public
	 * @since 1.10
	 * @name sap.m#getInvalidDate
	 * @function
	 */
	oLib.getInvalidDate = function() {
		return null;
	};


	/**
	 * Finds default locale settings once and returns always the same.
	 * We should not need to create new instance to get same locale settings
	 * This method keep the locale instance in the scope and returns the same after first run
	 *
	 * @return {Object} sap.ui.core.Locale instane
	 * @public
	 * @since 1.10
	 * @name sap.m#getLocale
	 * @function
	 */
	oLib.getLocale = function() {
		var oConfig = sap.ui.getCore().getConfiguration(),
			sLocale = oConfig.getFormatSettings().getFormatLocale().toString(),
			oLocale = new sap.ui.core.Locale(sLocale);

		oConfig = sLocale = null; //maybe helps GC
		oLib.getLocale = function() {
			return oLocale;
		};

		return oLocale;
	};

	/**
	 * Finds default locale data once and returns always the same
	 *
	 * @return {Object} sap.ui.core.LocaleData instance
	 * @public
	 * @since 1.10
	 * @name sap.m#getLocaleData
	 * @function
	 */
	oLib.getLocaleData = function() {
		jQuery.sap.require("sap.ui.model.type.Date");
		var oLocaleData = sap.ui.core.LocaleData.getInstance(oLib.getLocale());

		oLib.getLocaleData = function() {
			return oLocaleData;
		};

		return oLocaleData;
	};

	/**
	 * Checks if the given parameter is a valid JsDate Object
	 *
	 * @param {any} value Any variable to test.
	 * @return {boolean}
	 * @public
	 * @since 1.10
	 * @name sap.m#isDate
	 * @function
	 */
	oLib.isDate = function(value) {
		return value && Object.prototype.toString.call(value) == "[object Date]" && !isNaN(value);
	};


	/**
	 * Search given control's parents and try to find iScroll
	 *
	 * @param {sap.ui.core.Control} oControl
	 * @return {iScroll|undefined} iScroll reference or undefined if cannot find
	 * @name sap.m#getIScroll
	 * @public
	 * @since 1.11
	 */
	oLib.getIScroll = function(oControl) {
		if (typeof window.iScroll != "function" || !(oControl instanceof sap.ui.core.Control)) {
			return;
		}

		var parent, scroller;
		for (parent = oControl; parent = parent.oParent;) {
			scroller = parent.getScrollDelegate ? parent.getScrollDelegate()._scroller : null;
			if (scroller && scroller instanceof window.iScroll) {
				return scroller;
			}
		}
	};


	/**
	 * Search given control's parents and try to find ScrollDelegate
	 *
	 * @param {sap.ui.core.Control} oControl
	 * @return {Object|undefined} ScrollDelegate or undefined if cannot find
	 * @name sap.m#getScrollDelegate
	 * @public
	 * @since 1.11
	 */
	oLib.getScrollDelegate = function(oControl) {
		if (!(oControl instanceof sap.ui.core.Control)) {
			return;
		}

		for (var parent = oControl; parent = parent.oParent;) {
			if (typeof parent.getScrollDelegate == "function") {
				return parent.getScrollDelegate();
			}
		}
	};

	/**
	 * screen size definitions in pixel
	 * if you change any value here, please also change
	 * 	1. the documentation of sap.m.ScreenSize
	 *  2. media queries in list.css
	 *
	 * @private
	 * @since 1.12
	 * @name sap.m#ScreenSizes
	 */
	oLib.ScreenSizes = {
		phone : 240,
		tablet : 600,
		desktop : 1024,
		xxsmall : 240,
		xsmall : 320,
		small : 480,
		medium : 560,
		large : 768,
		xlarge : 960,
		xxlarge : 1120
	};

	/**
	 * Base font-size
	 * @private
	 * @since 1.12
	 * @name sap.m#BaseFontSize
	 */
	oLib.BaseFontSize = jQuery(document.documentElement).css("font-size");

	/**
	 * Hide the soft keyboard
	 *
	 * @name sap.m#closeKeyboard
	 * @public
	 * @since 1.20
	 */
	oLib.closeKeyboard = function() {
		var activeElement = document.activeElement;
		if(!sap.ui.Device.system.desktop && activeElement && /(INPUT|TEXTAREA)/i.test(activeElement.tagName)) {
			activeElement.blur();
		}
	};


}(sap.m);



/**
 * <pre>
 * URL(Uniform Resource Locator) Helper
 * This helper can be used to trigger a native application(e.g email, sms, tel) from Browser.
 * That means we are restricted of browser or application implementation. e.g.
 *  - Some browsers do not let you to pass more than 2022 characters in URL
 *  - MAPI (Outlook) limit is 2083, max. path under Internet Explorer is 2048
 *  - Different Internet Explorer versions have different limitation in IE9 approximately 1000 characters
 *  - MS mail app under Windows 8 cuts mail links after approximately 100 characters
 *  - Safari gets a confirmation from user before opening a native application and can block rest triggers if user cancels it.
 *  - Some mail applications(Outlook) do not respect all encodings(e.g. Cyrillic texts are not encoded correctly)
 *
 * Note: all the given limitation lengths are for encoded text(e.g space character will be encoded to "%20")
 * </pre>
 *
 * @namespace
 * @name sap.m.URLHelper
 * @since 1.10
 * @public
 */
sap.m.URLHelper = (function($, window) {

	function isValidString(value) {
		return value && Object.prototype.toString.call(value) == "[object String]";
	}

	function formatTel(sTel) {
		if (!isValidString(sTel)) {
			return "";
		}
		return sTel.replace(/[^0-9\+\*#]/g, "");
	}

	function formatMessage(sText) {
		if (!isValidString(sText)) {
			return "";
		}
		// line breaks in the  body of a message MUST be encoded with "%0D%0A"
		// space character in the  body of a message MUST be encoded with "%20"
		// see http://www.ietf.org/rfc/rfc2368.txt for details
		sText = sText.split(/\r\n|\r|\n/g).join("\r\n");
		return window.encodeURIComponent(sText);
	}

	return $.extend(new sap.ui.base.EventProvider(), {
		/**
		 * Sanitize the given telephone number and returns telephone URI scheme
		 *
		 * @param {String} [sTel] telephone number.
		 * @return {String} telephone URI scheme.
		 * @public
		 * @name sap.m.URLHelper#normalizeTel
		 * @function
		 */
		normalizeTel : function(sTel) {
			return "tel:" + formatTel(sTel);
		},

		/**
		 * Sanitize the given telephone number and returns SMS URI scheme
		 *
		 * @param {String} [sTel] telephone number.
		 * @return {String} SMS URI scheme.
		 * @public
		 * @name sap.m.URLHelper#normalizeSms
		 * @function
		 */
		normalizeSms : function(sTel) {
			return "sms:" + formatTel(sTel);
		},

		/**
		 * Builds Email URI from given parameter.
		 * Trims spaces from email addresses
		 *
		 * @param {String} [sEmail] Destination email address.
		 * @param {String} [sSubject] Subject of the email address.
		 * @param {String} [sBody] Default message text.
		 * @param {String} [sCC] Carbon Copy email address.
		 * @param {String} [sBCC] Blind carbon copy email address.
		 * @return {String} Email URI scheme.
		 * @public
		 * @name sap.m.URLHelper#normalizeEmail
		 * @function
		 */
		normalizeEmail : function(sEmail, sSubject, sBody, sCC, sBCC) {
			var aParams = [],
				sURL = "mailto:",
				encode = window.encodeURIComponent;

			// Within mailto URLs, the characters "?", "=", "&" are reserved
			isValidString(sEmail) && (sURL += encode($.trim(sEmail)));
			isValidString(sSubject) && aParams.push("subject=" + encode(sSubject));
			isValidString(sBody) && aParams.push("body=" + formatMessage(sBody));
			isValidString(sBCC) && aParams.push("bcc=" + encode($.trim(sBCC)));
			isValidString(sCC) && aParams.push("cc=" + encode($.trim(sCC)));

			if (aParams.length) {
				sURL += "?" + aParams.join("&");
			}
			return sURL;
		},

		/**
		 * Redirects to given URL
		 * This method fires "redirect" event before open the URL
		 *
		 * @param {String} sURL Uniform resource locator.
		 * @param {boolean} [bNewWindow] Opens URL in a new browser window
		 * @public
		 * @name sap.m.URLHelper#redirect
		 * @function
		 */
		redirect : function (sURL, bNewWindow) {
			$.sap.assert(isValidString(sURL), this + "#redirect: URL must be a string" );

			this.fireEvent("redirect", sURL);
			if (!bNewWindow) {
				window.location.href = sURL;
			} else {
				window.open(sURL, "_blank");
			}
		},

		/**
		 * Adds an event registration for redirect
		 *
		 * @param {Function} fnFunction The function to call, when the event occurs.
		 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs
		 * @return {Object} sap.m.URLHelper instance
		 * @public
		 * @name sap.m.URLHelper#attachRedirect
		 * @function
		 */
		attachRedirect : function (fnFunction, oListener) {
			return this.attachEvent("redirect", fnFunction, oListener);
		},

		/**
		 * Detach already registered redirect event
		 *
		 * @param {Function} fnFunction The function to call, when the event occurs.
		 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs
		 * @return {Object} sap.m.URLHelper instance
		 * @public
		 * @name sap.m.URLHelper#detachRedirect
		 * @function
		 */
		detachRedirect : function (fnFunction, oListener) {
			return this.detachEvent("redirect", fnFunction, oListener);
		},

		/**
		 * Trigger telephone to call given telephone number
		 *
		 * @param {String} [sTel] telephone number.
		 * @public
		 * @name sap.m.URLHelper#triggerTel
		 * @function
		 */
		triggerTel : function(sTel) {
			this.redirect(this.normalizeTel(sTel));
		},

		/**
		 * Trigger SMS application to send SMS to given telephone number
		 *
		 * @param {String} [sTel] telephone number.
		 * @public
		 * @name sap.m.URLHelper#triggerSms
		 * @function
		 */
		triggerSms : function(sTel) {
			this.redirect(this.normalizeSms(sTel));
		},

		/**
		 * Trigger email application to send email
		 * Trims spaces from email addresses
		 *
		 * @param {String} [sEmail] Destination email address.
		 * @param {String} [sSubject] Subject of the email address.
		 * @param {String} [sBody] Default message text.
		 * @param {String} [sCC] Carbon Copy email address.
		 * @param {String} [sBCC] Blind carbon copy email address.
		 * @public
		 * @name sap.m.URLHelper#triggerEmail
		 * @function
		 */
		triggerEmail : function(sEmail, sSubject, sBody, sCC, sBCC) {
			this.redirect(this.normalizeEmail.apply(0, arguments));
		},

		toString : function() {
			return "sap.m.URLHelper";
		}
	});

}(jQuery, window));


/**
 * Helper for rendering themable background
 *
 * @namespace
 * @name sap.m.BackgroundHelper
 * @since 1.12
 * @protected
 */
sap.m.BackgroundHelper = (function($, window) {

	return {
		/**
		 * Adds CSS classes and styles to the given RenderManager, depending on the given configuration for background color and background image.
		 * To be called by control renderers supporting the global themable background image within their root tag, before they call writeClasses() and writeStyles().
		 *
		 * @param {sap.ui.core.RenderManager} rm the RenderManager
		 * @param {String} [sBgColor] a configured custom background color for the control, if any
		 * @param {sap.ui.core.URI} [sBgImgUrl] the configured custom background image for the control, if any
		 * @returns
		 *
		 * @protected
		 * @name sap.m.BackgroundHelper#addBackgroundColorStyles
		 * @function
		 */
		addBackgroundColorStyles: function(rm, sBgColor, sBgImgUrl) {
			rm.addClass("sapMGlobalBackgroundColor");

			if (sBgColor || sBgImgUrl) { // when an image or color is configured, the gradient needs to be removed, so the color can be seen behind the image
				rm.addStyle("background-image", "none");
				rm.addStyle("filter", "none");
			}
			if (sBgColor) {
				rm.addStyle("background-color", jQuery.sap.escapeHTML(sBgColor));
			}
		},


		/**
		 * @protected
		 * @returns
		 */
		/* currently not needed
		isThemeBackgroundImageModified: function() {
			jQuery.sap.require("sap.ui.core.theming.Parameters");
			var sBgImgUrl = sap.ui.core.theming.Parameters.get('sapUiGlobalBackgroundImage'); // the global background image from the theme
			if (sBgImgUrl && sBgImgUrl !== "''") {
				var sBgImgUrlDefault = sap.ui.core.theming.Parameters.get('sapUiGlobalBackgroundImageDefault');
				if (sBgImgUrl !== sBgImgUrlDefault) {
					return true;
				}
			}
			return false;
		},
		*/

		/**
		 * Renders an HTML tag into the given RenderManager which carries the background image which is either configured and given or coming from the current theme.
		 * Should be called right after the opening root tag has been completed, so this is the first child element inside the control.
		 *
		 * @param rm the RenderManager
		 * @param {sap.ui.core.Control} oControl the control within which the tag will be rendered; its ID will be used to generate the element ID
		 * @param {String}  sCssClass a css class to add to the element
		 * @param {sap.ui.core.URI}  [sBgImgUrl] the image of a configured background image; if this is not given, the theme background will be used and also the other settings are ignored.
		 * @param {boolean} [bRepeat] whether the background image should be repeated/tiled (or stretched)
		 * @param {float}   [fOpacity] the background image opacity, if any
		 * @returns
		 *
		 * @protected
		 * @name sap.m.BackgroundHelper#renderBackgroundImageTag
		 * @function
		 */
		renderBackgroundImageTag: function(rm, oControl, sCssClass, sBgImgUrl, bRepeat, fOpacity) {
			rm.write("<div id='" + oControl.getId() + "-BG' ");
			rm.addClass(sCssClass);
			rm.addClass("sapMGlobalBackgroundImage"); // this adds the background image from the theme

			if (sBgImgUrl) { // use the settings only if a background image is configured
				rm.addStyle("display", "block"); // enforce visibility even if a parent has also a background image
				rm.addStyle("background-image", "url(" + jQuery.sap.encodeHTML(sBgImgUrl) + ")");

				rm.addStyle("background-repeat", bRepeat ? "repeat" : "no-repeat");
				if (!bRepeat) {
					rm.addStyle("background-size", "cover");
					rm.addStyle("background-position", "center");
				} else { // repeat
					rm.addStyle("background-position", "left top");
				}

			} else {
				// the theme defines the background
			}

			if (fOpacity !== 1) {
				if (fOpacity > 1) { // greater than 1 enforces 1
					fOpacity = 1;
				}
				rm.addStyle("opacity", fOpacity);
			}

			rm.writeClasses();
			rm.writeStyles();
			rm.write("></div>");
		}
	};
}());

/**
 * Helper for Images
 *
 * @namespace
 * @name sap.m.ImageHelper
 * @since 1.12
 * @protected
 */
sap.m.ImageHelper = (function($, window) {

	/**
	 * Checks if value is not undefined, in which case the
	 * setter function for a given property is called.
	 * Returns true if value is set, false otherwise.
	 *
	 * @private
	 */
	function checkAndSetProperty(oControl, property, value) {
		if(value !== undefined) {
			var fSetter = oControl['set' + jQuery.sap.charToUpperCase(property)];
			if (typeof(fSetter) === "function") {
				fSetter.call(oControl, value);
				return true;
			}
		}
		return false;
	}

	return {
		/**
		 * Creates or updates an image control.
		 *
		 * @param {string} sImgId id of the image to be dealt with.
		 * @param {sap.m.Image} oImageControl the image to update. If undefined, a new image will be created.
		 * @param {sap.ui.core.Control} oParent oImageControl's parentControl.
		 * @param {Map} mProperties map object that contains key value pairs if image propeties. The 'src' property
		 * MUST be contained. Also the map's keys must be names of image properties
		 * @param {Array} aCssClassesToAdd array of css classes which will be added if the image needs to be created.
		 * @param {Array} aCssClassesToRemove all css clases that oImageControl has and which are contained in this array
		 * are removed bevore adding the css classes listed in aCssClassesToAdd.
		 * @returns the new or updated image control
		 *
		 * @protected
		 * @name sap.m.ImageHelper#getImageControl
		 * @function
		 */
		getImageControl: function(sImgId, oImageControl, oParent, mProperties, aCssClassesToAdd, aCssClassesToRemove) {
			jQuery.sap.assert( !!mProperties['src'] , "sap.m.ImageHelper.getImageControl: mProperties do not contain 'src'");

			// make sure, image is rerendered if icon source has changed
			if(oImageControl && (oImageControl.getSrc() != mProperties['src'])){
				oImageControl.destroy();
				oImageControl = undefined;
			}
			// update or create image control
			var oImage = oImageControl;
			if (!!oImage && (oImage instanceof sap.m.Image || oImage instanceof sap.ui.core.Icon)) {
				//Iterate through properties
				for (var key in mProperties) {
					checkAndSetProperty(oImage, key,  mProperties[key]);
				}
			} else {
				if(!sap.m.Image){
					jQuery.sap.require("sap.m.Image");
				}
				var mSettings = mProperties;
				//add 'id' to properties. This is required by utility
				//method 'createControlByURI'
				mSettings['id'] = sImgId;
				oImage = sap.ui.core.IconPool.createControlByURI(
						mSettings, sap.m.Image);
				//Set the parent so the image gets re-rendered, when the parent is
				oImage.setParent(oParent, null, true);
			}

			//Remove existing style classes which are contained in aCssClassesToRemove
			//(the list of css classes allowed for deletion) to have them updated later on
			//Unfortunately, there is no other way to do this but remove
			//each class individually
			if(!!aCssClassesToRemove) {
				for (var l = 0, removeLen = aCssClassesToRemove.length; l !== removeLen; l++) {
					oImage.removeStyleClass(aCssClassesToRemove[l]);
				}
			}
			//Add style classes if necessary
			if(!!aCssClassesToAdd) {
				for (var k = 0, len = aCssClassesToAdd.length; k !== len; k++) {
					oImage.addStyleClass(aCssClassesToAdd[k]);
				}
			}
			return oImageControl = oImage;
		}
	};
}());

/**
 * Helper for Popups
 *
 * @namespace
 * @name sap.m.PopupHelper
 * @since 1.16.7
 * @protected
 */
sap.m.PopupHelper = (function(){
	return {
		/**
		 * This methods converts the percentage value to an absolute number based on the given base number.
		 *
		 * @param {string} sPercentage A percentage value in string format, for example "25%"
		 * @param {float} fBaseSize A float number which the calculation is based on.
		 * @returns The calculated size string with "px" as unit or null when the format of given parameter is wrong.
		 *
		 * @protected
		 * @name sap.m.PopupHelper.calcPercentageSize
		 * @function
		 */
		calcPercentageSize: function(sPercentage, fBaseSize){
			if(typeof sPercentage !== "string"){
				jQuery.sap.log.warning("sap.m.PopupHelper: calcPercentageSize, the first parameter" + sPercentage + "isn't with type string");
				return null;
			}

			if(sPercentage.indexOf("%") <= 0){
				jQuery.sap.log.warning("sap.m.PopupHelper: calcPercentageSize, the first parameter" + sPercentage + "is not a percentage string (for example '25%')");
				return null;
			}

			var fPercent = parseFloat(sPercentage) / 100,
				fParsedBaseSize = parseFloat(fBaseSize);

			return Math.floor(fPercent * fParsedBaseSize) + "px";
		}
	};
}());

// implement Form helper factory with m controls
// possible is set before layout lib is loaded.
jQuery.sap.setObject("sap.ui.layout.form.FormHelper", {
	createLabel: function(sText){
		return new sap.m.Label({text: sText});
	},
	createButton: function(sId, fPressFunction, oThis){
		var oButton = new sap.m.Button(sId);
		oButton.attachEvent('press', fPressFunction, oThis); // attach event this way to have the right this-reference in handler
		return oButton;
	},
	setButtonContent: function(oButton, sText, sTooltip, sIcon, sIconHovered){
		oButton.setText(sText);
		oButton.setTooltip(sTooltip);
		oButton.setIcon(sIcon);
		oButton.setActiveIcon(sIconHovered);
	},
	addFormClass: function(){ return "sapUiFormM"; },
	bArrowKeySupport: false, /* disables the keyboard support for arrow keys */
	bFinal: true
});

}; // end of sap/m/library.js
if ( !jQuery.sap.isDeclared('sap.m.ActionListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ActionListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class ActionListItem renderer.
 * @static
 */
sap.m.ActionListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ActionListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMALI");
};

sap.m.ActionListItemRenderer.renderLIContent = function(rm, oLI) {

	var isText = oLI.getText();

	// List item label
	if (isText) {
		rm.write("<div class='sapMALIText'>");
		rm.writeEscaped(isText);
		rm.write("</div>");
	}
};

}; // end of sap/m/ActionListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ActionSelectRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.declare("sap.m.ActionSelectRenderer");

sap.m.ActionSelectRenderer = sap.ui.core.Renderer.extend(sap.m.SelectRenderer);

/**
 * CSS class to be applied to the HTML root element of the ActionSelect control.
 *
 * @type {string}
 */
sap.m.ActionSelectRenderer.CSS_CLASS = "sapMActionSelect";

/**
 * Apply a CSS class to the HTML root element of the ActionSelect control.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oActionSelect An object representation of the control that should be rendered.
 * @override
 * @protected
 */
sap.m.ActionSelectRenderer.addStyleClass = function(oRm, oActionSelect) {
	oRm.addClass(sap.m.ActionSelectRenderer.CSS_CLASS);
};

}; // end of sap/m/ActionSelectRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.AppRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.AppRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class App renderer. 
 * @static
 */
sap.m.AppRenderer = {
};

sap.m.AppRenderer = sap.ui.core.Renderer.extend(sap.m.NavContainerRenderer);

sap.m.AppRenderer.renderAttributes = function(rm, oControl) {
	sap.m.BackgroundHelper.addBackgroundColorStyles(rm, oControl.getBackgroundColor(),  oControl.getBackgroundImage());
};

sap.m.AppRenderer.renderBeforeContent = function(rm, oControl) {
	sap.m.BackgroundHelper.renderBackgroundImageTag(rm, oControl, "sapMAppBG",  oControl.getBackgroundImage(), oControl.getBackgroundRepeat(), oControl.getBackgroundOpacity());
};

}; // end of sap/m/AppRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.Bar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Bar.
jQuery.sap.declare("sap.m.Bar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Bar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableFlexBox enableFlexBox} : boolean (default: false)</li>
 * <li>{@link #getTranslucent translucent} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContentLeft contentLeft} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentMiddle contentMiddle} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentRight contentRight} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A bar that may be used as a header of a page. It has the capability to center a content like a title, while having few controls on the left and right side.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Bar
 */
sap.ui.core.Control.extend("sap.m.Bar", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"enableFlexBox" : {type : "boolean", group : "Misc", defaultValue : false, deprecated: true},
		"translucent" : {type : "boolean", group : "Appearance", defaultValue : false, deprecated: true}
	},
	aggregations : {
    	"contentLeft" : {type : "sap.ui.core.Control", multiple : true, singularName : "contentLeft"}, 
    	"contentMiddle" : {type : "sap.ui.core.Control", multiple : true, singularName : "contentMiddle"}, 
    	"contentRight" : {type : "sap.ui.core.Control", multiple : true, singularName : "contentRight"}
	}
}});


/**
 * Creates a new subclass of class sap.m.Bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Bar.extend
 * @function
 */


/**
 * Getter for property <code>enableFlexBox</code>.
 * If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate available space
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableFlexBox</code>
 * @public
 * @deprecated Since version 1.16. 
 * This property is no longer supported, instead, contentMiddle will always occupy 100% width when no contentLeft and contentRight are being set.
 * @name sap.m.Bar#getEnableFlexBox
 * @function
 */

/**
 * Setter for property <code>enableFlexBox</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableFlexBox  new value for property <code>enableFlexBox</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * This property is no longer supported, instead, contentMiddle will always occupy 100% width when no contentLeft and contentRight are being set.
 * @name sap.m.Bar#setEnableFlexBox
 * @function
 */


/**
 * Getter for property <code>translucent</code>.
 * A boolean value indicating whether the bar is partially translucent.
 * It is only applied for touch devices.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>translucent</code>
 * @public
 * @since 1.12
 * @deprecated Since version 1.18.6. 
 * This property has no effect since release 1.18.6 and should not be used. Translucent bar may overlay an input and make it difficult to edit.
 * @name sap.m.Bar#getTranslucent
 * @function
 */

/**
 * Setter for property <code>translucent</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTranslucent  new value for property <code>translucent</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @deprecated Since version 1.18.6. 
 * This property has no effect since release 1.18.6 and should not be used. Translucent bar may overlay an input and make it difficult to edit.
 * @name sap.m.Bar#setTranslucent
 * @function
 */


/**
 * Getter for aggregation <code>contentLeft</code>.<br/>
 * this is the left content area, usually containing a button or an app icon. If this is overlapped by the right content, its content will disappear and text will show an elipsis.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Bar#getContentLeft
 * @function
 */


/**
 * Inserts a contentLeft into the aggregation named <code>contentLeft</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContentLeft the contentLeft to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentLeft should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentLeft is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#insertContentLeft
 * @function
 */

/**
 * Adds some contentLeft <code>oContentLeft</code> 
 * to the aggregation named <code>contentLeft</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#addContentLeft
 * @function
 */

/**
 * Removes an contentLeft from the aggregation named <code>contentLeft</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContentLeft the contentLeft to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentLeft or null
 * @public
 * @name sap.m.Bar#removeContentLeft
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>contentLeft</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Bar#removeAllContentLeft
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentLeft</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Bar#indexOfContentLeft
 * @function
 */
	

/**
 * Destroys all the contentLeft in the aggregation 
 * named <code>contentLeft</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#destroyContentLeft
 * @function
 */


/**
 * Getter for aggregation <code>contentMiddle</code>.<br/>
 * This is the middle content area. Controls such as label, segmented buttons or select should be placed here. Content that is placed here will be centrally positioned, if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between the left and the right content.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Bar#getContentMiddle
 * @function
 */


/**
 * Inserts a contentMiddle into the aggregation named <code>contentMiddle</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContentMiddle the contentMiddle to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentMiddle should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentMiddle is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#insertContentMiddle
 * @function
 */

/**
 * Adds some contentMiddle <code>oContentMiddle</code> 
 * to the aggregation named <code>contentMiddle</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#addContentMiddle
 * @function
 */

/**
 * Removes an contentMiddle from the aggregation named <code>contentMiddle</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContentMiddle the contentMiddle to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentMiddle or null
 * @public
 * @name sap.m.Bar#removeContentMiddle
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>contentMiddle</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Bar#removeAllContentMiddle
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentMiddle</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Bar#indexOfContentMiddle
 * @function
 */
	

/**
 * Destroys all the contentMiddle in the aggregation 
 * named <code>contentMiddle</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#destroyContentMiddle
 * @function
 */


/**
 * Getter for aggregation <code>contentRight</code>.<br/>
 * this is the right content area. Controls such as action buttons or search field could be placed here.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Bar#getContentRight
 * @function
 */


/**
 * Inserts a contentRight into the aggregation named <code>contentRight</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContentRight the contentRight to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentRight should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentRight is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#insertContentRight
 * @function
 */

/**
 * Adds some contentRight <code>oContentRight</code> 
 * to the aggregation named <code>contentRight</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#addContentRight
 * @function
 */

/**
 * Removes an contentRight from the aggregation named <code>contentRight</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContentRight the contentRight to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentRight or null
 * @public
 * @name sap.m.Bar#removeContentRight
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>contentRight</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Bar#removeAllContentRight
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentRight</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Bar#indexOfContentRight
 * @function
 */
	

/**
 * Destroys all the contentRight in the aggregation 
 * named <code>contentRight</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#destroyContentRight
 * @function
 */


// Start of sap\m\Bar.js
/**
 * @private
 */

sap.m.Bar.prototype.onBeforeRendering = function() {
	this._removeAllListeners();
};

sap.m.Bar.prototype.onAfterRendering = function() {
	this._handleResize();
};

/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.Bar.prototype.exit = function() {
	this._removeAllListeners();

	if(this._oflexBox) {

		this._oflexBox.destroy();
		this._oflexBox = null;

	}

	this._$MidBarPlaceHolder = null;
	this._$RightBar = null;
	this._$LeftBar = null;
};

/**
 * @private
 */
sap.m.Bar._aResizeHandlers = ["_sResizeListenerId", "_sResizeListenerIdMid", "_sResizeListenerIdRight", "_sResizeListenerIdLeft"];

/**
 * removes all resize listeners, that the bar could have registered.
 * @private
 */
sap.m.Bar.prototype._removeAllListeners = function() {
	var that = this;

	sap.m.Bar._aResizeHandlers.forEach(function(sItem) {

		that._removeListenerFailsave(sItem);

	});
};

/**
 * Removes a listener with the specified name and sets it to null, if the listener is defined.
 * @param sListenerName the name of the listener that has to be removed
 *
 * @private
 */
sap.m.Bar.prototype._removeListenerFailsave = function(sListenerName) {
	if (this[sListenerName]) {

		sap.ui.core.ResizeHandler.deregister(this[sListenerName]);
		this[sListenerName] = null;

	}
};

/**
 * Invoked, when bar is rerendered, its size changed, or the size of one for the content bars changed
 * @private
 */
sap.m.Bar.prototype._handleResize = function() {
	this._removeAllListeners();

	var bContentLeft = !!this.getContentLeft().length,
		bContentMiddle = !!this.getContentMiddle().length,
		bContentRight = !!this.getContentRight().length;

	//No content was set yet - no need to listen to resizes
	if(!bContentLeft && !bContentMiddle && !bContentRight) {
		return;
	}

	this._$LeftBar = this.$("BarLeft");
	this._$RightBar = this.$("BarRight");
	this._$MidBarPlaceHolder = this.$("BarPH");

	this._updatePosition(bContentLeft, bContentMiddle, bContentRight);

	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this._handleResize, this));

	if(this.getEnableFlexBox()) {
		return;
	}

	if(bContentLeft) {
		this._sResizeListenerIdLeft = sap.ui.core.ResizeHandler.register(this._$LeftBar[0], jQuery.proxy(this._handleResize, this));
	}

	if(bContentMiddle) {
		this._sResizeListenerIdMid = sap.ui.core.ResizeHandler.register(this._$MidBarPlaceHolder[0], jQuery.proxy(this._handleResize, this));
	}

	if(bContentRight) {
		this._sResizeListenerIdRight = sap.ui.core.ResizeHandler.register(this._$RightBar[0], jQuery.proxy(this._handleResize, this));
	}
};

/**
 * Repositions the bar. 
 * If there is only one aggregation filled, this aggregation will take 100% of the bars space.
 * @param bContentLeft indicates if there is left content in the bar
 * @param bContentMiddle indicates if there is middle content in the bar
 * @param bContentRight indicates if there is right content in the bar
 * @private
 */
sap.m.Bar.prototype._updatePosition = function(bContentLeft, bContentMiddle, bContentRight) {

	if (!bContentLeft && !bContentRight) {

		this._$MidBarPlaceHolder.css({ width : '100%'});
		return;

	}

	if(bContentLeft && !bContentMiddle && !bContentRight) {

		this._$LeftBar.css({ width : '100%'});
		return;

	}

	if(!bContentLeft && !bContentMiddle && bContentRight) {

		this._$RightBar.css({ width : '100%'});
		return;

	}

	var iBarWidth = this.$().outerWidth(true);

	// reset to default
	this._$RightBar.css({ width : "" });
	this._$LeftBar.css({ width : "" });
	this._$MidBarPlaceHolder.css({ position : "", width : "", visibility : 'hidden' });

	var iRightBarWidth = this._$RightBar.outerWidth(true);

	//right bar is bigger than the bar - only show the right bar
	if(iRightBarWidth > iBarWidth) {

		if(bContentLeft) {
			this._$LeftBar.css({ width : "0px" });
		}

		if(bContentMiddle) {
			this._$MidBarPlaceHolder.css({ width : "0px" });
		}

		this._$RightBar.css({ width : iBarWidth + "px"});
		return;

	}

	var iLeftBarWidth = this._getBarContainerWidth(this._$LeftBar);

	// handle the case when left and right content are wider than the bar itself
	if (iBarWidth < (iLeftBarWidth + iRightBarWidth)) {

		// this scenario happens mostly when a very long title text is set in the left content area
		// hence we make sure the rightContent always has enough space and reduce the left content area width accordingly
		iLeftBarWidth = iBarWidth - iRightBarWidth;

		this._$LeftBar.width(iLeftBarWidth);
		this._$MidBarPlaceHolder.width(0);
		return;

	}

	//middle bar will be shown
	this._$MidBarPlaceHolder.css(this._getMidBarCss(iRightBarWidth, iBarWidth, iLeftBarWidth));

};

/**
 * Returns the css for the contentMiddle aggregation. It is centered if there is enough space for it to fit between the left and right content.
 * If not it will be centered between those two.
 * @param iRightBarWidth the width in pixel
 * @param iBarWidth the width in pixel
 * @param iLeftBarWidth the width in pixel
 * @returns {object} the new _$MidBarPlaceHolder css value
 */
sap.m.Bar.prototype._getMidBarCss = function(iRightBarWidth, iBarWidth, iLeftBarWidth) {
	var iMidBarPlaceholderWidth = this._$MidBarPlaceHolder.outerWidth(true),
		bRtl = sap.ui.getCore().getConfiguration().getRTL(),
		sLeftOrRight = bRtl ? "right" : "left",
		oMidBarCss = { visibility : "" };

	if (this.getEnableFlexBox()) {

		iMidBarPlaceholderWidth = iBarWidth - iLeftBarWidth - iRightBarWidth - parseInt(this._$MidBarPlaceHolder.css('margin-left'), 10) - parseInt(this._$MidBarPlaceHolder.css('margin-right'), 10);

		oMidBarCss.position = "absolute";
		oMidBarCss.width = iMidBarPlaceholderWidth + "px";
		oMidBarCss[sLeftOrRight] = iLeftBarWidth;

		//calculation for flex is done
		return oMidBarCss;

	}

	var iSpaceBetweenLeftAndRight = iBarWidth - iLeftBarWidth - iRightBarWidth,

		iMidBarStartingPoint = (iBarWidth / 2) - (iMidBarPlaceholderWidth / 2),
		bLeftContentIsOverlapping = iLeftBarWidth > iMidBarStartingPoint,

		iMidBarEndPoint = (iBarWidth / 2) + (iMidBarPlaceholderWidth / 2),
		bRightContentIsOverlapping = (iBarWidth - iRightBarWidth) < iMidBarEndPoint;

	if (iSpaceBetweenLeftAndRight > 0 && (bLeftContentIsOverlapping || bRightContentIsOverlapping)) {

		//Left or Right content is overlapping the Middle content

		// place the middle positioned element directly next to the end of left content area
		oMidBarCss.position = "absolute";

		//Use the remaining space
		oMidBarCss.width = iSpaceBetweenLeftAndRight + "px";

		oMidBarCss.left = bRtl ? iRightBarWidth : iLeftBarWidth;
	}

	var $MidBar = this.$("BarMiddle"),
		iMidBarWidth = $MidBar.outerWidth(true);

	if (oMidBarCss.width > iMidBarWidth) {

		oMidBarCss.width = iMidBarWidth;

	}

	return oMidBarCss;

};

/**
 * Gets the width of a container
 * @static
 * @param $Container a container with children
 * @returns {number} the width of one of the bar containers
 */
sap.m.Bar.prototype._getBarContainerWidth = function($Container) {
	var i,
		iContainerWidth = 0,
		aContainerChildren = $Container.children(),
		iContainerChildrenTotalWidth = 0;

	// Chrome browser has a problem in providing the correct div size when image inside does not have width explicitly set
	//since ff version 24 the calculation is correct, since we don't support older versions we won't check it 
	if (sap.ui.Device.browser.webkit || sap.ui.Device.browser.firefox) {

		for (i= 0; i < aContainerChildren.length; i++) {

			iContainerChildrenTotalWidth += jQuery(aContainerChildren[i]).outerWidth(true);

		}

		iContainerWidth = $Container.outerWidth(true);

	} else {

		// IE has a rounding issue with JQuery.outerWidth
		var oContainerChildrenStyle;

		for(i= 0; i < aContainerChildren.length; i++){

			oContainerChildrenStyle = window.getComputedStyle(aContainerChildren[i]);

			if (oContainerChildrenStyle.width == "auto") {

				iContainerChildrenTotalWidth += jQuery(aContainerChildren[i]).width() + 1; //add an additional 1 pixel because of rounding issue.

			} else {

				iContainerChildrenTotalWidth += parseFloat(oContainerChildrenStyle.width);

			}

			iContainerChildrenTotalWidth += parseFloat(oContainerChildrenStyle.marginLeft);
			iContainerChildrenTotalWidth += parseFloat(oContainerChildrenStyle.marginRight);
			iContainerChildrenTotalWidth += parseFloat(oContainerChildrenStyle.paddingLeft);
			iContainerChildrenTotalWidth += parseFloat(oContainerChildrenStyle.paddingRight);
		}

		var oContainerComputedStyle = window.getComputedStyle($Container[0]);

		iContainerWidth += parseFloat(oContainerComputedStyle.width);
		iContainerWidth += parseFloat(oContainerComputedStyle.marginLeft);
		iContainerWidth += parseFloat(oContainerComputedStyle.marginRight);
		iContainerWidth += parseFloat(oContainerComputedStyle.paddingLeft);
		iContainerWidth += parseFloat(oContainerComputedStyle.paddingRight);

	}

	if (iContainerWidth < iContainerChildrenTotalWidth) {

		iContainerWidth = iContainerChildrenTotalWidth;

	}

	return iContainerWidth;
};

}; // end of sap/m/Bar.js
if ( !jQuery.sap.isDeclared('sap.m.BusyDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.BusyDialog.
jQuery.sap.declare("sap.m.BusyDialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new BusyDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: "30px")</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: "44px")</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.BusyDialog#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Busy Dialog is used to indicate that the system is busy with some task and the user has to wait. During this time the UI is blocked.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.BusyDialog
 */
sap.ui.core.Control.extend("sap.m.BusyDialog", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"open", "close"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"customIcon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"customIconRotationSpeed" : {type : "int", group : "Appearance", defaultValue : 1000},
		"customIconDensityAware" : {type : "boolean", group : "", defaultValue : true},
		"customIconWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : "30px"},
		"customIconHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : "44px"},
		"cancelButtonText" : {type : "string", group : "Misc", defaultValue : null},
		"showCancelButton" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	aggregations : {
    	"_busyLabel" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"_busyIndicator" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"_busyButton" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	events : {
		"close" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.BusyDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.BusyDialog.extend
 * @function
 */

sap.m.BusyDialog.M_EVENTS = {'close':'close'};


/**
 * Getter for property <code>text</code>.
 * Optional text shown inside the popup.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.BusyDialog#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setText
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Sets a title to the busy dialog. Default is no title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.BusyDialog#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setTitle
 * @function
 */


/**
 * Getter for property <code>customIcon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIcon
 * @function
 */

/**
 * Setter for property <code>customIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIcon
 * @function
 */


/**
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a gif is used, the speed has to be set to 0. The unit is in ms.
 *
 * Default value is <code>1000</code>
 *
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconRotationSpeed
 * @function
 */

/**
 * Setter for property <code>customIconRotationSpeed</code>.
 *
 * Default value is <code>1000</code> 
 *
 * @param {int} iCustomIconRotationSpeed  new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconRotationSpeed
 * @function
 */


/**
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconDensityAware
 * @function
 */

/**
 * Setter for property <code>customIconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCustomIconDensityAware  new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconDensityAware
 * @function
 */


/**
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 *
 * Default value is <code>"30px"</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconWidth
 * @function
 */

/**
 * Setter for property <code>customIconWidth</code>.
 *
 * Default value is <code>"30px"</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconWidth  new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconWidth
 * @function
 */


/**
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 *
 * Default value is <code>"44px"</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconHeight
 * @function
 */

/**
 * Setter for property <code>customIconHeight</code>.
 *
 * Default value is <code>"44px"</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconHeight  new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconHeight
 * @function
 */


/**
 * Getter for property <code>cancelButtonText</code>.
 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>cancelButtonText</code>
 * @public
 * @name sap.m.BusyDialog#getCancelButtonText
 * @function
 */

/**
 * Setter for property <code>cancelButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCancelButtonText  new value for property <code>cancelButtonText</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCancelButtonText
 * @function
 */


/**
 * Getter for property <code>showCancelButton</code>.
 * A cancel button will be rendered inside the busy dialog if this property is set to true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showCancelButton</code>
 * @public
 * @name sap.m.BusyDialog#getShowCancelButton
 * @function
 */

/**
 * Setter for property <code>showCancelButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowCancelButton  new value for property <code>showCancelButton</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setShowCancelButton
 * @function
 */


/**
 * This event will be fired when the busy dialog is closed. 
 *
 * @name sap.m.BusyDialog#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.BusyDialog</code>.<br/> itself. 
 *  
 * This event will be fired when the busy dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.BusyDialog</code>.<br/> itself.
 *
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#attachClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#detachClose
 * @function
 */

/**
 * Fire event close to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.BusyDialog#fireClose
 * @function
 */


/**
 * Open the busy popup.
 *
 * @name sap.m.BusyDialog.prototype.open
 * @function

 * @type sap.m.BusyDialog
 * @public
 */


/**
 * Close the busy popup.
 *
 * @name sap.m.BusyDialog.prototype.close
 * @function

 * @type sap.m.BusyDialog
 * @public
 */


// Start of sap\m\BusyDialog.js
///**
// * This file defines behavior for the control,
// */
//sap.m.BusyDialog.prototype.init = function(){
//   // do something for initialization...
//};
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.m.BusyDialog.prototype.init = function(){
	var that = this;
	this._$window = jQuery(window);
	this._isPlatformDependent = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true";
	
	this._busyIndicator = new sap.m.BusyIndicator(this.getId() + '-busyInd', {}).addStyleClass('sapMBsyInd');
	this.setAggregation("_busyIndicator", this._busyIndicator, true);
	
	this.iOldWinHeight = 0;
	this._oPopup = new sap.ui.core.Popup();
	(sap.ui.Device.os.ios && this._isPlatformDependent) ? this._oPopup.setShadow(true): this._oPopup.setShadow(false);
	this._oPopup.setModal(true, 'sapMDialogBLyInit');
	this._oPopup.setAnimations(this.openAnimation, this.closeAnimation);

	//the orientationchange event listener
	this._fOrientationChange = jQuery.proxy(this._reposition, this);
	
	this._oPopup._applyPosition = function(oPosition){
		that._setDimensions();
		sap.ui.core.Popup.prototype._applyPosition.call(this, oPosition);
	};
	this._oPopup._showBlockLayer = function(){
		sap.ui.core.Popup.prototype._showBlockLayer.call(this);
		var $BlockRef = jQuery("#sap-ui-blocklayer-popup"), $BlockBarRef;
		$BlockRef.toggleClass("sapMDialogBLyInit", true);
		if (!sap.ui.Device.os.ios && this._isPlatformDependent) {
			$BlockBarRef = jQuery("#sap-ui-blocklayer-popup-bar");
			$BlockRef.css('top', '48px');
			if($BlockBarRef.length === 0){
				var className = "sapUiBLy" + (this._sModalCSSClass ? " " + this._sModalCSSClass : "") + ' sapUiBLyBar';
				var $BlockBarRef = jQuery("<div id=\"sap-ui-blocklayer-popup-bar\" tabindex=\"0\" class=\"" + className + "\" style=\"display:block; z-index:" +  $BlockRef.css('z-index') +"; visibility:visible\"></div>");
				//need to add $BlockBarRef before the busydialog dom node, otherwise have problem with popup.js
				$BlockBarRef.insertBefore(that.$());
			} else {
				var $BlockBarRef = jQuery("#sap-ui-blocklayer-popup-bar");
				$BlockBarRef.css({"z-index" : $BlockRef.css('z-index'),
								"visibility": "visible",
								"display" : "block"});
			}
		}//Without timeout the animation is not visible from the second time.
		/*setTimeout(function() {
			$BlockRef.toggleClass('sapMDialogBLyShown', true);
		}, 0);*/
	};
	this._oPopup._hideBlockLayer = function(){
		var $BlockRef = jQuery("#sap-ui-blocklayer-popup");
		var $BlockBarRef = jQuery("#sap-ui-blocklayer-popup-bar");//$BlockRef.next('div');
		/*$BlockRef.one("webkitTransitionEnd", function(){*/
			$BlockBarRef.css({'visibility': '', 'display': 'none'});
			$BlockRef.toggleClass('sapMDialogBLyInit', false);
			$BlockRef.css("top", "");
			sap.ui.core.Popup.prototype._hideBlockLayer.call(this);
		/*});*/
		/*$BlockRef.toggleClass('sapMDialogBLyShown', false);*/
		
	};
	//keyboard support for desktop environments
	if(sap.ui.Device.system.desktop) {
		var fnOnEscape = jQuery.proxy(function(oEvent) {
				this.close();
				//event should not trigger any further actions
				oEvent.stopPropagation();
		}, this);
		//use pseudo event 'onsapescape' to implement keyboard-trigger for closing this dialog
		this._oPopup.onsapescape = fnOnEscape;
	}
};

sap.m.BusyDialog.prototype.openAnimation = function($Ref, iRealDuration, fnOpened) {
	if(sap.ui.Device.os.ios && this._isPlatformDependent) {
		$Ref.css('display', 'block');
		$Ref.bind("webkitAnimationEnd animationend", function(){
		jQuery(this).unbind("webkitAnimationEnd animationend");
			fnOpened();
		});
		$Ref.css('-webkit-animation-name', 'sapMDialogBounce')
			.css('animation-name', 'sapMDialogBounce');
	} else {
		fnOpened();
	}
};

sap.m.BusyDialog.prototype.closeAnimation = function($Ref, iRealDuration, fnClose) {
	fnClose();
};

/**
 * Destroys the dialog control
 * @private
 */
sap.m.BusyDialog.prototype.exit = function(){
	this._oPopup.close();
	this._oPopup.destroy();
	this._oPopup = null;
	
	this._$window.unbind("resize", this._fOrientationChange);
};

/**
 * Opens the dialog
 *
 * @public
 *
 */
sap.m.BusyDialog.prototype.open = function(){
	jQuery.sap.log.debug("sap.m.BusyDialog.open called at " + new Date().getTime());
	
	var oPopup = this._oPopup;
	if (oPopup.isOpen()){
		return this;
	}
	// Open popup
	oPopup.setContent(this);
	oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
	oPopup.setPosition("center center", "center center", document, "0 0", "fit");

	this._bOpenRequested = true;
	this._openNowIfPossibleAndRequested();

	return this;
};


sap.m.BusyDialog.prototype._openNowIfPossibleAndRequested = function(){
	if (!this._bOpenRequested) {
		return;
	}
	
	// If body/Core are not available yet, give them some more time and open later if still required
	if (!document.body || !sap.ui.getCore().isInitialized()) {
		jQuery.sap.delayedCall(50, this, "_openNowIfPossibleAndRequested");
		return;
	}
	
	this._bOpenRequested = false; // opening request is handled
	this._oPopup.open();
};

/**
 * Closes the dialog
 *
 * @public
 *
 */
sap.m.BusyDialog.prototype.close = function(){
	this._bOpenRequested = false;
	var oPopup = this._oPopup;

	var eOpenState = this._oPopup.getOpenState();
	if(!(eOpenState === sap.ui.core.OpenState.CLOSED || eOpenState === sap.ui.core.OpenState.CLOSING)){
		oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
		jQuery.sap.log.debug("sap.m.BusyDialog.close called at " + new Date().getTime());
		oPopup.close();
		this.fireClose();
	}
	return this;
};

sap.m.BusyDialog.prototype.setText = function(sText){
	this.setProperty("text", sText, true);
	if(!this._oLabel) {
		this._oLabel = new sap.m.Label(this.getId() + "-busyLabel", {}).addStyleClass("sapMBusyDialogLabel");
		this.setAggregation("_busyLabel", this._oLabel, true);
	}
	this._oLabel.setText(sText);
	return this;
};

sap.m.BusyDialog.prototype.setCustomIcon = function(oIcon){
	this.setProperty("customIcon", oIcon, true);
	this._busyIndicator.setCustomIcon(oIcon);
	return this;
};

sap.m.BusyDialog.prototype.setCustomIconRotationSpeed = function(iSpeed){
	this.setProperty("customIconRotationSpeed", iSpeed, true);
	this._busyIndicator.setCustomIconRotationSpeed(iSpeed);
	return this;
};

sap.m.BusyDialog.prototype.setCustomIconDensityAware = function(bAware){
	this.setProperty("customIconDensityAware", bAware, true);
	this._busyIndicator.setCustomIconDensityAware(bAware);
	return this;
};

sap.m.BusyDialog.prototype.setCustomIconWidth = function(sWidth){
	this.setProperty("customIconWidth", sWidth, true);
	this._busyIndicator.setCustomIconWidth(sWidth);
	return this;
};

sap.m.BusyDialog.prototype.setCustomIconHeight = function(sHeight){
	this.setProperty("customIconHeight", sHeight, true);
	this._busyIndicator.setCustomIconHeight(sHeight);
	return this;
};

sap.m.BusyDialog.prototype.setShowCancelButton = function(bShow){
	this.setProperty("showCancelButton", bShow, false);
	if(bShow) {
		this._createCancelButton();
	}
	return this;
};

sap.m.BusyDialog.prototype.setCancelButtonText = function(sText){
	this.setProperty("cancelButtonText", sText, true);
	this._createCancelButton();
	this._oButton.setText(sText);
	return this;
};

sap.m.BusyDialog.prototype._createCancelButton = function(){
	if(!this._oButton) {
		var sButtonStyle = "";
		var self = this;
		var sButtonText = (this.getCancelButtonText()) ? this.getCancelButtonText() : sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("BUSYDIALOG_CANCELBUTTON_TEXT");
		if(!this._isPlatformDependent) {
			sButtonStyle = sap.m.ButtonType.Transparent;
		} else {
			sButtonStyle = (sap.ui.Device.os.ios) ? sap.m.ButtonType.Unstyled : sap.m.ButtonType.Default;
		}
		this._oButton = new sap.m.Button(this.getId() + 'busyCancelBtn', {
				text: sButtonText,
				type: sButtonStyle,
				press : function() {
					self.close();
				}
		}).addStyleClass("sapMDialogBtn");
		this.setAggregation("_busyButton", this._oButton, true);
	}
};

sap.m.BusyDialog.prototype._reposition = function() {
	var ePopupState = this._oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return;
	}
	this._oPopup._applyPosition(this._oPopup._oLastPosition);
	
};

sap.m.BusyDialog.prototype._handleOpened = function(){
	this._oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
	// bind to window resize
	// In android, the orientationchange fires before the size of the window changes
	//  that's why the resize event is used here.
	this._$window.bind("resize", this._fOrientationChange);
};

sap.m.BusyDialog.prototype._handleClosed = function(){
	this._oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
	this._$window.unbind("resize", this._fOrientationChange);
};

sap.m.BusyDialog.prototype._setDimensions = function() {
	// Derive width and height from viewport
	var iWindowHeight = (sap.ui.Device.os.ios || !this._isPlatformDependent) ? this._$window.height() : ( this._$window.height() - 50);
	var $this = this.$();;
	//reset
	$this.css({
		"left": "0px",
		"top": "0px",
		"max-height": this._$window.height() + "px"
	});
	if(iWindowHeight <= this.iOldWinHeight) {
		if(!this.$().hasClass("sapMBsyDSmall")) {
			this._checkSize(iWindowHeight);
		}
	}
	if(iWindowHeight > this.iOldWinHeight) {
		if((this.$().hasClass("sapMBsyDSmall"))) {
			this._checkSize(iWindowHeight);
		}
	}
	if(this.iOldWinHeight == 0) {
		this._checkSize(iWindowHeight);
	}
	this.iOldWinHeight = (sap.ui.Device.os.ios || !this._isPlatformDependent) ? this._$window.height() : (this._$window.height() - 50);
};

sap.m.BusyDialog.prototype._checkSize = function(iWindowHeight) {
	if(iWindowHeight < this.$()[0].scrollHeight) {
		this.$().toggleClass("sapMBsyDSmall", true);
		if(!sap.ui.Device.os.ios && this._isPlatformDependent) {
			this.$().css("width", this._$window.width() * 0.7);
		}
	} else {
		this.$().toggleClass("sapMBsyDSmall", false);
		if(!sap.ui.Device.os.ios && !this._isPlatformDependent) {
			this.$().css("width", "18.75em");
		}
	}
};
}; // end of sap/m/BusyDialog.js
if ( !jQuery.sap.isDeclared('sap.m.BusyIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.BusyIndicator.
jQuery.sap.declare("sap.m.BusyIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new BusyIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: "44px")</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: "44px")</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDesign design} : string (default: 'auto')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Control to indicate that the system is busy with some task and the user has to wait. When no image or gif is provided, the control renders the platforms native indicator using css.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.BusyIndicator
 */
sap.ui.core.Control.extend("sap.m.BusyIndicator", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Data", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"customIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"customIconRotationSpeed" : {type : "int", group : "Appearance", defaultValue : 1000},
		"customIconDensityAware" : {type : "boolean", group : "", defaultValue : true},
		"customIconWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : "44px"},
		"customIconHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : "44px"},
		"size" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"design" : {type : "string", group : "Appearance", defaultValue : 'auto'}
	},
	aggregations : {
    	"_iconImage" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"_busyLabel" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	}
}});


/**
 * Creates a new subclass of class sap.m.BusyIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.BusyIndicator.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the busy indicator (optional)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.BusyIndicator#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setText
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.BusyIndicator#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setTextDirection
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set to false to make the control invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.BusyIndicator#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setVisible
 * @function
 */


/**
 * Getter for property <code>customIcon</code>.
 * Icon url if an icon is used as the busy indicator.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIcon
 * @function
 */

/**
 * Setter for property <code>customIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIcon
 * @function
 */


/**
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit is in ms.
 *
 * Default value is <code>1000</code>
 *
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconRotationSpeed
 * @function
 */

/**
 * Setter for property <code>customIconRotationSpeed</code>.
 *
 * Default value is <code>1000</code> 
 *
 * @param {int} iCustomIconRotationSpeed  new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconRotationSpeed
 * @function
 */


/**
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconDensityAware
 * @function
 */

/**
 * Setter for property <code>customIconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCustomIconDensityAware  new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconDensityAware
 * @function
 */


/**
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 *
 * Default value is <code>"44px"</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconWidth
 * @function
 */

/**
 * Setter for property <code>customIconWidth</code>.
 *
 * Default value is <code>"44px"</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconWidth  new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconWidth
 * @function
 */


/**
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 *
 * Default value is <code>"44px"</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconHeight
 * @function
 */

/**
 * Setter for property <code>customIconHeight</code>.
 *
 * Default value is <code>"44px"</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconHeight  new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconHeight
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Defines the size of the busy indicator.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * @name sap.m.BusyIndicator#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sSize  new value for property <code>size</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setSize
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * The design defines how the BusyIndicator should look like. There are 3 possiblities:
 * auto: automatically sets the design according to the context
 * dark: dark theme, useful within a light context
 * light: light theme, useful within a dark context
 *
 * Default value is <code>auto</code>
 *
 * @return {string} the value of property <code>design</code>
 * @public
 * @name sap.m.BusyIndicator#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {string} sDesign  new value for property <code>design</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setDesign
 * @function
 */


// Start of sap\m\BusyIndicator.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.m.BusyIndicator.prototype.init = function(){
	if(sap.ui.core.theming.Parameters.get("sapMPlatformDependent") != "true"){
		// Blue crystal design: rotating arc
		// bugs.webkit.org: id=82647, id=74801 dynamically created SVG does not animate
		// do not use SVG in ios and android < 4.2 
		if(sap.ui.Device.browser.chrome 
				|| sap.ui.Device.os.blackberry
				|| sap.ui.Device.os.android && sap.ui.Device.os.version > 4.1){
			// Browsers with correct SMIL animation show SVG (crisp rendering)
			this._bUseSvg = true;
		} else {
			// Fall-back for other browsers: show canvas animation (aliased rendering)
			this._bUseCanvas = true;
		}
	}
	this._bIosStyle = sap.ui.Device.os.ios;
	this._sBColor = sap.ui.core.theming.Parameters.get("sapUiPageBG") || "rgba(0, 0, 0, 0)";
};

sap.m.BusyIndicator.prototype.exit = function(){
	this._cancelAnimation();
};

// Request canvas animation
// @private 
if(window.requestAnimationFrame){
	sap.m.BusyIndicator.prototype._requestAnimation = function(fCallback){
		return window.requestAnimationFrame(fCallback);
	};
} else if(window.webkitRequestAnimationFrame){
	sap.m.BusyIndicator.prototype._requestAnimation = function(fCallback, oDOM){
		return window.webkitRequestAnimationFrame(fCallback, oDOM);
	};	
} else if(window.mozRequestAnimationFrame){
	sap.m.BusyIndicator.prototype._requestAnimation = function(fCallback){
		return window.mozRequestAnimationFrame(fCallback);
	};
} else {
	sap.m.BusyIndicator.prototype._requestAnimation = function(fCallback){
		return window.setTimeout(fCallback, 1000 / 60);
	};
};

// Stop canvas animation
// @private 
sap.m.BusyIndicator.prototype._cancelAnimation = function(){
	if(!this._animationId){ return;}
	
	if(window.cancelAnimationFrame){
		window.cancelAnimationFrame(this._animationId);
	} else if(window.webkitCancelAnimationFrame){
		window.webkitCancelAnimationFrame(this._animationId);
	} else if(window.mozCancelAnimationFrame){
		window.mozCancelAnimationFrame(this._animationId);
	} else{	
		window.clearTimeout(this._animationId); 
	};
	this._animationId = undefined;
};

// Do the next animation step
// @private 
sap.m.BusyIndicator.prototype._animateCanvas = function(){
	if(!this.oCanvas){ return; }
	
	var clientWidth = this.oCanvas.clientWidth,
		clientHeight = this.oCanvas.clientHeight;
	
	if(!clientWidth || !clientHeight){
			// if the indicator becomes invisible, client width and height are set to 0. 
			// Stop animation
			this._animationId = undefined;
			return;  
	}
	
	// Adjust the canvas size to avoid aliasing artifacts
	// This is needed only once after first rendering and only for custom size
	if(clientWidth != this.oCanvas.width){ 
		this.oCanvas.setAttribute("width", clientWidth);
	}
	if(clientHeight != this.oCanvas.height){
		this.oCanvas.setAttribute("height", clientHeight);
	}
	
	var context = this.oCanvas.getContext("2d"),
		w = this.oCanvas.width,
		h = this.oCanvas.height,
		x = Math.round(w/2),
		y = Math.round(h/2),
		r = Math.round(x * 0.7),
		t = new Date(),
		startAngle = 0.9 * (t.getSeconds() + t.getMilliseconds() / 1000) * 2 * Math.PI,
		endAngle = startAngle + 1.25 * Math.PI, // 225 grad
		counterClock = false,
		strokeStyle = window.getComputedStyle(this.oCanvas).color,
		lineWidth = Math.round(w / 10) * 2;
	
	context.clearRect(0,0,w,h);
	
	// clearRect does not clear canvas in Android browser 4.1, 
	// workaround: draw a white circle underneath
	if(sap.ui.Device.os.android && sap.ui.Device.os.version == 4.1 && !sap.ui.Device.browser.chrome){
		context.strokeStyle = this._sBColor; 
		context.lineWidth = lineWidth + 2;
		context.beginPath();
		context.arc(x, y, r, 0, 2 * Math.PI);
		context.stroke();
	}
	
	context.strokeStyle = strokeStyle;
	context.lineWidth = lineWidth;
	context.beginPath();
	context.arc(x, y, r, startAngle, endAngle, counterClock);
	context.stroke();
	
	this._animationId = this._requestAnimation(this._fAnimateCallback, this.oCanvas);
};

// Start the canvas based animation
// @private 
sap.m.BusyIndicator.prototype._doCanvas = function(){
	this.oCanvas = this.getDomRef("canvas");
	this._fAnimateCallback = jQuery.proxy(this._animateCanvas, this);
	this._animationId = this._requestAnimation(this._fAnimateCallback, this.oCanvas);
};

// Create internal icon image
// @private 
sap.m.BusyIndicator.prototype._createCustomIcon = function(sName, sValue){
	var self = this;
	if(!this._iconImage) {
		this._iconImage = new sap.m.Image(this.getId() + "-icon", {
				width: "44px",
				height: "44px"
			}).addStyleClass('sapMBsyIndIcon');
		this._iconImage.addDelegate({onAfterRendering : function() {
				self._setRotationSpeed();
			}
		});
		this.setAggregation("_iconImage", this._iconImage, true);
	}
	this._iconImage[sName](sValue);
	this._setRotationSpeed();
};

// Create internal label
// @private 
sap.m.BusyIndicator.prototype._createLabel = function(sName, sValue){
	if (!this._oLabel) {
		this._oLabel = new sap.m.Label(this.getId() + "-label", {}).addStyleClass("sapMBsyIndLabel");
		this.setAggregation("_busyLabel", this._oLabel);
	}
	this._oLabel[sName](sValue);
};

// Do the "old style" css based platform dependent animation
// @private 
sap.m.BusyIndicator.prototype._doPlatformDependent = function(){
	var $_elem = this.$();
	
	var parentElement = this.getParent() ? this.getParent()._context : '';
	//Set the color to the first parents color which is not transparent. Skip this when inside Dialog or Bar.
	if(!this._bIosStyle) {
		if(!this.getCustomIcon() && this.$().parent('.sapMBusyDialog').length === 0 && parentElement !== 'header') {
			var bFoundCss = true;
			
			while( $_elem.css('background-color') === "rgba(0, 0, 0, 0)" ) {
				$_elem = $_elem.parent();
				
				//Do not ask '#document' for its css. this will cause trouble. Therefore
				//'$_elem.parent().length' is checked
				if($_elem.parent().length == 0) {
					bFoundCss = false;
					break;
				}
			}
			//This is the default color
			var sBColor = bFoundCss? $_elem.css('background-color') : this._sBColor;
			this.$().children().children('.sapMSpinBar3').children('.sapMSpinBar4').css('background-color', sBColor);
		}
	}
};

// Set the rotation speed of the image
// @private 
sap.m.BusyIndicator.prototype._setRotationSpeed = function(){

	if(!this._iconImage) return;

	if(jQuery.support.cssAnimations){
		var $icon = this._iconImage.$();
		var sRotationSpeed = this.getCustomIconRotationSpeed() + "ms";
		$icon.css("-webkit-animation-duration", sRotationSpeed)
			.css("animation-duration", sRotationSpeed);
		//Bug in Chrome: After changing height of image -> changing the rotationspeed will have no affect
		//chrome needs a rerendering of this element.
		$icon.css("display", "none");
		setTimeout(function() {
			$icon.css("display", "inline");
		}, 0);
	} else { // IE9
		this._rotateCustomIcon();
	}
};

//Animate custom icon in IE9
//@private
sap.m.BusyIndicator.prototype._rotateCustomIcon = function(){

	if(!this._iconImage){
		return;
	}
	var $icon = this._iconImage.$();

	// stop if the custom icon is not available or hidden:
	if(!$icon[0] || !$icon[0].offsetWidth){
		return;
	}

	var iRotationSpeed = this.getCustomIconRotationSpeed();
	if(!iRotationSpeed) return;

	if(!this._fnRotateCustomIcon){
		this._fnRotateCustomIcon = jQuery.proxy(this._rotateCustomIcon, this);
	}
	var fnRotateCustomIcon = this._fnRotateCustomIcon;

	if(!this._$CustomRotator){
		this._$CustomRotator = jQuery({deg: 0});
	}
	var $rotator = this._$CustomRotator;

	if($rotator.running){
		return;
	}

	// restart animation
	$rotator[0].deg = 0;

	$rotator.animate({deg: 360}, {
		duration: iRotationSpeed,
		easing: "linear",
		step: function(now) {
			$rotator.running = true;
			$icon.css("-ms-transform", 'rotate(' + now + 'deg)');
		},
		complete: function(){
			$rotator.running = false;
			window.setTimeout(fnRotateCustomIcon, 10);
		}
	});
};

sap.m.BusyIndicator.prototype.onBeforeRendering = function(){
	this._cancelAnimation();
};

sap.m.BusyIndicator.prototype.onAfterRendering = function(){
	if(this._bUseSvg) {
		return; // do nothing, svg animates itself
	}else if(this._bUseCanvas) {
		this._doCanvas();
	} else {
		this._doPlatformDependent();
	};
	
};

sap.m.BusyIndicator.prototype.setText = function(sText){
	this.setProperty("text", sText, true);
	this._createLabel("setText", sText);
	return this;
};

sap.m.BusyIndicator.prototype.setTextDirection = function(sDirection){
	this.setProperty("textDirection", sDirection, true);
	this._createLabel("setTextDirection", sDirection);
	return this;
};

sap.m.BusyIndicator.prototype.setCustomIcon = function(iSrc){
	this.setProperty("customIcon", iSrc, false);
	this._createCustomIcon("setSrc", iSrc);
	return this;
};

sap.m.BusyIndicator.prototype.setCustomIconRotationSpeed = function(iSpeed){
	if(isNaN(iSpeed) || iSpeed < 0){
		iSpeed = 0;
	}
	if(iSpeed !== this.getCustomIconRotationSpeed()) {
		this.setProperty("customIconRotationSpeed", iSpeed, true);
		this._setRotationSpeed();
	}
	return this;
};

sap.m.BusyIndicator.prototype.setCustomIconDensityAware = function(bAware){
	this.setProperty("customIconDensityAware", bAware, true);
	this._createCustomIcon("setDensityAware", bAware);
	return this;
};

sap.m.BusyIndicator.prototype.setCustomIconWidth = function(sWidth){
	this.setProperty("customIconWidth", sWidth, true);
	this._createCustomIcon("setWidth", sWidth);
	return this;
};

sap.m.BusyIndicator.prototype.setCustomIconHeight = function(sHeight){
	this.setProperty("customIconHeight", sHeight, true);
	this._createCustomIcon("setHeight", sHeight);
	return this;
};

sap.m.BusyIndicator.prototype.setDesign = function(sDesign) {
	this.setProperty("design", sDesign, true);
	this.$().toggleClass("sapMBusyIndicatorLight", (this.getDesign() === "light"));
	this.$().toggleClass("sapMBusyIndicatorDark", (this.getDesign() === "dark"));
	return this;
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 *
 * The MessageBar.API.js "setVisible" function is enhanced in order to
 * toggle the "visibility:hidden;" attribute over the control.
 */
sap.m.BusyIndicator.prototype.setVisible = function(bVisible){
	var oDomRef = this.getDomRef();
	//only suppress rerendering when it's already rendered
	this.setProperty("visible", bVisible, !!oDomRef);
	
	if(oDomRef){
		this.getDomRef().style.visibility = bVisible? "visible" : "hidden";
		if(bVisible && !this._animationId){
			this._animateCanvas();
		}
	}
	
	return this;
};

}; // end of sap/m/BusyIndicator.js
if ( !jQuery.sap.isDeclared('sap.m.Button') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Button.
jQuery.sap.declare("sap.m.Button");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Button.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getType type} : sap.m.ButtonType (default: sap.m.ButtonType.Default)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Button#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Button#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Button
 */
sap.ui.core.Control.extend("sap.m.Button", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"type" : {type : "sap.m.ButtonType", group : "Appearance", defaultValue : sap.m.ButtonType.Default},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"iconFirst" : {type : "boolean", group : "Appearance", defaultValue : true},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconDensityAware" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"tap" : {}, 
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Button with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Button.extend
 * @function
 */

sap.m.Button.M_EVENTS = {'tap':'tap','press':'press'};


/**
 * Getter for property <code>text</code>.
 * Button text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Button#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setText
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type of a button (e.g. Default, Accept, Reject, Back, etc.)
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.m.ButtonType} the value of property <code>type</code>
 * @public
 * @name sap.m.Button#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.m.ButtonType} oType  new value for property <code>type</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setType
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the button.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Button#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Button#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible buttons are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Button#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setVisible
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.Button#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setIcon
 * @function
 */


/**
 * Getter for property <code>iconFirst</code>.
 * If set to true (default), the display sequence is 1. icon 2. control text
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * @name sap.m.Button#getIconFirst
 * @function
 */

/**
 * Setter for property <code>iconFirst</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconFirst  new value for property <code>iconFirst</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setIconFirst
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * The source property when this icon is tapped. Graphical element is changed to the new source as long as the icon is tapped.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.Button#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.Button#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setIconDensityAware
 * @function
 */


/**
 * Event is fired when the user taps the control. (This event is deprecated, use the press event instead) 
 *
 * @name sap.m.Button#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Button</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Button</code>.<br/> itself. 
 *  
 * Event is fired when the user taps the control. (This event is deprecated, use the press event instead) 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.
 *
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#attachTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Button</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#detachTap
 * @function
 */

/**
 * Fire event tap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Button#fireTap
 * @function
 */


/**
 * Event is fired when the user clicks on the control. 
 *
 * @name sap.m.Button#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Button</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Button</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.
 *
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Button</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Button#firePress
 * @function
 */


// Start of sap\m\Button.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.call(sap.m.Button.prototype);
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * Function is called to define the behavior for the control.
 *
 * @private
 */
sap.m.Button.prototype.init = function() {
	this._isPlatformDependent = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true";
};

/**
 * Function is called when exiting the control.
 *
 * @private
 */
sap.m.Button.prototype.exit = function(oEvent) {

	// destroy image controls if initialized
	if (this._image) {
		this._image.destroy();
	}

	if (this._iconBtn) {
		this._iconBtn.destroy();
	}
};

/**
 * Function is called when touchstart occurs on button .
 *
 * @private
 */
sap.m.Button.prototype.ontouchstart = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the button
	oEvent.setMarked();

	// change the source only when the first finger is on the control, the
	// following fingers doesn't affect
	if (oEvent.targetTouches.length === 1) {

		// set active button state
		this._activeButton();

		// set target which started the event
		this._target = oEvent.target;
	}
};

/**
 * Function is called when touchend occurs on button .
 *
 * @private
 */
sap.m.Button.prototype.ontouchend = function(oEvent) {

	// set inactive button state
	this._inactiveButton();
};

/**
 * Function is called when tap occurs on button.
 *
 * @private
 */
sap.m.Button.prototype.ontap = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the button
	oEvent.setMarked();

	// fire tap event
	if (this.getEnabled()) {

		// if target is empty set target (specially for selenium test)
		if (!this._target) {
			this._target = oEvent.target;
		}

		// check if target which started the event is the same
		if ((!!this._target) && (this._target === oEvent.target)) {
			this.fireTap({/* no parameters */}); // (This event is deprecated, use the "press" event instead)
			this.firePress({/* no parameters */});
		}
	}

	// reset target which started the event
	delete this._target;
};

/**
 * Handle the key down event for SPACE and ENTER.
 * This implementation differs from that of commons button.
 * Commons listens to the click event and ignores touchstart.
 * @param {jQuery.Event} oEvent - the keyboard event.
 * @private
 */
sap.m.Button.prototype.onkeydown = function(oEvent) {

	if (oEvent.which === jQuery.sap.KeyCodes.SPACE || oEvent.which === jQuery.sap.KeyCodes.ENTER) {

		// mark the event for components that needs to know if the event was handled by the button
		oEvent.setMarked();

		// set active button state
		this._activeButton();

		// set target which started the event
		this._target = oEvent.target;
	}
};

/**
 * Handle the key up event for SPACE and ENTER.
 *
 * @param {jQuery.Event} oEvent - the keyboard event.
 * @private
 */
sap.m.Button.prototype.onkeyup = function(oEvent) {

	// if keydown isn't caught by button, ignore the keyup.
	if (!this._target) {
		return;
	}

	this._target = null;

	if (oEvent.which === jQuery.sap.KeyCodes.SPACE || oEvent.which === jQuery.sap.KeyCodes.ENTER) {

		// mark the event for components that needs to know if the event was handled by the button
		oEvent.setMarked();

		// set inactive button state
		this._inactiveButton();
		this.firePress({/* no parameters */});
	}
};

/**
 * Ensure that the active button state is removed by focus loss.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Button.prototype.onfocusout = function(oEvent) {

	// set inactive button state
	this._inactiveButton();
};

/**
 * Function is called when button is active.
 *
 * @private
 */
sap.m.Button.prototype._activeButton = function() {
	this.$().addClass("sapMBtnActive");

	// handling active icon
	if (this.getEnabled()) {
		if (this.getIcon() && this.getActiveIcon() && this._image instanceof sap.m.Image) {
			this._image.setSrc(this.getActiveIcon());
		}
	}
};

/**
 * Function is called when button is inactive.
 *
 * @private
 */
sap.m.Button.prototype._inactiveButton = function() {
	this.$().removeClass("sapMBtnActive");

	// handling active icon
	if (this.getEnabled()) {
		if (this.getIcon() && this.getActiveIcon() && this._image instanceof sap.m.Image) {
			this._image.setSrc(this.getIcon());
		}
	}
};

/**
 * Function is called when image control needs to be loaded.
 *
 * @private
 */
sap.m.Button.prototype._getImage = function(sImgId, sSrc, sActiveSrc, bIconDensityAware) {

	// check if image source has changed - if yes destroy and reset image control
	if(this._image && (this._image.getSrc() != sSrc)){
		this._image.destroy();
		this._image = undefined;
	}

	// update or create image control
	var oImage = this._image;

	if (!!oImage) {

		oImage.setSrc(sSrc);
		if(oImage instanceof sap.m.Image) {
			oImage.setActiveSrc(sActiveSrc);
			oImage.setDensityAware(bIconDensityAware);
		}
	} else {

		oImage = sap.ui.core.IconPool.createControlByURI({
			id: sImgId,
			src : sSrc,
			activeSrc : sActiveSrc,
			densityAware : bIconDensityAware
		}, sap.m.Image).addStyleClass("sapMBtnCustomIcon").setParent(this, null, true);
	}

	return this._image = oImage;
};

/**
 * Function is called when internal image control needs to be loaded.
 *
 * @private
 */
sap.m.Button.prototype._getInternalIconBtn = function(sImgId, sSrc) {
	var oIcon = this._iconBtn;

	if (!!oIcon) {
		oIcon.setSrc(sSrc);
	} else {
		oIcon = sap.ui.core.IconPool.createControlByURI(sSrc, sap.m.Image);
	}

	return this._iconBtn = oIcon;
};
}; // end of sap/m/Button.js
if ( !jQuery.sap.isDeclared('sap.m.Carousel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Carousel.
jQuery.sap.declare("sap.m.Carousel");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Carousel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getLoop loop} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShowPageIndicator showPageIndicator} : boolean (default: true)</li>
 * <li>{@link #getPageIndicatorPlacement pageIndicatorPlacement} : sap.m.PlacementType (default: sap.m.PlacementType.Bottom)</li>
 * <li>{@link #getShowBusyIndicator showBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getBusyIndicatorSize busyIndicatorSize} : sap.ui.core.CSSSize (default: '6em')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getActivePage activePage} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Carousel#event:loadPage loadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Carousel#event:unloadPage unloadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Carousel#event:pageChanged pageChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Carousel control can be used to navigate through a list of sap.m controls just like flipping through the pages of a book by swiping right or left. An indicator shows the current position within the control list. When displayed in a desktop browser, a left- and right-arrow button is displayed on the carousel's sides, which can be used to navigate through the carousel.
 * 
 * Note: when displa Internet Explorer 9, page changes are not animated.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Carousel
 */
sap.ui.core.Control.extend("sap.m.Carousel", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"next", "previous"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"loop" : {type : "boolean", group : "Misc", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"showPageIndicator" : {type : "boolean", group : "Appearance", defaultValue : true},
		"pageIndicatorPlacement" : {type : "sap.m.PlacementType", group : "Appearance", defaultValue : sap.m.PlacementType.Bottom},
		"showBusyIndicator" : {type : "boolean", group : "Appearance", defaultValue : true, deprecated: true},
		"busyIndicatorSize" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '6em', deprecated: true}
	},
	defaultAggregation : "pages",
	aggregations : {
    	"pages" : {type : "sap.ui.core.Control", multiple : true, singularName : "page"}
	},
	associations : {
		"activePage" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"loadPage" : {deprecated: true}, 
		"unloadPage" : {deprecated: true}, 
		"pageChanged" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Carousel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Carousel.extend
 * @function
 */

sap.m.Carousel.M_EVENTS = {'loadPage':'loadPage','unloadPage':'unloadPage','pageChanged':'pageChanged'};


/**
 * Getter for property <code>height</code>.
 * The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.Carousel#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Carousel#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setWidth
 * @function
 */


/**
 * Getter for property <code>loop</code>.
 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>loop</code>
 * @public
 * @name sap.m.Carousel#getLoop
 * @function
 */

/**
 * Setter for property <code>loop</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLoop  new value for property <code>loop</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setLoop
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Shows or hides the carousel.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Carousel#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setVisible
 * @function
 */


/**
 * Getter for property <code>showPageIndicator</code>.
 * Show or hide carousel's page indicator.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPageIndicator</code>
 * @public
 * @name sap.m.Carousel#getShowPageIndicator
 * @function
 */

/**
 * Setter for property <code>showPageIndicator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPageIndicator  new value for property <code>showPageIndicator</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setShowPageIndicator
 * @function
 */


/**
 * Getter for property <code>pageIndicatorPlacement</code>.
 * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
 *
 * Default value is <code>Bottom</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>pageIndicatorPlacement</code>
 * @public
 * @name sap.m.Carousel#getPageIndicatorPlacement
 * @function
 */

/**
 * Setter for property <code>pageIndicatorPlacement</code>.
 *
 * Default value is <code>Bottom</code> 
 *
 * @param {sap.m.PlacementType} oPageIndicatorPlacement  new value for property <code>pageIndicatorPlacement</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setPageIndicatorPlacement
 * @function
 */


/**
 * Getter for property <code>showBusyIndicator</code>.
 * Show or hide busy indicator in the carousel when loading pages after swipe.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showBusyIndicator</code>
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * @name sap.m.Carousel#getShowBusyIndicator
 * @function
 */

/**
 * Setter for property <code>showBusyIndicator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowBusyIndicator  new value for property <code>showBusyIndicator</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * @name sap.m.Carousel#setShowBusyIndicator
 * @function
 */


/**
 * Getter for property <code>busyIndicatorSize</code>.
 * Size of the busy indicators which can be displayed in the carousel.
 *
 * Default value is <code>6em</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>busyIndicatorSize</code>
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * @name sap.m.Carousel#getBusyIndicatorSize
 * @function
 */

/**
 * Setter for property <code>busyIndicatorSize</code>.
 *
 * Default value is <code>6em</code> 
 *
 * @param {sap.ui.core.CSSSize} sBusyIndicatorSize  new value for property <code>busyIndicatorSize</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * @name sap.m.Carousel#setBusyIndicatorSize
 * @function
 */


/**
 * Getter for aggregation <code>pages</code>.<br/>
 * The content which the carousel displays.
 * 
 * <strong>Note</strong>: this is the default aggregation for Carousel.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Carousel#getPages
 * @function
 */


/**
 * Inserts a page into the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the page should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the page is inserted at 
 *             the last position        
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#insertPage
 * @function
 */

/**
 * Adds some page <code>oPage</code> 
 * to the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#addPage
 * @function
 */

/**
 * Removes an page from the aggregation named <code>pages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vPage the page to remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * @name sap.m.Carousel#removePage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Carousel#removeAllPages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Carousel#indexOfPage
 * @function
 */
	

/**
 * Destroys all the pages in the aggregation 
 * named <code>pages</code>.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#destroyPages
 * @function
 */


/**
 * Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
 * The getter will return the control id
 *
 * @return {string} Id of the element which is the current target of the <code>activePage</code> association, or null
 * @public
 * @name sap.m.Carousel#getActivePage
 * @function
 */

/**
 * Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
 * The getter will return the control id
 *
 * @param {string | sap.ui.core.Control} vActivePage 
 *    Id of an element which becomes the new target of this <code>activePage</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setActivePage
 * @function
 */


	
/**
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page 
 *
 * @name sap.m.Carousel#loadPage
 * @event
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.pageId Id of the page which will be loaded
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 *  
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 *
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @name sap.m.Carousel#attachLoadPage
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @name sap.m.Carousel#detachLoadPage
 * @function
 */

/**
 * Fire event loadPage to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code> Id of the page which will be loaded</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @name sap.m.Carousel#fireLoadPage
 * @function
 */


/**
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page. 
 *
 * @name sap.m.Carousel#unloadPage
 * @event
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.pageId Id of the page which will be unloaded
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 *  
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 *
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @name sap.m.Carousel#attachUnloadPage
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @name sap.m.Carousel#detachUnloadPage
 * @function
 */

/**
 * Fire event unloadPage to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code> Id of the page which will be unloaded</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.18.7. 
 * Since 1.18.7 pages are no longer loaded or unloaded
 * @name sap.m.Carousel#fireUnloadPage
 * @function
 */


/**
 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions. 
 *
 * @name sap.m.Carousel#pageChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.oldActivePageId Id of the page which was active before the page change.
 * @param {string} oControlEvent.getParameters.newActivePageId Id of the page which is active after the page change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 *  
 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 *
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#attachPageChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#detachPageChanged
 * @function
 */

/**
 * Fire event pageChanged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oldActivePageId' of type <code>string</code> Id of the page which was active before the page change.</li>
 * <li>'newActivePageId' of type <code>string</code> Id of the page which is active after the page change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Carousel#firePageChanged
 * @function
 */


/**
 * Call this method to display the next page (corresponds to a swipe right). Returns 'this' for method chaining.
 *
 * @name sap.m.Carousel.prototype.next
 * @function

 * @type sap.m.Carousel
 * @public
 */


/**
 * Call this method to display the previous page (corresponds to a swipe left). Returns 'this' for method chaining.
 *
 * @name sap.m.Carousel.prototype.previous
 * @function

 * @type sap.m.Carousel
 * @public
 */


// Start of sap\m\Carousel.js
jQuery.sap.require('sap.ui.thirdparty.mobify-carousel'); // unlisted dependency retained



//Constants convenient class selections
sap.m.Carousel._INNER_SELECTOR = ".sapMCrslInner";
sap.m.Carousel._PAGE_INDICATOR_SELECTOR = ".sapMCrslBulleted";
sap.m.Carousel._HUD_SELECTOR = ".sapMCrslHud";
sap.m.Carousel._ITEM_SELECTOR = ".sapMCrslItem";
sap.m.Carousel._LEFTMOST_CLASS = "sapMCrslLeftmost";
sap.m.Carousel._RIGHTMOST_CLASS = "sapMCrslRightmost";
sap.m.Carousel._LATERAL_CLASSES = "sapMCrslLeftmost sapMCrslRightmost";
sap.m.Carousel._bIE9 = (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10);

/**
 * Initialize member variables which are needed later on.
 * 
 * @private
 */
sap.m.Carousel.prototype.init = function() {
	//Scroll container list for clean- up
	this._aScrollContainers = [];
	
	//Initialize '_fnAdjustAfterResize' to be used by window
	//'resize' event
	this._fnAdjustAfterResize = jQuery.proxy(function() {
		var $carouselInner = this.$().find(sap.m.Carousel._INNER_SELECTOR);
		this._oMobifyCarousel.resize($carouselInner);
	}, this);
};



/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.Carousel.prototype.exit = function() {
	if(this._oMobifyCarousel) {
		this._oMobifyCarousel.destroy();
		delete this._oMobifyCarousel;
	}
	
	if(this._oArrowLeft) {
		this._oArrowLeft.destroy();
		delete this._oArrowLeft;
	}
	if(this._oArrowRight) {
		this._oArrowRight.destroy();
		delete this._oArrowRight;
	}
	
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	this.$().off('afterSlide');
	
	this._cleanUpScrollContainer();
	this._fnAdjustAfterResize = null;
	this._aScrollContainers = null;
	if(!sap.m.Carousel._bIE9 && this._$InnerDiv) {
		jQuery(window).off("resize", this._fnAdjustAfterResize);
	}
	this._$InnerDiv = null;
};

/**
 * Housekeeping for scroll containers: Removes content for each container,
 * destroys the contianer and clears the local container list.
 * 
 * @private
 */
sap.m.Carousel.prototype._cleanUpScrollContainer = function() {
	var oScrollCont;
	while (this.length > 0) {
		oScrollCont = this._aScrollContainers.pop();
		oScrollCont.removeAllContent();
		if(oScrollCont && typeof oScrollCont.destroy === 'function') {
			oScrollCont.destroy();
		}
	}
};


/**
 * Cleans up bindings
 * 
 * @private
 */
sap.m.Carousel.prototype.onBeforeRendering = function() {
	//make sure, active page has an initial value
	var sActivePage = this.getActivePage();
	if(!sActivePage && this.getPages().length > 0) {
		//if no active page is specified, set first page.
		this.setAssociation("activePage", this.getPages()[0].getId(), true);
	}
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	if(!sap.m.Carousel._bIE9 && this._$InnerDiv) {
		jQuery(window).off("resize", this._fnAdjustAfterResize);
	}
	return this;
};

/**
 * When this method is called for the first time, a swipe-view instance is created which is renders
 * itself into its dedicated spot within the DOM tree. This instance is used throughout the
 * Carousel instance's lifecycle.
 * 
 * @private
 */
sap.m.Carousel.prototype.onAfterRendering = function() {
	
	//Check if carousel has been initialized
	if(this._oMobifyCarousel) {
		//Clean up existing mobify carousel
		this._oMobifyCarousel.destroy();
	}
	//Create and initialize new carousel
	this.$().carousel();
	this._oMobifyCarousel = this.getDomRef()._carousel;
	this._oMobifyCarousel.setLoop(this.getLoop());
	this._oMobifyCarousel.setRTL(sap.ui.getCore().getConfiguration().getRTL());
	
	
	
	//Go to active page: this may be necessary after adding or
	//removing pages
	var sActivePage = this.getActivePage();
	
	if(sActivePage) {
		var iIndex = this._getPageNumber(sActivePage);
		if(isNaN(iIndex)) {
			if(this.getPages().length > 0) {
				//First page is always shown as default
				this.setAssociation("activePage", this.getPages()[0].getId(), true);
			}
		} else {
			this._oMobifyCarousel.changeAnimation('sapMCrslNoTransition');
			//mobify carousel is 1-based
			this._oMobifyCarousel.move(iIndex + 1);
		}
	}
	
	this._fnAdjustHUDVisibility(sActivePage ? (this._getPageNumber(sActivePage) + 1) : 1);
	
	//attach delegate for firing 'PageChanged' events to mobify carousel's
	//'afterSlide'
	this.$().on('afterSlide', jQuery.proxy(function(e, iPreviousSlide, iNextSlide) {
		if(iNextSlide > 0){
			this._fnAdjustHUDVisibility(iNextSlide);
			var sOldActivePageId = this.getActivePage();
			var sNewActivePageId = this.getPages()[iNextSlide -1].getId();
			this.setAssociation("activePage", sNewActivePageId, true);
			
			jQuery.sap.log.debug("sap.m.Carousel: firing pageChanged event: old page: " + sOldActivePageId 
					+ ", new page: " + sNewActivePageId);
			
			this.firePageChanged( { oldActivePageId: sOldActivePageId,
				newActivePageId: sNewActivePageId});
		}
	}, this));
	this._$InnerDiv = this.$().find(sap.m.Carousel._INNER_SELECTOR)[0];
	if(sap.m.Carousel._bIE9) {
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this._$InnerDiv, this._fnAdjustAfterResize);
	} else {
		jQuery(window).on("resize", this._fnAdjustAfterResize);
	}
};



/**
 * Sets HUD control's visibility after page has changed
 * 
 * @param iNextSlide index of the next acrtive page
 * @private
 *
 */
sap.m.Carousel.prototype._fnAdjustHUDVisibility = function(iNextSlide) {
	if (sap.ui.Device.system.desktop && !this.getLoop() && this.getPages().length > 1) {
		//update HUD arrow visibility for left- and
		//rightmost pages
		var $HUDContainer = this.$().find(sap.m.Carousel._HUD_SELECTOR);
		//clear marker classes first
		$HUDContainer.removeClass(sap.m.Carousel._LATERAL_CLASSES);
		
		if(iNextSlide === 1) {
			$HUDContainer.addClass(sap.m.Carousel._LEFTMOST_CLASS);
		} else if (iNextSlide === this.getPages().length) {
			$HUDContainer.addClass(sap.m.Carousel._RIGHTMOST_CLASS);
		}
	}
};


/**
 * Handler for 'tab previous' key event. Delegates handling to 
 * '_tabKeyPressed' function.
 * 
 * @param oEvent key event
 * @private
 *
 */
sap.m.Carousel.prototype.onsaptabprevious = function(oEvent) {
	this._bTabPrevious = true;
};

/**
 * Handler for 'tab next' key event. Delegates handling to 
 * '_tabKeyPressed' function.
 * 
 * @param oEvent key event
 * @private
 *
 */
sap.m.Carousel.prototype.onsaptabnext = function(oEvent) {
	this._bTabNext = true;
};


/**
 * Event handler for the focusin event.
 * If the focused element is the dedicated element (class sapMCrslFirstFE) at the beginning of a page, 
 * the focus is set to the end of the previous page. If the dedicated element the end of a page 
 * (class sapMCrslLastFE) is focussed, the first element of the next page is focused
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Carousel.prototype.onfocusin = function(oEvent){
	if (sap.ui.Device.system.desktop) {
		var oSourceDomRef = oEvent.target,
			iPageIndex = oSourceDomRef.getAttribute('pageIndex'),
			oNextFocusDomRef,
			oNextPage;
		//Invisible Element focused by tab previous
		if(oSourceDomRef.className === 'sapMCrslFirstFE' && this._bTabPrevious) {
			if(iPageIndex > 0) {
				iPageIndex--;
			} else if(this.getLoop()) {
				iPageIndex = this.getPages().length - 1;
			}
			
			oNextPage = this.getPages()[iPageIndex];
			oNextFocusDomRef = oNextPage.$().parent().lastFocusableDomRef();
			
		} else if(oSourceDomRef.className === 'sapMCrslLastFE' && this._bTabNext) {
			//Invisible Element focused by tab next
			if(iPageIndex < this.getPages().length - 1) {
				iPageIndex++;
			} else if(this.getLoop()) {
				iPageIndex = 0;
			}
			
			oNextPage = this.getPages()[iPageIndex];
			oNextFocusDomRef = oNextPage.$().parent().firstFocusableDomRef();
		}
		
		if(oNextFocusDomRef && oNextPage) {
			var fnRequestFocus = function() {
				oNextFocusDomRef.focus();
			};
			this._oMobifyCarousel.changeAnimation('', fnRequestFocus, this);
			this.setActivePage(oNextPage.getId());
		}
		this._bTabPrevious = false;
		this._bTabNext = false;
	}
};





/**
 * API method to set carousel's active page during runtime.
 * 
 * @param vPage Id of the page or page which shall become active
 * @override
 *
 */
sap.m.Carousel.prototype.setActivePage = function (vPage) {
	var sPagedId = null,
		bHasMoved = false;
	if(typeof(vPage) == 'string') {
		sPagedId = vPage;
	} else if (vPage instanceof sap.ui.core.Control) {
		sPagedId = vPage.getId();
	}
	
	if(sPagedId) {
		if(this._oMobifyCarousel) {
			var iPageNr = this._getPageNumber(sPagedId);
			
			if(!isNaN(iPageNr)) {
				//mobify carousel's move function is '1' based
				this._oMobifyCarousel.move(iPageNr + 1);
				bHasMoved = true;
			} 
		}
	} 
	
	if(bHasMoved || !this._oMobifyCarousel) {
		//active page shall only be set, if vPage has been 
		//found amongst the carousel's pages or if carousel has not been 
		//rendered yet
		this.setAssociation("activePage", sPagedId, true);
	} else {
		jQuery.sap.log.warning("sap.m.Carousel.prototype.setActivePage: Cannot set active page " + 
	 	"because it is neither of type 'string' nor a 'sap.ui.core.Control'");
	}
	
	return this;
};



/**
 * API method to set the carousel's height
 *
 * @param oHeight the new height as CSSSize
 * @public
 * @override
 */
sap.m.Carousel.prototype.setHeight = function(oHeight) {
	//do suppress rerendering
	this.setProperty("height", oHeight, true);
	this.$().css("height", oHeight);
	return this;
};

/**
 * API method to set the carousel's width
 *
 * @param oWidth the new width as CSSSize
 * @public
 * @override
 */
sap.m.Carousel.prototype.setWidth = function(oWidth) {
	//do suppress rerendering
	this.setProperty("width", oWidth, true);
	this.$().css("width", oWidth);
	return this;
};

/**
 * API method to place the page inidicator. 
 *
 * @param sPlacement either sap.m.PlacementType.Top or sap.m.PlacementType.Bottom
 * @public
 * @override
 */
sap.m.Carousel.prototype.setPageIndicatorPlacement = function(sPlacement) {
	if(sap.m.PlacementType.Top != sPlacement &&
			sap.m.PlacementType.Bottom != sPlacement) {
		jQuery.sap.assert(false, "sap.m.Carousel.prototype.setPageIndicatorPlacement: invalid value '" + 
				sPlacement + "'. Valid values: sap.m.PlacementType.Top, sap.m.PlacementType.Bottom." +
						"\nUsing default value sap.m.PlacementType.Bottom");
		sPlacement = sap.m.PlacementType.Bottom;
	}
	
	//do suppress rerendering
	this.setProperty("pageIndicatorPlacement", sPlacement, true);
	
	var $PageIndicator = this.$().find(sap.m.Carousel._PAGE_INDICATOR_SELECTOR); 
	
	//set placement regardless of whether indicator is visible: it may become
	//visible later on and then it should be at the right place
	if(sap.m.PlacementType.Top === sPlacement) {
		this.$().prepend($PageIndicator);
		$PageIndicator.removeClass('sapMCrslBottomOffset');
		this.$().find(sap.m.Carousel._ITEM_SELECTOR).removeClass('sapMCrslBottomOffset');
	} else {
		this.$().append($PageIndicator);
		$PageIndicator.addClass('sapMCrslBottomOffset');
		this.$().find(sap.m.Carousel._ITEM_SELECTOR).addClass('sapMCrslBottomOffset');
	}
	return this;
};


/**
 * API method to set whether the carousel should display the page indicator
 *
 * @param bShowPageIndicator the new show property
 * @public
 * @override
 */
sap.m.Carousel.prototype.setShowPageIndicator = function(bShowPageIndicator) {
	
	var $PageInd = this.$().find(sap.m.Carousel._PAGE_INDICATOR_SELECTOR);
	
	bShowPageIndicator ? $PageInd.show() : $PageInd.hide();
	
	//do suppress rerendering
	this.setProperty("showPageIndicator", bShowPageIndicator, true);
	return this;
};



/**
 * API method to set whether the carousel should loop, i.e
 * show the first page after the last page is reached and vice 
 * versa.
 *
 * @param bLoop the new loop property
 * @public
 * @override
 */
sap.m.Carousel.prototype.setLoop = function(bLoop) {
	//do suppress rerendering
	this.setProperty("loop", bLoop, true);
	if(this._oMobifyCarousel) {
		this._oMobifyCarousel.setLoop(bLoop);
	}
	return this;
};

/**
 * Gets the icon of the requested arrow (left/right).
 * @private
 * @param sName left or right
 * @returns icon of the requested arrow
 */
sap.m.Carousel.prototype._getNavigationArrow = function(sName) {
	jQuery.sap.require("sap.ui.core.IconPool");
	var mProperties = {
		src : "sap-icon://navigation-" + sName + "-arrow"
	};
	
	if (sName === "left") {
		if (!this._oArrowLeft) {
			this._oArrowLeft = sap.m.ImageHelper.getImageControl(this.getId() + "-arrowScrollLeft", this._oArrowLeft, this, mProperties);
		}
		return this._oArrowLeft;
	} else if (sName === "right") {
		if (!this._oArrowRight) {
			this._oArrowRight = sap.m.ImageHelper.getImageControl(this.getId() + "-arrowScrollRight", this._oArrowRight, this, mProperties);
		}
		return this._oArrowRight;
	}
};


/**
 * Private method that places a given page control into 
 * a scroll container which does not scroll. That container does
 * not scroll itself. This is necessary to achieve the 100% height 
 * effect with an offset for the page indicator. 
 *
 * @param oPage the page to check
 * @private
 */
sap.m.Carousel.prototype._createScrollContainer = function(oPage) {
	
	var cellClasses = oPage instanceof sap.m.Image ? "sapMCrslItemTableCell sapMCrslImg" : "sapMCrslItemTableCell",
		oContent = new sap.ui.core.HTML({
		content :	"<div class='sapMCrslItemTable'>" +
						"<div class='" + cellClasses + "'></div>" +
					"</div>",
		afterRendering : function(e) {
			var rm = sap.ui.getCore().createRenderManager();
			rm.render(oPage, this.getDomRef().firstChild);
			rm.destroy();
		}
	});
	
	var oScrollContainer = new sap.m.ScrollContainer({
		horizontal: false,
		vertical: false,
		content:[oContent],
		width:'100%',
		height:'100%',
	}); 
	oScrollContainer.setParent(this, null, true);
	this._aScrollContainers.push(oScrollContainer); 
	return oScrollContainer; 
};




/**
 * API method to show the next page in the page list.
 * @public
 */
sap.m.Carousel.prototype.previous = function () {
	if(this._oMobifyCarousel) {
		this._oMobifyCarousel.prev();
	} else {
		jQuery.sap.log.warning("Unable to execute sap.m.Carousel.previous: carousel must be rendered first.");
	}
	return this;
}; 

/**
 * API method to show the previous page in the page list.
 * @public
 */
sap.m.Carousel.prototype.next = function () {
	if(this._oMobifyCarousel) {
		this._oMobifyCarousel.next();
	} else {
		jQuery.sap.log.warning("Unable to execute sap.m.Carousel.next: carousel must be rendered first.");
	}
	return this;
};



/**
 * Determines the position of a given page in the carousel's page list
 * 
 * @return the position of a given page in the carousel's page list or 'undefined' if it does not exist in the list.
 * @private
 */
sap.m.Carousel.prototype._getPageNumber = function(sPagedId) {
	var i, result;
	
	for(i=0; i<this.getPages().length; i++) {
		if(this.getPages()[i].getId() == sPagedId) {
			result = i;
			break;
		}
	}
	return result;
};

//DEPRECATED METHODS


/**
 * API method to set whether the carousel should display the busy indicators.
 * This property has been deprecated since 1.18.7. Does nothing and returns the carousel reference.
 *
 * @deprecated
 * @public
 */
sap.m.Carousel.prototype.setShowBusyIndicator = function() {
	jQuery.sap.log.warning("sap.m.Carousel: Deprecated function 'setShowBusyIndicator' called. " + 
 	"Does nothing.");
	return this;
};

/**
 * API method to check whether the carousel should display the busy indicators.
 * This property has been deprecated since 1.18.7. Always returns false,
 *
 * @deprecated
 * @public
 */
sap.m.Carousel.prototype.getShowBusyIndicator = function() {
	jQuery.sap.log.warning("sap.m.Carousel: Deprecated function 'getShowBusyIndicator' called. " + 
 	"Does nothing.");
	return false;
};

/**
 * API method to set the carousel's busy indicator size.
 * This property has been deprecated since 1.18.7. Does nothing and returns the carousel reference.
 *
 * @deprecated
 * @public
 */
sap.m.Carousel.prototype.setBusyIndicatorSize = function() {
	jQuery.sap.log.warning("sap.m.Carousel: Deprecated function 'setBusyIndicatorSize' called. " + 
 	"Does nothing.");
	return this;
};


/**
 * API method to retrieve the carousel's busy indicator size.
 * This property has been deprecated since 1.18.6. Always returns an empty string.
 *
 * @deprecated
 * @public
 */
sap.m.Carousel.prototype.getBusyIndicatorSize = function() {
	jQuery.sap.log.warning("sap.m.Carousel: Deprecated function 'getBusyIndicatorSize' called. " + 
 	"Does nothing.");
	return "";
};



}; // end of sap/m/Carousel.js
if ( !jQuery.sap.isDeclared('sap.m.CheckBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.CheckBox.
jQuery.sap.declare("sap.m.CheckBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new CheckBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.CheckBox#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * CheckBox control
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.CheckBox
 */
sap.ui.core.Control.extend("sap.m.CheckBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"selected" : {type : "boolean", group : "Data", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"activeHandling" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.CheckBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.CheckBox.extend
 * @function
 */

sap.m.CheckBox.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>selected</code>.
 * Contains the state of the control whether it is flagged with a check mark, or not
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.m.CheckBox#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setSelected
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible control is not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.CheckBox#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Using this property, the control could be disabled, if required.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.CheckBox#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setEnabled
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.CheckBox#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setName
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the check box
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.CheckBox#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setText
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.CheckBox#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setTextDirection
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of Label
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.CheckBox#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setWidth
 * @function
 */


/**
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switched off, there will not be visual changes on active state. Default value is 'true'
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * @name sap.m.CheckBox#getActiveHandling
 * @function
 */

/**
 * Setter for property <code>activeHandling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bActiveHandling  new value for property <code>activeHandling</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setActiveHandling
 * @function
 */


/**
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox. 
 *
 * @name sap.m.CheckBox#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.selected Checks whether the CheckBox is flagged or not flagged.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.CheckBox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.CheckBox</code>.<br/> itself. 
 *  
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.CheckBox</code>.<br/> itself.
 *
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.CheckBox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selected' of type <code>boolean</code> Checks whether the CheckBox is flagged or not flagged.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.CheckBox#fireSelect
 * @function
 */


// Start of sap\m\CheckBox.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.call(sap.m.CheckBox.prototype);

sap.m.CheckBox.prototype.init = function() {
	this.addActiveState(this);
	jQuery.sap.require("sap.ui.core.IconPool");
	sap.ui.core.IconPool.insertFontFaceStyle();
};


/**
 * Called when the control is touched.
 *
 * @private
 */
sap.m.CheckBox.prototype.ontouchstart = function(oEvent) {
	//for control who need to know if they should handle events from the CheckBox control
	oEvent.originalEvent._sapui_handledByControl = true;
};

sap.m.CheckBox.prototype.setSelected = function(bSelected) {
	bSelected = !!bSelected;
	if (bSelected == this.getSelected()) {
		return this;
	}
	
	this.$("CbBg").toggleClass("sapMCbMarkChecked", bSelected);
	var oCheckBox = this.getDomRef("CB");
	if (oCheckBox){
		bSelected ? oCheckBox.setAttribute('checked', 'checked') : oCheckBox.removeAttribute('checked');
	}
	this.setProperty("selected", bSelected, true);
	return this;
};

/**
 * Function is called when CheckBox is tapped.
 *
 * @private
 */
sap.m.CheckBox.prototype.ontap = function(oEvent) {
	if (this.getEnabled()) {
		var bSelected = !this.getSelected();
		this.setSelected(bSelected);
		this.fireSelect({selected:bSelected});
	}
};

/**
 * add ActiveState to non-supported mobile platform
 * @private
 */

sap.m.CheckBox.prototype.addActiveState = function(oControl) {
	if (sap.ui.Device.os.blackberry || (sap.ui.Device.os.android && (sap.ui.Device.os.versionStr.match(/[23]\./)))){
		oControl.addDelegate({
			ontouchstart: function(oEvent){
				jQuery(oControl.getDomRef()).addClass("sapMActive");
			},
			ontouchend: function(oEvent){
				jQuery(oControl.getDomRef()).removeClass("sapMActive");
			}
		});
	}
};

sap.m.CheckBox.prototype.setText = function(sText){
	this.setProperty("text", sText, true);
	if(this._oLabel){
		this._oLabel.setText(this.getText());
	}else{
		this._createLabel("text", this.getText());
	}
	return this;
};

sap.m.CheckBox.prototype.setWidth = function(sWidth){
	this.setProperty("width", sWidth, true);
	if(this._oLabel){
		this._oLabel.setWidth(this.getWidth());
	}else{
		this._createLabel("width", this.getWidth());
	}
	return this;
};

sap.m.CheckBox.prototype.setTextDirection = function(sDirection){
	this.setProperty("textDirection", sDirection, true);
	if(this._oLabel){
		this._oLabel.setTextDirection(this.getTextDirection());
	}else{
		this._createLabel("textDirection", this.getTextDirection());
	}
	return this;
};

sap.m.CheckBox.prototype.exit = function() {
	delete this._iTabIndex;
	if(this._oLabel){
		this._oLabel.destroy();
	}
};

sap.m.CheckBox.prototype._createLabel = function(prop, value){
	this._oLabel = new sap.m.Label(this.getId() + "-label", {
					}).addStyleClass("sapMCbLabel").setParent(this, null, true);
	this._oLabel.setProperty(prop, value, false);
};

/**
 * Event handler called when the space key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.CheckBox.prototype.onsapspace = function(oEvent) {
	this.ontap(oEvent);
	// stop browsers default behavior
	if(oEvent) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/*
 * Sets the tab index of the control
 *
 * @param {int} iTabIndex  greater than or equal -1
 * @return {sap.m.CheckBox}
 * @since 1.16
 * @protected
 */
sap.m.CheckBox.prototype.setTabIndex = function(iTabIndex) {
	this._iTabIndex = iTabIndex;
	this.$("CbBg").attr("tabindex", iTabIndex);
	return this;
};

}; // end of sap/m/CheckBox.js
if ( !jQuery.sap.isDeclared('sap.m.Column') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Column.
jQuery.sap.declare("sap.m.Column");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Column.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHAlign hAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign (default: sap.ui.core.VerticalAlign.Inherit)</li>
 * <li>{@link #getStyleClass styleClass} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMinScreenWidth minScreenWidth} : string</li>
 * <li>{@link #getDemandPopin demandPopin} : boolean (default: false)</li>
 * <li>{@link #getPopinHAlign popinHAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getPopinDisplay popinDisplay} : sap.m.PopinDisplay (default: sap.m.PopinDisplay.Block)</li>
 * <li>{@link #getMergeDuplicates mergeDuplicates} : boolean (default: false)</li>
 * <li>{@link #getMergeFunctionName mergeFunctionName} : string (default: 'getText')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getHeader header} <strong>(default aggregation)</strong> : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The column allows to define column specific properties that will be applied when rendering the List.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.Column
 */
sap.ui.core.Element.extend("sap.m.Column", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"hAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"vAlign" : {type : "sap.ui.core.VerticalAlign", group : "Appearance", defaultValue : sap.ui.core.VerticalAlign.Inherit},
		"styleClass" : {type : "string", group : "Appearance", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"minScreenWidth" : {type : "string", group : "Behavior", defaultValue : null},
		"demandPopin" : {type : "boolean", group : "Behavior", defaultValue : false},
		"popinHAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin, deprecated: true},
		"popinDisplay" : {type : "sap.m.PopinDisplay", group : "Appearance", defaultValue : sap.m.PopinDisplay.Block},
		"mergeDuplicates" : {type : "boolean", group : "Behavior", defaultValue : false},
		"mergeFunctionName" : {type : "string", group : "Misc", defaultValue : 'getText'}
	},
	defaultAggregation : "header",
	aggregations : {
    	"header" : {type : "sap.ui.core.Control", multiple : false}, 
    	"footer" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.Column with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Column.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the column. If you leave it empty then this column covers the remaining space.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Column#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setWidth
 * @function
 */


/**
 * Getter for property <code>hAlign</code>.
 * Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Control with a "textAlign" property inherits the horizontal alignment.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>hAlign</code>
 * @public
 * @name sap.m.Column#getHAlign
 * @function
 */

/**
 * Setter for property <code>hAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oHAlign  new value for property <code>hAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setHAlign
 * @function
 */


/**
 * Getter for property <code>vAlign</code>.
 * Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
 * This property does not affect the vertical alignment of header and footer.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.VerticalAlign} the value of property <code>vAlign</code>
 * @public
 * @name sap.m.Column#getVAlign
 * @function
 */

/**
 * Setter for property <code>vAlign</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.VerticalAlign} oVAlign  new value for property <code>vAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setVAlign
 * @function
 */


/**
 * Getter for property <code>styleClass</code>.
 * CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>styleClass</code>
 * @public
 * @name sap.m.Column#getStyleClass
 * @function
 */

/**
 * Setter for property <code>styleClass</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStyleClass  new value for property <code>styleClass</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setStyleClass
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Specifies whether or not the column is visible. Invisible columns are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Column#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setVisible
 * @function
 */


/**
 * Getter for property <code>minScreenWidth</code>.
 * By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
 * As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
 * 
 * sap.m.Column.MediaQuery1->Range1 = 199
 * 
 * This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
 * Please also see "demandPopin" property
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>minScreenWidth</code>
 * @public
 * @name sap.m.Column#getMinScreenWidth
 * @function
 */

/**
 * Setter for property <code>minScreenWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMinScreenWidth  new value for property <code>minScreenWidth</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setMinScreenWidth
 * @function
 */


/**
 * Getter for property <code>demandPopin</code>.
 * According to your minScreenWidth settings, the column can be hidden in different screen sizes.
 * Setting this property to true, shows this column as pop-in instead of hiding it.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>demandPopin</code>
 * @public
 * @name sap.m.Column#getDemandPopin
 * @function
 */

/**
 * Setter for property <code>demandPopin</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDemandPopin  new value for property <code>demandPopin</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setDemandPopin
 * @function
 */


/**
 * Getter for property <code>popinHAlign</code>.
 * Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Controls with a text align do not inherit the horizontal alignment.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>popinHAlign</code>
 * @public
 * @deprecated Since version 1.14. 
 * Use popinDisplay property instead.
 * @name sap.m.Column#getPopinHAlign
 * @function
 */

/**
 * Setter for property <code>popinHAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oPopinHAlign  new value for property <code>popinHAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.14. 
 * Use popinDisplay property instead.
 * @name sap.m.Column#setPopinHAlign
 * @function
 */


/**
 * Getter for property <code>popinDisplay</code>.
 * Defines the display options of pop-in.
 * Possible values are
 * 1 - "Block"(Header is displayed in first line and value field in next line.)
 * 2 - "Inline" (Value field is displayed next to the header in same line.)
 *
 * Default value is <code>sap.m.PopinDisplay.Block</code>
 *
 * @return {sap.m.PopinDisplay} the value of property <code>popinDisplay</code>
 * @public
 * @since 1.13.2
 * @name sap.m.Column#getPopinDisplay
 * @function
 */

/**
 * Setter for property <code>popinDisplay</code>.
 *
 * Default value is <code>sap.m.PopinDisplay.Block</code> 
 *
 * @param {sap.m.PopinDisplay} oPopinDisplay  new value for property <code>popinDisplay</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.2
 * @name sap.m.Column#setPopinDisplay
 * @function
 */


/**
 * Getter for property <code>mergeDuplicates</code>.
 * Set "true" to merge repeating cells(duplicates) into one.
 * Also see "mergeFunctionName" property to customize.
 * Note: this property gets disabled if any column is in pop-in!
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>mergeDuplicates</code>
 * @public
 * @since 1.16
 * @name sap.m.Column#getMergeDuplicates
 * @function
 */

/**
 * Setter for property <code>mergeDuplicates</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bMergeDuplicates  new value for property <code>mergeDuplicates</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Column#setMergeDuplicates
 * @function
 */


/**
 * Getter for property <code>mergeFunctionName</code>.
 * Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
 * Control itself uses this function to compare values of two repeating cells.
 * Default value "getText" is suitable for Label and Text control.
 * e.g. For "Icon" control "getSrc" can be used.
 * Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"
 *
 * Default value is <code>getText</code>
 *
 * @return {string} the value of property <code>mergeFunctionName</code>
 * @public
 * @since 1.16
 * @name sap.m.Column#getMergeFunctionName
 * @function
 */

/**
 * Setter for property <code>mergeFunctionName</code>.
 *
 * Default value is <code>getText</code> 
 *
 * @param {string} sMergeFunctionName  new value for property <code>mergeFunctionName</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Column#setMergeFunctionName
 * @function
 */


/**
 * Getter for aggregation <code>header</code>.<br/>
 * Control to be displayed in the column header.
 * 
 * <strong>Note</strong>: this is the default aggregation for Column.
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Column#getHeader
 * @function
 */


/**
 * Setter for the aggregated <code>header</code>.
 * @param {sap.ui.core.Control} oHeader
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setHeader
 * @function
 */
	

/**
 * Destroys the header in the aggregation 
 * named <code>header</code>.
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#destroyHeader
 * @function
 */


/**
 * Getter for aggregation <code>footer</code>.<br/>
 * Control to be displayed in the column footer.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Column#getFooter
 * @function
 */


/**
 * Setter for the aggregated <code>footer</code>.
 * @param {sap.ui.core.Control} oFooter
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setFooter
 * @function
 */
	

/**
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#destroyFooter
 * @function
 */


// Start of sap\m\Column.js
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


// default index
sap.m.Column.prototype._index = -1;

// predefined screen size
sap.m.Column.prototype._screen = "";

// default media value
sap.m.Column.prototype._media = null;

// prototype lookup
sap.m.Column.prototype._getTextAlign = sap.ui.core.Renderer.getTextAlign;

sap.m.Column.prototype._clearMedia = function() {
	if (this._media && this._minWidth) {
		sap.ui.Device.media.removeRangeSet(this.getId());
		this._media = null;
	}
};

sap.m.Column.prototype._addMedia = function() {
	if (this._minWidth) {
		sap.ui.Device.media.initRangeSet(this.getId(), [parseFloat(this._minWidth)]);
		sap.ui.Device.media.attachHandler(this._notifyResize, this, this.getId());
		this._media = sap.ui.Device.media.getCurrentRange(this.getId());
		if (this._media) {
			this._media.triggered = false;
			this._media.matches = !!this._media.from;
		}
	}
};

/**
 * Notify parent to re-render
 * Also fire media event for listeners
 *
 * @private
 */
sap.m.Column.prototype._notifyResize = function(oMedia) {
	// ignore the first call
	if (!this._media.triggered) {
		this._media.triggered = true;
		return;
	}

	// keep media info
	this._media = oMedia;
	this._media.triggered = true;
	this._media.matches = !!oMedia.from;

	// wait all events to come
	jQuery.sap.delayedCall(0, this, function() {
		var parent = this.getParent();
		this.fireEvent("media", this);
		if (parent && parent.onColumnResize) {
			parent.onColumnResize(this);
		}
	});
};

sap.m.Column.prototype._validateMinWidth = function(sWidth) {
	if (Object.prototype.toString.call(sWidth) != "[object String]") {
		throw new Error('expected string for property "minScreenWidth" of ' + this);
	}
	if (Object.keys(sap.m.ScreenSizes).indexOf(sWidth.toLowerCase()) != -1) {
		return;
	}
	if (!/^\d+(\.\d+)?(px|em|rem)$/i.test(sWidth)) {
		throw new Error('invalid CSS size("px", "em", "rem" required) or sap.m.ScreenSize enumeration for property "minScreenWidth" of ' + this);
	}
};


// Checks the given width(px or em), if it is a predefined screen value
sap.m.Column.prototype._isWidthPredefined = function(sWidth) {
	var that = this,
		unit = sWidth.replace(/[^a-z]/g, ""),
		baseFontSize = parseFloat(sap.m.BaseFontSize) || 16;

	jQuery.each(sap.m.ScreenSizes, function(screen, size) {
		if (unit != "px") {
			size /= baseFontSize;
		}
		if (size + unit == sWidth) {
			that._minWidth = this + "px";
			that._screen = screen;
			return false;
		}
	});
};

/**
 * Apply text alignment of the Column to Text/Label/Link...
 *
 * TODO: This is so ugly to check content functions
 * instead we should document how to use our controls
 * to inherit text-alignment and we should add a new
 * sap.ui.core.TextAlign type called "Inherit"
 *
 * @protected *
 * @param {sap.ui.core.Control} oControl List control
 * @param {String} [sAlign] TextAlign enumeration
 * @return {sap.ui.core.Control} oControl
 */
sap.m.Column.prototype.applyAlignTo = function(oControl, sAlign) {
	if (oControl.getMetadata().getProperties().textAlign) {
		sAlign = sAlign || this.getHAlign();
		if (oControl.getTextAlign() != sAlign) {
			var oDomRef = oControl.getDomRef();
			oControl.setProperty("textAlign", sAlign, true);
			oDomRef && (oDomRef.style.textAlign = this.getCssAlign(sAlign));
		}
	}

	return oControl;
};


/**
 * Returns CSS alignment according to column hAlign setting or given parameter
 * for Begin/End values checks the locale settings
 *
 * @param {String} [sAlign] TextAlign enumeration
 * @return {String} left|center|right
 * @protected
 */
sap.m.Column.prototype.getCssAlign = function(sAlign) {
	sAlign = sAlign || this.getHAlign();
	if (sAlign == "Begin" || sAlign == "End") {
		sAlign = this._getTextAlign(sAlign);
	}

	return sAlign.toLowerCase();
};


// Returns styleClass property with extra responsive class if second parameter is set true
sap.m.Column.prototype.getStyleClass = function(bResponsive) {
	var cls = this.getProperty("styleClass");
	if (!bResponsive) {
		return cls;
	}
	if (this._screen && (!this.getDemandPopin() || !window.matchMedia)) {
		cls += " sapMSize-" + this._screen;
	} else if (this._media && !this._media.matches) {
		cls += " sapMListTblNone";
	}
	return cls;
};


/**
 * Returns visible probability of the column
 *
 * @param {boolean} [bReturnCache] Whether return cache or new result
 * @return {boolean}
 * @protected
 */
sap.m.Column.prototype.isNeverVisible = function(bReturnCache) {
	if (bReturnCache) {
		return this._isNeverVisible;
	}

	if (!this._minWidth) {
		return this._isNeverVisible = false;
	}

	var width = parseFloat(this._minWidth),
		unit = this._minWidth.replace(/[^a-z]/g, ""),
		baseFontSize = parseFloat(sap.m.BaseFontSize) || 16;

	if (unit != "px") {
		width *= baseFontSize;
	}

	return this._isNeverVisible = (width > Math.max(window.screen.width, window.screen.height));
};


/**
 * Sets the visible column index
 * Negative index values can be used to clear
 *
 * @param {int} nIndex index of the visible column
 * @protected
 */
sap.m.Column.prototype.setIndex = function(nIndex) {
	this._index = +nIndex;
};


/**
 * Sets the order of the column
 * Does not do the visual effect
 * Table should be invalidate to re-render
 *
 * @param {int} nOrder order of the column
 * @protected
 */
sap.m.Column.prototype.setOrder = function(nOrder) {
	this._order = +nOrder;
};

/**
 * Gets the order of the column
 *
 * @returns {int} nOrder order of the column
 * @protected
 */
sap.m.Column.prototype.getOrder = function() {
	return this.hasOwnProperty("_order") ? this._order : this.getInitialOrder();
};

/**
 * Sets the initial order of the column
 *
 * @param {int} nOrder initial order of the column
 * @protected
 */
sap.m.Column.prototype.setInitialOrder = function(nOrder) {
	this._initialOrder = +nOrder;
};

/**
 * Gets the initial order of the column
 *
 * @returns {int} initial order of the column
 * @protected
 */
sap.m.Column.prototype.getInitialOrder = function() {
	if (this.hasOwnProperty("_initialOrder")) {
		return this._initialOrder;
	}

	var oParent = this.getParent();
	if (oParent && oParent.indexOfColumn) {
		return oParent.indexOfColumn(this);
	}

	return -1;
};

/**
 * Display or hide the column from given table
 * This does not set the visibility property of the column
 *
 * @param {Object} oTableDomRef Table DOM reference
 * @param {boolean} [bDisplay] whether visible or not
 * @protected
 */
sap.m.Column.prototype.setDisplay = function(oTableDomRef, bDisplay) {
	if (!oTableDomRef || this._index < 0) {
		return;
	}

	// go with native we need speed
	var i = this._index + 1,
		parent =  this.getParent(),
		display = bDisplay ? "table-cell" : "none",
		header = oTableDomRef.querySelector("tr > th:nth-child(" + i + ")"),
		cells = oTableDomRef.querySelectorAll("tr > td:nth-child(" + i + ")"),
		length = cells.length;

	// set display
	header.style.display = display;
	for (i = 0; i < length; i++) {
		cells[i].style.display = display;
	}

	// let the parent know the visibility change
	if (parent && parent.setTableHeaderVisibility) {
		// make it sure rendering phase is done with timeout
		setTimeout(function() {
			parent.setTableHeaderVisibility(bDisplay);
		}, 0);
	}
};

/**
 * Display or hide the column from given table via checking media query changes
 *
 * @param {Object} oTableDomRef Table DOM reference
 * @protected
 */
sap.m.Column.prototype.setDisplayViaMedia = function(oTableDomRef) {
	var oParent = this.getParent(),
		bDisplay = this._media && this._media.matches;

	if (!this.getDemandPopin() && this._screen && oParent && oParent.setTableHeaderVisibility) {
		// this means CSS media queries already change the column visibility
		// let the parent know the visibility change
		// make it sure rendering phase is done with timeout
		setTimeout(function() {
			oParent.setTableHeaderVisibility(bDisplay);
		}, 0);
	} else {
		this.setDisplay(oTableDomRef, bDisplay);
	}
};

sap.m.Column.prototype.setVisible = function(bVisible) {
	var oParent = this.getParent(),
		oTableDomRef = oParent && oParent.getTableDomRef && oParent.getTableDomRef(),
		bInvalidate = oTableDomRef && this._index >= 0;

	this.setProperty("visible", bVisible, bInvalidate);
	if (bInvalidate) {
		this.setDisplay(oTableDomRef, bVisible);
	}

	return this;
};

/*
 * Decides if we need media query or not according to given settings
 * Checks the given width is known screen size
 */
sap.m.Column.prototype.setMinScreenWidth = function(sWidth) {
	// check if setting the old value
	if (sWidth == this.getMinScreenWidth()) {
		return this;
	}

	// first validate the value
	this._validateMinWidth(sWidth);

	// initialize
	this._clearMedia();
	this._minWidth = 0;
	this._screen = "";

	if (sWidth) {
		// check given width is known screen-size
		sWidth = sWidth.toLowerCase();
		var width = sap.m.ScreenSizes[sWidth];
		if (width) {
			width += "px";
			this._screen = sWidth;
		} else {
			this._isWidthPredefined(sWidth);
			width = sWidth;
		}

		// keep the minimum width value
		this._minWidth = width;

		/**
		// OLD: if pop-in is requested or if unknown screen-size is given then go with JS media queries
		// NEW: We always need JS media queries to detect table header visibility
		if (this.getDemandPopin() || !this._screen) {
			this._addMedia();
		}
		*/
		this._addMedia();
	}

	return this.setProperty("minScreenWidth", sWidth);
};

/*
 * Decides if we need media query or not according to given settings
 * if pop-in is demanded then we always need JS media queries
 * if not demanded but if screen size is known CSS media query can handle
 */
sap.m.Column.prototype.setDemandPopin = function(bValue) {
	// check if setting the old value
	if (bValue == this.getDemandPopin()) {
		return this;
	}

	// minimum width should have been set
	if (!this.getMinScreenWidth()) {
		return this.setProperty("demandPopin", bValue, true);
	}

	return this.setProperty("demandPopin", bValue);
};


/**
 * Checks the column will be shown as pop-in
 *
 * @protected
 */
sap.m.Column.prototype.isPopin = function() {
	if (!this.getDemandPopin()) {
		return false;
	}
	if (this._media) {
		return !this._media.matches;
	}
	return false;
};

/**
 * Checks the column will be hidden
 *
 * @protected
 */
sap.m.Column.prototype.isHidden = function() {
	if (this._media) {
		return !this._media.matches;
	}

	if (this._screen && this._minWidth) {
		return parseFloat(this._minWidth) > window.innerWidth;
	}
	return false;
};

/**
 * Checks if box-sizing border-box works for columns
 * Most of the browser does not respect this CSS property, even buggy
 * https://bugs.webkit.org/show_bug.cgi?id=18565
 *
 * @protected
 * @readonly
 * @static
 */
sap.m.Column.hasBorderBoxSupport = (function() {
	var width = 5,
		hasBorderBoxSupport = false,
		table = "<table style='table-layout:fixed; width:" + width + "px; position:absolute; left:-99px; top:-99px'>" +
					"<tr><td style='width:" + width + "px; padding:1px; border:1px solid transparent;'></td></tr>" +
				"</table>",
		$table = jQuery(table);

	jQuery(document.body).append($table);
	if ($table.find("td").width() == width) {
		hasBorderBoxSupport = true;
	}

	$table.remove();
	return hasBorderBoxSupport;
}());

/**
 * This method is called from parent after all cells in column are rendered
 *
 * @param {jQuery} $table Table jQuery reference
 * @protected
 */
sap.m.Column.prototype.onColumnRendered = function($table) {
	// If there is no borderBox support and column is visible then run the workaround for box sizing
	if (!sap.m.Column.hasBorderBoxSupport && this._index >= 0 && this.getWidth() && this.getVisible() && !this.isPopin() && !this.isNeverVisible()) {
		var $header = $table.find("th:nth-child(" +  (this._index + 1) + ")"),
			outerWidth = $header.outerWidth(),
			width = $header.width();

		// set the outer-width as column width
		$header.width(2 * outerWidth - width);
	}
};

/**
 * Sets the last value of the column if mergeDuplicates property is true
 *
 * @param {any} value Any Value
 * @returns {sap.m.Column}
 * @since 1.16
 * @protected
 */
sap.m.Column.prototype.setLastValue = function(value) {
	if (this.getMergeDuplicates()) {
		this._lastValue = value;
	}
	return this;
};

/**
 * Clears the last value of the column if mergeDuplicates property is true
 *
 * @returns {sap.m.Column}
 * @since 1.20.4
 * @protected
 */
sap.m.Column.prototype.clearLastValue = function() {
	return this.setLastValue(NaN);
};

/**
 * Gets the last value of the column
 *
 * @since 1.16
 * @protected
 */
sap.m.Column.prototype.getLastValue = function() {
	return this._lastValue;
};


/**
 * Calls from Table to notify all items are removed
 *
 * @since 1.16
 * @protected
 */
sap.m.Column.prototype.onItemsRemoved = function() {
	this.clearLastValue();
};
}; // end of sap/m/Column.js
if ( !jQuery.sap.isDeclared('sap.m.ColumnListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.ColumnListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained




/**
 * @class ColumnListItem renderer.
 * @static
 */
sap.m.ColumnListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.m.ColumnListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMListTblRow");
	var vAlign = oLI.getVAlign();
	if (vAlign != sap.ui.core.VerticalAlign.Inherit) {
		rm.addClass("sapMListTblRow" + vAlign);
	}
};


/**
 * Overwriting hook method of ListItemBase
 *
 * @public
 *
 * @param {sap.ui.core.RenderManager} rm RenderManager
 * @param {sap.m.ListItemBase} oLI List item
 * @param {sap.m.Table} oTable Table control
 */
sap.m.ColumnListItemRenderer.renderLIContent = function(rm, oLI, oTable) {
	if (!oTable) {
		return;
	}

	var aColumns = oTable.getColumns(true),
		aCells = oLI.getCells();

	// remove cloned headers
	oLI.destroyAggregation("clonedHeaders", true);

	// remove pop-in if list is not in rendering phase
	// in rendering phase all pop-ins are already removed
	if (!oTable._bRendering) {
		oLI.removePopin();
	}

	aColumns.forEach(function(oColumn, i) {
		var cls,
			bRenderCell = true,
			oCell = aCells[oColumn.getInitialOrder()];

		if (!oCell || !oColumn.getVisible() || oColumn.isNeverVisible(true) || oColumn.isPopin()) {
			return;
		}

		rm.write("<td");
		rm.addClass("sapMListTblCell");
		rm.writeAttribute("id", oLI.getId() + "_cell" + i);

		// check column properties
		if (oColumn) {
			cls = oColumn.getStyleClass(true);
			cls && rm.addClass(cls);

			// merge duplicate cells
			if (!oTable.hasPopin() && oColumn.getMergeDuplicates()) {
				var sFuncWithParam = oColumn.getMergeFunctionName(),
					aFuncWithParam = sFuncWithParam.split("#"),
					sFuncParam = aFuncWithParam[1],
					sFuncName = aFuncWithParam[0];

				if (typeof oCell[sFuncName] != "function") {
					jQuery.sap.log.warning("mergeFunctionName property is defined on " + oColumn + " but this is not function of " + oCell);
				} else {
					var lastColumnValue = oColumn.getLastValue(),
						cellValue = oCell[sFuncName](sFuncParam);

					if (lastColumnValue === cellValue) {
						bRenderCell = false;
						rm.addClass("sapMListTblCellDup");
					} else {
						oColumn.setLastValue(cellValue);
					}
				}
			}

			oColumn.getVAlign() != "Inherit" && rm.addStyle("vertical-align", oColumn.getVAlign().toLowerCase());
			rm.addStyle("text-align", oColumn.getCssAlign());
			rm.writeStyles();
		}

		rm.writeClasses();
		rm.write(">");
		if (bRenderCell) {
			rm.renderControl(oColumn.applyAlignTo(oCell));
		}
		rm.write("</td>");
	});
};


/**
 * Renders pop-ins for Table Rows
 *
 * @private
 *
 * @param {sap.ui.core.RenderManager} rm RenderManager
 * @param {sap.m.ListItemBase} oLI List item
 * @param {sap.m.Table} oTable Table control
 */
sap.m.ColumnListItemRenderer.renderPopin = function(rm, oLI, oTable) {
	oLI._popinId = oLI.getId() + "-sub";
	rm.write("<tr class='sapMListTblSubRow'");
	rm.writeAttribute("id", oLI._popinId);
	rm.writeAttribute("tabindex", -1);
	rm.write("><td");
	rm.writeAttribute("colspan", oTable.getColCount());
	rm.write("><div class='sapMListTblSubCnt'>");

	var aCells = oLI.getCells(),
		aColumns = oTable.getColumns(true);

	aColumns.forEach(function(oColumn) {
		if (!oColumn.getVisible() || !oColumn.isPopin()) {
			return;
		}

		var oCell = aCells[oColumn.getInitialOrder()],
			oHeader = oColumn.getHeader();

		if (!oHeader && !oCell) {
			return;
		}

		var cls = oColumn.getStyleClass();

		/* row start */
		rm.write("<div");
		rm.addClass("sapMListTblSubCntRow");
		cls && rm.addClass(cls);
		rm.writeClasses();
		rm.write(">");

		/* header cell */
		if (oHeader) {
			rm.write("<div");
			rm.addClass("sapMListTblSubCntHdr");
			rm.writeClasses();
			rm.write(">");
			oHeader = oHeader.clone();
			oLI.addAggregation("clonedHeaders", oHeader, true);
			oColumn.applyAlignTo(oHeader, "Begin");
			rm.renderControl(oHeader);
			rm.write("</div>");

			/* separator cell */
			rm.write("<div class='sapMListTblSubCntSpr'>:</div>");
		}

		/* value cell */
		if (oCell) {
			rm.write("<div");
			rm.addClass("sapMListTblSubCntVal");
			rm.addClass("sapMListTblSubCntVal" + oColumn.getPopinDisplay());
			rm.writeClasses();
			rm.write(">");
			oColumn.applyAlignTo(oCell, "Begin");
			rm.renderControl(oCell);
			rm.write("</div>");
		}

		/* row end */
		rm.write("</div>");
	});

	rm.write("</div></td></tr>");
};
}; // end of sap/m/ColumnListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.CustomListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.CustomListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class CustomListItem renderer.
 * @static
 */
sap.m.CustomListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.m.CustomListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMCLI");
};

sap.m.CustomListItemRenderer.renderLIContent = function(rm, oLI) {
	var aContent = oLI.getContent();
	var cLength = aContent.length;
	for ( var i = 0; i < cLength; i++) {
		rm.renderControl(aContent[i]);
	}
};
}; // end of sap/m/CustomListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.CustomTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.CustomTileRenderer");

/**
 * @class CustomTile renderer. 
 * @static
 */
sap.m.CustomTileRenderer = sap.ui.core.Renderer.extend(sap.m.TileRenderer);

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oControl an object representation of the control that should be rendered
 */
 sap.m.CustomTileRenderer.render = function(rm, oControl) {
	rm.write("<div ");
	rm.writeControlData(oControl);
	rm.addClass("sapMCustomTile");
	rm.writeClasses();
	if(oControl._invisible){
		rm.addStyle("visibility", "hidden");
		rm.writeStyles();
	}
	rm.write(">");
	rm.write("<div id=\"" + oControl.getId() + "-remove\" class=\"sapMTCRemove\"></div>");
	rm.write("<div class=\"sapMCustomTileContent\">");
	this._renderContent(rm,oControl);
	rm.write("</div></div>");
};

sap.m.CustomTileRenderer._renderContent = function (rm, oTile) {
	rm.renderControl(oTile.getContent());
};

}; // end of sap/m/CustomTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.DateTimeInputRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


jQuery.sap.declare("sap.m.DateTimeInputRenderer");


/**
 * @class DateTimeInput renderer.
 * @static
 *
 * For a common look & feel,
 * DateTimeInputRenderer extends the InputRenderer
 */
sap.m.DateTimeInputRenderer = sap.ui.core.Renderer.extend(sap.m.InputBaseRenderer);

/**
 * Adds control specific class
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.DateTimeInputRenderer.addOuterClasses = function(oRm, oControl) {
	oRm.addClass("sapMDTI");
};

/**
 * Add pointer cursor to date-time input
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.DateTimeInputRenderer.addCursorClass = function(oRm, oControl) {
	if (oControl.getEnabled() && oControl.getEditable()) {
		oRm.addClass("sapMPointer");
	}
};
}; // end of sap/m/DateTimeInputRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.Dialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Dialog.
jQuery.sap.declare("sap.m.Dialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Dialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getType type} : sap.m.DialogType (default: sap.m.DialogType.Standard)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getStretchOnPhone stretchOnPhone} : boolean (default: false)</li>
 * <li>{@link #getStretch stretch} : boolean (default: false)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.Bar</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>
 * <li>{@link #getBeginButton beginButton} : sap.m.Button</li>
 * <li>{@link #getEndButton endButton} : sap.m.Button</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : string | sap.m.Button</li>
 * <li>{@link #getRightButton rightButton} : string | sap.m.Button</li>
 * <li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Dialog#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Dialog control is used to interrupt the current processing of an application to prompt the user for information or a response.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Dialog
 */
sap.ui.core.Control.extend("sap.m.Dialog", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.core.PopupInterface"
	],
	publicMethods : [
		// methods
		"open", "close", "isOpen"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"showHeader" : {type : "boolean", group : "Appearance", defaultValue : true},
		"type" : {type : "sap.m.DialogType", group : "Appearance", defaultValue : sap.m.DialogType.Standard},
		"state" : {type : "sap.ui.core.ValueState", group : "Appearance", defaultValue : sap.ui.core.ValueState.None},
		"stretchOnPhone" : {type : "boolean", group : "Appearance", defaultValue : false, deprecated: true},
		"stretch" : {type : "boolean", group : "Appearance", defaultValue : false},
		"contentWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"contentHeight" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"horizontalScrolling" : {type : "boolean", group : "Behavior", defaultValue : true},
		"verticalScrolling" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"subHeader" : {type : "sap.m.Bar", multiple : false}, 
    	"customHeader" : {type : "sap.m.Bar", multiple : false}, 
    	"beginButton" : {type : "sap.m.Button", multiple : false}, 
    	"endButton" : {type : "sap.m.Button", multiple : false}, 
    	"_header" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"_title" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"_icon" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	associations : {
		"leftButton" : {type : "sap.m.Button", multiple : false, deprecated: true}, 
		"rightButton" : {type : "sap.m.Button", multiple : false, deprecated: true}, 
		"initialFocus" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"beforeOpen" : {}, 
		"afterOpen" : {}, 
		"beforeClose" : {}, 
		"afterClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Dialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Dialog.extend
 * @function
 */

sap.m.Dialog.M_EVENTS = {'beforeOpen':'beforeOpen','afterOpen':'afterOpen','beforeClose':'beforeClose','afterClose':'afterClose'};


/**
 * Getter for property <code>icon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.Dialog#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setIcon
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title text appears in the dialog header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Dialog#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setTitle
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * This property decides whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#setShowHeader
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * The type of the dialog. In theme sap_bluecrystal, the type message will limit the dialog's width within 480px when runs on tablet and desktop.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.m.DialogType} the value of property <code>type</code>
 * @public
 * @name sap.m.Dialog#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.m.DialogType} oType  new value for property <code>type</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setType
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * State affects the icon and the title color. If other than None is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is None which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Dialog#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oState  new value for property <code>state</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Dialog#setState
 * @function
 */


/**
 * Getter for property <code>stretchOnPhone</code>.
 * When it's set to true, the dialog will be full screen when it runs on a phone.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>stretchOnPhone</code>
 * @public
 * @since 1.11.2
 * @deprecated Since version 1.13.1. 
 * Please use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.
 * @name sap.m.Dialog#getStretchOnPhone
 * @function
 */

/**
 * Setter for property <code>stretchOnPhone</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bStretchOnPhone  new value for property <code>stretchOnPhone</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @deprecated Since version 1.13.1. 
 * Please use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.
 * @name sap.m.Dialog#setStretchOnPhone
 * @function
 */


/**
 * Getter for property <code>stretch</code>.
 * When this property is set to true, the dialog is stretched to a full screen display. This property is only applicable to standard dialog and message type dialog ignores this property.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>stretch</code>
 * @public
 * @since 1.13.1
 * @name sap.m.Dialog#getStretch
 * @function
 */

/**
 * Setter for property <code>stretch</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bStretch  new value for property <code>stretch</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.1
 * @name sap.m.Dialog#setStretch
 * @function
 */


/**
 * Getter for property <code>contentWidth</code>.
 * Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width when runs on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * @since 1.12.1
 * @name sap.m.Dialog#getContentWidth
 * @function
 */

/**
 * Setter for property <code>contentWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentWidth  new value for property <code>contentWidth</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.1
 * @name sap.m.Dialog#setContentWidth
 * @function
 */


/**
 * Getter for property <code>contentHeight</code>.
 * Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * @since 1.12.1
 * @name sap.m.Dialog#getContentHeight
 * @function
 */

/**
 * Setter for property <code>contentHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentHeight  new value for property <code>contentHeight</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.1
 * @name sap.m.Dialog#setContentHeight
 * @function
 */


/**
 * Getter for property <code>horizontalScrolling</code>.
 * This property indicates if user can scroll horizontally inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>horizontalScrolling</code>
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#getHorizontalScrolling
 * @function
 */

/**
 * Setter for property <code>horizontalScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#setHorizontalScrolling
 * @function
 */


/**
 * Getter for property <code>verticalScrolling</code>.
 * This property indicates if user can scroll vertically inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#getVerticalScrolling
 * @function
 */

/**
 * Setter for property <code>verticalScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#setVerticalScrolling
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the dialog.
 * 
 * <strong>Note</strong>: this is the default aggregation for Dialog.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Dialog#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Dialog#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Dialog#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Dialog#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * When subHeader is assigned to Dialog, it's rendered directly after the main header in Dialog. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
 * 
 * @return {sap.m.Bar}
 * @public
 * @since 1.12.2
 * @name sap.m.Dialog#getSubHeader
 * @function
 */


/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.m.Bar} oSubHeader
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * @name sap.m.Dialog#setSubHeader
 * @function
 */
	

/**
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * @name sap.m.Dialog#destroySubHeader
 * @function
 */


/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * CustomHeader is only supported in theme sap_bluecrystal. When it's set, the icon, title and showHeader are properties ignored. Only the customHeader is shown as the header of the dialog.
 * 
 * @return {sap.m.Bar}
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#getCustomHeader
 * @function
 */


/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.m.Bar} oCustomHeader
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#setCustomHeader
 * @function
 */
	

/**
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#destroyCustomHeader
 * @function
 */


/**
 * Getter for aggregation <code>beginButton</code>.<br/>
 * The button which is rendered on the left side (right side in RTL mode) inside the dialog.
 * 
 * @return {sap.m.Button}
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#getBeginButton
 * @function
 */


/**
 * Setter for the aggregated <code>beginButton</code>.
 * @param {sap.m.Button} oBeginButton
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#setBeginButton
 * @function
 */
	

/**
 * Destroys the beginButton in the aggregation 
 * named <code>beginButton</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#destroyBeginButton
 * @function
 */


/**
 * Getter for aggregation <code>endButton</code>.<br/>
 * The button which is rendered on the right side (left side in RTL mode) inside the dialog.
 * 
 * @return {sap.m.Button}
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#getEndButton
 * @function
 */


/**
 * Setter for the aggregated <code>endButton</code>.
 * @param {sap.m.Button} oEndButton
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#setEndButton
 * @function
 */
	

/**
 * Destroys the endButton in the aggregation 
 * named <code>endButton</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Dialog#destroyEndButton
 * @function
 */


/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting leftButton will also set the beginButton internally.
 *
 * @return {string} Id of the element which is the current target of the <code>leftButton</code> association, or null
 * @public
 * @deprecated Since version 1.15.1. 
 * 
 * LeftButton has benn deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.
 * 
 * @name sap.m.Dialog#getLeftButton
 * @function
 */

/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting leftButton will also set the beginButton internally.
 *
 * @param {string | sap.m.Button} vLeftButton 
 *    Id of an element which becomes the new target of this <code>leftButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.1. 
 * 
 * LeftButton has benn deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.
 * 
 * @name sap.m.Dialog#setLeftButton
 * @function
 */


	
/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting rightButton will also set the endButton internally.
 *
 * @return {string} Id of the element which is the current target of the <code>rightButton</code> association, or null
 * @public
 * @deprecated Since version 1.15.1. 
 * 
 * RightButton has been deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.
 * @name sap.m.Dialog#getRightButton
 * @function
 */

/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting rightButton will also set the endButton internally.
 *
 * @param {string | sap.m.Button} vRightButton 
 *    Id of an element which becomes the new target of this <code>rightButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.1. 
 * 
 * RightButton has been deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.
 * @name sap.m.Dialog#setRightButton
 * @function
 */


	
/**
 * Focus is set to the dialog in the sequence of leftButton and rightButton when available. But if some other control needs to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on. Setting initialFocus to input controls doesn't open the on screen keyboard on mobile device, this is due to the browser limitation that the on screen keyboard can't be opened with javascript code. The opening of on screen keyboard must be triggered by real user action.
 *
 * @return {string} Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * @public
 * @since 1.15.0
 * @name sap.m.Dialog#getInitialFocus
 * @function
 */

/**
 * Focus is set to the dialog in the sequence of leftButton and rightButton when available. But if some other control needs to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on. Setting initialFocus to input controls doesn't open the on screen keyboard on mobile device, this is due to the browser limitation that the on screen keyboard can't be opened with javascript code. The opening of on screen keyboard must be triggered by real user action.
 *
 * @param {string | sap.ui.core.Control} vInitialFocus 
 *    Id of an element which becomes the new target of this <code>initialFocus</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.Dialog#setInitialFocus
 * @function
 */


	
/**
 * This event will be fired before the dialog is opened. 
 *
 * @name sap.m.Dialog#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired before the dialog is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachBeforeOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachBeforeOpen
 * @function
 */

/**
 * Fire event beforeOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireBeforeOpen
 * @function
 */


/**
 * This event will be fired after the dialog is opened. 
 *
 * @name sap.m.Dialog#afterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired after the dialog is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachAfterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachAfterOpen
 * @function
 */

/**
 * Fire event afterOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireAfterOpen
 * @function
 */


/**
 * This event will be fired before the dialog is closed. 
 *
 * @name sap.m.Dialog#beforeClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired before the dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachBeforeClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachBeforeClose
 * @function
 */

/**
 * Fire event beforeClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'origin' of type <code>sap.m.Button</code> This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireBeforeClose
 * @function
 */


/**
 * This event will be fired after the dialog is closed. 
 *
 * @name sap.m.Dialog#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired after the dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachAfterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachAfterClose
 * @function
 */

/**
 * Fire event afterClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'origin' of type <code>sap.m.Button</code> This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireAfterClose
 * @function
 */


/**
 * Open the dialog.
 *
 * @name sap.m.Dialog.prototype.open
 * @function

 * @type void
 * @public
 */


/**
 * Close the dialog.
 *
 * @name sap.m.Dialog.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * The method checks if the Dialog is open. It returns true when the Dialog is currently open (this includes opening and closing animations), otherwise it returns false.
 *
 * @name sap.m.Dialog.prototype.isOpen
 * @function

 * @type boolean
 * @public
 * @since 1.9.1
 */


// Start of sap\m\Dialog.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained


sap.m.Dialog._bOneDesign = (sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== 'true');
sap.m.Dialog._bIOS7Tablet = sap.ui.Device.os.ios && sap.ui.Device.system.tablet && sap.ui.Device.os.version >= 7 && sap.ui.Device.os.version < 8 && sap.ui.Device.browser.name === "sf";
sap.m.Dialog._bPaddingByDefault = (sap.ui.getCore().getConfiguration().getCompatibilityVersion("sapMDialogWithPadding").compareTo("1.16") < 0);

sap.m.Dialog._mStateClasses = {};
sap.m.Dialog._mStateClasses[sap.ui.core.ValueState.None] = "";
sap.m.Dialog._mStateClasses[sap.ui.core.ValueState.Success] = "sapMDialogSuccess";
sap.m.Dialog._mStateClasses[sap.ui.core.ValueState.Warning] = "sapMDialogWarning";
sap.m.Dialog._mStateClasses[sap.ui.core.ValueState.Error] = "sapMDialogError";

sap.m.Dialog._mIcons = {};
sap.m.Dialog._mIcons[sap.ui.core.ValueState.Success] = sap.ui.core.IconPool.getIconURI("accept");
sap.m.Dialog._mIcons[sap.ui.core.ValueState.Warning] = sap.ui.core.IconPool.getIconURI("warning2");
sap.m.Dialog._mIcons[sap.ui.core.ValueState.Error] = sap.ui.core.IconPool.getIconURI("alert");

/* =========================================================== */
/*                  begin: Lifecycle functions                 */
/* =========================================================== */
sap.m.Dialog.prototype.init = function(){
	var that = this;
	this._externalIcon = undefined;
	this._sResizeListenerId = null;
	this._$Window = jQuery(window);
	this._iHMargin = sap.ui.Device.system.phone ? 64 : 128;
	this._iVMargin = 16;
	
	// used to judge if enableScrolling needs to be disabled
	this._scrollContentList = ["NavContainer", "Page", "ScrollContainer"];
	
	this.oPopup = new sap.ui.core.Popup();
	this.oPopup.setShadow(true);
	if(jQuery.device.is.iphone && !this._bMessageType){
		this.oPopup.setModal(true, "sapMDialogTransparentBlk");
	}else{
		this.oPopup.setModal(true, "sapMDialogBlockLayerInit");
	}

	//avoid playing fancy animation in native browser with android version smaller than 4.1
	//because it has problem with keyframe animation that it always sets back to the first
	//keyframe after the animation which causes flickering during the animation.
	if(!(sap.ui.Device.os.android && sap.ui.Device.os.version < 4.1 && window.navigator.userAgent.toLowerCase().indexOf("chrome") === -1)){
		this.oPopup.setAnimations(jQuery.proxy(this._openAnimation, this), jQuery.proxy(this._closeAnimation, this));
	}
	//keyboard support for desktop environments
	if(sap.ui.Device.system.desktop) {
		var fnOnEscape = jQuery.proxy(function(oEvent) {
				// when the escape is already handled by inner control, nothing should happen inside dialog
				if(oEvent.originalEvent && oEvent.originalEvent._sapui_handledByControl){
					return;
				}
				this.close();
				//event should not trigger any further actions
				oEvent.stopPropagation();
		}, this);
		//use pseudo event 'onsapescape' to implement keyboard-trigger for closing this dialog
		//had to implement this onthe popup instance because it did not work
		//on the dialog prototype
		this.oPopup.onsapescape = fnOnEscape;
	}

	//the orientationchange event listener
	this._fnOrientationChange = jQuery.proxy(this._reposition, this);

	this._fnContentResize = jQuery.proxy(this._onResize, this);

	this._fnRepositionAfterOpen = jQuery.proxy(this._repositionAfterOpen, this);

	this.oPopup._applyPosition = function(oPosition, bFromResize) {
		var $that = that.$(),
			self = this,
			$Window = jQuery(window);

		that._deregisterResizeHandler();
		that._setDimensions();
		that._adjustScrollingPane();

		//TODO: if sap_mvi has to be restored, here has to be changed.
		oPosition.at = {
			left: ($Window.width() - $that.outerWidth()) / 2,
			top: ($Window.height() - $that.outerHeight()) / 2
		}

		sap.ui.core.Popup.prototype._applyPosition.call(self, oPosition);

		var iWindowScrollTop = that._$Window.scrollTop(),
			iTop = $that.offset().top;

		//TODO: remove this code after Apple fixes the jQuery(window).height() is 20px more than the window.innerHeight issue.
		if(sap.m.Dialog._bIOS7Tablet && sap.ui.Device.orientation.landscape){
			$that.css("top", iTop - 10); //the calculated window size is 20px more than the actual size in ios 7 tablet landscape mode.
		}

		that._registerResizeHandler();
	};

	if(sap.m.Dialog._bPaddingByDefault){
		this.addStyleClass("sapUiPopupWithPadding");
	}
};

sap.m.Dialog.prototype.onBeforeRendering = function(){
	//if content has scrolling, disable scrolling automatically
	if(this._hasSingleScrollableContent()){
		this._forceDisableScrolling = true;
		jQuery.sap.log.info("VerticalScrolling and horizontalScrolling in sap.m.Dialog with ID " + this.getId() +" has been disabled because there's scrollable content inside");
	}else{
		this._forceDisableScrolling = false;
	}
	
	if(!this._forceDisableScrolling){
		if(!this._oScroller){
			this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
				horizontal: this.getHorizontalScrolling(), // will be disabled in adjustScrollingPane if content can fit in
				vertical: this.getVerticalScrolling(),
				zynga: false,
				preventDefault: false,
				nonTouchScrolling: "scrollbar"
			});
		}
	}
};

sap.m.Dialog.prototype.onAfterRendering = function(){
	this._$scrollPane = this.$("scroll");
	this._$content = this.$("cont");
	
	if(this.isOpen()){
		//restore the focus after rendering when dialog is already open
		var sFocusControlId = this._getFocusId();
		jQuery.sap.focus(jQuery.sap.domById(sFocusControlId));
	}
};

sap.m.Dialog.prototype.exit = function(){
	this._deregisterResizeHandler();
	
	sap.ui.Device.resize.detachHandler(this._fnOrientationChange);
	
	sap.m.InstanceManager.removeDialogInstance(this);
	
	if(this.oPopup){
		this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
		this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
		this.oPopup.destroy();
		this.oPopup = null;
	}
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}

	if(this._header){
		this._header.destroy();
		this._header = null;
	}
	
	if(this._headerTitle){
		this._headerTitle.destroy();
		this._headerTitle = null;
	}

	if(this._iconImage){
		this._iconImage.destroy();
		this._iconImage = null;
	}
};
/* =========================================================== */
/*                   end: Lifecycle functions                  */
/* =========================================================== */

/* =========================================================== */
/*                    begin: public functions                  */
/* =========================================================== */
sap.m.Dialog.prototype.open = function(){
	var oPopup = this.oPopup;

	if (oPopup.isOpen()){
		return this;
	}

	//reset the close trigger
	this._oCloseTrigger = null;

	var $blockLayer = jQuery("#sap-ui-blocklayer-popup"),
		// The control that needs to be focused after dialog is open is calculated in following sequence:
		// initialFocus, beginButton, endButton
		// dialog is always modal so the focus doen't need to be on the dialog when there's no initialFocus, beginButton and endButton available.
		// but to keep the consistency, the focus will in the end fall back to dialog itself.
		sFocusControlId = this._getFocusId();

	if(!sap.m.Dialog._bOneDesign && $blockLayer.length > 0){
		var bTransparent = jQuery.device.is.iphone && !this._bMessageType && !this.hasStyleClass("sapMActionSheetDialog");
		$blockLayer.toggleClass("sapMDialogTransparentBlk", bTransparent);
		$blockLayer.toggleClass("sapMDialogBlockLayerInit", !bTransparent);
	}

	this.fireBeforeOpen();
	oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);

	// Open popup
	oPopup.setContent(this);
	oPopup.setInitialFocusId(sFocusControlId);
	if(!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType) {
		oPopup.setPosition("center top", "center bottom", window, "0 0", "fit");
	} else {
		oPopup.setPosition("center center", "center center", window, "0 0", "fit");
	}
	oPopup.open();

	// bind to window resize
	sap.ui.Device.resize.attachHandler(this._fnOrientationChange);

	sap.m.InstanceManager.addDialogInstance(this);
	return this;
};

sap.m.Dialog.prototype.close = function(){
	var oPopup = this.oPopup;

	var eOpenState = this.oPopup.getOpenState();
	if(!(eOpenState === sap.ui.core.OpenState.CLOSED || eOpenState === sap.ui.core.OpenState.CLOSING)){
		sap.m.closeKeyboard();
		this.fireBeforeClose({origin: this._oCloseTrigger});
		oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
		this._deregisterResizeHandler();
		oPopup.close();
	}
	return this;
};

sap.m.Dialog.prototype.isOpen = function(){
	return this.oPopup && this.oPopup.isOpen();
};
/* =========================================================== */
/*                     end: public functions                   */
/* =========================================================== */

/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */
sap.m.Dialog.prototype._handleOpened = function(){
	this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
	this.fireAfterOpen();
};

sap.m.Dialog.prototype._handleClosed = function(){
	this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
	sap.ui.Device.resize.detachHandler(this._fnOrientationChange);
	sap.m.InstanceManager.removeDialogInstance(this);
	this.fireAfterClose({origin: this._oCloseTrigger});
};

/**
 * Event handler for the focusin event.
 * If it occurs on the focus handler elements at the beginning of the dialog, the focus is set to the end, and vice versa.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Dialog.prototype.onfocusin = function(oEvent){
	var oSourceDomRef = oEvent.target;
	
	//Check if the invisible FIRST focusable element (suffix '-firstfe') has gained focus
	if (oSourceDomRef.id === this.getId() + "-firstfe") {
		//Check if buttons are available
		var oLastFocusableDomref = jQuery("#" + this.getId() + " .sapMDialogActions").lastFocusableDomRef();
		if(!oLastFocusableDomref) {
			//If there are no buttons, check the content
			oLastFocusableDomref = this.$("cont").lastFocusableDomRef();
			if(!oLastFocusableDomref) {
				//If there is no content, check the header
				oLastFocusableDomref = this.$("header").lastFocusableDomRef();
			}
		}
		jQuery.sap.focus(oLastFocusableDomref);
	} else if (oSourceDomRef.id === this.getId() + "-lastfe") {
		//Check if the invisible LAST focusable element (suffix '-lastfe') has gained focus
		//First check if header content is available
		var oFirstFocusableDomref = this.$("header").firstFocusableDomRef();
		if(!oFirstFocusableDomref) {
			//Check if content are available
			var oFirstFocusableDomref = this.$("cont").firstFocusableDomRef();
			if(!oFirstFocusableDomref) {
				//If there is no content, check the buttons
				oFirstFocusableDomref = jQuery("#" + this.getId() + " .sapMDialogActions").firstFocusableDomRef();
			}
		}
		jQuery.sap.focus(oFirstFocusableDomref);
	}
};


/* =========================================================== */
/*                      end: event handlers                  */
/* =========================================================== */


/* =========================================================== */
/*                      begin: private functions               */
/* =========================================================== */
sap.m.Dialog.prototype._openAnimation = function($Ref, iRealDuration, fnOpened) {
	if(!(sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10)){
		$Ref.css("display", "block");
	}
	
	var that = this,
		bOpenedCalled = false,
		fnEnd;
	
	if(!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType) {
		fnEnd = function(){
			if(bOpenedCalled || !that.oPopup || that.oPopup.getOpenState() !== sap.ui.core.OpenState.OPENING){
				return;
			}
			$Ref.unbind("webkitTransitionEnd transitionend");
			$Ref.removeClass("sapMDialogSliding");
			fnOpened();
			bOpenedCalled = true;
		};
		
		$Ref.addClass("sapMDialogBottom").removeClass("sapMDialogHidden");
		window.setTimeout(function(){
			$Ref.bind("webkitTransitionEnd transitionend", fnEnd);
			$Ref.addClass("sapMDialogSliding").removeClass("sapMDialogBottom");
			//check if the transitionend event isn't fired, if it's not fired due to unexpected rerendering,
			//fnOpened should be called again.
			setTimeout(function(){
				fnEnd();
			}, 400);
		}, 0);
	} else {
		if(sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10){
			$Ref.fadeIn(200, fnOpened);
		}else{
			fnEnd = function(){
				if(bOpenedCalled || !that.oPopup || that.oPopup.getOpenState() !== sap.ui.core.OpenState.OPENING){
					return;
				}
				$Ref.unbind("webkitAnimationEnd animationend");
				fnOpened();
				$Ref.removeClass("sapMDialogOpening");
				bOpenedCalled = true;
			};
			$Ref.bind("webkitAnimationEnd animationend", fnEnd);
			$Ref.addClass("sapMDialogOpening");
			//check if the transitionend event isn't fired, if it's not fired due to unexpected rerendering,
			//fnOpened should be called again.
			setTimeout(function(){
				fnEnd();
			}, 150);
		}
	}
};

sap.m.Dialog.prototype._closeAnimation = function($Ref, iRealDuration, fnClose) {
	var that = this,
		bClosedCalled = false,
		fnEnd;
	
	if(!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType) {
		fnEnd = function(){
			if(bClosedCalled){
				return;
			}
			$Ref.unbind("webkitTransitionEnd transitionend");
			$Ref.addClass("sapMDialogHidden").removeClass("sapMDialogBottom").removeClass("sapMDialogSliding");
			fnClose();
			bClosedCalled = true;
		};
		$Ref.bind("webkitTransitionEnd transitionend", fnEnd);
		$Ref.addClass("sapMDialogSliding").addClass("sapMDialogBottom");
		//check if the transitionend event isn't fired, if it's not fired due to unexpected rerendering,
		//fnClose should be called again.
		setTimeout(function(){
			fnEnd();
		}, 400);
	} else {
		if(sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10){
			$Ref.fadeOut(200, fnClose);
		}else{
			fnEnd = function(){
				if(bClosedCalled){
					return;
				}
				$Ref.unbind("webkitAnimationEnd animationend");
				fnClose();
				$Ref.removeClass("sapMDialogClosing");
				bClosedCalled = true;
			};
			$Ref.bind("webkitAnimationEnd animationend", fnEnd);
			$Ref.addClass("sapMDialogClosing");
			setTimeout(function(){
				fnEnd();
			}, 150);
		}
	}
};

sap.m.Dialog.prototype._setDimensions = function() {
	var iWindowWidth = this._$Window.width(),
		iWindowHeight = (sap.m.Dialog._bIOS7Tablet && sap.ui.Device.orientation.landscape && window.innerHeight) ? window.innerHeight : this._$Window.height(),
		$this = this.$(),
		//stretch is ignored for message dialog
		bStretch = this.getStretch() && !this._bMessageType,
		iHPaddingToScreen = this._iHMargin,
		iVPaddingToScreen = this._iVMargin,
		iPaddingLeft = window.parseInt($this.css("padding-left"), 10),
		iPaddingRight = window.parseInt($this.css("padding-right"), 10),
		iPaddingTop = window.parseInt($this.css("padding-top"), 10),
		iPaddingBottom = window.parseInt($this.css("padding-bottom"), 10),
		$content = this._$content,
		iBorderLeft = window.parseInt($this.css("border-left-width"), 10),
		iBorderRight = window.parseInt($this.css("border-right-width"), 10),
		iBorderTop = window.parseInt($this.css("border-top-width"), 10),
		iBorderBottom = window.parseInt($this.css("border-bottom-width"), 10),
		iMaxWidth = iWindowWidth - iHPaddingToScreen,
		iMaxHeight = iWindowHeight - iVPaddingToScreen,
		sContentWidth = this.getContentWidth(),
		sContentHeight = this.getContentHeight(),
		$scrollArea = this._$scrollPane,
		//this is a fix for setting useTransform false in ScrollEnablement.js line 236
		bSAreaPosAbs = $scrollArea.css("position") === "absolute",
		oSubHeader = this.getSubHeader(),
		sCalcContentWidth = "",
		iMinWidth = 0,
		iContentMaxHeight, iHeaderHeight, iSubHeaderHeight, iFooterHeight, iScrollAreaHeight, iCalcContentWidth, iWidth, iHeight, bIgnoreContentWidth;
	
	//reset
	$this.css({
		"width": "",
		"height": "",
		"min-width": "",
		"max-width": "",
		"max-height": "",
		"left": "",
		"top": ""
	});
	
	$scrollArea.css({
		"width": ""
	});

	if(sap.ui.Device.system.tablet || sap.ui.Device.system.desktop){
		if(sap.m.Dialog._bOneDesign && bStretch){
			$this.css({
				"right": "0px",
				"bottom": "0px",
				"width": iWindowWidth + "px",
				"min-width": iWindowWidth + "px",
				"max-height": iWindowHeight + "px"
			});
		}else{
			iMinWidth = 400;
			$this.css({
				"max-width": (this._bMessageType ? 480 : iMaxWidth) + "px",
				"max-height": iMaxHeight + "px"
			});
		}
	}else{
		if(!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType){
			$this.css({width: "100%",  height: "100%"});
		}else{
			if(sap.m.Dialog._bOneDesign && bStretch){
				$this.css({
					"width": iWindowWidth + "px",
					"height": iWindowHeight + "px",
					"max-height": iWindowHeight + "px"
				});
			}else{
				if(sap.ui.Device.orientation.portrait){
					$this.css({
						"width": iMaxWidth + "px",
						"max-height": iMaxHeight + "px"
					});
				}else{
					iMinWidth = iWindowHeight;
					$this.css({
						"min-width": iMinWidth + "px",
						"max-width": iMaxWidth + "px",
						"max-height": iMaxHeight + "px"
					});
				}
			}
		}
	}
	
	iHeaderHeight = $this.children("header.sapMDialogTitle").outerHeight(true) || 0;
	iSubHeaderHeight = oSubHeader ? oSubHeader.$().outerHeight(true) : 0;
	if(!sap.m.Dialog._bOneDesign && sap.ui.Device.os.ios && !this._bMessageType){
		iFooterHeight = 0;
	}else{
		iFooterHeight = $this.children("footer").outerHeight(true) || 0;
	}
	
	//if stretch is true, paddings to screen are ignored
	iContentMaxHeight = (((sap.m.Dialog._bOneDesign && bStretch) || (!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType)) ? iWindowHeight : iMaxHeight) - iHeaderHeight - iSubHeaderHeight - iFooterHeight - iPaddingTop - iPaddingBottom - iBorderTop - iBorderBottom;
	//sContentWidth is ignored under the following conditions, because the width is managed by dialog itself.
	// 1. when runs on a phone in portrait mode 
	// 2. in landscape mode for iphone (in mvi)
	// 3. stretch (in bluecrystal) is true
	// 4. message type dialog
	bIgnoreContentWidth = (sap.ui.Device.system.phone && (sap.ui.Device.orientation.portrait || (!sap.m.Dialog._bOneDesign && sap.ui.Device.os.ios))) || (sap.m.Dialog._bOneDesign && bStretch) || this._bMessageType;
	
	if(sContentWidth && !bIgnoreContentWidth){
		if(sContentWidth.indexOf("%") > 0){
			sContentWidth = sap.m.PopupHelper.calcPercentageSize(sContentWidth, iWindowWidth);
		}
		
		// convert the width with unit to calculated value
		sContentWidth = $content.width(sContentWidth).width() + "px";
		
		iCalcContentWidth = Math.max(
				iMinWidth - iPaddingLeft - iPaddingRight - iBorderLeft - iBorderRight,
				Math.min(
						window.parseInt(sContentWidth, 10), 
						iMaxWidth - iPaddingLeft - iPaddingRight - iBorderLeft - iBorderRight
				)
			);
		
		sCalcContentWidth = iCalcContentWidth + "px";
		
		// normally setting the width on content is enough but when display:table dom is put out of the content area in dialog in IE9
		// the dialog is pushed to max width. Thus the width has to be set on root dom to prevent this.
		$this.css({
			"width": iCalcContentWidth + iPaddingLeft + iPaddingRight + iBorderLeft + iBorderRight
		});
	}
	
	//height is set later
	$content.css({
		"width": sCalcContentWidth,
		"max-height": ""
	});
	
	if(sContentHeight.indexOf("%") > 0){
		sContentHeight = sap.m.PopupHelper.calcPercentageSize(sContentHeight, iWindowHeight);
	}
	
	if(sContentHeight){
		// convert the height with unit to calculated value
		sContentHeight = $content.height(sContentHeight).height() + "px";
	}
	
	if(bSAreaPosAbs){
		//this is a fix for setting useTransform false in ScrollEnablement.js line 236
		iScrollAreaHeight = $scrollArea.outerHeight(true);
		if(sap.m.Dialog._bOneDesign && bStretch){
			$content.css("height", iContentMaxHeight);
		}else{
			if(sContentHeight){
				$content.css("height", Math.min(iContentMaxHeight, window.parseInt(sContentHeight, 10)));
			}else{
				$content.css("height", Math.min(iContentMaxHeight, iScrollAreaHeight));
			}
		}
	}else{
		if((sap.m.Dialog._bOneDesign && bStretch) || (!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType)){
			$content.css("height", iContentMaxHeight);
		}else{
			if(sContentHeight){
				$content.css("height", Math.min(iContentMaxHeight, window.parseInt(sContentHeight, 10)));
			}else{
				$content.css("max-height", iContentMaxHeight);
			}
		}
	}
};

sap.m.Dialog.prototype._adjustScrollingPane = function(){
	var	$scrollArea = this._$scrollPane,
		oCSS = {
			"display": "block"
		};

	// In Android version less than 4.1, the scrollEnablement needs to set position: absolute to $scrollArea.
	// Thus the width 100% has to be set in order to make the scrollArea as big as the contentArea
	if($scrollArea.css("position") === "absolute"){
		oCSS.width = "100%";
	}

	// If the content fits in, the display: inline-block should be replace with display: block.
	if($scrollArea.outerWidth(true) <= this._$content.width()){
		$scrollArea.css(oCSS);
	}

	if(this._oScroller){
		this._oScroller.refresh();
	}
};

sap.m.Dialog.prototype._reposition = function() {
	var that = this, 
		ePopupState = this.oPopup.getOpenState();
	
	if(ePopupState !== sap.ui.core.OpenState.OPEN && ePopupState !== sap.ui.core.OpenState.OPENING){
		return;
	}
	
	this._fnRepositionAfterOpen();
};

sap.m.Dialog.prototype._repositionAfterOpen = function(){
	//The dialog might have been destroyed while the timeout was set
	if(!this.oPopup) {
		return;
	}

	var eState = this.oPopup.getOpenState();
	//if resize event occurs while the opening animation, the position change has to be done after the opening animation.
	if(eState === sap.ui.core.OpenState.OPENING){
		window.setTimeout(this._fnRepositionAfterOpen, 50);
	}else{
		this._reapplyPosition();
	}
};

sap.m.Dialog.prototype._reapplyPosition = function(){
	this.oPopup && this.oPopup._applyPosition(this.oPopup._oLastPosition, true);
};

sap.m.Dialog.prototype._onResize = function(){
	if(this._sResizeTimer || !this.getDomRef()){
		return;
	}
	
	var that = this, 
		oResizeDomRef = this.getDomRef("scroll");
	
	this._iResizeDomWidth = this._iResizeDomWidth || oResizeDomRef.offsetWidth;
	this._iResizeDomHeight = this._iResizeDomHeight || oResizeDomRef.offsetHeight;
	
	this._sResizeTimer = window.setTimeout(function(){
		var iNewWidth = oResizeDomRef.offsetWidth,
			iNewHeight = oResizeDomRef.offsetHeight;
		if(that._iResizeDomWidth !== iNewWidth || that._iResizeDomHeight !== iNewHeight){
			that._fnOrientationChange();
		}
		that._sResizeTimer = null;
	}, 0);
};

sap.m.Dialog.prototype._createHeader = function(){
	if(sap.m.Dialog._bOneDesign || (sap.ui.Device.os.ios && !this._bMessageType)){
		if(!this._header){
			// set parent of header to detect changes on title
			this._header = new sap.m.Bar(this.getId()+"-header").addStyleClass("sapMHeader-CTX sapMDialogTitle");
			this.setAggregation("_header", this._header, false);
		}
	}
};

/**
 * If a scrollable control (sap.m.NavContainer, sap.m.ScrollContainer, sap.m.Page) is added to dialog's content aggregation as a single child or through one or more sap.ui.mvc.View instances,
 * the scrolling inside dialog will be disabled in order to avoid wrapped scrolling areas.
 * 
 * If more than one scrollable control is added to dialog, the scrolling needs to be disabled manually.
 */
sap.m.Dialog.prototype._hasSingleScrollableContent = function(){
	var aContent = this.getContent(), i;
	
	while(aContent.length === 1 && aContent[0] instanceof sap.ui.core.mvc.View){
		aContent = aContent[0].getContent();
	}
	
	if(aContent.length === 1){
		for(i = 0 ; i < this._scrollContentList.length ; i++){
			if(aContent[0] instanceof sap.m[this._scrollContentList[i]]){
				return true;
			}
		}
	}
	
	return false;
};

sap.m.Dialog.prototype._initBlockLayerAnimation = function(){
	//!!!now the animation on blocklayer is removed due to
	//problem with calling open, close, open without any interval
	//then blocklayer can't be removed and it blocks the whole UI
	if(!sap.m.Dialog._bOneDesign && (!jQuery.device.is.iphone || this._bMessageType)){
		// Animating also the block layer
		this.oPopup._showBlockLayer = function(){
			sap.ui.core.Popup.prototype._showBlockLayer.call(this);
			var $blockLayer = jQuery("#sap-ui-blocklayer-popup");
			if(sap.ui.Device.os.ios){
				$blockLayer.addClass('sapMDialogBLyInit');
//				setTimeout(function() {
//					$blockLayer.addClass('sapMDialogBLyShown');
//				}, 0);
			}else{
				$blockLayer.addClass("sapMDialogBlockLayerAnimation");
				setTimeout(function(){
					$blockLayer.addClass("sapMDialogBlockLayer");
				}, 0);
			}
		};

		this.oPopup._hideBlockLayer = function(){
			var $blockLayer = jQuery("#sap-ui-blocklayer-popup"), that = this;
			
			if(sap.ui.core.Popup.blStack.length > 1){
				// If there's still popups open, hide block layer without animation
				sap.ui.core.Popup.prototype._hideBlockLayer.call(that);
			}else{
				$blockLayer.removeClass('sapMDialogBlockLayerInit');
				if(sap.ui.Device.os.ios){
//					$blockLayer.removeClass('sapMDialogBLyShown');
//					$blockLayer.bind("webkitTransitionEnd", function(){
//						$blockLayer.unbind("webkitTransitionEnd");
						$blockLayer.removeClass("sapMDialogBLyInit");
						sap.ui.core.Popup.prototype._hideBlockLayer.call(that);
						
//					});
				}else{
					$blockLayer.removeClass("sapMDialogBlockLayer");
	
					$blockLayer.bind("webkitTransitionEnd transitionend", function(){
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						sap.ui.core.Popup.prototype._hideBlockLayer.call(that);
						$blockLayer.removeClass("sapMDialogBlockLayerAnimation");
					});
				}
			}
		};
	}else{
		this.oPopup._hideBlockLayer = function(){
			var $blockLayer = jQuery("#sap-ui-blocklayer-popup");
			$blockLayer.removeClass("sapMDialogTransparentBlk");
			sap.ui.core.Popup.prototype._hideBlockLayer.call(this);
		};
	}
};


sap.m.Dialog.prototype._clearBlockLayerAnimation = function(){
	if(jQuery.device.is.iphone && !this._bMessageType){
		delete this.oPopup._showBlockLayer;
		this.oPopup._hideBlockLayer = function(){
			var $blockLayer = jQuery("#sap-ui-blocklayer-popup");
			$blockLayer.removeClass("sapMDialogTransparentBlk");
			sap.ui.core.Popup.prototype._hideBlockLayer.call(this);
		};
	}
};

sap.m.Dialog.prototype._getFocusId = function(){
	var oBeginButton = this.getBeginButton(),
		oEndButton = this.getEndButton();
		
	// Left or Right button can be visible false and therefore not rendered.
	// In such a case, focus should be set somewhere else.
	return this.getInitialFocus() 
			|| (oBeginButton && oBeginButton.getVisible() && oBeginButton.getId())
			|| (oEndButton && oEndButton.getVisible() && oEndButton.getId())
			|| this.getId();
};

/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 *
 * @private
 */
sap.m.Dialog.prototype.getScrollDelegate = function() {
	return this._oScroller;
};

sap.m.Dialog.prototype._composeAggreNameInHeader = function(sPos){
	var sHeaderAggregationName;
	
	if(sPos === "Begin"){
		sHeaderAggregationName = "contentLeft";
	}else if(sPos === "End"){
		sHeaderAggregationName = "contentRight";
	}else{
		sHeaderAggregationName = "content" + sPos;
	}
	
	return sHeaderAggregationName;
};

sap.m.Dialog.prototype._setButton = function(oButton, sPos, bSkipFlag){
	var that = this,
		sPosModified = this._firstLetterUpperCase(sPos),
		sGetterName = "get" + sPosModified + "Button",
		sAggregationName = sPos.toLowerCase() + "Button",
		sHeaderAggregationName = this._composeAggreNameInHeader(sPosModified), 
		oOldButton;

	oOldButton = this[sGetterName]();
	if(oOldButton && !(oOldButton instanceof sap.m.Button)){
		oOldButton = sap.ui.getCore().byId(oOldButton);
	}
	
	if(oButton && oOldButton === oButton){
		return this;
	}

	if(!this._oButtonDelegate){
		this._oButtonDelegate = {
			ontap: function(){
				that._oCloseTrigger = this;
			}
		};
	}
	
	if(oOldButton){
		oOldButton.removeDelegate(this._oButtonDelegate);
	}
	
	if(oButton){
		oButton.addDelegate(this._oButtonDelegate, true, oButton);
		if(sap.m.Dialog._bOneDesign){
			if( !(oButton.getType() === sap.m.ButtonType.Accept || oButton.getType() === sap.m.ButtonType.Reject)){
				oButton.setType(sap.m.ButtonType.Transparent);
			}
		}
	}
	
	if(!sap.m.Dialog._bOneDesign && sap.ui.Device.os.ios && !this._bMessageType){
		this._createHeader();
		if(oButton){
			if(oOldButton){
				this._header.removeAggregation(sHeaderAggregationName, oOldButton, true);
			}
			this._header.addAggregation(sHeaderAggregationName, oButton, true);
			this._header.invalidate();
		}else{
			if(oOldButton){
				this._header.removeAggregation(sHeaderAggregationName, oOldButton);
			}
		}
	}else{
		this.setAggregation(sAggregationName, oButton, false, /*avoid infinite loop*/true);
	}
	
	return this;
};

sap.m.Dialog.prototype._getButton = function(sPos){
	var sPosModified = this._firstLetterUpperCase(sPos),
		sHeaderAggregationName = this._composeAggreNameInHeader(sPosModified),
		sAggregationName = sPos.toLowerCase() + "Button", 
		sType = this.getType(),
		aHeaderAggregation;
	
	if(!sap.m.Dialog._bOneDesign && sap.ui.Device.os.ios && !this._bMessageType){
		aHeaderAggregation = this._header && this._header.getAggregation(sHeaderAggregationName);
		if(aHeaderAggregation && aHeaderAggregation[0]){
			return aHeaderAggregation[0];
		}else{
			return null;
		}
	}else{
		return this.getAggregation(sAggregationName, null, /*avoid infinite loop*/true);
	}
	
};

sap.m.Dialog.prototype._getButtonFromHeader = function(sPos){
	if(this._header){
		var sHeaderAggregationName = this._composeAggreNameInHeader(this._firstLetterUpperCase(sPos)),
			aContent = this._header.getAggregation(sHeaderAggregationName);
		return aContent && aContent[0];
	}else{
		return null;
	}
};

sap.m.Dialog.prototype._firstLetterUpperCase = function(sValue){
	return sValue.charAt(0).toUpperCase() + sValue.slice(1).toLowerCase();
};

sap.m.Dialog.prototype._getAnyHeader = function(){
	var oCustomHeader = this.getCustomHeader();
	
	if(oCustomHeader){
		return oCustomHeader;
	}else{
		var bShowHeader = this.getShowHeader();
		
		// if showHeader is set to false and not for standard dialog in iOS in theme sap_mvi, no header.
		if(!bShowHeader && !(!sap.m.Dialog._bOneDesign && !this._bMessageType && sap.ui.Device.os.ios)){
			return null;
		}

		if(!sap.m.Dialog._bOneDesign && !this.getTitle() && !this.getBeginButton() && !this.getEndButton()){
			//if there's no title, no left and right buttons, header isn't shown. (only in platform dependent themes)
			//for platform independent themes, header is always created.
			return null;
		}
		
		this._createHeader();
		return this._header;
	}
};

sap.m.Dialog.prototype._deregisterResizeHandler = function(){
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

sap.m.Dialog.prototype._registerResizeHandler = function(){
	if(!this._sResizeListenerId && this.getDomRef()){
		var oResizeDomRef = this.getDomRef("scroll");
		this._iResizeDomWidth = oResizeDomRef.offsetWidth;
		this._iResizeDomHeight = oResizeDomRef.offsetHeight;
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(oResizeDomRef,  this._fnContentResize);
	}
};
/* =========================================================== */
/*                      end: private functions                 */
/* =========================================================== */

/* =========================================================== */
/*                         begin: setters                      */
/* =========================================================== */

sap.m.Dialog.prototype.setBeginButton = function(oButton){
	return this._setButton(oButton, "begin");
};

sap.m.Dialog.prototype.setEndButton = function(oButton){
	return this._setButton(oButton, "end");
};

sap.m.Dialog.prototype.setLeftButton = function(vButton){
	if(!(vButton instanceof sap.m.Button)){
		vButton = sap.ui.getCore().byId(vButton);
	}
	
	//setting leftButton will also set the beginButton with the same button instance.
	//as this instance is aggregated by the beginButton, the hidden aggregation isn't needed.
	this._setButton(vButton, "begin");
	return this.setAssociation("leftButton", vButton);
};

sap.m.Dialog.prototype.setRightButton = function(vButton){
	if(!(vButton instanceof sap.m.Button)){
		vButton = sap.ui.getCore().byId(vButton);
	}
	
	//setting rightButton will also set the endButton with the same button instance.
	//as this instance is aggregated by the endButton, the hidden aggregation isn't needed.
	this._setButton(vButton, "end");
	return this.setAssociation("rightButton", vButton);
};

sap.m.Dialog.prototype.setTitle = function(sTitle){
	this.setProperty("title", sTitle, true);

	if(this._headerTitle){
		this._headerTitle.setText(sTitle);
	}else{
		this._headerTitle = new sap.m.Label(this.getId() + "-title", {
			text: sTitle
		}).addStyleClass("sapMDialogTitle");
		
		if(sap.m.Dialog._bOneDesign || (sap.ui.Device.os.ios && !this._bMessageType)){
			this._createHeader();
			this._header.addContentMiddle(this._headerTitle);
		}else{
			this.setAggregation("_title", this._headerTitle);
		}
	}
	return this;
};

sap.m.Dialog.prototype.setCustomHeader = function(oCustomHeader){
	if(!sap.m.Dialog._bOneDesign){
		jQuery.sap.log.warning("CustomHeader property in sap.m.Dialog isn't supported in theme sap_mvi!");
	}else{
		if(oCustomHeader){
			oCustomHeader.addStyleClass("sapMDialogTitle");
		}
		this.setAggregation("customHeader", oCustomHeader);
	}
};

sap.m.Dialog.prototype.setState = function(sState){
	var mFlags = {}, 
		$this = this.$(),
		sName;
	mFlags[sState] = true;
	
	this.setProperty("state", sState, true);
	if(sap.m.Dialog._bOneDesign){
		for(sName in sap.m.Dialog._mStateClasses){
			$this.toggleClass(sap.m.Dialog._mStateClasses[sName], !!mFlags[sName]);
		}
		this.setIcon(sap.m.Dialog._mIcons[sState], true);
	}
};

sap.m.Dialog.prototype.setIcon = function(sIcon, bInternal){
	if(!bInternal){
		this._externalIcon = sIcon;
	}else{
		if(this._externalIcon){
			sIcon = this._externalIcon;
		}
	}
	
	if(sap.m.Dialog._bOneDesign || !sap.ui.Device.os.ios){
		//icon is only shown in non iOS platform
		if(sIcon){
			if(sIcon!==this.getIcon()){
				if(this._iconImage){
					this._iconImage.setSrc(sIcon);
				}else{
					this._iconImage = sap.ui.core.IconPool.createControlByURI({
						id: this.getId() + "-icon",
						src: sIcon
					}, sap.m.Image).addStyleClass("sapMDialogIcon");
					
					if(sap.m.Dialog._bOneDesign){
						this._createHeader();
						this._header.insertAggregation("contentMiddle", this._iconImage, 0);
					}else{
						this.setAggregation("_icon", this._iconImage);
					}
				}
			}
		}else{
			var sDialogState = this.getState();
			if(!bInternal && sDialogState !== sap.ui.core.ValueState.None && sap.m.Dialog._bOneDesign){
				if(this._iconImage){
					this._iconImage.setSrc(sap.m.Dialog._mIcons[sDialogState]);
				}
			}else{
				if(this._iconImage){
					this._iconImage.destroy();
					this._iconImage = null;
				}
			}
		}
	}
	
	this.setProperty("icon", sIcon, true);
	return this;
};

sap.m.Dialog.prototype.setType = function(sType){
	var sOldType = this.getType(), $blockRef, oBeginButton, oEndButton;
	
	if(sOldType === sType){
		return;
	}
	
	//first time set type property, need to check if the left button and right button are set
	//if set, need to move them when type is message
	if(this._bMessageType === undefined){
		if(sType === sap.m.DialogType.Message && !sap.m.Dialog._bOneDesign && sap.ui.Device.os.ios){
			if(this._header){
				oBeginButton = this._getButtonFromHeader("left");
				oEndButton = this._getButtonFromHeader("right");
				if(oBeginButton){
					this.setAggregation("beginButton", oBeginButton, false, true);
				}
				if(oEndButton){
					this.setAggregation("endButton", oEndButton, false, true);
				}
				this._header.destroy();
				this._header = null;
			}
		}
	}
	
	this._bMessageType = (sType === sap.m.DialogType.Message);
	
	if(!sap.m.Dialog._bOneDesign && sap.ui.Device.os.ios){
		$blockRef = jQuery("#sap-ui-blocklayer-popup");
		//reset blocklayer css and popup animation for iphone when changing the type
		if(this._bMessageType || !sap.ui.Device.system.phone){
			this.oPopup.setModal(true, "sapMDialogBlockLayerInit");
			if($blockRef.length > 0){
				$blockRef.removeClass("sapMDialogTransparentBlk").addClass("sapMDialogBlockLayerInit");
				if(this.oPopup.isOpen()){
					$blockRef.addClass("sapMBusyBLyInit sapMBusyBLyShown");
				}	
			}
			this.oPopup.setPosition("center center", "center center", document, "0 0", "fit");
			this._initBlockLayerAnimation();
		}else{
			this.oPopup.setModal(true, "sapMDialogTransparentBlk");
			if($blockRef.length > 0){
				$blockRef.removeClass("sapMBusyBLyShown sapMBusyBLyInit").addClass("sapMDialogTransparentBlk");
			}
			this.oPopup.setPosition("center top", "center bottom", document, "0 0", "fit");
			this._clearBlockLayerAnimation();
		}
	}
	
	return this.setProperty("type", sType, false);
};

sap.m.Dialog.prototype.setStretch = function(bStretch){
	this._bStretchSet = true;
	return this.setProperty("stretch", bStretch);
};

sap.m.Dialog.prototype.setStretchOnPhone = function(bStretchOnPhone){
	if(this._bStretchSet){
		jQuery.sap.log.warning("sap.m.Dialog: stretchOnPhone property is deprecated. Setting stretchOnPhone property is ignored when there's already stretch property set.")
		return this;
	}
	this.setProperty("stretchOnPhone", bStretchOnPhone);
	return this.setProperty("stretch", bStretchOnPhone && sap.ui.Device.system.phone);
};

sap.m.Dialog.prototype.setVerticalScrolling = function(bValue) {
	var oldValue = this.getVerticalScrolling();
	if(oldValue === bValue) {
		return;
	}

	this.$().toggleClass("sapMDialogVerScrollDisabled", !bValue);
	this.setProperty("verticalScrolling", bValue);

	if(this._oScroller) {
		this._oScroller.setVertical(bValue);
	}

	return this;

};

sap.m.Dialog.prototype.setHorizontalScrolling = function(bValue) {
	var oldValue = this.getHorizontalScrolling();
	if(oldValue === bValue){
		return;
	}

	this.$().toggleClass("sapMDialogHorScrollDisabled", !bValue);
	this.setProperty("horizontalScrolling", bValue);

	if(this._oScroller) {
		this._oScroller.setHorizontal(bValue);
	}

	return this;
};
/* =========================================================== */
/*                           end: setters                      */
/* =========================================================== */

// Pass the setter of beginButton and endButton from dialog to internal header
// Both of them are singular aggregation, only the following three methods need
// to be overwritten
sap.m.Dialog.prototype.setAggregation = function(sAggregationName, oObject, bSuppressInvalidate, bPassBy){
	if(!bPassBy && (sAggregationName === "beginButton" || sAggregationName === "endButton")){
		return this._setButton(oObject, sAggregationName.substring(0, sAggregationName.indexOf("Button")));
	}else{
		return sap.ui.core.Control.prototype.setAggregation.apply(this, Array.prototype.slice.call(arguments, 0, 3));
	}
};

sap.m.Dialog.prototype.getAggregation = function(sAggregationName, oDefaultForCreation, bPassBy){
	if(!bPassBy && (sAggregationName === "beginButton" || sAggregationName === "endButton")){
		return this._getButton(sAggregationName.substring(0, sAggregationName.indexOf("Button"))) || oDefaultForCreation || null;
	}else{
		return sap.ui.core.Control.prototype.getAggregation.apply(this, Array.prototype.slice.call(arguments, 0, 2));
	}
};

sap.m.Dialog.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate){
	if((sAggregationName === "beginButton" || sAggregationName === "endButton") && (!sap.m.Dialog._bOneDesign && sap.ui.Device.os.ios && !this._bMessageType)){
		var sPos = sAggregationName.substring(0, sAggregationName.indexOf("Button")),
			sPos = this._firstLetterUpperCase(sPos),
			sHeaderAggregationName = "content" + sPos,
			aHeaderAggregation = this._header && this._header.getAggregation(sHeaderAggregationName);
		if(aHeaderAggregation && aHeaderAggregation[0]){
			aHeaderAggregation[0].destroy();
		}
	}else{
		return sap.ui.core.Control.prototype.destroyAggregation.apply(this, arguments);
	}
};

sap.m.Dialog.prototype.forceInvalidate = sap.ui.core.Control.prototype.invalidate;

// stop propagating the invalidate to static UIArea before dialog is opened.
// otherwise the open animation can't be seen
// dialog will be rendered directly to static ui area when the open method is called.
sap.m.Dialog.prototype.invalidate = function(oOrigin){
	if(this.isOpen()){
		this.forceInvalidate(oOrigin);
	}
};

}; // end of sap/m/Dialog.js
if ( !jQuery.sap.isDeclared('sap.m.DisplayListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.DisplayListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class DisplayListItem renderer.
 * @static
 */
sap.m.DisplayListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.DisplayListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMDLI");
};

sap.m.DisplayListItemRenderer.renderLIContent = function(rm, oLI) {

	var isLabel = oLI.getLabel();

	// List item label
	if (isLabel) {
		rm.write("<label for='" + oLI.getId() + "-value' class='sapMDLILabel'>");
		rm.writeEscaped(oLI.getLabel());
		rm.write("</label>");
	}
	
	var isValue = oLI.getValue();
	
	// List item value
	if (isValue) {
		rm.write("<div id='" + oLI.getId() + "-value' class='sapMDLIValue'>");
		rm.writeEscaped(oLI.getValue());
		rm.write("</div>");
	}
};

}; // end of sap/m/DisplayListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.FacetFilterItemRenderer') ) {
/*
 * @copyright
 */

jQuery.sap.declare("sap.m.FacetFilterItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



sap.m.FacetFilterItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be rendered
 */
sap.m.FacetFilterItemRenderer.renderLIContent = function(oRm, oControl) {

	oRm.write("<div");
	oRm.addClass("sapMFFLITitle");
	oRm.writeClasses();
	oRm.write(">");
  oRm.writeEscaped(oControl.getText());
  oRm.write("</div>");
};

}; // end of sap/m/FacetFilterItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.FacetFilterListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.FacetFilterListRenderer");


jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


jQuery.sap.declare("sap.m.FacetFilterListRenderer");

/**
 * @class List renderer.
 * @static
 *
 * ListRenderer extends the ListBaseRenderer
 */
sap.m.FacetFilterListRenderer = sap.ui.core.Renderer.extend(sap.m.ListRenderer);

}; // end of sap/m/FacetFilterListRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.FeedListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for the sap.m.FeedListItem
jQuery.sap.declare("sap.m.FeedListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class FeedListItem renderer.
 * @static
 */
sap.m.FeedListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Make sure that parent li is displayed as a horizontal webkit-box.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the
 *            Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oFeedListItem an object representation of the feed list item that
 *            should be rendered
 */
sap.m.FeedListItemRenderer.renderLIAttributes = function (rm, oFeedListItem) {
	rm.addClass("sapMFeedListItemTitleDiv");
	if (oFeedListItem._showSeparators === sap.m.ListSeparators.None) {
		rm.addClass("sapMFeedListShowSeparatorsNone");
	} else {
		rm.addClass("sapMFeedListShowSeparatorsAll");
	}
	
};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the
 *            Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oFeedListItem an object representation of the feed list item that
 *            should be rendered
 */
sap.m.FeedListItemRenderer.renderLIContent = function (rm, oFeedListItem) {
	// convenience variable
	var sMyId = oFeedListItem.getId(),
		bIsPhone = sap.ui.Device.system.phone;

	rm.write('<article');
	rm.writeControlData(oFeedListItem);
	rm.addClass('sapMFeedListItem');

	rm.writeClasses();
	rm.write('>');

	// icon
	if (!!oFeedListItem.getShowIcon()) {
		rm.write('<figure id="' + sMyId + '-figure" class ="sapMFeedListItemFigure');
		if (!!oFeedListItem.getIcon()) {
			rm.write('">');
		} else {
			rm.write(' sapMFeedListItemIsDefaultIcon">');
		}
		if (!!oFeedListItem.getIconActive()) {
			
			rm.write('<a id="' + sMyId + '-iconRef" ');
			rm.writeAttribute('href', 'javascript:void(0);');
			rm.write('>');
		} 
		rm.renderControl(oFeedListItem._getImageControl());	
		if (!!oFeedListItem.getIconActive()) {
			rm.write('</a>');
		}
		rm.write('</figure>');
	}

	// text (starting with sender)
	

	
	if (bIsPhone) {
		rm.write('<div class= "sapMFeedListItemHeader ');
		if (!!oFeedListItem.getShowIcon()) {
			rm.write('sapMFeedListItemHasFigure ');
		}
		if (!!oFeedListItem.getSender() && !!oFeedListItem.getTimestamp()) {
			rm.write('sapMFeedListItemFullHeight');
		}
		rm.write('" >');
			if (!!oFeedListItem.getSender()) {
				rm.write('<p id="' + sMyId + '-name" class="sapMFeedListItemTextName">');
				rm.renderControl(oFeedListItem._getLinkControl());
				rm.write('</p>');
			}
			if (!!oFeedListItem.getTimestamp()) {
				//write date
				rm.write('<p class="sapMFeedListItemTimestamp">');
				rm.writeEscaped(oFeedListItem.getTimestamp());
				rm.write('</p>');
			}
		
		rm.write('</div>');
		rm.write('<p class="sapMFeedListItemText">');
		rm.writeEscaped(oFeedListItem.getText(), true);
		rm.write('</p>');
		if (!!oFeedListItem.getInfo()) {
			// info
			rm.write('<p class="sapMFeedListItemFooter">');
			if (!!oFeedListItem.getInfo()) {
				rm.write('<span class="sapMFeedListItemInfo">');
				rm.writeEscaped(oFeedListItem.getInfo());
				rm.write('</span>');
			}
		}
	} else {
		rm.write('<div class= "sapMFeedListItemText ');
		if (!!oFeedListItem.getShowIcon()) {
			rm.write('sapMFeedListItemHasFigure ');
		}
		rm.write('" >');
		rm.write('<p id="' + sMyId + '-text" class="sapMFeedListItemTextText">');
		if (!!oFeedListItem.getSender()) {
			rm.write('<span id="' + sMyId + '-name" class="sapMFeedListItemTextName">');
			rm.renderControl(oFeedListItem._getLinkControl());
			rm.write(': ');
			rm.write('</span>');
		}
		rm.writeEscaped(oFeedListItem.getText(), true);
		if (!!oFeedListItem.getInfo() || !!oFeedListItem.getTimestamp()) {
			if(!sap.ui.getCore().getConfiguration().getRTL()){
				// info and date
				rm.write('<p class="sapMFeedListItemFooter">');
				if (!!oFeedListItem.getInfo()) {
					rm.writeEscaped(oFeedListItem.getInfo());
					//Write Interpunct separator if necessary (with spaces before and after)
					if (!!oFeedListItem.getTimestamp()) {
						rm.write("<span>&#160&#160&#x00B7&#160&#160</span>");
					}
				}
				if (!!oFeedListItem.getTimestamp()) {
					rm.writeEscaped(oFeedListItem.getTimestamp());
				}
			} else {
				// info and date
				rm.write('<p class="sapMFeedListItemFooter">');
				if (!!oFeedListItem.getTimestamp()) {
					rm.writeEscaped(oFeedListItem.getTimestamp());
				}
				if (!!oFeedListItem.getInfo()) {
					//Write Interpunct separator if necessary (with spaces before and after)
					if (!!oFeedListItem.getTimestamp()) {
						rm.write("<span>&#160&#160&#x00B7&#160&#160</span>");
					}
					rm.writeEscaped(oFeedListItem.getInfo());
				}
				
			}
			
		}
		rm.write('</p>');
		rm.write('</div>');
	}
	rm.write('</article>');
};

}; // end of sap/m/FeedListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.FlexBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FlexBox.
jQuery.sap.declare("sap.m.FlexBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FlexBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getDisplayInline displayInline} : boolean (default: false)</li>
 * <li>{@link #getDirection direction} : sap.m.FlexDirection (default: sap.m.FlexDirection.Row)</li>
 * <li>{@link #getFitContainer fitContainer} : boolean (default: false)</li>
 * <li>{@link #getRenderType renderType} : sap.m.FlexRendertype (default: sap.m.FlexRendertype.Div)</li>
 * <li>{@link #getJustifyContent justifyContent} : sap.m.FlexJustifyContent (default: sap.m.FlexJustifyContent.Start)</li>
 * <li>{@link #getAlignItems alignItems} : sap.m.FlexAlignItems (default: sap.m.FlexAlignItems.Stretch)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The FlexBox control builds the container for a flexible box layout.
 * 
 * Browser support:
 * This control is not supported in Internet Explorer 9!
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.FlexBox
 */
sap.ui.core.Control.extend("sap.m.FlexBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"displayInline" : {type : "boolean", group : "Appearance", defaultValue : false},
		"direction" : {type : "sap.m.FlexDirection", group : "Appearance", defaultValue : sap.m.FlexDirection.Row},
		"fitContainer" : {type : "boolean", group : "Appearance", defaultValue : false},
		"renderType" : {type : "sap.m.FlexRendertype", group : "Misc", defaultValue : sap.m.FlexRendertype.Div},
		"justifyContent" : {type : "sap.m.FlexJustifyContent", group : "Appearance", defaultValue : sap.m.FlexJustifyContent.Start},
		"alignItems" : {type : "sap.m.FlexAlignItems", group : "Appearance", defaultValue : sap.m.FlexAlignItems.Stretch}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.core.Control", multiple : true, singularName : "item"}
	}
}});


/**
 * Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FlexBox.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Is the control visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.FlexBox#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setVisible
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the FlexBox. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @since 1.9.1
 * @name sap.m.FlexBox#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * @name sap.m.FlexBox#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the FlexBox. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @since 1.9.1
 * @name sap.m.FlexBox#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * @name sap.m.FlexBox#setWidth
 * @function
 */


/**
 * Getter for property <code>displayInline</code>.
 * Determines whether the flexbox is in block or inline mode
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displayInline</code>
 * @public
 * @name sap.m.FlexBox#getDisplayInline
 * @function
 */

/**
 * Setter for property <code>displayInline</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplayInline  new value for property <code>displayInline</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setDisplayInline
 * @function
 */


/**
 * Getter for property <code>direction</code>.
 * Determines the direction of the layout of child elements
 *
 * Default value is <code>Row</code>
 *
 * @return {sap.m.FlexDirection} the value of property <code>direction</code>
 * @public
 * @name sap.m.FlexBox#getDirection
 * @function
 */

/**
 * Setter for property <code>direction</code>.
 *
 * Default value is <code>Row</code> 
 *
 * @param {sap.m.FlexDirection} oDirection  new value for property <code>direction</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setDirection
 * @function
 */


/**
 * Getter for property <code>fitContainer</code>.
 * Determines whether the flexbox will be sized to completely fill its container. If the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>fitContainer</code>
 * @public
 * @name sap.m.FlexBox#getFitContainer
 * @function
 */

/**
 * Setter for property <code>fitContainer</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFitContainer  new value for property <code>fitContainer</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setFitContainer
 * @function
 */


/**
 * Getter for property <code>renderType</code>.
 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul)
 *
 * Default value is <code>Div</code>
 *
 * @return {sap.m.FlexRendertype} the value of property <code>renderType</code>
 * @public
 * @name sap.m.FlexBox#getRenderType
 * @function
 */

/**
 * Setter for property <code>renderType</code>.
 *
 * Default value is <code>Div</code> 
 *
 * @param {sap.m.FlexRendertype} oRenderType  new value for property <code>renderType</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setRenderType
 * @function
 */


/**
 * Getter for property <code>justifyContent</code>.
 * Determines the layout behavior along the main axis. "SpaceAround" is currently not supported in most non-Webkit browsers.
 *
 * Default value is <code>Start</code>
 *
 * @return {sap.m.FlexJustifyContent} the value of property <code>justifyContent</code>
 * @public
 * @name sap.m.FlexBox#getJustifyContent
 * @function
 */

/**
 * Setter for property <code>justifyContent</code>.
 *
 * Default value is <code>Start</code> 
 *
 * @param {sap.m.FlexJustifyContent} oJustifyContent  new value for property <code>justifyContent</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setJustifyContent
 * @function
 */


/**
 * Getter for property <code>alignItems</code>.
 * Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer <10.
 *
 * Default value is <code>Stretch</code>
 *
 * @return {sap.m.FlexAlignItems} the value of property <code>alignItems</code>
 * @public
 * @name sap.m.FlexBox#getAlignItems
 * @function
 */

/**
 * Setter for property <code>alignItems</code>.
 *
 * Default value is <code>Stretch</code> 
 *
 * @param {sap.m.FlexAlignItems} oAlignItems  new value for property <code>alignItems</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setAlignItems
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Flex items within the FlexBox layout
 * 
 * <strong>Note</strong>: this is the default aggregation for FlexBox.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.FlexBox#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Control} vItem the item to remove or its index or id
 * @return {sap.ui.core.Control} the removed item or null
 * @public
 * @name sap.m.FlexBox#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.FlexBox#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.FlexBox#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#destroyItems
 * @function
 */


// Start of sap\m\FlexBox.js


sap.m.FlexBox.prototype.init = function() {
	// Make sure that HBox and VBox have a valid direction
	if(this instanceof sap.m.HBox && (this.getDirection() !== "Row" || this.getDirection() !== "RowReverse")) {
		this.setDirection('Row');
	}
	if(this instanceof sap.m.VBox && (this.getDirection() !== "Column" || this.getDirection() !== "ColumnReverse")) {
		this.setDirection('Column');
	}
};

sap.m.FlexBox.prototype.setDisplayInline = function(bInline) {
	var sDisplay = "";

	this.setProperty("displayInline", bInline, false);
	if(bInline) {
		sDisplay = "inline-flex";
	} else {
		sDisplay = "flex";
	}
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "display", sDisplay);
	return this;
};

sap.m.FlexBox.prototype.setDirection = function(sValue) {
	this.setProperty("direction", sValue, false);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-direction", sValue);
	return this;
};

sap.m.FlexBox.prototype.setFitContainer = function(sValue) {
	if(sValue && !(this.getParent() instanceof sap.m.FlexBox)) {
		jQuery.sap.log.info("FlexBox fitContainer set to true. Remember, if the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.");
		var $flexContainer = this.$();
		$flexContainer.css("width", "auto");
		$flexContainer.css("height", "100%");
	}
	
	this.setProperty("fitContainer", sValue, false);

	return this;
};

//TODO Enable wrapping when any browser supports it
/*sap.m.FlexBox.prototype.setJustifyContent = function(sValue) {
	this.setProperty("wrap", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-wrap", sValue);
	return this;
}*/

sap.m.FlexBox.prototype.setJustifyContent = function(sValue) {
	this.setProperty("justifyContent", sValue, false);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "justify-content", sValue);
	return this;
};

sap.m.FlexBox.prototype.setAlignItems = function(sValue) {
	this.setProperty("alignItems", sValue, false);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "align-items", sValue);
	return this;
};

sap.m.FlexBox.prototype.setAlignContent = function(sValue) {
	this.setProperty("alignContent", sValue, false);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "align-content", sValue);
	return this;
};

sap.m.FlexBox.prototype.onAfterRendering = function() {
	if(jQuery.support.useFlexBoxPolyfill) {
		// Check for parent FlexBoxes. Size calculations need to be made from top to bottom
		// while the renderer goes from bottom to top.
		var currentElement = this;
		var parent = null;
		jQuery.sap.log.info("Check #"+currentElement.getId()+" for nested FlexBoxes");

		for (parent = currentElement.getParent();
			parent !== null && parent !== undefined && 
			(parent instanceof sap.m.FlexBox
			|| (parent.getLayoutData() !== null && parent.getLayoutData() instanceof sap.m.FlexItemData));
			) {
			currentElement = parent;
			parent = currentElement.getParent();
		}

		this.sanitizeChildren(this);
		this.renderFlexBoxPolyFill();
	}
};

/*
 * @private
 */
sap.m.FlexBox.prototype.sanitizeChildren = function(oControl) {
	// Check the flex items
	var aChildren = oControl.getItems();
	for (var i = 0; i < aChildren.length; i++) {
		if(aChildren[i].getVisible === undefined || aChildren[i].getVisible()) {
			var $child = "";
			if(aChildren[i] instanceof sap.m.FlexBox) {
				$child = aChildren[i].$();
			} else {
				$child = aChildren[i].$().parent();	// Get wrapper <div>
			}
			var domchild =  aChildren[i].getDomRef();
			$child.width("auto");
			//$child.height("100%");
			if(aChildren[i] instanceof sap.m.FlexBox) {
				this.sanitizeChildren(aChildren[i]);
			}
		}
	}
};

/*
 * @private
 */
sap.m.FlexBox.prototype.renderFlexBoxPolyFill = function() {
	var flexMatrix = [];
	var ordinalMatrix = [];

	// Prepare flex and ordinal matrix
	var aChildren = this.getItems();
	for (var i = 0; i < aChildren.length; i++) {
		// If no visible property or if visible
		if(aChildren[i].getVisible === undefined || aChildren[i].getVisible()) {
			// Get layout properties
			var oLayoutData = aChildren[i].getLayoutData();

			if(oLayoutData !== "undefined" && oLayoutData !== null && oLayoutData instanceof sap.m.FlexItemData) {
				if(oLayoutData.getGrowFactor() !== 1) {
					flexMatrix.push(oLayoutData.getGrowFactor());
				} else {
					flexMatrix.push(1);		// default value
				}
				if(oLayoutData.getOrder() != 0) {
					ordinalMatrix.push(oLayoutData.getOrder());
				} else {
					ordinalMatrix.push(0);	// default value
				}
			}
		}
	}

	if(flexMatrix.length === 0) flexMatrix = null;
	if(ordinalMatrix.length === 0) ordinalMatrix = null;

	if(this.getFitContainer()) {
		// Call setter for fitContainer to apply the appropriate styles which are normally applied by the FlexBoxStylingHelper
		this.setFitContainer(true);
	}

	var oSettings = {
	    direction : this.getDirection(),
	    alignItems : this.getAlignItems(),
	    justifyContent : this.getJustifyContent(),
	    flexMatrix : flexMatrix,
	    ordinalMatrix : ordinalMatrix
	};

	sap.m.FlexBoxStylingHelper.applyFlexBoxPolyfill(this.getId(), oSettings);
};
}; // end of sap/m/FlexBox.js
if ( !jQuery.sap.isDeclared('sap.m.FlexBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.FlexBoxRenderer");

/**
 * @class FlexBox renderer
 * @static
 */
sap.m.FlexBoxRenderer = {};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.FlexBoxRenderer.render = function(oRm, oControl) {
	// Return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}
	
	if (!jQuery.support.flexBoxLayout && !jQuery.support.newFlexBoxLayout && !jQuery.support.ie10FlexBoxLayout) {
		jQuery.sap.log.warning("This browser does not support Flexible Box Layouts natively.");
		sap.m.FlexBoxRenderer.usePolyfill = true;
	}

	// Make sure HBox and VBox don't get the wrong direction and get the appropriate class
	var hvClass = "";
	if(oControl.getDirection() === "Row" || oControl.getDirection() === "RowReverse") {
		if(oControl instanceof sap.m.VBox) {
			jQuery.sap.log.error("Flex direction cannot be set to Row or RowReverse on VBox controls.");
		} else {
			hvClass = "sapMHBox";
		}
	} else if(oControl.getDirection() === "Column" || oControl.getDirection() === "ColumnReverse"){
		if(oControl instanceof sap.m.HBox) {
			jQuery.sap.log.error("Flex direction cannot be set to Column or ColumnReverse on HBox controls.");
		} else {
			hvClass = "sapMVBox";
		}
	}

	// Special treatment if FlexBox is itself an item of a parent FlexBox
	var oParent = oControl.getParent();
	if(oControl.getParent() instanceof sap.m.FlexBox) {
		oRm.addClass("sapMFlexItem");


		// Set layout properties
		var oLayoutData = oControl.getLayoutData();
		if(oLayoutData instanceof sap.m.FlexItemData && !sap.m.FlexBoxRenderer.usePolyfill) {
			sap.m.FlexBoxStylingHelper.setFlexItemStyles(oRm, oLayoutData);
		}

		if(oParent.getRenderType() === 'List') {
			oRm.write('<li');
			oRm.writeClasses();
			oRm.writeStyles();
		}
	}

	if(oControl.getRenderType() === 'List') {
		oRm.write('<ul');
	} else {
		oRm.write('<div');
	}

	oRm.writeControlData(oControl);
	oRm.addClass("sapMFlexBox");
	oRm.addClass(hvClass);
	oRm.writeClasses();
	oRm.addStyle("width", oControl.getWidth());
	oRm.addStyle("height", oControl.getHeight());
	if(!sap.m.FlexBoxRenderer.usePolyfill) {
		sap.m.FlexBoxStylingHelper.setFlexBoxStyles(oRm, oControl);
	}
	oRm.writeStyles();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	oRm.write(">");

	// Now render the flex items
	var aChildren = oControl.getItems();
	var bWrapItem = true;
	for (var i = 0; i < aChildren.length; i++) {
		// Don't wrap if it's a FlexBox control or if it's not visible
		if(aChildren[i] instanceof sap.m.FlexBox || (aChildren[i].getVisible !== undefined && !aChildren[i].getVisible())) {
			bWrapItem = false;
		} else {
			bWrapItem = true;
		}

		// Create wrapper if it's not a FlexBox control
		if(bWrapItem) {
			if(oControl.getRenderType() === 'List') {
				oRm.write('<li');
			} else {
				oRm.write('<div');
			}

			// Set layout properties
			var oLayoutData = aChildren[i].getLayoutData();
			if(oLayoutData instanceof sap.m.FlexItemData) {
				if(oLayoutData.getId()) {
					oRm.write(" id='" + oLayoutData.getId() + "'");
				}
				if(oLayoutData.getStyleClass()) {
					oRm.addClass(oLayoutData.getStyleClass());
				}

				if(!sap.m.FlexBoxRenderer.usePolyfill) {
					sap.m.FlexBoxStylingHelper.setFlexItemStyles(oRm, oLayoutData);
				}

				// ScrollContainer needs height:100% on the flex item
				if(aChildren[i] instanceof sap.m.ScrollContainer) {
					oRm.addStyle("height", "100%");
				}
				oRm.writeStyles();
			}

			oRm.addClass("sapMFlexItem");
			oRm.writeClasses();
			oRm.write(">");
		}

		// Render control
		oRm.renderControl(aChildren[i]);

		if(bWrapItem) {
			// Close wrapper
			if(oControl.getRenderType() === 'List') {
				oRm.write('</li>');
			} else {
				oRm.write('</div>');
			}
		}
	}

	// Close the flexbox
	if(oControl.getRenderType() === "List") {
		oRm.write("</ul>");
	} else {
		oRm.write("</div>");
	}
};
}; // end of sap/m/FlexBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.FlexItemData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FlexItemData.
jQuery.sap.declare("sap.m.FlexItemData");

jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained



/**
 * Constructor for a new FlexItemData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAlignSelf alignSelf} : sap.m.FlexAlignSelf (default: sap.m.FlexAlignSelf.Auto)</li>
 * <li>{@link #getOrder order} : int (default: 0)</li>
 * <li>{@link #getGrowFactor growFactor} : float (default: 0)</li>
 * <li>{@link #getStyleClass styleClass} : string (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Holds layout data for a FlexBox
 * @extends sap.ui.core.LayoutData
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.FlexItemData
 */
sap.ui.core.LayoutData.extend("sap.m.FlexItemData", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"alignSelf" : {type : "sap.m.FlexAlignSelf", group : "Misc", defaultValue : sap.m.FlexAlignSelf.Auto},
		"order" : {type : "int", group : "Misc", defaultValue : 0},
		"growFactor" : {type : "float", group : "Misc", defaultValue : 0},
		"styleClass" : {type : "string", group : "Misc", defaultValue : '', deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.m.FlexItemData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FlexItemData.extend
 * @function
 */


/**
 * Getter for property <code>alignSelf</code>.
 * Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.m.FlexAlignSelf} the value of property <code>alignSelf</code>
 * @public
 * @name sap.m.FlexItemData#getAlignSelf
 * @function
 */

/**
 * Setter for property <code>alignSelf</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.m.FlexAlignSelf} oAlignSelf  new value for property <code>alignSelf</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setAlignSelf
 * @function
 */


/**
 * Getter for property <code>order</code>.
 * Determines the display order of flex items independent of their source code order.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>order</code>
 * @public
 * @name sap.m.FlexItemData#getOrder
 * @function
 */

/**
 * Setter for property <code>order</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iOrder  new value for property <code>order</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setOrder
 * @function
 */


/**
 * Getter for property <code>growFactor</code>.
 * Determines the flexibility of the flex item when allocatable space is remaining.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>growFactor</code>
 * @public
 * @name sap.m.FlexItemData#getGrowFactor
 * @function
 */

/**
 * Setter for property <code>growFactor</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fGrowFactor  new value for property <code>growFactor</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setGrowFactor
 * @function
 */


/**
 * Getter for property <code>styleClass</code>.
 * The style class will be applied to the flex item and can be used for CSS selectors
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>styleClass</code>
 * @public
 * @deprecated Since version 1.11.2. 
 * Generic addStyleClass method is available on the control
 * @name sap.m.FlexItemData#getStyleClass
 * @function
 */

/**
 * Setter for property <code>styleClass</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStyleClass  new value for property <code>styleClass</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.11.2. 
 * Generic addStyleClass method is available on the control
 * @name sap.m.FlexItemData#setStyleClass
 * @function
 */


// Start of sap\m\FlexItemData.js


sap.m.FlexItemData.prototype.setAlignSelf = function(sValue) {
	this.setProperty("alignSelf", sValue);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "align-self", sValue);
	return this;
};

sap.m.FlexItemData.prototype.setOrder = function(sValue) {
	this.setProperty("order", sValue);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "order", sValue);
	return this;
};

sap.m.FlexItemData.prototype.setGrowFactor = function(sValue) {
	this.setProperty("growFactor", sValue);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-grow", sValue);
	return this;
};

//TODO Uncomment when property is supported by any browser
/*sap.m.FlexItemData.prototype.setShrinkFactor = function(sValue) {
	this.setProperty("shrinkFactor", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-shrink", sValue);
	return this;
};*/

//TODO Uncomment when property is supported by any browser
/*sap.m.FlexItemData.prototype.setBaseSize = function(sValue) {
	this.setProperty("baseSize", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-basis", sValue);
	return this;
};*/

}; // end of sap/m/FlexItemData.js
if ( !jQuery.sap.isDeclared('sap.m.GroupHeaderListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.GroupHeaderListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class GroupHeaderListItem renderer.
 * @static
 */
sap.m.GroupHeaderListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the attributes for the given list item, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          rm the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oLI an object representation of the list item that should be
 *          rendered
 */
sap.m.GroupHeaderListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMGHLI");
	if (oLI.getUpperCase()) {
		rm.addClass("sapMGHLIUpperCase");
	}
};


/**
 * Renders the List item content
 *
 * @param {sap.ui.core.RenderManager}
 *          rm the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oLI an object representation of the list item that should be
 *          rendered
 * @param {sap.m.Table} [oTable]
 *          If this control is inside the table then this param can be used for col spanning
 */
sap.m.GroupHeaderListItemRenderer.renderLIContent = function(rm, oLI, oTable) {
	var sTitle = oLI.getTitle();
	oTable && rm.write("<td class='sapMGHLICell' colspan='" + (oTable.getColSpan()) + "'>");

	// List item label
	if (sTitle) {
		oTable && rm.write("<div class='sapMLIBContent sapMLIBContentMargin'>");
		rm.write("<label for='" + oLI.getId() + "-value' class='sapMGHLITitle'>");
		rm.writeEscaped(sTitle);

		var iCount = oLI.getCount();
		if (iCount !== undefined && iCount !== "") {
			rm.writeEscaped(" (" + iCount + ")");
		}

		rm.write("</label>");
		oTable && rm.write("</div>");
	}

	oTable && rm.write("</td>");
};

}; // end of sap/m/GroupHeaderListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.GrowingListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.GrowingListRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained




/**
 * @class GrowingList renderer.
 * @static
 */
sap.m.GrowingListRenderer = sap.ui.core.Renderer.extend(sap.m.ListRenderer);

sap.m.GrowingListRenderer.render = function(rm, oControl) {
	/**
	 * For backwards compatibility we can't remove GrowingList control
	 * However, if the compatibility version is 1.16 or higher then
	 * we stop rendering to force using List control with growing feature
	 */
	if (oControl._isIncompatible()) {
		jQuery.sap.log.warning("Does not render sap.m.GrowingList#" + oControl.getId() + " when compatibility version is 1.16 or higher. Instead use sap.m.List/Table control with growing feature!");
	} else {
		sap.m.ListRenderer.render.call(this, rm, oControl);
	}
};

}; // end of sap/m/GrowingListRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.HBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.HBox.
jQuery.sap.declare("sap.m.HBox");




/**
 * Constructor for a new HBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control as it is just a specialized FlexBox control.
 * 
 * Browser support:
 * This control is not supported in Internet Explorer 9!
 * @extends sap.m.FlexBox
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.HBox
 */
sap.m.FlexBox.extend("sap.m.HBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m"
}});


/**
 * Creates a new subclass of class sap.m.HBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.HBox.extend
 * @function
 */


// Start of sap\m\HBox.js

}; // end of sap/m/HBox.js
if ( !jQuery.sap.isDeclared('sap.m.HBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.HBoxRenderer");


/**
 * @class HBox renderer.
 * @static
 */
sap.m.HBoxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.HBoxRenderer.render = function(oRm, oControl){
	sap.m.FlexBoxRenderer.render.apply(this, [oRm, oControl]);
};

}; // end of sap/m/HBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.IconTabBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.IconTabBar.
jQuery.sap.declare("sap.m.IconTabBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new IconTabBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowSelection showSelection} : boolean (default: true)</li>
 * <li>{@link #getExpandable expandable} : boolean (default: true)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: true)</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.IconTab[]</li>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.IconTabBar#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.IconTabBar#event:expand expand} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A tab bar with large icons
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.IconTabBar
 */
sap.ui.core.Control.extend("sap.m.IconTabBar", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"showSelection" : {type : "boolean", group : "Misc", defaultValue : true, deprecated: true},
		"expandable" : {type : "boolean", group : "Misc", defaultValue : true},
		"expanded" : {type : "boolean", group : "Misc", defaultValue : true},
		"selectedKey" : {type : "string", group : "Data", defaultValue : null},
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	aggregations : {
    	"items" : {type : "sap.m.IconTab", multiple : true, singularName : "item"}, 
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	events : {
		"select" : {}, 
		"expand" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.IconTabBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.IconTabBar.extend
 * @function
 */

sap.m.IconTabBar.M_EVENTS = {'select':'select','expand':'expand'};


/**
 * Getter for property <code>showSelection</code>.
 * Defines whether the current selection should be visualized
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSelection</code>
 * @public
 * @deprecated Since version 1.15.0. 
 * Regarding to changes of this control this property is not needed anymore.
 * @name sap.m.IconTabBar#getShowSelection
 * @function
 */

/**
 * Setter for property <code>showSelection</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSelection  new value for property <code>showSelection</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.0. 
 * Regarding to changes of this control this property is not needed anymore.
 * @name sap.m.IconTabBar#setShowSelection
 * @function
 */


/**
 * Getter for property <code>expandable</code>.
 * Defines if the tabs can be collapsed and expanded
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>expandable</code>
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#getExpandable
 * @function
 */

/**
 * Setter for property <code>expandable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bExpandable  new value for property <code>expandable</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#setExpandable
 * @function
 */


/**
 * Getter for property <code>expanded</code>.
 * Indicates if the actual tab is expanded or not
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#getExpanded
 * @function
 */

/**
 * Setter for property <code>expanded</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bExpanded  new value for property <code>expanded</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#setExpanded
 * @function
 */


/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item.
 * 
 * If the key has no corresponding aggregated item, no changes will apply.
 * If duplicate keys exists the first item matching the key is used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#getSelectedKey
 * @function
 */

/**
 * Setter for property <code>selectedKey</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedKey  new value for property <code>selectedKey</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#setSelectedKey
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items displayed in the IconTabBar
 * 
 * @return {sap.m.IconTab[]}
 * @public
 * @name sap.m.IconTabBar#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.m.IconTab}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.m.IconTab}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.m.IconTab} vItem the item to remove or its index or id
 * @return {sap.m.IconTab} the removed item or null
 * @public
 * @name sap.m.IconTabBar#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.IconTab[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.IconTabBar#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.IconTab</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.IconTab}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.IconTabBar#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#destroyItems
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The contents displayed below the IconTabBar.
 * If there are multiple contents, they are rendered after each other. The developer has to manage to display the right one or use the content aggregation inside the IconTabFilter (which will be displayed instead if it is set).
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.IconTabBar#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.IconTabBar#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.IconTabBar#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.IconTabBar#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#destroyContent
 * @function
 */


/**
 * This event will be fired when an item is selected. 
 *
 * @name sap.m.IconTabBar#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.item The selected item.
 * @param {string} oControlEvent.getParameters.key The key of the selected item.
 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.selectedItem This parameter is deprecated since 1.15.0! Please use parameter "item" instead.
 * @param {string} oControlEvent.getParameters.selectedKey This parameter is deprecated since 1.15.0! Please use parameter "key" instead.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.IconTabBar</code>.<br/> itself. 
 *  
 * This event will be fired when an item is selected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code>.<br/> itself.
 *
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'item' of type <code>sap.m.IconTabFilter</code> The selected item.</li>
 * <li>'key' of type <code>string</code> The key of the selected item.</li>
 * <li>'selectedItem' of type <code>sap.m.IconTabFilter</code> This parameter is deprecated since 1.15.0! Please use parameter "item" instead.</li>
 * <li>'selectedKey' of type <code>string</code> This parameter is deprecated since 1.15.0! Please use parameter "key" instead.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.IconTabBar#fireSelect
 * @function
 */


/**
 * Indicates that the tab will expand or collapse 
 *
 * @name sap.m.IconTabBar#expand
 * @event
 * @since 1.15.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.expand If the tab will expand, this is true.
 * @param {boolean} oControlEvent.getParameters.collapse If the tab will collapse, this is true.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'expand' event of this <code>sap.m.IconTabBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.IconTabBar</code>.<br/> itself. 
 *  
 * Indicates that the tab will expand or collapse 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code>.<br/> itself.
 *
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#attachExpand
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'expand' event of this <code>sap.m.IconTabBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabBar#detachExpand
 * @function
 */

/**
 * Fire event expand to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'expand' of type <code>boolean</code> If the tab will expand, this is true.</li>
 * <li>'collapse' of type <code>boolean</code> If the tab will collapse, this is true.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @protected
 * @since 1.15.0
 * @name sap.m.IconTabBar#fireExpand
 * @function
 */


// Start of sap\m\IconTabBar.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.apply(sap.m.IconTabBar.prototype, [true]);


sap.m.IconTabBar.SCROLL_STEP = 264; // how many pixels to scroll with every overflow arrow click

/**
 * Init
 */
sap.m.IconTabBar.prototype.init = function() {
	this._bPreviousScrollForward = false; // remember the item overflow state
	this._bPreviousScrollBack = false;
	this._iCurrentScrollLeft = 0;
	this._bRtl = sap.ui.getCore().getConfiguration().getRTL();
	
	this.startScrollX = 0;
	this.startTouchX = 0;
	this._scrollable = null;
	
	this._aTabKeys = [];

	// Initialize the ItemNavigation
	this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation().setCycling(false);
	this.addDelegate(this._oItemNavigation);

	if (!sap.ui.Device.system.desktop || (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8)) {
		jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
		this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-head", {
			horizontal: true,
			vertical: false,
			zynga: false,
			iscroll: "force",
			preventDefault: false,
			nonTouchScrolling: "scrollbar"
		});
	}

};

/**
 * Exit
 */
sap.m.IconTabBar.prototype.exit = function() {
	if (this._oArrowLeft) {
		this._oArrowLeft.destroy();
	}
	if (this._oArrowRight) {
		this._oArrowRight.destroy();
	}

	if (this._oItemNavigation) {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		delete this._oItemNavigation;
	}

	if (this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	if (this._aTabKeys) {
		this._aTabKeys = null;
	}
};

/**
 * Before Rendering
 */
sap.m.IconTabBar.prototype.onBeforeRendering = function() {
	var aItems = this.getItems(),
		sSelectedKey = this.getSelectedKey(),
		i = 0;

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}

	if (aItems.length > 0) {
		if (!this.oSelectedItem || sSelectedKey && sSelectedKey !== this.oSelectedItem.getKey()) {
			if (sSelectedKey) {
				// selected key was specified by API: set oSelectedItem to the item specified by key
				for (; i < aItems.length; i++) {
					if (!(aItems[i] instanceof sap.m.IconTabSeparator) && aItems[i].getKey() === sSelectedKey) {
						this.oSelectedItem = aItems[i];
						break;
					}
				}
			}

			// no key and no item, we set the first visible item as selected if container is not explicitly set to collapsed
			if (!this.oSelectedItem && this.getExpanded()) {
				for (i = 0; i < aItems.length; i++) { // tab item
					if (!(aItems[i] instanceof sap.m.IconTabSeparator) && aItems[i].getVisible()) {
						this.oSelectedItem = aItems[i];
						break;
					}
				}
			}
		}

		//in case the selected tab is not visible anymore and the content is expanded, the selected tab will change to the first visible tab
		if (this.oSelectedItem && !this.oSelectedItem.getVisible() && this.getExpanded()) {
			for (i = 0; i < aItems.length; i++) { // tab item
				if (!(aItems[i] instanceof sap.m.IconTabSeparator) && aItems[i].getVisible()) {
					this.oSelectedItem = aItems[i];
					break;
				}
			}
		}

		if (this.oSelectedItem) {
			this.setProperty("selectedKey", this.oSelectedItem.getKey(), true);
		}
	}
};

/**
 * Sets the selected item based on key
 * @overwrite
 * @public
 * @param {string} sKey the key of the item to be selected
 * @return {sap.m.IconTabBar} this pointer for chaining
 */
sap.m.IconTabBar.prototype.setSelectedKey = function (sKey) {
	var aItems = this.getItems(),
		i = 0;

	// adjust UI and internal variables if already rendered (otherwise taken care by onBeforeRendering)
	if (this.$().length) {
		for (; i < aItems.length; i++) {
			if (!(aItems[i] instanceof sap.m.IconTabSeparator) && aItems[i].getKey() === sKey) {
				this.setSelectedItem(aItems[i], true);
				break;
			}
		}
	}

	// set internal property
	this.setProperty("selectedKey", sKey, true);
	return this;
};


/**
 * Sets the expanded flag and toggles the expand/collapse animation if the control is already rendered
 * @overwrite
 * @public
 * @param {boolean} bExpanded new parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 */
sap.m.IconTabBar.prototype.setExpanded = function (bExpanded) {
	// set internal property
	this.setProperty("expanded", bExpanded, true);

	// toggle animation if control is already rendered
	if (this.$().length) {
		this._toggleExpandCollapse(bExpanded);
	}
	return this;
};

/**
 * Sets the expandable flag without rerendering
 * @overwrite
 * @public
 * @param {boolean} bExpandable new parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 */
sap.m.IconTabBar.prototype.setExpandable = function (bExpandable) {
	// set internal property
	this.setProperty("expandable", bExpandable, true);
	return this;
};

/*
 * Sets the selected item, updates the UI, and fires the select event
 * @private
 * @param {sap.m.IconTabFilter} oItem the item to be selected
 * @return {sap.m.IconTabBar} this pointer for chaining
 */
sap.m.IconTabBar.prototype.setSelectedItem = function(oItem, bAPIchange) {

	if (!oItem || !oItem.getEnabled()) {
		return this;
	}
	var $content = this.$("content");
	
	if (this.oSelectedItem && this.oSelectedItem.getVisible() && (this.getExpandable() || this.oSelectedItem !== oItem )) {
		this.oSelectedItem.$().removeClass("sapMITBSelected");
	}

	if (oItem.getVisible()) {
		//click on already selected item leads to expanding/collapsing of the content (if expandable enabled)
		if (this.oSelectedItem === oItem) {
			//if content is not expandable nothing should happen otherwise content will be expanded/collapsed
			if (this.getExpandable()) {
				this._toggleExpandCollapse();
			}
		//click on other item leads to showing the right content of this item
		} else {
			// set new item
			this.oSelectedItem = oItem;
			this.setProperty("selectedKey", this.oSelectedItem.getKey(), true);

			// add selected styles
			this.oSelectedItem.$().addClass("sapMITBSelected");

			//if item has own content, this content is shown
			var oSelectedItemContent = this.oSelectedItem.getContent();
			if (oSelectedItemContent.length > 0) {
				this._rerenderContent(oSelectedItemContent);
			//if item has not own content, general content of the icontabbar is shown
			} else {
				this._rerenderContent(this.getContent());
			}
			//if content is not expanded, content will be expanded (first click on item always leads to expanding the right content)
			if (this.getExpandable() && this.getExpanded() === false) {
				this._toggleExpandCollapse(true);
			}
			this._adjustArrow();
		}

		// scroll to item if out of viewport
		if (this.oSelectedItem.$().length > 0) {
			this._scrollIntoView(oItem, 500);
		} else {
			this._scrollAfterRendering = true;
		}
	}

	var sSelectedKey = this.oSelectedItem.getKey();
	this.oSelectedItem = oItem;
	this.setProperty("selectedKey", sSelectedKey, true);

	if (!bAPIchange) {
		this.fireSelect({
			selectedItem: this.oSelectedItem,
			selectedKey: sSelectedKey,
			item: this.oSelectedItem,
			key: sSelectedKey
		});
	}
	return this;
};

/**
 * Rerenders only shown content of the IconTabBar.
 * @private
 * @param oContent content which should be rendered.
 */
sap.m.IconTabBar.prototype._rerenderContent = function(oContent) {
	var $content = this.$("content");
	if (oContent && ($content.length > 0)) {
		var rm = sap.ui.getCore().createRenderManager();
		for (var i = 0; i < oContent.length; i++) {
			rm.renderControl(oContent[i]);
		}
		rm.flush($content[0]);
		rm.destroy();
	}
};

/**
 * Adjusts the arrow position.
 * @private
 */
sap.m.IconTabBar.prototype._adjustArrow = function(){
	var $arrow = this.$("contentArrow"),
		$head = this.$("head"),
		$item;

	if (this.getExpanded() === false) {
		return this; // no need of an arrow in this case
	}

	if (this.oSelectedItem) {
		$item = this.oSelectedItem.$();
		if ($item.length > 0) {
			//for scrolling we need to check if the new position is possible, if not, we hide the arrow but still show the old content
				if (this._bRtl){
					var iPossibleLeft = $head[0].offsetLeft;
					var iPossibleRight = document.width - iPossibleLeft - $arrow.width() / 2;
					var iRight = 0;
					var oDomRef = this.getDomRef("head");
					var iScrollRight = jQuery(oDomRef).scrollRightRTL();
					if (this.oSelectedItem.getDesign() === sap.m.IconTabFilterDesign.Vertical) {
						iRight = $arrow.parent().width() - $item[0].offsetLeft - $arrow.width() / 2 - $item.outerWidth() / 2 - $head[0].offsetLeft - iScrollRight;
					} else { //horizontal layout needs different arrow calculation
						iRight = $arrow.parent().width() - $item[0].offsetLeft - $arrow.width() / 2 - $item.outerWidth() + this.oSelectedItem.$("tab").outerWidth() / 2 - $head[0].offsetLeft - iScrollRight;
					}
					if (this._oScroller) {
						iRight += this._oScroller.getScrollLeft();
					}
					var aItems = this.getItems();
					if (((this.$("head").hasClass("sapMITBNoText") || this.oSelectedItem.$().hasClass("sapMITBHorizontal")) && ((this.oSelectedItem === aItems[0])))) {
						//first tab has less padding arrow would not point to the middle
						iRight -= 8;
					}
					$arrow.css("right", iRight + "px");
					$arrow.toggleClass("sapMITBNoContentArrow", iRight < iPossibleLeft || iRight > iPossibleRight);
				} else {
					var iPossibleLeft = $head[0].offsetLeft;
					var iPossibleRight = document.width - iPossibleLeft - $arrow.width() / 2;
					var oDomRef = this.getDomRef("head");
					var iLeft = 0;
					var iScrollLeft = oDomRef.scrollLeft;
					if (this.oSelectedItem.getDesign() === sap.m.IconTabFilterDesign.Vertical) {
						iLeft = $item[0].offsetLeft + $item.outerWidth() / 2 - $arrow.width() / 2 + $head[0].offsetLeft - iScrollLeft;
					} else { //horizontal layout needs different arrow calculation
						iLeft = $item[0].offsetLeft + this.oSelectedItem.$("tab").outerWidth() / 2- $arrow.width() / 2 + $head[0].offsetLeft - iScrollLeft;
					}
					if (this._oScroller) {
						iLeft -= this._oScroller.getScrollLeft();
					}
					var aItems = this.getItems();
					var oFirstVisibleItem = this._getFirstVisibleItem(aItems);
					if (((this.$("head").hasClass("sapMITBNoText") || this.oSelectedItem.$().hasClass("sapMITBHorizontal")) && ((this.oSelectedItem === oFirstVisibleItem)))
							|| ((aItems.length > 0) && (this.oSelectedItem === aItems[aItems.length-1])) && (!sap.ui.Device.system.desktop || sap.ui.Device.os.windows && sap.ui.Device.os.version === 8) && !this.oSelectedItem.$().hasClass("sapMITBHorizontal")) {
						//first tab has less padding, last tab has more padding arrow would not point to the middle
						iLeft -= 8;
					}
					if (this.oSelectedItem.$().hasClass("sapMITBHorizontal")) {
						iLeft += 8;
					}
					if ( (!sap.ui.Device.system.desktop || sap.ui.Device.os.windows && sap.ui.Device.os.version === 8) && !this.$("head").hasClass("sapMITBNoText")) {
						if (this.oSelectedItem === aItems[0]) {
							iLeft -= 2;
						} else if (this.oSelectedItem === aItems[aItems.length-1]) {
							iLeft += 2;
						}
					}
					$arrow.css("left", iLeft + "px");
					$arrow.toggleClass("sapMITBNoContentArrow", iLeft < iPossibleLeft || iLeft > iPossibleRight);
				}
		}
	}
};

/**
 * return first visible item, which is needed for correct arrow calculation
 */
sap.m.IconTabBar.prototype._getFirstVisibleItem = function(aItems) {
	for (var i = 0; i < aItems.length; i++) {
		if (aItems[i].getVisible()) {
			return aItems[i];
		}
	}
	
	return null;
};

/**
 * afterRendering
 */
sap.m.IconTabBar.prototype.onAfterRendering = function() {
	var oHeadDomRef = this.getDomRef("head"),
		$bar = this.$();

	// initialize scrolling
	if (this._oScroller) {
		this._oScroller.setIconTabBar(this, jQuery.proxy(this._afterIscroll, this), jQuery.proxy(this._scrollPreparation, this));
	}

	if (this.oSelectedItem && this.getExpanded()) {
		this.oSelectedItem.$().addClass("sapMITBSelected");
	}

	if (!sap.ui.Device.system.desktop || (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8)) {
		jQuery.sap.delayedCall(350, this, "_checkOverflow", [oHeadDomRef, $bar]);
	}

	// reset scroll state after re-rendering for non-touch devices (iScroll will handle this internally)
	if (this._iCurrentScrollLeft !== 0 && (sap.ui.Device.system.desktop && !(sap.ui.Device.os.windows && sap.ui.Device.os.version === 8))) {
		oHeadDomRef.scrollLeft = this._iCurrentScrollLeft;
	}

	// scroll to selected item if it is out of screen and we render the control the first time
	if (this.oSelectedItem) {
		if (!this._bDoThisOnlyOnce) {
			jQuery.sap.delayedCall(1000, this, "_scrollIntoView", [this.oSelectedItem, 0]); // needs some delay to have correct position info
			this._bDoThisOnlyOnce = true;
		} else if (this._scrollAfterRendering) {
			this._scrollIntoView(this.oSelectedItem, 500); 
			this._scrollAfterRendering = false;
		}
	}

	//use ItemNavigation for keyboardHandling
	var aItems = this.getItems();
	var aTabDomRefs = [];
	var iSelectedDomIndex = -1;
	var that = this;

	// find a collection of all tabs
	aItems.forEach(function(oItem) {
		if (oItem instanceof sap.m.IconTabFilter) {
			var oItemDomRef = that.getFocusDomRef(oItem);
			jQuery(oItemDomRef).attr("tabindex", "-1");
			aTabDomRefs.push(oItemDomRef);
			if (that === this.oSelectedItem) {
				iSelectedDomIndex = aTabDomRefs.indexOf(oItem);
			}
		}
	});

	//Initialize the ItemNavigation
	if (!this._oItemNavigation) {
		this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.addDelegate(this._oItemNavigation);
	}

	//Reinitialize the ItemNavigation after rendering
	this._oItemNavigation.setRootDomRef(oHeadDomRef);
	this._oItemNavigation.setItemDomRefs(aTabDomRefs);
	this._oItemNavigation.setSelectedIndex(iSelectedDomIndex);


	//listen to resize
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(),  jQuery.proxy(this._fnResize, this));

	this._adjustArrow();
};

/**
 * Destroys the item aggregation.
 */
sap.m.IconTabBar.prototype.destroyItems = function() {
	this.oSelectedItem = null;
	this._aTabKeys = [];
	this.destroyAggregation("items");
};

sap.m.IconTabBar.prototype.addItem = function(oItem) {
	if (!(oItem instanceof sap.m.IconTabSeparator)) {
		var sKey = oItem.getKey();
		//check if key is a duplicate
		if(this._aTabKeys.indexOf(sKey) !== -1) {
			jQuery.sap.log.warning("sap.m.IconTabBar: duplicate key '" + sKey +"' inside the IconTabFilter. Please use unique keys.");
		}
		this._aTabKeys.push(sKey);
	}
	this.addAggregation("items", oItem);
};

sap.m.IconTabBar.prototype.insertItem = function(oItem, iIndex) {
	if (!(oItem instanceof sap.m.IconTabSeparator)) {
		var sKey = oItem.getKey();
		//check if key is a duplicate
		if(this._aTabKeys.indexOf(sKey) !== -1) {
			jQuery.sap.log.warning("sap.m.IconTabBar: duplicate key '" + sKey +"' inside the IconTabFilter. Please use unique keys.");
		}
		this._aTabKeys.push(sKey);
	}
	this.insertAggregation("items", oItem, iIndex);
};

sap.m.IconTabBar.prototype.removeAllItems = function() {
	this._aTabKeys = [];
	this.removeAllAggregation("items");
};

sap.m.IconTabBar.prototype.removeItem = function(oItem) {
	// Make sure we have the actual Item and not just an ID
	oItem = this.removeAggregation("items", oItem);
	
	if (oItem && !(oItem instanceof sap.m.IconTabSeparator)) {
		var sKey = oItem.getKey();
		this._aTabKeys.splice(this._aTabKeys.indexOf(sKey) , 1);
	}
	
	// Return the original value from removeAggregation
	return oItem;
};

/**
 * Called after the theme has been switched, required for new width calc
 * @private
 */
sap.m.IconTabBar.prototype.onThemeChanged = function(oEvent){
	this._adjustArrow();
};

/**
 * Function is executed when the expand/collapse animation is finished to adjust the UI 
 *
 * @param {boolean} bExpanded the new state of the container. Passed in 
 * @private
 * @return {sap.m.IconTabBar} this pointer for chaining
 */
sap.m.IconTabBar.prototype.onTransitionEnded = function(bExpanded) {
	var $content = this.$("content"),
		$container = this.$("containerContent"),
		$arrow = this.$("contentArrow");

	// if multiple animations are triggered, this function is executed multiple times in the end, so we need to ignore all except the last call
	if (this._iAnimationCounter === 1) {
		$container.toggleClass("sapMITBContentClosed", !bExpanded);
		if (bExpanded) { // expanding
			$arrow.show();
			$content.css("display", "block");
		} else { // collapsing
			$arrow.hide();
			$content.css("display", "none");
		}
	}
	// reduce animation counter
	this._iAnimationCounter = (this._iAnimationCounter > 0 ? --this._iAnimationCounter : 0);
};

/**
 * Opens and closes the content Container
 *
 * @param {boolean|undefined} bExpanded the new state of the container. If not specified, it will use the property expanded
 * @private
 * @return {sap.m.IconTabBar} this pointer for chaining
 */
sap.m.IconTabBar.prototype._toggleExpandCollapse = function(bExpanded) {
	var $content = this.$("content");

	// use inverted control state if not specified by parameter
	if (bExpanded === undefined) {
		bExpanded = !this.getExpanded();
	}

	// manage selection state
	if (this.oSelectedItem) {
		this.oSelectedItem.$().toggleClass("sapMITBSelected", bExpanded);
	}

	// show animation (keep track of active animations to avoid flickering of controls)
	this._iAnimationCounter = (this._iAnimationCounter === undefined ? 1 : ++this._iAnimationCounter);
	if (bExpanded) { // expanding
		if (this.oSelectedItem) {
			if (this.$("content").children().length === 0) { //content is not rendered yet
				//if item has own content, this content is shown
				var oSelectedItemContent = this.oSelectedItem.getContent();
				if (oSelectedItemContent.length > 0) {
					this._rerenderContent(oSelectedItemContent);
				//if item has not own content, general content of the icontabbar is shown
				} else {
					this._rerenderContent(this.getContent());
				}
			}
			$content.slideDown('400', jQuery.proxy(this.onTransitionEnded, this, bExpanded));
			this.$("containerContent").toggleClass("sapMITBContentClosed", !bExpanded);
		}
	} else { // collapsing
		this.$("contentArrow").hide();
		$content.slideUp('400', jQuery.proxy(this.onTransitionEnded, this, bExpanded));
	}

	// update property (if we have a selected item) and fire event
	if (!bExpanded || this.oSelectedItem) {
		this.setProperty("expanded", bExpanded, true);
	}
	this.fireExpand({
		expand: bExpanded,
		collapse: !bExpanded
	});

	return this;
};

/**
 * Checks if all tabs are textOnly version.
 * @private
 * @returns true if all tabs are textOnly version, otherwise false
 */
sap.m.IconTabBar.prototype._checkTextOnly = function(aItems) {
	if (aItems.length > 0) {
		for (var i = 0; i < aItems.length; i++) {
			if (!(aItems[i] instanceof sap.m.IconTabSeparator)) {
				if (aItems[i].getIcon()) {
					this._bTextOnly = false;
					return false;
				}
			}
		}
	}
	this._bTextOnly = true;
	return true;
};

/**
 * Checks if all tabs are noText version.
 * @private
 * @returns true if all tabs are noText version, otherwise false
 */
sap.m.IconTabBar.prototype._checkNoText = function(aItems) {
	if (aItems.length > 0) {
		for (var i = 0; i < aItems.length; i++) {
			if (!(aItems[i] instanceof sap.m.IconTabSeparator)) {
				if (aItems[i].getText().length > 0) {
					return false;
				}
			}
		}
	}
	return true;
};

/**
 * Checks if scrolling is needed.
 * @private
 * @returns true if scrolling is needed, otherwise false
 */
sap.m.IconTabBar.prototype._checkScrolling = function(oHead, $bar) {
	var bScrolling = false;

	if (!sap.ui.Device.system.desktop || (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8)) { //iScroll is used, therefore we need other calculation then in desktop mode
		var domScrollCont = this.getDomRef("scrollContainer");
		var domHead = this.getDomRef("head");
		if (domHead.offsetWidth > domScrollCont.offsetWidth) {
			bScrolling = true;
		}
	} else { //desktop mode
		//check if there are more tabs as displayed
		if (oHead) {
			if (oHead.scrollWidth > oHead.clientWidth) {
				//scrolling possible
				bScrolling = true;
			}
		}
	}

	if (this._scrollable !== bScrolling) {
		$bar.toggleClass("sapMITBScrollable", bScrolling);
		$bar.toggleClass("sapMITBNotScrollable", !bScrolling);
		this._scrollable = bScrolling;
	}

	return bScrolling;
};

/**
 * Gets the icon of the requested arrow (left/right).
 * @private
 * @param sName left or right
 * @returns icon of the requested arrow
 */
sap.m.IconTabBar.prototype._getScrollingArrow = function(sName) {
	var mProperties = {
		src : "sap-icon://navigation-" + sName + "-arrow"
	};
	var aCssClassesToAddLeft = ["sapMITBArrowScroll", "sapMITBArrowScrollLeft"];
	var aCssClassesToAddRight = ["sapMITBArrowScroll", "sapMITBArrowScrollRight"];
	
	if (sName === "left") {
		if (!this._oArrowLeft) {
			this._oArrowLeft = sap.m.ImageHelper.getImageControl(this.getId() + "-arrowScrollLeft", this._oArrowLeft, this, mProperties, aCssClassesToAddLeft);
		}
		return this._oArrowLeft;
	}
	if (sName === "right") {
		if (!this._oArrowRight) {
			this._oArrowRight = sap.m.ImageHelper.getImageControl(this.getId() + "-arrowScrollRight", this._oArrowRight, this, mProperties, aCssClassesToAddRight);
		}
		return this._oArrowRight;
	}
};

/**
 * Changes the state of the scroll arrows depending on whether they are required due to overflow.
 *
 * @param oListDomRef the ul tag containing the items
 * @param of_back the backward scroll arrow
 * @param of_fw the forward scroll arrow
 * @private
 */
sap.m.IconTabBar.prototype._checkOverflow = function(oBarHead, $bar) {

	if (this._checkScrolling(oBarHead, $bar) && oBarHead) {
		// check whether scrolling to the left is possible
		var bScrollBack = false;
		var bScrollForward = false;

		if (!sap.ui.Device.system.desktop || (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8)) { //iScroll is used, therefore we need other calculation then in desktop mode
			var domScrollCont = this.getDomRef("scrollContainer");
			var domHead = this.getDomRef("head");
			if (this._oScroller.getScrollLeft() > 0) {
				bScrollBack = true;
			}
			if ((this._oScroller.getScrollLeft() + domScrollCont.offsetWidth) < domHead.offsetWidth) {
				bScrollForward = true;
			}

		} else { //desktop mode
			var iScrollLeft = oBarHead.scrollLeft;
			var realWidth = oBarHead.scrollWidth;
			var availableWidth = oBarHead.clientWidth;

			if (Math.abs(realWidth-availableWidth) == 1){ // Avoid rounding issues see CSN 1316630 2013
				realWidth = availableWidth;
			}

			if (!this._bRtl) {   // normal LTR mode
				if (iScrollLeft > 0) {
					bScrollBack = true;
				}
				if ((realWidth > availableWidth) && (iScrollLeft + availableWidth < realWidth)) {
					bScrollForward = true;
				}
			} else {  // RTL mode
				var $List = jQuery(oBarHead);
				if ($List.scrollLeftRTL() > 0) {
					bScrollForward = true;
				}
				if ($List.scrollRightRTL() > 0) {
					bScrollBack = true;
				}
			}
		}

		// only do DOM changes if the state changed to avoid periodic application of identical values
		if ((bScrollForward != this._bPreviousScrollForward) || (bScrollBack != this._bPreviousScrollBack)) {
			this._bPreviousScrollForward = bScrollForward;
			this._bPreviousScrollBack = bScrollBack;
			$bar.toggleClass("sapMITBScrollBack", bScrollBack);
			$bar.toggleClass("sapMITBNoScrollBack", !bScrollBack);
			$bar.toggleClass("sapMITBScrollForward", bScrollForward);
			$bar.toggleClass("sapMITBNoScrollForward", !bScrollForward);
		}
	}
};

/**
 * Handles the activation of the tabs and arrows.
 * @private
 */
sap.m.IconTabBar.prototype._handleActivation = function(oEvent) {
	var sTargetId = oEvent.target.id,
		oControl = oEvent.srcControl,
		sControlId;

	var $sTargetId = jQuery.sap.byId(sTargetId);
	if (jQuery.inArray(this.$("content")[0], $sTargetId.parents()) > -1) {
		//do nothing because element is inside content
	} else {
		if (sTargetId) {
			var sId = this.getId();

			// For items: do not navigate away! Stay on the page and handle the click in-place. Right-click + "Open in new Tab" still works.
			// For scroll buttons: Prevent IE from firing beforeunload event -> see CSN 4378288 2012
			oEvent.preventDefault();

			//on mobile devices click on arrows has no effect
			if (sTargetId == sId + "-arrowScrollLeft" && sap.ui.Device.system.desktop) {
				if (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8) {
					//combi devices with windows 8 should also scroll on click on arrows
					//need to use iscroll
					var iScrollLeft = this._oScroller.getScrollLeft() - sap.m.IconTabBar.SCROLL_STEP;
					if (iScrollLeft < 0) {
						iScrollLeft = 0;
					}
					// execute manual scrolling with iScroll's scrollTo method (delayedCall 0 is needed for positioning glitch)
					this._scrollPreparation();
					jQuery.sap.delayedCall(0, this._oScroller, "scrollTo", [iScrollLeft, 0, 500]);
					jQuery.sap.delayedCall(500, this, "_afterIscroll");
				} else {
					// scroll back/left button
					this._scroll(-sap.m.IconTabBar.SCROLL_STEP, 500);
				}

			} else if (sTargetId == sId + "-arrowScrollRight" && sap.ui.Device.system.desktop) {
				if (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8) {
					//combi devices with windows 8 should also scroll on click on arrows
					//need to use iscroll
					var iScrollLeft = this._oScroller.getScrollLeft() + sap.m.IconTabBar.SCROLL_STEP;
					var iContainerWidth = this.$("scrollContainer").width();
					var iHeadWidth = this.$("head").width();
					if (iScrollLeft > (iHeadWidth - iContainerWidth)) {
						iScrollLeft = iHeadWidth - iContainerWidth;
					}
					// execute manual scrolling with iScroll's scrollTo method (delayedCall 0 is needed for positioning glitch)
					this._scrollPreparation();
					jQuery.sap.delayedCall(0, this._oScroller, "scrollTo", [iScrollLeft, 0, 500]);
					jQuery.sap.delayedCall(500, this, "_afterIscroll");
				} else {
					// scroll forward/right button
					this._scroll(sap.m.IconTabBar.SCROLL_STEP, 500);
				}

			} else {
				// should be one of the items - select it
				if (oControl instanceof sap.ui.core.Icon) { 
					// click on icon: fetch filter instead
					sControlId = oEvent.srcControl.getId().replace("-icon", "");
					oControl = sap.ui.getCore().byId(sControlId);
					this.setSelectedItem(oControl);
				}
				// select item if it is an iconTab but not a separator
				else if (oControl.getMetadata().isInstanceOf("sap.m.IconTab") && !(oControl instanceof sap.m.IconTabSeparator)) {
					//for tabs with showAll property true, click on whole area leads to selection, for text only version only clicking on text itself (not count)
					if (oControl.getShowAll() || this._bTextOnly && sTargetId === oControl.getId() + "-text") {
						this.setSelectedItem(oControl);
					}
				}
			}
		}
	}
};

/*
 * Scrolls to the item passed as parameter if it is not (fully) visible
 * If the item is to the left of the viewport it will be put leftmost.
 * If the item is to the right of the viewport it will be put rightmost.
 * @param {sap.m.IconTabFilter} oItem The item to be scrolled into view
 * @param {int} iDuration The duration of the animation effect
 * @private
 * @return {sap.m.IconTabBar} this pointer for chaining
 */ 
sap.m.IconTabBar.prototype._scrollIntoView = function(oItem, iDuration) {
	var $item = oItem.$(),
	oHeadDomRef,
	iScrollLeft,
	iNewScrollLeft,
	iContainerWidth;

	if ($item.length > 0) {
		var iItemWidth = $item.outerWidth();
		var iItemPosLeft = $item.position().left;

		// switch based on scrolling mode
		if (!sap.ui.Device.system.desktop || (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8)) { // iScroll
			iScrollLeft = this._oScroller.getScrollLeft();
			iContainerWidth = this.$("scrollContainer").width();
			iNewScrollLeft = 0;

			// check if item is outside of viewport
			if (iItemPosLeft - iScrollLeft < 0 || iItemPosLeft - iScrollLeft > iContainerWidth - iItemWidth) {		
				if (iItemPosLeft - iScrollLeft < 0) { // left side: make this the first item
					iNewScrollLeft += iItemPosLeft;
				} else { // right side: make this the last item
					iNewScrollLeft += iItemPosLeft + iItemWidth - iContainerWidth;
				}

				// execute manual scrolling with iScroll's scrollTo method (delayedCall 0 is needed for positioning glitch)
				this._scrollPreparation();
				jQuery.sap.delayedCall(0, this._oScroller, "scrollTo", [iNewScrollLeft, 0, iDuration]);
				jQuery.sap.delayedCall(iDuration, this, "_afterIscroll");
			}
		} else { // desktop scrolling with jQuery
			oHeadDomRef = this.getDomRef("head");
			iScrollLeft = oHeadDomRef.scrollLeft;
			iContainerWidth = $item.parent().width();
			iNewScrollLeft = iScrollLeft;		

			// check if item is outside of viewport
			if (iItemPosLeft < 0 || iItemPosLeft > iContainerWidth - iItemWidth) { 
				if (iItemPosLeft < 0) { // left side: make this the first item
					iNewScrollLeft += iItemPosLeft;
				} else { // right side: make this the last item
					iNewScrollLeft += iItemPosLeft + iItemWidth - iContainerWidth;
				}

				// execute scrolling
				this._scrollPreparation();
				jQuery(oHeadDomRef).stop(true, true).animate({scrollLeft: iNewScrollLeft}, iDuration, jQuery.proxy(this._adjustAndShowArrow, this));
			}
		}
		// store current scroll state to set it after rerendering
		this._iCurrentScrollLeft = iNewScrollLeft;
	}

	return this;
};

/*
 * Scrolls the items if possible, using an animation.
 *
 * @param iDelta how far to scroll
 * @param iDuration how long to scroll (ms)
 * @private
 */
sap.m.IconTabBar.prototype._scroll = function(iDelta, iDuration) {
	this._scrollPreparation();

	var oDomRef = this.getDomRef("head");
	var iScrollLeft = oDomRef.scrollLeft;
	if (!!!sap.ui.Device.browser.internet_explorer && this._bRtl) {
		iDelta = -iDelta;
	} // RTL lives in the negative space
	var iScrollTarget = iScrollLeft+iDelta;
	jQuery(oDomRef).stop(true, true).animate({scrollLeft: iScrollTarget}, iDuration, jQuery.proxy(this._adjustAndShowArrow, this));
	this._iCurrentScrollLeft = iScrollTarget;
};

/**
 * Adjusts the arrow position and shows the arrow.
 * @private
 */
sap.m.IconTabBar.prototype._adjustAndShowArrow = function() {
	this._adjustArrow();
	this._$bar && this._$bar.toggleClass("sapMITBScrolling", false);
	this._$bar = null;

	//update the arrows on desktop
	if (sap.ui.Device.system.desktop) {
		this._checkOverflow(this.getDomRef("head"), this.$());
	}
};

/**
 * Scroll preparation.
 * @private
 */
sap.m.IconTabBar.prototype._scrollPreparation = function() {
	if (!this._$bar){
		this._$bar = this.$().toggleClass("sapMITBScrolling", true);
	}
};

/**
 * After iscroll.
 * @private
*/
sap.m.IconTabBar.prototype._afterIscroll = function() {
	var oHead = this.getDomRef("head");
	this._checkOverflow(oHead, this.$());
	this._adjustAndShowArrow();
};

/**
 * Resize  handling.
 * @private
*/
sap.m.IconTabBar.prototype._fnResize = function() {
	var oHead = this.getDomRef("head");
	this._checkOverflow(oHead, this.$());
	this._adjustArrow();
};

/** 
 * @overwrite
 */
//overwritten method, returns for most cases the iconDomRef, if the given tab has no icon, the textDomRef is returned.
sap.m.IconTabBar.prototype.getFocusDomRef = function (oFocusTab) {
	
	var oTab = oFocusTab || this.oSelectedItem;

	if (!oTab) {
		return null;
	}

	if (!this._bTextOnly) {
		if (oTab.getShowAll()) {
			return oTab.getDomRef();
		}
		return oTab.getDomRef("icon");
	}
	return oTab.getDomRef("text");
};

sap.m.IconTabBar.prototype.applyFocusInfo = function (oFocusInfo) {
	//sets the focus depending on the used IconTabFilter
	if (oFocusInfo.focusDomRef) {
		jQuery(oFocusInfo.focusDomRef).focus();
	}
};

/* =========================================================== */
/*           begin: event handlers                             */
/* =========================================================== */

/**
 * Initializes scrolling on the IconTabBar. 
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.IconTabBar.prototype.ontouchstart = function(oEvent) {
	var oTargetTouch = oEvent.targetTouches[0];

	// store & init touch state
	this._iActiveTouch = oTargetTouch.identifier;
	this._iTouchStartPageX = oTargetTouch.pageX;
	this._iTouchDragX = 0;
};

/**
 * Sets an internal flag if horizontal drag was executed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.IconTabBar.prototype.ontouchmove = function(oEvent) {
	var oTouch = sap.m.touch.find(oEvent.changedTouches, this._iActiveTouch);

	// check for valid changes 
	if (!oTouch || oTouch.pageX === this._iTouchStartPageX) {
		return;
	}

	// sum up movement to determine in touchend event if selection should be executed
	this._iTouchDragX += Math.abs(this._iTouchStartPageX - oTouch.pageX); 
	this._iTouchStartPageX = oTouch.pageX;
};

/**
 * Handles touch end and events and trigger selection if bar was not dragged.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.IconTabBar.prototype.ontouchend = function(oEvent) {
	// suppress selection if there ware a drag (moved more than 20px)
	if (this._iTouchDragX > 20) {
		return;
	}
	// 
	this._handleActivation(oEvent);
};


/**
 * Handle the touch cancel event.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.IconTabBar.prototype.ontouchcancel = sap.m.IconTabBar.prototype.ontouchend;

/**
 * Keyboard navigation event when the user presses Enter or Space.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.IconTabBar.prototype.onsapselect = function(oEvent) {
	this._handleActivation(oEvent);
};


/* =========================================================== */
/*           end: event handlers                               */
/* =========================================================== */

}; // end of sap/m/IconTabBar.js
if ( !jQuery.sap.isDeclared('sap.m.IconTabFilter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.IconTabFilter.
jQuery.sap.declare("sap.m.IconTabFilter");

jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained



/**
 * Constructor for a new IconTabFilter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCount count} : string (default: '')</li>
 * <li>{@link #getShowAll showAll} : boolean (default: false)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li>
 * <li>{@link #getIconColor iconColor} : sap.ui.core.IconColor (default: sap.ui.core.IconColor.Default)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDesign design} : sap.m.IconTabFilterDesign (default: sap.m.IconTabFilterDesign.Vertical)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The filter item class
 * @extends sap.ui.core.Item
 * @implements sap.m.IconTab
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.IconTabFilter
 */
sap.ui.core.Item.extend("sap.m.IconTabFilter", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.m.IconTab"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"count" : {type : "string", group : "Data", defaultValue : ''},
		"showAll" : {type : "boolean", group : "Misc", defaultValue : false},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : ''},
		"iconColor" : {type : "sap.ui.core.IconColor", group : "Appearance", defaultValue : sap.ui.core.IconColor.Default},
		"iconDensityAware" : {type : "boolean", group : "Appearance", defaultValue : true},
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"design" : {type : "sap.m.IconTabFilterDesign", group : "Appearance", defaultValue : sap.m.IconTabFilterDesign.Vertical}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.m.IconTabFilter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.IconTabFilter.extend
 * @function
 */


/**
 * Getter for property <code>count</code>.
 * The number of available items if this filter is applied
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>count</code>
 * @public
 * @name sap.m.IconTabFilter#getCount
 * @function
 */

/**
 * Setter for property <code>count</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCount  new value for property <code>count</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setCount
 * @function
 */


/**
 * Getter for property <code>showAll</code>.
 * Enables special visualization for disabled filter (show all items)
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showAll</code>
 * @public
 * @name sap.m.IconTabFilter#getShowAll
 * @function
 */

/**
 * Setter for property <code>showAll</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowAll  new value for property <code>showAll</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setShowAll
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The icon to display for this item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.IconTabFilter#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setIcon
 * @function
 */


/**
 * Getter for property <code>iconColor</code>.
 * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
 * Possible semantic colors are: Neutral, Positive, Critical, Negative.
 * Instead of the semantic icon color the brand color can be used, this is named Default.
 * Semantic colors and brand colors should not be mixed up inside one IconTabBar.
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.ui.core.IconColor} the value of property <code>iconColor</code>
 * @public
 * @name sap.m.IconTabFilter#getIconColor
 * @function
 */

/**
 * Setter for property <code>iconColor</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.ui.core.IconColor} oIconColor  new value for property <code>iconColor</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setIconColor
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.IconTabFilter#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setIconDensityAware
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * If set to false, the control is not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.IconTabFilter#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setVisible
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Design for the filter item.
 *
 * Default value is <code>Vertical</code>
 *
 * @return {sap.m.IconTabFilterDesign} the value of property <code>design</code>
 * @public
 * @name sap.m.IconTabFilter#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Vertical</code> 
 *
 * @param {sap.m.IconTabFilterDesign} oDesign  new value for property <code>design</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setDesign
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content to show for this item (optional).
 * If this content is set, it will be displayed instead of the general content inside the IconTabBar.
 * 
 * <strong>Note</strong>: this is the default aggregation for IconTabFilter.
 * @return {sap.ui.core.Control[]}
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabFilter#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabFilter#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabFilter#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabFilter#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabFilter#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabFilter#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.IconTabFilter#destroyContent
 * @function
 */


// Start of sap\m\IconTabFilter.js
/**
 * Lazy load icon tab filter image.
 *
 * @param {Array} aCssClassesToAdd array of css classes which will be added if the image needs to be created.
 * @param {sap.ui.core.Control} oParent this element's parent.
 * @param {Array} aCssClassesToRemove all css clases that oImageControl has and which are contained in this array
 * are removed bevore adding the css classes listed in aCssClassesToAdd.
 *
 * @private
 */
sap.m.IconTabFilter.prototype._getImageControl = function(aCssClassesToAdd, oParent, aCssClassesToRemove) {
	var mProperties = { 
		src : this.getIcon(),
		densityAware : this.getIconDensityAware()
	};
	if (mProperties.src) {
		this._oImageControl = sap.m.ImageHelper.getImageControl(this.getId() + "-icon", this._oImageControl, oParent, mProperties, aCssClassesToAdd, aCssClassesToRemove);
	}
	
	return this._oImageControl;
};

/**
 * Function is called when exiting the element.
 * 
 * @private
 */
sap.m.IconTabFilter.prototype.exit = function(oEvent) {
	
	if (this._oImageControl) {
		this._oImageControl.destroy();
	}
	
	if (sap.ui.core.Item.prototype.exit) {
		sap.ui.core.Item.prototype.exit.call(this, oEvent);
	}
};


}; // end of sap/m/IconTabFilter.js
if ( !jQuery.sap.isDeclared('sap.m.IconTabSeparator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.IconTabSeparator.
jQuery.sap.declare("sap.m.IconTabSeparator");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new IconTabSeparator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A tab separator item class
 * @extends sap.ui.core.Element
 * @implements sap.m.IconTab
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.IconTabSeparator
 */
sap.ui.core.Element.extend("sap.m.IconTabSeparator", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.m.IconTab"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : ''},
		"iconDensityAware" : {type : "boolean", group : "Appearance", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.m.IconTabSeparator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.IconTabSeparator.extend
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The icon to display for this separator. If no icon is given, a separator line will be used instead.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.IconTabSeparator#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.IconTabSeparator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabSeparator#setIcon
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.IconTabSeparator#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.IconTabSeparator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabSeparator#setIconDensityAware
 * @function
 */


// Start of sap\m\IconTabSeparator.js
/**
 * Lazy load feed icon image.
 *
 * @param {Array} aCssClasses array of css classes which will be added if the image needs to be created.
 * @param {sap.ui.core.Control} oParent this element's parent.
 * @private
 */
sap.m.IconTabSeparator.prototype._getImageControl = function(aCssClasses, oParent) {
	var mProperties = { 
		src : this.getIcon(),
		densityAware : this.getIconDensityAware()
	};
	
	this._oImageControl = sap.m.ImageHelper.getImageControl(null, this._oImageControl, oParent, mProperties, aCssClasses);
	
	return this._oImageControl;
};

/**
 * Function is called when exiting the element.
 * 
 * @private
 */
sap.m.IconTabSeparator.prototype.exit = function(oEvent) {
	
	if (this._oImageControl) {
		this._oImageControl.destroy();
	}
	
	if (sap.ui.core.Item.prototype.exit) {
		sap.ui.core.Item.prototype.exit.call(this, oEvent);
	}
};
}; // end of sap/m/IconTabSeparator.js
if ( !jQuery.sap.isDeclared('sap.m.Image') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Image.
jQuery.sap.declare("sap.m.Image");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Image.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li>
 * <li>{@link #getAlt alt} : string</li>
 * <li>{@link #getUseMap useMap} : string</li>
 * <li>{@link #getDensityAware densityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveSrc activeSrc} : sap.ui.core.URI (default: "")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Image#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Image#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A wrapper around the IMG tag. The image can be loaded from a remote or local server.
 * 
 * Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.
 * 
 * There are various size setting options available, and the images can be combined with actions.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Image
 */
sap.ui.core.Control.extend("sap.m.Image", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"src" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"decorative" : {type : "boolean", group : "Accessibility", defaultValue : true},
		"alt" : {type : "string", group : "Accessibility", defaultValue : null},
		"useMap" : {type : "string", group : "Misc", defaultValue : null},
		"densityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"activeSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : ""}
	},
	events : {
		"tap" : {}, 
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Image with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Image.extend
 * @function
 */

sap.m.Image.M_EVENTS = {'tap':'tap','press':'press'};


/**
 * Getter for property <code>src</code>.
 * Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>src</code>
 * @public
 * @name sap.m.Image#getSrc
 * @function
 */

/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sSrc  new value for property <code>src</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setSrc
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible images are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Image#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Image#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.Image#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setHeight
 * @function
 */


/**
 * Getter for property <code>decorative</code>.
 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
 * 
 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>decorative</code>
 * @public
 * @name sap.m.Image#getDecorative
 * @function
 */

/**
 * Setter for property <code>decorative</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDecorative  new value for property <code>decorative</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setDecorative
 * @function
 */


/**
 * Getter for property <code>alt</code>.
 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
 * If the image is set to decorative this property is ignored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>alt</code>
 * @public
 * @name sap.m.Image#getAlt
 * @function
 */

/**
 * Setter for property <code>alt</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAlt  new value for property <code>alt</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setAlt
 * @function
 */


/**
 * Getter for property <code>useMap</code>.
 * The name of the image map that defines the clickable areas
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>useMap</code>
 * @public
 * @name sap.m.Image#getUseMap
 * @function
 */

/**
 * Setter for property <code>useMap</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUseMap  new value for property <code>useMap</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setUseMap
 * @function
 */


/**
 * Getter for property <code>densityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>densityAware</code>
 * @public
 * @name sap.m.Image#getDensityAware
 * @function
 */

/**
 * Setter for property <code>densityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDensityAware  new value for property <code>densityAware</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setDensityAware
 * @function
 */


/**
 * Getter for property <code>activeSrc</code>.
 * The source property when this image is tapped.
 *
 * Default value is <code>""</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeSrc</code>
 * @public
 * @name sap.m.Image#getActiveSrc
 * @function
 */

/**
 * Setter for property <code>activeSrc</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {sap.ui.core.URI} sActiveSrc  new value for property <code>activeSrc</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setActiveSrc
 * @function
 */


/**
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead) 
 *
 * @name sap.m.Image#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Image</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Image</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead) 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.
 *
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#attachTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Image</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#detachTap
 * @function
 */

/**
 * Fire event tap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Image#fireTap
 * @function
 */


/**
 * Event is fired when the user clicks on the control. 
 *
 * @name sap.m.Image#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Image</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Image</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.
 *
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Image</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Image#firePress
 * @function
 */


// Start of sap\m\Image.js
sap.m.Image._currentDevicePixelRatio = (function() {

	// if devicePixelRatio property is not available, value 1 is assumed by default.
	var ratio = (window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio);

	// for ratio in our library, only 1 1.5 2 are valid
	if (ratio <= 1) {
		ratio = 1;
	} else {

		// round it to the nearest valid value
		ratio *= 2;
		ratio = Math.round(ratio);
		ratio /= 2;
	}

	if (ratio > 2) {
		ratio = 2;
	}

	return ratio;
}());

/**
 * Function is called when image is loaded successfully.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Image.prototype.onload = function(oEvent) {

	// This is used to fix the late load event handler problem on ios platform, if the event handler
	// has not been called right after image is loaded, event is triggered manually in onAfterRendering
	// method.
	if (!this._defaultEventTriggered) {
		this._defaultEventTriggered = true;
	}

	var $DomNode = this.$(),
		oDomRef = $DomNode[0];

	if (!this._isWidthOrHeightSet()) {
		if (this._iLoadImageDensity > 1) {
			if (($DomNode.width() === oDomRef.naturalWidth) && ($DomNode.height() === oDomRef.naturalHeight)) {
				$DomNode.width($DomNode.width() / this._iLoadImageDensity);
			}
		}
	}

	$DomNode.removeClass("sapMNoImg");
};

/**
 * Function is called when error occurs during image loading.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Image.prototype.onerror = function(oEvent) {

	// This is used to fix the late load event handler problem on ios platform, if the event handler
	// has not been called right after image is loaded with errors, event is triggered manually in onAfterRendering
	// method.
	if (!this._defaultEventTriggered) {
		this._defaultEventTriggered = true;
	}

	var $DomNode = this.$(),
		sCurrentSrc = $DomNode.attr("src"),
		d = sap.m.Image._currentDevicePixelRatio;

	$DomNode.addClass("sapMNoImg");

	// if src is empty or there's no image existing, just stop
	if (!sCurrentSrc || this._iLoadImageDensity === 1) {
		return;
	}

	if (d === 2 || d < 1) {

		// load the default image
		this._iLoadImageDensity = 1;
		$DomNode.attr("src", this._generateSrcByDensity(this._isActiveState ? this.getActiveSrc() : this.getSrc(), 1));
	} else if (d === 1.5) {
		if (this._bVersion2Tried) {
			setTimeout(jQuery.proxy(function() {

				// if version 2 isn't on the server, load the default image
				this._iLoadImageDensity = 1;
				$DomNode.attr("src", this._generateSrcByDensity(this._isActiveState ? this.getActiveSrc() : this.getSrc(), 1));
			}, this), 0);
		} else {
			setTimeout(jQuery.proxy(function() {

				// special treatment for density 1.5
				// verify if the version for density 2 is provided or not
				this._iLoadImageDensity = 2;
				$DomNode.attr("src", this._generateSrcByDensity(this._isActiveState ? this.getActiveSrc() : this.getSrc(), 2));
				this._bVersion2Tried = true;
			}, this), 0);
		}
	}
};

/**
 * This function is called to register event handlers for load and error event on the image DOM after it's rendered.
 * It also check if the event handlers are called accordingly after the image is loaded, if not the event handlers are triggered
 * manually.
 *
 * @private
 */
sap.m.Image.prototype.onAfterRendering = function() {

	// if densityAware is set to true, we need to do extra steps for getting and resizing the density perfect version of the image.
	if (this.getDensityAware()) {
		var $DomNode = this.$();

		// bind the load and error event handler
		$DomNode.on("load", jQuery.proxy(this.onload, this));
		$DomNode.on("error", jQuery.proxy(this.onerror, this));

		var oDomRef = this.getDomRef();

		// if image has already been loaded and the load or error event handler hasn't been called, trigger it manually.
		if (oDomRef.complete && !this._defaultEventTriggered) {

			// need to use the naturalWidth property instead of jDomNode.width(),
			// the later one returns positive value even in case of broken image
			$DomNode.trigger(oDomRef.naturalWidth > 0 ? "load" : "error");	//  image loaded successfully or with error
		}
	}
};

/**
 * This binds to the touchstart event to change the src property of the image to the activeSrc.
 *
 * @private
 */
sap.m.Image.prototype.ontouchstart = function(oEvent) {
	if(oEvent.srcControl.mEventRegistry["press"] || oEvent.srcControl.mEventRegistry["tap"]){

		// mark the event for components that needs to know if the event was handled by the Image
		oEvent.setMarked();
	}

	if (oEvent.targetTouches.length === 1 && this.getActiveSrc()) {

		// change the source only when the first finger is on the image, the following fingers doesn't affect
		this.$().attr("src", this._getDensityAwareActiveSrc());
		this._isActiveState = true;
	}
};

/**
 * This changes the src property of the image back to the src property of the image control.
 *
 * @private
 */
sap.m.Image.prototype.ontouchend = function(oEvent) {
	// change the source back only when all fingers leave the image
	// avoid setting the normal state src again when there's no activeSrc property set
	if (oEvent.targetTouches.length === 0 && this.getActiveSrc()) {
		this._isActiveState = false;
		this.$().attr("src", this._getDensityAwareSrc()).removeClass("sapMNoImg");
	}
};

/**
 * This overrides the default setter of the src property and update the dom node.
 *
 * @public
 */
sap.m.Image.prototype.setSrc = function(sSrc) {
	if (sSrc === this.getSrc()) {
		return;
	}

	this.setProperty("src", sSrc, true);

	var oDomRef = this.getDomRef();
	if (oDomRef) {
		this.$().attr("src", this._getDensityAwareSrc());
	}
};

/**
 * This overrides the default setter of the activeSrc property in order to avoid the rerendering.
 *
 * @public
 */
sap.m.Image.prototype.setActiveSrc = function(sActiveSrc) {
	if (!sActiveSrc) {
		sActiveSrc = "";
	}

	this.setProperty("activeSrc", sActiveSrc, true);
};

/**
 * Function is called when image is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Image.prototype.ontap = function(oEvent) {
	this.fireTap({/* no parameters */}); //	(This event is deprecated, use the press event instead)
	this.firePress({/* no parameters */});
};

/**
 * Handle the key up event for SPACE and ENTER.
 *
 * @param {jQuery.Event} oEvent - the keyboard event.
 * @private
 */
sap.m.Image.prototype.onkeyup = function(oEvent) {
	if (oEvent.which === jQuery.sap.KeyCodes.SPACE || oEvent.which === jQuery.sap.KeyCodes.ENTER) {
		this.firePress({/* no parameters */});
	}
};

/**
 * Test if at least one of the width and height properties is set.
 *
 * @private
 */
sap.m.Image.prototype._isWidthOrHeightSet = function() {
	return (this.getWidth() && this.getWidth() !== '') || (this.getHeight() && this.getHeight() !== '');
};

/**
 * This function returns the density aware source based on the deviceDensityRatio value.
 * The return value is in the format [src]@[densityValue].[extension] if the densityValue not equal 1, otherwise it returns the src property.
 *
 * @private
 */
sap.m.Image.prototype._getDensityAwareSrc = function() {
	var d = sap.m.Image._currentDevicePixelRatio,
		sSrc = this.getSrc();

	// this property is used for resizing the higher resolution image when image is loaded.
	this._iLoadImageDensity = d;

	// if devicePixelRatio equals 1 or densityAware set to false, simply return the src property
	if (d === 1 || !this.getDensityAware()) {
		return sSrc;
	}

	return this._generateSrcByDensity(sSrc, d);
};

/**
 * This function returns the density aware version of the Active source base on the deviceDensityRatio value.
 *
 * @private
 */
sap.m.Image.prototype._getDensityAwareActiveSrc = function() {
	var d = sap.m.Image._currentDevicePixelRatio,
		sActiveSrc = this.getActiveSrc();

	// this property is used for resizing the higher resolution image when image is loaded.
	this._iLoadImageDensity = d;

	// if devicePixelRatio equals 1 or densityAware set to false, simply return the src property
	if (d === 1 || !this.getDensityAware()) {
		return sActiveSrc;
	}

	return this._generateSrcByDensity(sActiveSrc, d);
};

/**
 * This function generates the density aware version of the src property according to the iDensity provided.
 * It returns the density aware version of the src property.
 *
 * @private
 */
sap.m.Image.prototype._generateSrcByDensity = function(sSrc, iDensity) {
	if (!sSrc) {
		return "";
	}

	// if src is in data uri format, disable the density handling
	if (this._isDataUri(sSrc)) {
		this._iLoadImageDensity = 1;
		return sSrc;
	}

	if (iDensity === 1) {
		return sSrc;
	}

	var iLastDotPos = sSrc.lastIndexOf("."),
		iLastSlashPos = sSrc.lastIndexOf("/"),
		sName = sSrc.substring(0, iLastDotPos),
		sExtension = sSrc.substring(iLastDotPos);

	// if there's no extension
	// or there's slash after the last dot, this means that the dot may come from the host name
	if (iLastDotPos === -1 || (iLastSlashPos > iLastDotPos)) {
		return sSrc + "@" + iDensity;
	}

	sName = sName + "@" + iDensity;
	return sName + sExtension;
};

sap.m.Image.prototype._isDataUri = function(src) {
	return src ? src.indexOf("data:") === 0 : false;
};
}; // end of sap/m/Image.js
if ( !jQuery.sap.isDeclared('sap.m.InputBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.InputBase.
jQuery.sap.declare("sap.m.InputBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new InputBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.InputBase#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Base control for Input fields.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12.0
 * @name sap.m.InputBase
 */
sap.ui.core.Control.extend("sap.m.InputBase", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"value" : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"placeholder" : {type : "string", group : "Misc", defaultValue : null},
		"editable" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.InputBase.extend
 * @function
 */

sap.m.InputBase.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>value</code>.
 * Input Value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.InputBase#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setValue
 * @function
 */


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#bindValue
 * @function
 */

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#unbindValue
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.InputBase#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.InputBase#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible inputs are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.InputBase#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setVisible
 * @function
 */


/**
 * Getter for property <code>valueState</code>.
 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.m.InputBase#getValueState
 * @function
 */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setValueState
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.InputBase#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setName
 * @function
 */


/**
 * Getter for property <code>placeholder</code>.
 * text shown when no value available
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * @name sap.m.InputBase#getPlaceholder
 * @function
 */

/**
 * Setter for property <code>placeholder</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPlaceholder  new value for property <code>placeholder</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setPlaceholder
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Controls if a user can change the value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @since 1.12.0
 * @name sap.m.InputBase#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.0
 * @name sap.m.InputBase#setEditable
 * @function
 */


/**
 * This event gets fired when the input operation has finished and the value has changed. 
 *
 * @name sap.m.InputBase#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new value of the input
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.InputBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.InputBase</code>.<br/> itself. 
 *  
 * This event gets fired when the input operation has finished and the value has changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code>.<br/> itself.
 *
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.InputBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new value of the input</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.InputBase#fireChange
 * @function
 */


// Start of sap\m\InputBase.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.call(sap.m.InputBase.prototype);
sap.ui.core.IconPool.insertFontFaceStyle();

/* =========================================================== */
/* Private methods and properties                              */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* Private properties                                          */
/* ----------------------------------------------------------- */

// use labels as placeholder configuration
sap.m.InputBase.prototype._bShowLabelAsPlaceholder = (function(oDevice) {

	if (!oDevice.support.input.placeholder) {
		return true;
	}

	var bUseLabel = oDevice.support.touch;

	// These OS supports right alignable placeholder natively,
	// so we do not need selfmade placeholder.
	// test page :  http://jsfiddle.net/qKPX2/3/
	if (bUseLabel && ((oDevice.os.ios && oDevice.os.version >= 6) ||
						(oDevice.os.android && oDevice.browser.chrome)) ||
						(oDevice.os.blackberry && oDevice.os.version >= 10)) {

		bUseLabel = null;	// this means derived class can make it's own checking
	}

	return bUseLabel;
}(sap.ui.Device));

/* ----------------------------------------------------------- */
/* Private methods                                             */
/* ----------------------------------------------------------- */

sap.m.InputBase.prototype._setLabelVisibility = function() {
	if (this.getDomRef() && this._$label) {
		this._$label.css("display", this.getValue() ? "none" : "inline");
	}
};

sap.m.InputBase.prototype._getInputValue = function(sValue) {
	sValue = (typeof sValue == "undefined") ? this._$input.val() : sValue.toString();

	if (this.getMaxLength && this.getMaxLength() > 0) {
		sValue = sValue.substring(0, this.getMaxLength());
	}

	return sValue;
};

sap.m.InputBase.prototype.setMaxLength = function(iMaxLength) {
	if (iMaxLength < 0) {
		return this;
	}

	this.setProperty("maxLength", iMaxLength, true);

	if (this.getDomRef()) {
		if (iMaxLength === 0) {
			this._$input.removeAttr("maxlength");
		} else {
			this._$input.val(this._$input.val().substring(0, iMaxLength));
			this._$input.attr("maxlength", iMaxLength);
		}
	}

	return this;
};

/* =========================================================== */
/* Lifecycle methods                                           */
/* =========================================================== */

/**
 * Initialization hook.
 *
 * @private
 */
sap.m.InputBase.prototype.init = function() {
	this._curpos = 0;	// cursor position
	this._lastValue = "";	// last changed value
	this._changeProxy = jQuery.proxy(this._onChange, this);
};

/**
 * Required adaptations before rendering.
 *
 * @private
 */
sap.m.InputBase.prototype.onBeforeRendering = function() {
	if (this.getDomRef()) {
		this._$input.off();
		this._curpos = this._$input.cursorPos();
	}
};

/**
 * Required adaptations after rendering.
 *
 * @private
 */
sap.m.InputBase.prototype.onAfterRendering = function() {
	this._$input = this.$("inner");
	this._$input.on("change", this._changeProxy);

	if (this._bShowLabelAsPlaceholder) {
		this._$label = this.$().find("label");
		this._setLabelVisibility();

		// workaround for iOS 5 bug - see http://stackoverflow.com/questions/7358781/tapping-on-label-in-mobile-safari
		if (sap.ui.Device.os.ios && sap.ui.Device.os.version <= 5) {
			this._$label.on("click", function() {});
		}
	}
};

/**
 * Cleans up before destruction.
 *
 * @private
 */
sap.m.InputBase.prototype.exit = function() {
	this._$input = null;
	this._$label = null;
};

/* =========================================================== */
/* Event handlers                                              */
/* =========================================================== */

/**
 * Handle the touch start event on the Input.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.InputBase.prototype.ontouchstart = function(oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();
};

/**
 * Handle the touch end event on the Input.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.InputBase.prototype.ontouchend = function(oEvent) {
	// remember the cursor position
	this._curpos = this._$input.cursorPos();
};

sap.m.InputBase.prototype.onkeyup = function(oEvent) {
	// remember the cursor position
	this._curpos = this._$input.cursorPos();
};

sap.m.InputBase.prototype.onfocusout = function(oEvent) {

	// IE doesn't fire change event on blur sometimes
	// set initial value empty, type some text
	// hit Enter (actually here does not update internal value because does not fire change with enter)
	// return back to initial value and then blur
	// no change event is fired
	if (sap.ui.Device.browser.msie) {

		// fire event
		this._onChange(oEvent);
	}

	// ios Safari changes scrollTop, remove it in case of iScroll
	if (sap.ui.Device.os.ios) {
		var oScrollDelegate = sap.m.getScrollDelegate(this);

		if (oScrollDelegate) {
			oScrollDelegate.refresh();
		}
	}
};

sap.m.InputBase.prototype._onChange = function(oEvent) {
	// make sure _$input exists on change for async calls
	if (!this._$input) {
		return;
	}

	// compare with the old known value
	var sValue = this._getInputValue();

	if (sValue !== this._lastValue) {
		this.setProperty("value", sValue, true);
		this._curpos = this._$input.cursorPos();
		this._setLabelVisibility();
		this._lastValue = sValue;
		this.fireChange({
			value: sValue,

			// backwards compatibility
			newValue: sValue
		});
	}
};

/* ----------------------------------------------------------- */
/* Keyboard handling                                           */
/* ----------------------------------------------------------- */

/**
 * Handle when enter is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.InputBase.prototype.onsapenter = function(oEvent) {

	// IE doesn't fire change event for inputs when we hit Enter
	if (sap.ui.Device.browser.msie && oEvent.target.tagName.toUpperCase() === "INPUT") {

		// fire event
		this._onChange(oEvent);
	}

};

/**
 * Handle when escape is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.InputBase.prototype.onsapescape = function(oEvent) {

	// revert to the old value
	var sValue = this._getInputValue();

	if (sValue !== this._lastValue) {
		this.setValue(this._lastValue);
		this.fireEvent("liveChange", {
			value: this._lastValue,

			// backwards compatibility
			newValue: this._lastValue
		});
	}
};

/* =========================================================== */
/* API methods                                                 */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* protected methods                                           */
/* ----------------------------------------------------------- */

/**
 * Register an event listener to the browser input event.
 *
 * @param {function} fnCallback Function to be called when the value of the input element is changed.
 * @protected
 * @name sap.m.InputBase#_bindToInputEvent
 */
sap.m.InputBase.prototype._bindToInputEvent = function(fnCallback) {
	this._$input.on("input", fnCallback);

	// input event in IE9 doesn't fire when we hit BACKSPACE / DEL / CUT
	var mBrowser = sap.ui.Device.browser;

	if (mBrowser.msie && mBrowser.version < 10) {
		this._$input.on({
			cut: function(oEvent) {
				setTimeout(function() {
					fnCallback(oEvent);
				}, 0);
			},

			keyup: function(oEvent) {
				var oKC = jQuery.sap.KeyCodes;
				if (oEvent.which === oKC.DELETE || oEvent.which === oKC.BACKSPACE) {
					fnCallback(oEvent);
				}
			}
		});
	}
};

/* ----------------------------------------------------------- */
/* public methods                                              */
/* ----------------------------------------------------------- */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code>.
 *
 * @param {sap.ui.core.ValueState} oValueState New value for property <code>valueState</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * @name sap.m.InputBase#setValueState
 * @function
 */
sap.m.InputBase.prototype.setValueState = function(sValueState) {
	var sOldValueState = this.getValueState();
	sValueState = this.validateProperty("valueState", sValueState);

	if (sValueState === sOldValueState) {
		return this;
	}

	if (!this.getDomRef()) {
		return this.setProperty("valueState", sValueState);
	}

	var $container = this.$();
	this.setProperty("valueState", sValueState, true);

	if (sOldValueState) {
		$container.removeClass("sapMInputBase" + sOldValueState);
		this._$input.removeClass("sapMInputBase" + sOldValueState + "Inner");
	}

	if (sValueState) {
		$container.addClass("sapMInputBase" + sValueState);
		this._$input.addClass("sapMInputBase" + sValueState + "Inner");
	}

	// set tooltip based on state (will be undefined when state is None)
	var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(this, this.getTooltip_AsString());
	this.$().attr("title", sTooltip || "");

	return this;
};

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code>.
 *
 * @param {string} sValue New value for property <code>value</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * @name sap.m.InputBase#setValue
 * @function
 */
sap.m.InputBase.prototype.setValue = function(sValue) {
	sValue = this.validateProperty("value", sValue);
	sValue = this._getInputValue(sValue);

	if (sValue !== this.getValue()) {
		this._lastValue = sValue;
		this.setProperty("value", sValue, true);

		if (this.getDomRef() && (this._getInputValue() !== sValue)) {
			this._$input.val(sValue);
			this._setLabelVisibility();
			this._curpos = this._$input.cursorPos();
		}
	}

	return this;
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code>.
 *
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * @name sap.m.InputBase#setWidth
 * @function
 */
sap.m.InputBase.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth, true);
	this.$().css("width", this.getWidth());
	return this;
};

/**
 * Setter for property <code>placeholder</code>.
 *
 * Default value is empty/<code>undefined</code>.
 *
 * @param {string} sPlaceholder New value for property <code>placeholder</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * @name sap.m.InputBase#setPlaceholder
 * @function
 */
sap.m.InputBase.prototype.setPlaceholder = function(sPlaceholder) {
	this.setProperty("placeholder", sPlaceholder, true);

	if (this.getDomRef()) {

		if (this._$label) {
			this._$label.text(this.getPlaceholder());
		} else {
			this._$input.attr("placeholder", this.getPlaceholder());
		}
	}

	return this;
};

sap.m.InputBase.prototype.getFocusInfo = function() {
	return {
		id: this.getId(),
		cursorPos: this._curpos
	};
};

sap.m.InputBase.prototype.applyFocusInfo = function(oFocusInfo) {
	if (this.getDomRef()) {
		sap.ui.core.Element.prototype.applyFocusInfo.call(this, oFocusInfo);
		this._$input.cursorPos(this._curpos);
	}

	return this;
};

sap.m.InputBase.prototype.getFocusDomRef = function() {
	return this.$("inner")[0] || null;
};

sap.m.InputBase.prototype.getIdForLabel = function() {
	return this.getId() + '-inner';
};
}; // end of sap/m/InputBase.js
if ( !jQuery.sap.isDeclared('sap.m.InputListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.InputListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class InputListItem renderer.
 * @static
 */
sap.m.InputListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.InputListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMILI");
};

sap.m.InputListItemRenderer.renderLIContent = function(rm, oLI) {

	var sLabel = oLI.getLabel();

	// List item label
	if (sLabel) {
		rm.write("<label for='" + oLI.getId() + "-content' class='sapMILILabel'>");
		rm.writeEscaped(oLI.getLabel());
		rm.write("</label>");
	}

	// List item input content
	rm.write("<div class='sapMILIDiv sapMILI-CTX'>");

	var aContent = oLI.getContent();
	var cLength = aContent.length;
	for ( var i = 0; i < cLength; i++) {
		rm.renderControl(aContent[i]);
	}
	rm.write("</div>");
};

}; // end of sap/m/InputListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.Label') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Label.
jQuery.sap.declare("sap.m.Label");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Label.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDesign design} : sap.m.LabelDesign (default: sap.m.LabelDesign.Standard)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getRequired required} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLabelFor labelFor} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Label control is used in a UI5 mobile application to provide label text for other controls. Design such as bold, and text alignment can be specified.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.Label
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Label
 */
sap.ui.core.Control.extend("sap.m.Label", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.core.Label"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"design" : {type : "sap.m.LabelDesign", group : "Appearance", defaultValue : sap.m.LabelDesign.Standard},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"required" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	associations : {
		"labelFor" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.Label with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Label.extend
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * set design of a label to either Standard or Bold
 *
 * Default value is <code>sap.m.LabelDesign.Standard</code>
 *
 * @return {sap.m.LabelDesign} the value of property <code>design</code>
 * @public
 * @name sap.m.Label#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>sap.m.LabelDesign.Standard</code> 
 *
 * @param {sap.m.LabelDesign} oDesign  new value for property <code>design</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setDesign
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Label Text to be displayed
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Label#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setText
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible labels are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Label#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setVisible
 * @function
 */


/**
 * Getter for property <code>textAlign</code>.
 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.m.Label#getTextAlign
 * @function
 */

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setTextAlign
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.Label#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setTextDirection
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of Label
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Label#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setWidth
 * @function
 */


/**
 * Getter for property <code>required</code>.
 * Indicates that user input is required in the input this label labels.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>required</code>
 * @public
 * @name sap.m.Label#getRequired
 * @function
 */

/**
 * Setter for property <code>required</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRequired  new value for property <code>required</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setRequired
 * @function
 */


/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @return {string} Id of the element which is the current target of the <code>labelFor</code> association, or null
 * @public
 * @name sap.m.Label#getLabelFor
 * @function
 */

/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @param {string | sap.ui.core.Control} vLabelFor 
 *    Id of an element which becomes the new target of this <code>labelFor</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setLabelFor
 * @function
 */


	
// Start of sap\m\Label.js

/*
 * As own function to make possible to overwrite it (e.G. from Form).
 */
sap.m.Label.prototype.getLabelForRendering = function(){

	return this.getLabelFor();

};
}; // end of sap/m/Label.js
if ( !jQuery.sap.isDeclared('sap.m.Link') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Link.
jQuery.sap.declare("sap.m.Link");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Link.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHref href} : sap.ui.core.URI</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Link#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A hyperlink control which can be used to trigger actions or to navigate to other applications or web pages.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.Link
 */
sap.ui.core.Control.extend("sap.m.Link", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Data", defaultValue : ''},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"target" : {type : "string", group : "Behavior", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"href" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"wrapping" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	events : {
		"press" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.m.Link with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Link.extend
 * @function
 */

sap.m.Link.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>text</code>.
 * Link text to be displayed.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Link#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setText
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Whether the link can be triggered by the user.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Link#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible links are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Link#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setVisible
 * @function
 */


/**
 * Getter for property <code>target</code>.
 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>target</code>
 * @public
 * @name sap.m.Link#getTarget
 * @function
 */

/**
 * Setter for property <code>target</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setTarget
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of text link. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text defines the size.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Link#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setWidth
 * @function
 */


/**
 * Getter for property <code>href</code>.
 * The link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>href</code>
 * @public
 * @name sap.m.Link#getHref
 * @function
 */

/**
 * Setter for property <code>href</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sHref  new value for property <code>href</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setHref
 * @function
 */


/**
 * Getter for property <code>wrapping</code>.
 * Whether the link text is allowed to wrap when tehre is not sufficient space.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * @name sap.m.Link#getWrapping
 * @function
 */

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setWrapping
 * @function
 */


/**
 * Event is fired when the user triggers the link control. 
 *
 * @name sap.m.Link#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Link</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Link</code>.<br/> itself. 
 *  
 * Event is fired when the user triggers the link control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Link</code>.<br/> itself.
 *
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Link</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.m.Link#firePress
 * @function
 */


// Start of sap\m\Link.js

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.ui.core.EnabledPropagator.call(sap.m.Link.prototype);

/**
 * Also trigger link activation when space is pressed on the focused control
 */
sap.m.Link.prototype.onsapspace = function(oEvent) {
	sap.m.Link.prototype._handlePress.apply(this, arguments);
};


/**
 * Function is called when Link is triggered.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Link.prototype._handlePress = function(oEvent) {
	if (this.getEnabled()) {
		if (!this.firePress()) { // fire event and check return value whether default action should be prevented
			oEvent.preventDefault();
		};
	} else { // disabled
		oEvent.preventDefault(); // even prevent URLs from being triggered
	}
};

if (sap.ui.Device.support.touch) {
	sap.m.Link.prototype.ontap = sap.m.Link.prototype._handlePress;
} else {
	sap.m.Link.prototype.onclick = sap.m.Link.prototype._handlePress;
}


sap.m.Link.prototype.ontouchstart = function(oEvent) {
	// for controls which need to know whether they should handle events bubbling from here
	oEvent.originalEvent._sapui_handledByControl = true;
};
}; // end of sap/m/Link.js
if ( !jQuery.sap.isDeclared('sap.m.ListItemBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ListItemBase.
jQuery.sap.declare("sap.m.ListItemBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ListItemBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.ListType (default: sap.m.ListType.Inactive)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getUnread unread} : boolean (default: false)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getCounter counter} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ListItemBase#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:detailTap detailTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:detailPress detailPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ListItemBase contains the core features of all specific list items.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.ListItemBase
 */
sap.ui.core.Control.extend("sap.m.ListItemBase", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"isSelected"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"type" : {type : "sap.m.ListType", group : "Misc", defaultValue : sap.m.ListType.Inactive},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"unread" : {type : "boolean", group : "Misc", defaultValue : false},
		"selected" : {type : "boolean", group : "", defaultValue : false},
		"counter" : {type : "int", group : "Misc", defaultValue : null}
	},
	events : {
		"tap" : {}, 
		"detailTap" : {}, 
		"press" : {}, 
		"detailPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ListItemBase.extend
 * @function
 */

sap.m.ListItemBase.M_EVENTS = {'tap':'tap','detailTap':'detailTap','press':'press','detailPress':'detailPress'};


/**
 * Getter for property <code>type</code>.
 * Type of the list item, defines the behaviour
 *
 * Default value is <code>Inactive</code>
 *
 * @return {sap.m.ListType} the value of property <code>type</code>
 * @public
 * @name sap.m.ListItemBase#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Inactive</code> 
 *
 * @param {sap.m.ListType} oType  new value for property <code>type</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setType
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible list items are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ListItemBase#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setVisible
 * @function
 */


/**
 * Getter for property <code>unread</code>.
 * If the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>unread</code>
 * @public
 * @name sap.m.ListItemBase#getUnread
 * @function
 */

/**
 * Setter for property <code>unread</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bUnread  new value for property <code>unread</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setUnread
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * This property defines the select state of the list item when using Single/Multi-Selection.
 * 
 * Note: Binding the "selected" property in single selection mode, may cause unwanted results, if you have more than one selected item in your binding
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.m.ListItemBase#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setSelected
 * @function
 */


/**
 * Getter for property <code>counter</code>.
 * Property sets a counter bubble with the integer given.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>counter</code>
 * @public
 * @name sap.m.ListItemBase#getCounter
 * @function
 */

/**
 * Setter for property <code>counter</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iCounter  new value for property <code>counter</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setCounter
 * @function
 */


/**
 * tap event (This event is deprecated, use the press event instead) 
 *
 * @name sap.m.ListItemBase#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * tap event (This event is deprecated, use the press event instead) 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachTap
 * @function
 */

/**
 * Fire event tap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#fireTap
 * @function
 */


/**
 * detail tap event (This event is deprecated, use the detailPress event instead) 
 *
 * @name sap.m.ListItemBase#detailTap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * detail tap event (This event is deprecated, use the detailPress event instead) 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachDetailTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachDetailTap
 * @function
 */

/**
 * Fire event detailTap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#fireDetailTap
 * @function
 */


/**
 * Event is fired when the user clicks on the control. 
 *
 * @name sap.m.ListItemBase#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#firePress
 * @function
 */


/**
 * Event is fired when the user clicks on the detail button of the control. 
 *
 * @name sap.m.ListItemBase#detailPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the detail button of the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachDetailPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachDetailPress
 * @function
 */

/**
 * Fire event detailPress to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#fireDetailPress
 * @function
 */


/**
 * returns the state of the item selection as a boolean
 *
 * @name sap.m.ListItemBase.prototype.isSelected
 * @function

 * @type boolean
 * @public
 * @deprecated Since version 1.10.2. 
 * API Change makes this method unnecessary
 */


// Start of sap\m\ListItemBase.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


// IE9 does not support flex-box: do special table-based rendering (see List_noFlex.css)
sap.m.ListItemBase.prototype._bNoFlex = !jQuery.support.hasFlexBoxSupport;

// image path for different theme and OS
sap.m.ListItemBase.prototype._sImagePath = jQuery.sap.getModulePath("sap.m", "/") + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/list/" + (jQuery.os.ios ? "ios" : "android") + "/";

// mode of the list e.g. singleSelection, multi...
// internal selected state of the listitem
sap.m.ListItemBase.prototype.init = function() {
	this._active = false;
	this._mode = "None";
};

/*
 * Returns the binding context path via checking the named model of parent
 *
 * @protected
 * @since 1.16.3
 */
sap.m.ListItemBase.prototype.getBindingContextPath = function(sModelName) {
	if (this._listId && !sModelName) {
		sModelName = (sap.ui.getCore().byId(this._listId).getBindingInfo("items") || {}).model;
	}

	var oContext = this.getBindingContext(sModelName);
	if (oContext) {
		return oContext.getPath();
	}
};

// radiobutton for single selection
sap.m.ListItemBase.prototype._getRadioButton = function(oRadioButtonId, sGroupName) {

	// maybe mode is changed
	if (this.hasOwnProperty("_checkBox")) {
		this._checkBox.destroy();
		delete this._checkBox;
	}

	return this._radioButton || (this._radioButton = new sap.m.RadioButton(oRadioButtonId, {
		groupName : sGroupName,
		activeHandling : false,
		selected : this.getSelected()
	}).setParent(this, null, true).attachSelect(this._select)).setTabIndex(-1);
};

// checkbox for multiselection
sap.m.ListItemBase.prototype._getCheckBox = function(oBoxId) {

	// maybe mode is changed
	if (this.hasOwnProperty("_radioButton")) {
		this._radioButton.destroy();
		delete this._radioButton;
	}

	return this._checkBox || (this._checkBox = new sap.m.CheckBox(oBoxId, {
		activeHandling : false,
		selected : this.getSelected()
	}).setParent(this, null, true).attachSelect(this._select)).setTabIndex(-1);
};

sap.m.ListItemBase.prototype.exit = function() {
	if (this._radioButton) {
		this._radioButton.destroy();
		delete this._radioButton;
	}

	if (this._checkBox) {
		this._checkBox.destroy();
		delete this._checkBox;
	}

	if (this._navImage) {
		this._navImage.destroy();
		delete this._navImage;
	}

	if (this._delIcon) {
		this._delIcon.destroy();
		delete this._delIcon;
	}

	if (this._navIcon) {
		this._navIcon.destroy();
		delete this._navIcon;
	}

	if (this._detailIcon) {
		this._detailIcon.destroy();
		delete this._detailIcon;
	}

	this._oLastFocused = null;
};

sap.m.ListItemBase.prototype.isSelectable = function() {
	return true;
};

sap.m.ListItemBase.prototype.isSelected = function() {
	if (this.isSelectable()) {
		return this.getProperty("selected");
	}
	return false;
};

sap.m.ListItemBase.prototype.getSelected = function() {
	return this.isSelected();
};

sap.m.ListItemBase.prototype.setSelected = function(bSelect, bDontNotifyParent) {
	bSelect = this.validateProperty("selected", bSelect);

	if (this.isSelectable() && bSelect != this.getProperty("selected")) {

		// notify parent about the selection first
		if (!bDontNotifyParent && this._listId) {
			var oParent = sap.ui.getCore().byId(this._listId);
			if (oParent && oParent.onItemSetSelected) {
				oParent.onItemSetSelected(this, bSelect);
			}
		}

		// update selection box
		if (this._checkBox) {
			this._checkBox.setSelected(bSelect);
		} else if (this._radioButton) {
			this._radioButton.setSelected(bSelect);
		}

		// update DOM
		if (this.getDomRef()) {
			this.$().toggleClass("sapMLIBSelected", bSelect);
		}

		// set the property
		this.setProperty("selected", bSelect, true);
	}

	return this;
};

sap.m.ListItemBase.prototype.setActive = function(bActive) {
	if (bActive != this._active) {
		this._active = bActive;
		this._activeHandling();

		if (this.getType() == "Navigation") {
			this._activeHandlingNav();
		}

		if (bActive) {
			this._activeHandlingInheritor();
		} else {
			this._inactiveHandlingInheritor();
		}
	}

	return this;
};

// somehow unread ignores css when changed directly in the dom...therefore rerendering reactivated
sap.m.ListItemBase.prototype.setUnread = function(bUnread) {
	this.setProperty("unread", bUnread);
	this.$().toggleClass("sapMLIBUnread", bUnread);
	return this;
};

sap.m.ListItemBase.prototype._getNavImage = function(oImgId, oImgStyle, oSrc, oActiveSrc) {

	// no navigation image for android
	if (!jQuery.os.ios && this.getType() == "Navigation") {
		return null;
	}

	if (this.hasOwnProperty("_navImage")) {
		return this._navImage;
	}

	if (oActiveSrc) {
		oActiveSrc = this._sImagePath + oActiveSrc;
	}

	return this._navImage = new sap.m.Image(oImgId, {
		src : this._sImagePath + oSrc,
		activeSrc : oActiveSrc,
		densityAware : false
	}).addStyleClass(oImgStyle, true).setParent(this, null, true);
};

sap.m.ListItemBase.prototype._getDelImage = function(oImgId, oImgStyle, oSrc) {
	return this._delImage || (this._delImage = new sap.m.Image(oImgId, {
		src : this._sImagePath + oSrc,
		densityAware: false
	}).addStyleClass(oImgStyle, true).setParent(this, null, true).attachPress(this._delete));
};

sap.m.ListItemBase.prototype.ontap = function(oEvent) {
	var type = this.getType();

	if (this._mode === "SingleSelectMaster" || (this._includeItemInSelection && (this._mode === "SingleSelect" || this._mode === "SingleSelectLeft" || this._mode === "MultiSelect"))) {

		// if _includeItemInSelection all tap events will be used for the mode select and delete
		// SingleSelectMaster always behaves like includeItemInSelection is set
		switch (this._mode) {
			case "SingleSelect":
			case "SingleSelectLeft":
			case "SingleSelectMaster":

				// check if radiobutton fired the event and therefore do not set the select
				if (!this.getSelected() && oEvent.srcControl && oEvent.srcControl.getId() !== this._radioButton.getId()) {
					this.setSelected(true);
					this._listId && sap.ui.getCore().byId(this._listId)._selectTapped(this);
				}

				break;
			case "MultiSelect":

				// check if checkbox fired the event and therefore do not set the select
				if (oEvent.srcControl && oEvent.srcControl.getId() !== this._checkBox.getId()) {
					this.setSelected(!this.getSelected());
					this._listId && sap.ui.getCore().byId(this._listId)._selectTapped(this);
				}

				break;
		}
	} else {
		switch (type) {
			case "Active":
			case "Navigation":

				// if a fast tap happens deactivate the touchstart/touchend timers and their logic
				if ( this._isActivationHandled(oEvent) && !this._eventHandledByControl) {
					window.clearTimeout(this._timeoutIdStart);
					window.clearTimeout(this._timeoutIdEnd);
					this.setActive(true);
					jQuery.sap.delayedCall(180, this, function() {
						this.setActive(false);
					});
				}

				if (!this._eventHandledByControl) {
					jQuery.sap.delayedCall(50, this, function(){
						this.fireTap({});
						this.firePress({});
					});
				}

				break;

			case "Detail":
				if (oEvent.srcControl && oEvent.srcControl.getId() === (this.getId() + "-imgDet")) {
					this.fireDetailTap({});
					this.fireDetailPress({});
				}

				break;

			case "DetailAndActive":
				if (oEvent.srcControl && oEvent.srcControl.getId() === (this.getId() + "-imgDet")) {
					this.fireDetailTap({});
					this.fireDetailPress({});
				} else {

					// if a fast tap happens deactivate the touchstart/touchend timers and their logic
					if ( this._isActivationHandled(oEvent) && !this._eventHandledByControl) {
						window.clearTimeout(this._timeoutIdStart);
						window.clearTimeout(this._timeoutIdEnd);
						this.setActive(true);
						jQuery.sap.delayedCall(180, this, function() {
							this.setActive(false);
						});
					}

					if (!this._eventHandledByControl) {
						jQuery.sap.delayedCall(50, this, function(){
							this.fireTap({});
							this.firePress({});
						});
					}
				}

				break;
		}
	}

	// tell the list, item is pressed
	if (this._listId && type != "Inactive") {
		sap.ui.getCore().byId(this._listId)._onItemPressed(this, oEvent);
	}
};

sap.m.ListItemBase.prototype.ontouchstart = function(oEvent) {
	this._eventHandledByControl = oEvent.originalEvent._sapui_handledByControl;

	this._touchedY = oEvent.targetTouches[0].clientY;
	this._touchedX = oEvent.targetTouches[0].clientX;

	// timeout regarding active state when scrolling
	this._timeoutIdStart = jQuery.sap.delayedCall(100, this, function() {

		// several fingers could be used
		// for selections with whole list item interaction and singleselectmaster active handling is disabled
		if (!(this._includeItemInSelection && (this._mode == "SingleSelect" || this._mode == "SingleSelectLeft" || this._mode == "MultiSelect")) && ((oEvent.touches && oEvent.touches.length === 1) || !oEvent.touches)) {
			var type = this.getType();
			switch (type) {
				case "Active":
				case "Navigation":
				case "DetailAndActive":

					if (this._isActivationHandled(oEvent) && !this._eventHandledByControl) {
						this.setActive(true);
					}

					break;
			}
		}
	});
};

// touch move to prevent active state when scrolling
sap.m.ListItemBase.prototype.ontouchmove = function(oEvent) {
	var bTouchMovement = ((Math.abs(this._touchedY - oEvent.targetTouches[0].clientY) > 10) || Math.abs(this._touchedX - oEvent.targetTouches[0].clientX) > 10);

	if ((this._active || this._timeoutIdStart) && bTouchMovement) {

		// there is movement and therefore no tap...remove active styles
		clearTimeout(this._timeoutIdStart);
		this.setActive(false);
		this._timeoutIdStart = null;
		this._timeoutIdEnd = null;
	}
};

sap.m.ListItemBase.prototype.ontouchend = function(oEvent) {

	// several fingers could be used
	if (oEvent.targetTouches.length === 0) {
		switch (this.getType()) {
			case "Active":
			case "Navigation":
			case "DetailAndActive":

				// wait maybe it is a tap
				this._timeoutIdEnd = jQuery.sap.delayedCall(100, this, function() {
					this._event = oEvent;
					this.setActive(false);
				});

				break;
		}
	}
};

// During native scrolling: Chrome sends touchcancel and no touchend thereafter
sap.m.ListItemBase.prototype.ontouchcancel = sap.m.ListItemBase.prototype.ontouchend;

// toggle active styles for navigation items
sap.m.ListItemBase.prototype._activeHandlingNav = function() {
	if (sap.ui.Device.os.ios) {
		this.$("imgNav").toggleClass("sapMLIBImgNavActive", this._active);
	}
};

// hook method for active handling...inheritors should overwrite this method
sap.m.ListItemBase.prototype._activeHandlingInheritor = function() {
};

// hook method for inactive handling...inheritors should overwrite this method
sap.m.ListItemBase.prototype._inactiveHandlingInheritor = function() {
};

// switch background style... toggle active feedback
sap.m.ListItemBase.prototype._activeHandling = function() {
	this.$().toggleClass("sapMLIBActive", this._active);
	this.$("counter").toggleClass("sapMLIBActiveCounter", this._active);

	if (this.getUnread()) {
		this.$("unread").toggleClass("sapMLIBActiveUnread", this._active);
	}

	var oImgDet = sap.ui.getCore().byId(this.getId() + "-imgDet");
	if (oImgDet) {
		oImgDet.$().toggleClass("sapMLIBIconDetActive", this._active);
	}

	var oImgDel = sap.ui.getCore().byId(this.getId() + "-imgDel");
	if (oImgDel) {
		oImgDel.$().toggleClass("sapMLIBIconDelActive", this._active);
	}
};

// checks the source control from event, whether it is handling the active feedback by its own or not...
// also delete and detail icons won't cause an active feedback
sap.m.ListItemBase.prototype._isActivationHandled = function(oEvent) {
	this._event = oEvent;
	var control = oEvent.srcControl;

	if (control && control.getId() != this.getId() + "-imgDel" && control.getId() != this.getId() + "-imgDet" && (!control.getActiveHandling || control.getActiveHandling && control.getActiveHandling() !== false)) {
		return true;
	}

	return false;
};

/* Keyboard Handling */
sap.m.ListItemBase.prototype.onsapspace = function(oEvent) {
	if (!this._listId ||
		oEvent.isMarked() ||
		!this.isSelectable() ||
		oEvent.srcControl !== this ||
		this._mode == "Delete" ||
		this._mode == "None") {
		return;
	}

	if (this._mode == "MultiSelect") {
		this.setSelected(!this.getSelected());
		sap.ui.getCore().byId(this._listId)._selectTapped(this);
	} else if (!this.getSelected()) {
		this.setSelected(true);
		sap.ui.getCore().byId(this._listId)._selectTapped(this);
	}

	// let the parent know and prevent default not to scroll down
	oEvent.preventDefault();
	oEvent.setMarked();
};

sap.m.ListItemBase.prototype.onsapenter = function(oEvent) {
	if (!this._listId ||
		oEvent.isMarked() ||
		oEvent.srcControl !== this) {
		return;
	}

	// let the list know item is pressed
	if (this.getType() != "Inactive") {
		sap.ui.getCore().byId(this._listId)._onItemPressed(this, oEvent);
	}

	// support old bug!!!
	// do not fire item press event when item is included into selection
	if ((this._includeItemInSelection && this._mode != "None" && this._mode != "Delete") ||
		this._mode == "SingleSelectMaster") {
		this.onsapspace(oEvent);
		return;
	}

	switch (this.getType()) {
		case "Active":
		case "Navigation":
		case "DetailAndActive":
			oEvent.setMarked();

			// active feedback
			this.setActive(true);
			jQuery.sap.delayedCall(180, this, function() {
				this.setActive(false);
			});

			// fire own press event
			jQuery.sap.delayedCall(0, this, function() {
				this.fireTap({});
				this.firePress({});
			});

			break;
	}
};

sap.m.ListItemBase.prototype.onsapdelete = function(oEvent) {
	if (!this._listId ||
		oEvent.isMarked() ||
		oEvent.srcControl !== this ||
		this._mode != "Delete") {
		return;
	}

	this._delete.call(this._delIcon || this._delImage);
	oEvent.preventDefault();
	oEvent.setMarked();
};

sap.m.ListItemBase.prototype._switchFocus = function(oEvent) {
	if (oEvent.srcControl !== this) {
		this._oLastFocused = oEvent.target;
		jQuery(oEvent.target).blur();
		this.$().focus();
	} else if (this._oLastFocused) {
		jQuery(this._oLastFocused).focus();
	}
};

sap.m.ListItemBase.prototype.onkeydown = function(oEvent) {
	// check whether event is marked or not
	var mKeyCodes = jQuery.sap.KeyCodes;
	if (oEvent.isMarked()) {
		return;
	}

	// switch focus to row and focused item with F7
	if (oEvent.which == mKeyCodes.F7) {
		this._switchFocus(oEvent);
		oEvent.preventDefault();
		oEvent.setMarked();
		return;
	}

	// Ctrl + A to select all
	if (oEvent.srcControl === this && oEvent.ctrlKey && oEvent.which == mKeyCodes.A) {
		sap.ui.getCore().byId(this._listId).selectAll(true);
		oEvent.preventDefault();
		oEvent.setMarked();
	}
};
}; // end of sap/m/ListItemBase.js
if ( !jQuery.sap.isDeclared('sap.m.NavContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.NavContainer.
jQuery.sap.declare("sap.m.NavContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NavContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDefaultTransitionName defaultTransitionName} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialPage initialPage} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.NavContainer#event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.NavContainer#event:afterNavigate afterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The NavContainer control handles hierarchic navigation between Pages or other fullscreen controls.
 * 
 * All children of this control will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.NavContainer
 */
sap.ui.core.Control.extend("sap.m.NavContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"to", "back", "backToPage", "backToTop", "getPage", "getCurrentPage", "getPreviousPage", "addCustomTransition", "insertPreviousPage", "currentPageIsTopPage"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"defaultTransitionName" : {type : "string", group : "Appearance", defaultValue : null}
	},
	defaultAggregation : "pages",
	aggregations : {
    	"pages" : {type : "sap.ui.core.Control", multiple : true, singularName : "page"}
	},
	associations : {
		"initialPage" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"navigate" : {allowPreventDefault : true}, 
		"afterNavigate" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.NavContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.NavContainer.extend
 * @function
 */

sap.m.NavContainer.M_EVENTS = {'navigate':'navigate','afterNavigate':'afterNavigate'};


/**
 * Getter for property <code>height</code>.
 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 *
 * Default value is <code>'100%'</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.NavContainer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>'100%'</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 *
 * Default value is <code>'100%'</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.NavContainer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>'100%'</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setWidth
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Whether the NavContainer is visible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.NavContainer#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setVisible
 * @function
 */


/**
 * Getter for property <code>defaultTransitionName</code>.
 * The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide" on iOS and Android; on Windows Phone the default is "door". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>defaultTransitionName</code>
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#getDefaultTransitionName
 * @function
 */

/**
 * Setter for property <code>defaultTransitionName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDefaultTransitionName  new value for property <code>defaultTransitionName</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#setDefaultTransitionName
 * @function
 */


/**
 * Getter for aggregation <code>pages</code>.<br/>
 * The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * 
 * <strong>Note</strong>: this is the default aggregation for NavContainer.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.NavContainer#getPages
 * @function
 */


/**
 * Inserts a page into the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the page should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the page is inserted at 
 *             the last position        
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#insertPage
 * @function
 */

/**
 * Adds some page <code>oPage</code> 
 * to the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#addPage
 * @function
 */

/**
 * Removes an page from the aggregation named <code>pages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vPage the page to remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * @name sap.m.NavContainer#removePage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.NavContainer#removeAllPages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.NavContainer#indexOfPage
 * @function
 */
	

/**
 * Destroys all the pages in the aggregation 
 * named <code>pages</code>.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#destroyPages
 * @function
 */


/**
 * This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
 * This value should be set initially and not set/modified while the application is running.
 * 
 * This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".
 *
 * @return {string} Id of the element which is the current target of the <code>initialPage</code> association, or null
 * @public
 * @name sap.m.NavContainer#getInitialPage
 * @function
 */

/**
 * This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
 * This value should be set initially and not set/modified while the application is running.
 * 
 * This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".
 *
 * @param {string | sap.ui.core.Control} vInitialPage 
 *    Id of an element which becomes the new target of this <code>initialPage</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setInitialPage
 * @function
 */


	
/**
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @name sap.m.NavContainer#navigate
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 *
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#attachNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#detachNavigate
 * @function
 */

/**
 * Fire event navigate to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @since 1.7.1
 * @name sap.m.NavContainer#fireNavigate
 * @function
 */


/**
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @name sap.m.NavContainer#afterNavigate
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 *
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#attachAfterNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#detachAfterNavigate
 * @function
 */

/**
 * Fire event afterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @protected
 * @since 1.7.1
 * @name sap.m.NavContainer#fireAfterNavigate
 * @function
 */


/**
 * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.
 * 
 * Note that any modifications to the target page (like setting its title, or anything else that could cause a re-rendering) should be done BEFORE calling to(), in order to avoid unwanted side effects, e.g. related to the page animation.
 * 
 * Available transitions currently include "slide" (default), "fade", "flip", and "show". None of these is currently making use of any given transitionParameters.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given data object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 *
 * @name sap.m.NavContainer.prototype.to
 * @function
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData

 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters

 * @since 1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.

 * @type sap.m.NavContainer
 * @public
 */


/**
 * Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 *
 * @name sap.m.NavContainer.prototype.back
 * @function
 * @param {object} 
 *         oBackData

 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters

 * @since 1.7.1 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.NavContainer
 * @public
 */


/**
 * Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 *
 * @name sap.m.NavContainer.prototype.backToPage
 * @function
 * @param {string} 
 *         sPageId
 *         The ID of the screen to which back navigation should happen. The nearest page with this ID among the previous pages in the history stack will be used.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToPage" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.NavContainer
 * @public
 * @since 1.7.2
 */


/**
 * Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 *
 * @name sap.m.NavContainer.prototype.backToTop
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToTop" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.NavContainer
 * @public
 * @since 1.7.1
 */


/**
 * Returns the control with the given ID from the "pages" aggregation (if available).
 *
 * @name sap.m.NavContainer.prototype.getPage
 * @function
 * @param {string} 
 *         sId
 *         The ID of the aggregated control to find.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Returns the currently displayed page-level control. Note: it is not necessarily an instance of sap.m.Page, but it could also be a sap.ui.core.View, sap.m.Carousel, or whatever is aggregated.
 * 
 * Returns undefined if no page has been added yet.
 *
 * @name sap.m.NavContainer.prototype.getCurrentPage
 * @function

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
 * If there is no previous page, "undefined" is returned.
 *
 * @name sap.m.NavContainer.prototype.getPreviousPage
 * @function

 * @type sap.ui.core.Control
 * @public
 * @since 1.7.1
 */


/**
 * Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a "name". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * 
 * "to" and "back" are the transition functions for the forward and backward navigation.
 * Both will be called with the following parameters:
 * - oFromPage: the Control which is currently being displayed by the NavContainer
 * - oToPage: the Control which should be displayed by the NavContainer after the transition
 * - fCallback: a function which MUST be called when the transition has completed
 * - oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration
 * 
 * The contract for "to" and "back" is that they may do an animation of their choice, but it should not take "too long". At the beginning of the transition the target page "oToPage" does have the CSS class "sapMNavItemHidden" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class.
 * After the animation the target page "oToPage" should cover the entire screen and the source page "oFromPage" should not be visible anymore. This page should then have the CSS class "sapMNavItemHidden".
 * For adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method:
 * oFromPage.addStyleClass("sapMNavItemHidden");
 * When the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!
 * 
 * Hint: if the target page of your transition stays black on iPhone, try wrapping the animation start into a
 * setTimeout(..., 0)
 * block (delayed, but without waiting).
 * 
 * This method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.
 * 
 * Returns the sap.m.NavContainer type if called statically, or "this" (to allow method chaining) if called on a particular NavContainer instance.
 *
 * @name sap.m.NavContainer.prototype.addCustomTransition
 * @function
 * @param {string} 
 *         sName
 *         The name of the transition. This name can be used by the application to choose this transition when navigating "to()" or "back()": the "transitionName" parameter of "NavContainer.to()" corresponds to this name, the back() navigation will automatically use the same transition.
 * 
 * Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * @param {object} 
 *         oTo
 *         The function which will be called by the NavContainer when the application navigates "to()", using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * 
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.
 * @param {object} 
 *         oBack
 *         The function which will be called by the NavContainer when the application navigates "back()" from a page where it had navigated to using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * 
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.

 * @type sap.m.NavContainer
 * @public
 */


/**
 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
 * 
 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be possible because there is no previous page in the NavContainer's history stack.
 *
 * @name sap.m.NavContainer.prototype.insertPreviousPage
 * @function
 * @param {string} 
 *         sPageId
 *         The ID of the control/page/screen which is inserted into the history stack. The respective control must be aggregated by the NavContainer, otherwise this will cause an error.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
 * This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.

 * @type sap.m.NavContainer
 * @public
 * @since 1.16.1
 */


/**
 * Returns whether the current page is the top/initial page.
 * 
 * Note: going to the initial page again with a row of "to" navigations causes the initial page to be displayed again, but logically one is not at the top level, so this method returns "false" in this case.
 *
 * @name sap.m.NavContainer.prototype.currentPageIsTopPage
 * @function

 * @type boolean
 * @public
 */


// Start of sap\m\NavContainer.js
sap.m.NavContainer.prototype.init = function() {
	this._pageStack = [];
	this._aQueue = [];
	this._mVisitedPages = {};
	this._iTransitionsCompleted = 0; // to track proper callback at the end of transitions
	this._bNeverRendered = true;
	this._bNavigating = false;
};




sap.m.NavContainer.prototype.onBeforeRendering = function() {
	var pageToRenderFirst = this.getCurrentPage();
	// for the very first rendering
	if (this._bNeverRendered && pageToRenderFirst) { // will be set to false after rendering
		
		// special handling for the page which is the first one which is rendered in this NavContainer
		var pageId = pageToRenderFirst.getId();
		
		if (!this._mVisitedPages[pageId]) { // events could already be fired by initial "to()" call 
			this._mVisitedPages[pageId] = true;
			
			var oNavInfo = {
					from:null,
					fromId:null,
					to:pageToRenderFirst,
					toId:pageId,
					firstTime:true,
					isTo:false,
					isBack:false,
					isBackToPage:false,
					isBackToTop:false,
					direction:"initial"
			};
			
			var oEvent = jQuery.Event("BeforeFirstShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.data = {};
			oEvent.backData = {};
			pageToRenderFirst._handleEvent(oEvent);
			
			oEvent = jQuery.Event("BeforeShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.data = {};
			oEvent.backData = {};
			pageToRenderFirst._handleEvent(oEvent);
		}
	}
};

sap.m.NavContainer.prototype.onAfterRendering = function() {
	var pageToRenderFirst = this.getCurrentPage();
	// for the very first rendering
	if (this._bNeverRendered && pageToRenderFirst) {
		this._bNeverRendered = false;
		delete this._bNeverRendered;
		
		// special handling for the page which is the first one which is rendered in this NavContainer
		var pageId = pageToRenderFirst.getId();
		
		var oNavInfo = {
				from:null,
				fromId:null,
				to:pageToRenderFirst,
				toId:pageId,
				firstTime:true,
				isTo:false,
				isBack:false,
				isBackToTop:false,
				isBackToPage:false,
				direction:"initial"
		};
		
		var oEvent = jQuery.Event("AfterShow", oNavInfo);
		oEvent.srcControl = this;
		oEvent.data = {};
		oEvent.backData = {};
		pageToRenderFirst._handleEvent(oEvent);
	}
};

/**
 * Returns the page that should act as initial page - either the one designated as such, or, if it does not exist,
 * the first page (index 0 in the aggregation). Returns null if no page is aggregated.
 *
 * @private
 */
sap.m.NavContainer.prototype._getActualInitialPage = function() {
	var pageId = this.getInitialPage();
	if (pageId) {
		var page = sap.ui.getCore().byId(pageId);
		if (page) {
			return page;
		} else {
			jQuery.sap.log.error("NavContainer: control with ID '" + pageId + "' was set as 'initialPage' but was not found as a DIRECT child of this NavContainer (number of current children: " + this.getPages().length + ").");
		}
	}
	var pages = this.getPages();
	return (pages.length > 0 ? pages[0] : null);
};


//*** API methods ***

sap.m.NavContainer.prototype.getPage = function(pageId) {
	var aPages = this.getPages();
	for (var i = 0; i < aPages.length; i++) {
		if (aPages[i] && (aPages[i].getId() == pageId)) {
			return aPages[i];
		}
	}
	return null;
};

sap.m.NavContainer.prototype.getDefaultTransitionName = function() {
	var sName = this.getProperty("defaultTransitionName");
	if (!sName) {
		sName = sap.ui.Device.os.windows_phone ? "door" : "slide";
	}
	return sName;
};


sap.m.NavContainer.prototype._ensurePageStackInitialized = function() {
	if (this._pageStack.length === 0) {
		var page = this._getActualInitialPage(); // TODO: with bookmarking / deep linking this is the initial, but not the "home"/root page
		if (page) {
			this._pageStack.push({id:page.getId(), mode:"initial", data:{}});
		}
	}
	return this._pageStack;
};

sap.m.NavContainer.prototype.getCurrentPage = function() {
	var stack = this._ensurePageStackInitialized();

	if (stack.length >= 1) {
		return this.getPage(stack[stack.length-1].id);
	} else {
		jQuery.sap.log.warning(this + ": page stack is empty but should have been initialized - application failed to provide a page to display");
		return undefined;
	}
};

sap.m.NavContainer.prototype.getPreviousPage = function() {
	var stack = this._ensurePageStackInitialized();
	
	if (stack.length > 1) {
		return this.getPage(stack[stack.length-2].id);
		
	} else if (stack.length == 1) { // the current one is the only page on the stack
		return undefined;
		
	} else {
		jQuery.sap.log.warning(this + ": page stack is empty but should have been initialized - application failed to provide a page to display");
	}
};

sap.m.NavContainer.prototype.currentPageIsTopPage = function() {
	var stack = this._ensurePageStackInitialized();
	return (stack.length === 1);
};


sap.m.NavContainer.prototype.insertPreviousPage = function(pageId, transitionName, data) {
	var stack = this._ensurePageStackInitialized();
	if (this._pageStack.length > 0) {
		var index = stack.length-1;
		var pageInfo = {id:pageId,mode:transitionName,data:data};
		if (index === 0) {
			pageInfo.mode = "initial";
			delete stack[stack.length-1].mode;
		}
		stack.splice(index, 0, pageInfo);
	} else {
		jQuery.sap.log.warning(this + ": insertPreviousPage called with empty page stack; ignoring");
	}
	
	return this;
};


sap.m.NavContainer.prototype._afterTransitionCallback = function(oNavInfo, oData, oBackData) {
	var oEvent = jQuery.Event("AfterShow", oNavInfo);
	oEvent.data = oData || {};
	oEvent.backData = oBackData || {};
	oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
	oNavInfo.to._handleEvent(oEvent);
	
	oEvent = jQuery.Event("AfterHide", oNavInfo);
	oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
	oNavInfo.from._handleEvent(oEvent);
	
	this._iTransitionsCompleted++;
	this._bNavigating = false;
	
	this.fireAfterNavigate(oNavInfo);
	// TODO: destroy HTML? Remember to destroy ALL HTML of several pages when backToTop has been called
	
	jQuery.sap.log.info(this + ": _afterTransitionCallback called, to: " + oNavInfo.toId);

	if (this._aQueue.length > 0) {
		var fnNavigate = this._aQueue.shift();
		fnNavigate();
	}
};

sap.m.NavContainer.prototype.to = function(pageId, transitionName, data, oTransitionParameters) {
	if (pageId instanceof sap.ui.core.Control) {
		pageId = pageId.getId();
	}

	// fix parameters
	if (typeof(transitionName) !== "string") {
		// transitionName is omitted, shift parameters
		oTransitionParameters = data;
		data = transitionName;
	}
	transitionName = transitionName || this.getDefaultTransitionName();
	oTransitionParameters = oTransitionParameters || {};
	data = data || {};

	// make sure the initial page is on the stack
	this._ensurePageStackInitialized();

	//add to the queue before checking the current page, because this might change
	if (this._bNavigating) {
		jQuery.sap.log.info(this.toString() + ": Cannot navigate to page " + pageId + " because another navigation is already in progress. - navigation will be executed after the previous one");
		
		this._aQueue.push(jQuery.proxy( function() {
			this.to(pageId, transitionName, data, oTransitionParameters);
		},this));
		
		return this;
	}

	var oFromPage = this.getCurrentPage();
	if (oFromPage && (oFromPage.getId() === pageId)) { // cannot navigate to the page that is already current
		jQuery.sap.log.warning(this.toString() + ": Cannot navigate to page " + pageId + " because this is the current page.");
		return this;
	}

	var oToPage = this.getPage(pageId);

	if (oToPage) {
		
		var oNavInfo = {
				from:oFromPage,
				fromId:oFromPage.getId(),
				to:oToPage,
				toId:pageId,
				firstTime:!this._mVisitedPages[pageId],
				isTo:true,
				isBack:false,
				isBackToTop:false,
				isBackToPage:false,
				direction:"to"
		};
		var bContinue = this.fireNavigate(oNavInfo);
		if (bContinue) { // ok, let's do the navigation

			sap.m.closeKeyboard();

			// TODO: let one of the pages also cancel navigation?
			var oEvent = jQuery.Event("BeforeHide", oNavInfo);
			oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
			// no data needed for hiding
			oFromPage._handleEvent(oEvent);
			
			if (!this._mVisitedPages[pageId]) { // if this page has not been shown before
				oEvent = jQuery.Event("BeforeFirstShow", oNavInfo);
				oEvent.srcControl = this;
				oEvent.data = data || {};
				oEvent.backData = {};
				oToPage._handleEvent(oEvent);
			}
			
			oEvent = jQuery.Event("BeforeShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.data = data || {};
			oEvent.backData = {};
			oToPage._handleEvent(oEvent);

			
			this._pageStack.push({id:pageId,mode:transitionName,data:data}); // this actually causes/is the navigation
			this._mVisitedPages[pageId] = true;
	
			if (!this.getDomRef()) { // the wanted animation has been recorded, but when the NavContainer is not rendered, we cannot animate, so just return
				jQuery.sap.log.info("'Hidden' 'to' navigation in not-rendered NavContainer " + this.toString());
				return this;
			}
	
			// render the page that should get visible
			var oToPageDomRef;
			
			if (!(oToPageDomRef = oToPage.getDomRef()) || oToPageDomRef.parentNode != this.getDomRef() || sap.ui.core.RenderManager.isPreservedContent(oToPageDomRef)) {
				oToPage.addStyleClass("sapMNavItemRendering");
				jQuery.sap.log.debug("Rendering 'to' page '" + oToPage.toString() + "' for 'to' navigation");
				var rm = sap.ui.getCore().createRenderManager();
				rm.render(oToPage, this.getDomRef());
				rm.destroy();
				oToPage.addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemRendering");
			}
	
			var oTransition = sap.m.NavContainer.transitions[transitionName] || sap.m.NavContainer.transitions["slide"];
	
			// Track proper invocation of the callback  TODO: only do this during development?
			var iCompleted = this._iTransitionsCompleted;
			var that = this;
			window.setTimeout(function(){
				if (that && (that._iTransitionsCompleted < iCompleted + 1)) {
					jQuery.sap.log.warning("Transition '" + transitionName + "' 'to' was triggered five seconds ago, but has not yet invoked the end-of-transition callback.");
				}
			}, 5000);
	
			this._bNavigating = true;
			oTransition.to.call(this, oFromPage, oToPage, jQuery.proxy(function(){this._afterTransitionCallback(oNavInfo, data);}, this), oTransitionParameters); // trigger the transition

		} else {
			jQuery.sap.log.info("Navigation to page with ID '" + pageId + "' has been aborted by the application");
		}

	} else {
		jQuery.sap.log.warning("Navigation triggered to page with ID '" + pageId + "', but this page is not known/aggregated by " + this);
	}
	return this;
};


sap.m.NavContainer.prototype.back = function(backData, oTransitionParameters) {
	this._backTo("back", backData, oTransitionParameters);
	return this;
};

sap.m.NavContainer.prototype.backToPage = function(pageId, backData, oTransitionParameters) {
	this._backTo("backToPage", backData, oTransitionParameters, pageId);
	return this;
};

sap.m.NavContainer.prototype.backToTop = function(backData, oTransitionParameters) {
	this._backTo("backToTop", backData, oTransitionParameters);
	return this;
};


sap.m.NavContainer.prototype._backTo = function(sType, backData, oTransitionParameters, sRequestedPageId) {
	if (this._bNavigating) {
		jQuery.sap.log.warning(this.toString() + ": Cannot navigate back because another navigation is already in progress. - navigation will be executed after the previous one");
		

		this._aQueue.push(jQuery.proxy( function() {
			this._backTo(sType, backData, oTransitionParameters, sRequestedPageId);
		},this));
		
		return this;
	}

	if (this._pageStack.length <= 1) {
		// there is no place to go back

		// but then the assumption is that the only page on the stack is the initial one and has not been navigated to. Check this:
		if (this._pageStack.length === 1 && this._pageStack[0].mode != "initial") {
			throw new Error("Initial page not found on the stack. How did this happen?");
		}
		return this;

	} else { // normal back navigation
		
		var oFromPageInfo = this._pageStack[this._pageStack.length-1];
		var mode = oFromPageInfo.mode;
		var oFromPage = this.getPage(oFromPageInfo.id);
		var oToPage;
		var oToPageData;
		
		if (sType === "backToTop") {
			oToPage = this._getActualInitialPage();
			oToPageData = null;
			
		} else if (sType === "backToPage") {
			var info = this._findClosestPreviousPageInfo(sRequestedPageId);
			if (!info) {
				jQuery.sap.log.error(this.toString() + ": Cannot navigate backToPage('" + sRequestedPageId + "') because target page was not found among the previous pages.");
				return this;
			}
			oToPage = sap.ui.getCore().byId(info.id);
			if (!oToPage) {
				jQuery.sap.log.error(this.toString() + ": Cannot navigate backToPage('" + sRequestedPageId + "') because target page does not exist anymore.");
				return this;
			}
			oToPageData = info.data;
			
		} else { // normal "back"
			oToPage = this.getPreviousPage();
			oToPageData = this._pageStack[this._pageStack.length-2].data;
		}
		
		if(!oToPage) {
			jQuery.sap.log.error("NavContainer back navigation: target page is not defined or not aggregated by this NavContainer. Aborting navigation.");
			return;
		}

		var oToPageId = oToPage.getId();
		backData = backData || {};
		oTransitionParameters = oTransitionParameters || {};
		
		var oNavInfo = {
			from:oFromPage,
			fromId:oFromPage.getId(),
			to:oToPage,
			toId:oToPageId,
			firstTime:!this._mVisitedPages[oToPageId],
			isTo:false,
			isBack:(sType === "back"),
			isBackToPage:(sType === "backToPage"),
			isBackToTop:(sType === "backToTop"),
			direction:sType
		};
		var bContinue = this.fireNavigate(oNavInfo);
		if (bContinue) { // ok, let's do the navigation

			sap.m.closeKeyboard();

			var oEvent = jQuery.Event("BeforeHide", oNavInfo);
			oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
			// no data needed for hiding
			oFromPage._handleEvent(oEvent);
			
			if (!this._mVisitedPages[oToPageId]) { // if this page has not been shown before
				oEvent = jQuery.Event("BeforeFirstShow", oNavInfo);
				oEvent.srcControl = this;
				oEvent.backData = backData || {};
				// the old data from the forward navigation should not exist because there was never a forward navigation
				oEvent.data = {};
				oToPage._handleEvent(oEvent);
			}
			
			oEvent = jQuery.Event("BeforeShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.backData = backData || {};
			oEvent.data =  oToPageData || {}; // the old data from the forward navigation
			oToPage._handleEvent(oEvent);

			this._pageStack.pop(); // this actually causes/is the navigation
			this._mVisitedPages[oToPageId] = true;
			
			if (sType === "backToTop") { // if we should navigate to top, just clean up the whole stack
				this._pageStack = [];
				this.getCurrentPage(); // this properly restores the initial page on the stack
				
			} else if (sType === "backToPage") {
				while (this._pageStack[this._pageStack.length-1].id !== sRequestedPageId) { // by now it is guaranteed that we will find it
					this._pageStack.pop();
				}
			}

			if (!this.getDomRef()) { // the wanted animation has been recorded, but when the NavContainer is not rendered, we cannot animate, so just return
				jQuery.sap.log.info("'Hidden' back navigation in not-rendered NavContainer " + this.toString());
				return this;
			}
			
			var oTransition = sap.m.NavContainer.transitions[mode] || sap.m.NavContainer.transitions["slide"];
	
			// Track proper invocation of the callback  TODO: only do this during development?
			var iCompleted = this._iTransitionsCompleted;
			var that = this;
			window.setTimeout(function(){
				if (that && (that._iTransitionsCompleted < iCompleted + 1)) {
					jQuery.sap.log.warning("Transition '" + mode + "' 'back' was triggered five seconds ago, but has not yet invoked the end-of-transition callback.");
				}
			}, 5000);
			
			this._bNavigating = true;
			
			// make sure the to-page is rendered
			var oToPageDomRef;
			if (!(oToPageDomRef = oToPage.getDomRef()) || oToPageDomRef.parentNode != this.getDomRef() || sap.ui.core.RenderManager.isPreservedContent(oToPageDomRef)) {
				oToPage.addStyleClass("sapMNavItemRendering");
				jQuery.sap.log.debug("Rendering 'to' page '" + oToPage.toString() + "' for back navigation");
				var rm = sap.ui.getCore().createRenderManager();
				var childPos = this.$().children().index(oFromPage.getDomRef());
				rm.renderControl(oToPage);
				rm.flush(this.getDomRef(), false, childPos);
				rm.destroy();
				oToPage.addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemRendering");
			}
			
			//if the from page and to page are identical, the transition is skipped.
			if(oFromPage.getId() === oToPage.getId()){
				jQuery.sap.log.info("Transition is skipped when navigating back to the same page instance" + oToPage.toString());
				this._afterTransitionCallback(oNavInfo, oToPageData, backData);
				return this;
			}
			
			// trigger the transition
			oTransition.back.call(this, oFromPage, oToPage, jQuery.proxy(function(){this._afterTransitionCallback(oNavInfo, oToPageData, backData);}, this), oTransitionParameters); // trigger the transition
		}
	}
	return this;
};

sap.m.NavContainer.prototype._findClosestPreviousPageInfo = function(sRequestedPreviousPageId) {
	for (var i = this._pageStack.length-2; i >= 0; i--) {
		var info = this._pageStack[i];
		if (info.id === sRequestedPreviousPageId) {
			return info;
		}
	}
	return null;
};


sap.m.NavContainer.transitions = sap.m.NavContainer.transitions || {}; // make sure the object exists


//*** SHOW Transition ***

sap.m.NavContainer.transitions["show"] = {
	to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class which has been added by the NavContainer before the transition was called
		oFromPage && oFromPage.addStyleClass("sapMNavItemHidden");
		fCallback();
	},
	
	back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		oToPage.removeStyleClass("sapMNavItemHidden");
		oFromPage && oFromPage.addStyleClass("sapMNavItemHidden"); // instantly hide the previous page
		fCallback();
	}
};


//*** SLIDE Transition ***

if (jQuery.support.cssTransitions) {
	sap.m.NavContainer.transitions["slide"] = {
	
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			oFromPage.addStyleClass("sapMNavItemCenter");
			window.setTimeout(function(){ // iPhone seems to need a zero timeout here, otherwise the to page is black (and may suddenly become visible when the DOM is touched)
			
				// set the style classes that represent the initial state
				oToPage.addStyleClass("sapMNavItemRight");     // the page to navigate to should be placed just right of the visible area
				oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
				
		
				// iPhone needs some time... there is no animation without waiting
				window.setTimeout(function(){
					
					var bOneTransitionFinished = false;
					var bTransitionEndPending = true;
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					fAfterTransition = function() {
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						if (!bOneTransitionFinished) {
							// the first one of both transitions finished
							bOneTransitionFinished = true;
						} else {
							// the second transition now also finished => clean up the style classes
							bTransitionEndPending = false;
							oToPage.removeStyleClass("sapMNavItemSliding").removeStyleClass("sapMNavItemCenter");
							oFromPage.removeStyleClass("sapMNavItemSliding").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemLeft");
		
							// notify the NavContainer that the animation is complete
							fCallback();
						}
					};
					
					oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oToPage.addStyleClass("sapMNavItemSliding").addStyleClass("sapMNavItemCenter").removeStyleClass("sapMNavItemRight");
					oFromPage.addStyleClass("sapMNavItemSliding").removeStyleClass("sapMNavItemCenter").addStyleClass("sapMNavItemLeft");
			
					window.setTimeout(function(){ // in case rerendering prevented the fAfterTransition call
						if (bTransitionEndPending) {
							bOneTransitionFinished = true;
							fAfterTransition.apply(oFromPage.$().add(oToPage.$()));
						}
					}, 400);
					
				}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
			
			},0); // iPhone seems to need a zero timeout here, otherwise the to page is black (and may suddenly become visible when the DOM is touched)
		},
	
		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			// set the style classes that represent the initial state
			oToPage.addStyleClass("sapMNavItemLeft");     // the page to navigate back to should be placed just left of the visible area
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
			oFromPage.addStyleClass("sapMNavItemCenter");
	
			// iPhone needs some time... there is no animation without waiting
			window.setTimeout(function() {
				
				var bOneTransitionFinished = false;
				var bTransitionEndPending = true;
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {
					jQuery(this).unbind("webkitTransitionEnd transitionend");
					if (!bOneTransitionFinished) {
						// the first one of both transitions finished
						bOneTransitionFinished = true;
					} else {
						// the second transition now also finished => clean up the style classes
						bTransitionEndPending = false;
						oToPage.removeStyleClass("sapMNavItemSliding").removeStyleClass("sapMNavItemCenter");
						oFromPage.removeStyleClass("sapMNavItemSliding").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemRight");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					}
				};
				
				oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
				oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
				
				// workaround for bug in current webkit versions: in slided-in elements the z-order may be wrong and will be corrected once a re-layout is enforced 
				// see http://code.google.com/p/chromium/issues/detail?id=246965
				if (sap.ui.Device.browser.webkit) {
					window.setTimeout(function(){
						oToPage.$().css("box-shadow", "0em 1px 0em rgba(128, 128, 1280, 0.1)"); // add box-shadow
						window.setTimeout(function(){
							oToPage.$().css("box-shadow", ""); // remove it again
						},50);
					},0);
				}
				
				// set the new style classes that represent the end state (and thus start the transition)
				oToPage.addStyleClass("sapMNavItemSliding").addStyleClass("sapMNavItemCenter").removeStyleClass("sapMNavItemLeft"); // transition from left position to normal/center position starts now
				oFromPage.addStyleClass("sapMNavItemSliding").removeStyleClass("sapMNavItemCenter").addStyleClass("sapMNavItemRight"); // transition from normal position to right position starts now
				
				window.setTimeout(function(){ // in case rerendering prevented the fAfterTransition call
					if (bTransitionEndPending) {
						bOneTransitionFinished = true;
						fAfterTransition.apply(oFromPage.$().add(oToPage.$()));
					}
				}, 400);
				
			}, 100); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
		}
	};
	
} else { // no CSS transitions, IE9 support
	sap.m.NavContainer.transitions["slide"] = {
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var $ToPage = oToPage.$();
			$ToPage.css("left", "100%");
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class which has been added by the NavContainer before the transition was called

			$ToPage.animate({left: "0%"}, 300);
			var $FromPage = oFromPage.$();
			$FromPage.animate({left: "-100%"}, 300, function(){
				oFromPage.addStyleClass("sapMNavItemHidden");
				$FromPage.css("left", "0");
				fCallback();
			});
		},

		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var $ToPage = oToPage.$();
			$ToPage.css("left", "-100%");
			oToPage.removeStyleClass("sapMNavItemHidden");

			$ToPage.animate({left: "0%"}, 300);
			var $FromPage = oFromPage.$();
			$FromPage.animate({left: "100%"}, 300, function(){
				oFromPage.addStyleClass("sapMNavItemHidden");
				$FromPage.css("left", "0");
				fCallback();
			});
		}
	};
}


//*** FADE Transition ***

if (jQuery.support.cssTransitions) {
	sap.m.NavContainer.transitions["fade"] = {
	
			to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
				// set the style classes that represent the initial state
				oToPage.addStyleClass("sapMNavItemTransparent");
				oToPage.removeStyleClass("sapMNavItemHidden");
	
				// iPhone needs some time for rendering, there is no animation without waiting
				window.setTimeout(function(){
					
					// the code to be executed after the new page has completed fading in
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					var bTransitionEndPending = true;
					fAfterTransition = function() {
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						// clean up the style classes
						bTransitionEndPending = false;
						oFromPage.addStyleClass("sapMNavItemHidden");
						oToPage.removeStyleClass("sapMNavItemFading").removeStyleClass("sapMNavItemOpaque");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					};
					
					oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oToPage.addStyleClass("sapMNavItemFading").removeStyleClass("sapMNavItemTransparent").addStyleClass("sapMNavItemOpaque");
					
					window.setTimeout(function(){ // in case rerendering prevented the fAfterTransition call
						if (bTransitionEndPending) {
							fAfterTransition.apply(oToPage.$());
						}
					}, 600);
					
				}, 10);
			},
	
			back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
				// set the style classes that represent the initial state
				oFromPage.addStyleClass("sapMNavItemOpaque");
				oToPage.removeStyleClass("sapMNavItemHidden");
	
				// iPhone needs some time for rendering, there is no animation without waiting
				window.setTimeout(function() {
					
					// the code to be executed after the new page has completed fading in
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					var bTransitionEndPending = true;
					fAfterTransition = function() {
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						// clean up the style classes
						bTransitionEndPending = false;
						oFromPage.removeStyleClass("sapMNavItemFading").addStyleClass("sapMNavItemHidden"); // TODO: destroy HTML?
						oFromPage.removeStyleClass("sapMNavItemTransparent");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					};
					
					oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oFromPage.addStyleClass("sapMNavItemFading").removeStyleClass("sapMNavItemOpaque");
					oFromPage.addStyleClass("sapMNavItemTransparent");
					
					window.setTimeout(function(){ // in case rerendering prevented the fAfterTransition call
						if (bTransitionEndPending) {
							fAfterTransition.apply(oToPage.$());
						}
					}, 600);
	
				}, 10);
			}
	};

} else { // no CSS transitions, IE9 support
	sap.m.NavContainer.transitions["fade"] = {
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var $ToPage = oToPage.$();
			$ToPage.css("opacity", "0");
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class which has been added by the NavContainer before the transition was called

			$ToPage.animate({opacity: "1"}, 500, function(){
				oFromPage.addStyleClass("sapMNavItemHidden");
				fCallback();
			});
		},

		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var $FromPage = oFromPage.$();
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class which has been added by the NavContainer before the transition was called

			$FromPage.animate({opacity: "0"}, 500, function(){
				oFromPage.addStyleClass("sapMNavItemHidden");
				$FromPage.css("opacity", "1");
				fCallback();
			});
		}
	};
}


//*** FLIP Transition ***

if (jQuery.support.cssTransitions) {
	sap.m.NavContainer.transitions["flip"] = {
	
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var that = this;
			window.setTimeout(function(){ // iPhone seems to need a zero timeout here, otherwise the to page is black (and may suddenly become visible when the DOM is touched)
				
				var isAndroid23 = (sap.ui.Device.os.android && sap.ui.Device.os.version === 2.3);
				
				// if not Android2.3 then add perspective styles to NavContainer
				!isAndroid23 && that.$().addClass("sapMNavFlip");
			
				// set the style classes that represent the initial state
				oToPage.addStyleClass("sapMNavItemFlipNext");     // the page to navigate to should be placed just right of the visible area
				oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
		
				// iPhone needs some time... there is no animation without waiting
				window.setTimeout(function(){
					
					var bOneTransitionFinished = false;
					var bTransitionEndPending = true;
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					fAfterTransition = function() {
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						if (!bOneTransitionFinished) {
							// the first one of both transitions finished
							bOneTransitionFinished = true;
						} else {
							// the second transition now also finished => clean up the style classes
							bTransitionEndPending = false;
							oToPage.removeStyleClass("sapMNavItemFlipping");
							oFromPage.removeStyleClass("sapMNavItemFlipping").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemFlipPrevious");
							!isAndroid23 && that.$().removeClass("sapMNavFlip");
							
							// notify the NavContainer that the animation is complete
							fCallback();
						}
					};
					
					oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oToPage.addStyleClass("sapMNavItemFlipping").removeStyleClass("sapMNavItemFlipNext");
					oFromPage.addStyleClass("sapMNavItemFlipping").addStyleClass("sapMNavItemFlipPrevious");
					
					window.setTimeout(function(){ // in case rerendering prevented the fAfterTransition call
						if (bTransitionEndPending) {
							bOneTransitionFinished = true;
							fAfterTransition.apply(oFromPage.$().add(oToPage.$()));
						}
					}, 600);
		
				}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few#
			}, 0);
		},
	
		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var that = this,
				isAndroid23 = (sap.ui.Device.os.android && sap.ui.Device.os.version === 2.3);
			
			// if not Android2.3 then add perspective styles to NavContainer
			!isAndroid23 && that.$().addClass("sapMNavFlip");
			
			// set the style classes that represent the initial state
			oToPage.addStyleClass("sapMNavItemFlipPrevious");     // the page to navigate back to should be placed just left of the visible area
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
	
			// iPhone needs some time... there is no animation without waiting
			window.setTimeout(function() {
				
				var bOneTransitionFinished = false;
				var bTransitionEndPending = true;
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {
					jQuery(this).unbind("webkitTransitionEnd transitionend");
					if (!bOneTransitionFinished) {
						// the first one of both transitions finished
						bOneTransitionFinished = true;
					} else {
						// the second transition now also finished => clean up the style classes
						bTransitionEndPending = false;
						oToPage.removeStyleClass("sapMNavItemFlipping");
						oFromPage.removeStyleClass("sapMNavItemFlipping").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemFlipNext");
						!isAndroid23 && that.$().removeClass("sapMNavFlip");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					}
				};
				
				oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
				oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
				
				// set the new style classes that represent the end state (and thus start the transition)
				oToPage.addStyleClass("sapMNavItemFlipping").removeStyleClass("sapMNavItemFlipPrevious"); // transition from left position to normal/center position starts now
				oFromPage.addStyleClass("sapMNavItemFlipping").addStyleClass("sapMNavItemFlipNext"); // transition from normal position to right position starts now
	
				window.setTimeout(function(){ // in case rerendering prevented the fAfterTransition call
					if (bTransitionEndPending) {
						bOneTransitionFinished = true;
						fAfterTransition.apply(oFromPage.$().add(oToPage.$()));
					}
				}, 600);
				
			}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
		}
	};

} else { // no CSS transitions, IE9 support
	sap.m.NavContainer.transitions["flip"] = sap.m.NavContainer.transitions["slide"];
}


//*** DOOR Transition ***

if (jQuery.support.cssTransitions) {
	sap.m.NavContainer.transitions["door"] = {
	
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var that = this;
			window.setTimeout(function(){ // iPhone seems to need a zero timeout here, otherwise the to page is black (and may suddenly become visible when the DOM is touched)
				
				var isAndroid23 = (sap.ui.Device.os.android && sap.ui.Device.os.version === 2.3);
				
				// if not Android2.3 then add perspective styles to NavContainer
				!isAndroid23 && that.$().addClass("sapMNavDoor");
			
				// set the style classes that represent the initial state
				oToPage.addStyleClass("sapMNavItemDoorInNext");     // the page to navigate to should be placed just right of the visible area
				oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
		
				// iPhone needs some time... there is no animation without waiting
				window.setTimeout(function(){
					
					var bOneTransitionFinished = false;
					var bTransitionEndPending = true;
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					fAfterTransition = function() {
						jQuery(this).unbind("webkitAnimationEnd animationend");
						if (!bOneTransitionFinished) {
							// the first one of both transitions finished
							bOneTransitionFinished = true;
						} else {
							// the second transition now also finished => clean up the style classes
							bTransitionEndPending = false;
							oToPage.removeStyleClass("sapMNavItemDooring").removeStyleClass("sapMNavItemDoorInNext");
							oFromPage.removeStyleClass("sapMNavItemDooring").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemDoorInPrevious");
							!isAndroid23 && that.$().removeClass("sapMNavDoor");
							
							// notify the NavContainer that the animation is complete
							fCallback();
						}
					};
					
					oFromPage.$().bind("webkitAnimationEnd animationend", fAfterTransition);
					oToPage.$().bind("webkitAnimationEnd animationend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oToPage.addStyleClass("sapMNavItemDooring");
					oFromPage.addStyleClass("sapMNavItemDooring").addStyleClass("sapMNavItemDoorInPrevious");
					
					window.setTimeout(function(){ // in case rerendering prevented the fAfterTransition call
						if (bTransitionEndPending) {
							bOneTransitionFinished = true;
							fAfterTransition.apply(oFromPage.$().add(oToPage.$()));
						}
					}, 1000);
		
				}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few#
			}, 0);
		},
	
		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var that = this,
				isAndroid23 = (sap.ui.Device.os.android && sap.ui.Device.os.version === 2.3);
			
			// if not Android2.3 then add perspective styles to NavContainer
			!isAndroid23 && that.$().addClass("sapMNavDoor");
			
			// set the style classes that represent the initial state
			oToPage.addStyleClass("sapMNavItemDoorOutNext");     // the page to navigate back to should be placed just left of the visible area
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
	
			// iPhone needs some time... there is no animation without waiting
			window.setTimeout(function() {
				
				var bOneTransitionFinished = false;
				var bTransitionEndPending = true;
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {
					jQuery(this).unbind("webkitAnimationEnd animationend");
					if (!bOneTransitionFinished) {
						// the first one of both transitions finished
						bOneTransitionFinished = true;
					} else {
						// the second transition now also finished =>  clean up the style classes
						bTransitionEndPending = false;
						oToPage.removeStyleClass("sapMNavItemDooring").removeStyleClass("sapMNavItemDoorOutNext");
						oFromPage.removeStyleClass("sapMNavItemDooring").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemDoorOutPrevious");
						!isAndroid23 && that.$().removeClass("sapMNavDoor");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					}
				};
				
				oFromPage.$().bind("webkitAnimationEnd animationend", fAfterTransition);
				oToPage.$().bind("webkitAnimationEnd animationend", fAfterTransition);
				
				// set the new style classes that represent the end state (and thus start the transition)
				oToPage.addStyleClass("sapMNavItemDooring"); // transition from left position to normal/center position starts now
				oFromPage.addStyleClass("sapMNavItemDooring").addStyleClass("sapMNavItemDoorOutPrevious"); // transition from normal position to right position starts now
	
				window.setTimeout(function(){ // in case rerendering prevented the fAfterTransition call
					if (bTransitionEndPending) {
						bOneTransitionFinished = true;
						fAfterTransition.apply(oFromPage.$().add(oToPage.$()));
					}
				}, 1000);
				
			}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
		}
	};

} else { // no CSS transitions, IE9 support
	sap.m.NavContainer.transitions["door"] = sap.m.NavContainer.transitions["slide"];
}


sap.m.NavContainer.prototype.addCustomTransition = function(sName, fTo, fBack) {
	if (sap.m.NavContainer.transitions[sName]) {
		jQuery.sap.log.warning("Transition with name " + sName + " already exists in " + this + ". It is now being replaced by custom transition.");
	}
	
	sap.m.NavContainer.transitions[sName] = {to:fTo, back:fBack};
	return this;
};
sap.m.NavContainer.addCustomTransition = sap.m.NavContainer.prototype.addCustomTransition;



// ----------------- code for tracking and avoiding invalidation --------------------------

/**
 * Forces invalidation and rerendering (.invalidate() is disabled)
 * @private
 */
sap.m.NavContainer.prototype.forceInvalidation = sap.m.NavContainer.prototype.invalidate;

sap.m.NavContainer.prototype.invalidate = function(oSource) {

	if (oSource == this) {
		// does not happen because the source is only given when propagating to a parent

	} else if (!oSource) {
		// direct invalidation of the NavContainer; this means a property has been modified
		this.forceInvalidation(); // let invalidation occur

	} else if (oSource instanceof sap.ui.core.Control) {
		// an aggregated control is invalidated
		var bIsInPages = false,
			aPages = this.getPages(),
			l = aPages.length;
			
		for (var i = 0; i < l; i++) {
			if (aPages[i] === oSource) {
				bIsInPages = true;
				break;
			}
		}
		
		if (bIsInPages && !(oSource.getId() === this.getCurrentPage())) {
			// the invalidation source is a non-current page, so do not rerender anything
		} else {
			// TODO: there will be more cases where invalidation is not required...
			this.forceInvalidation();
		}
		
	} else { 
		// TODO: which cases are ending up here?
		this.forceInvalidation();
		
	}
};

sap.m.NavContainer.prototype.removePage = function(oPage) {
	oPage = this.removeAggregation("pages", oPage);
	
	if (oPage) {
		oPage.removeStyleClass("sapMNavItemHidden");
		oPage.removeStyleClass("sapMNavItem");
	}
	
	return oPage;
};


sap.m.NavContainer.prototype.removeAllPages = function() {
	var aPages = this.getPages();
	if (!aPages)	{
		return [];
	}
	
	for (var i = 0; i < aPages.length; i++) {
		aPages[i].removeStyleClass("sapMNavItemHidden");
		aPages[i].removeStyleClass("sapMNavItem");
	}

	return this.removeAllAggregation("pages");
};

sap.m.NavContainer.prototype.addPage = function(oPage) {
	var aPages = this.getPages();
	// Routing often adds an already existing page. ManagedObject would remove and re-add it because the order is affected, 
	// but here the order does not matter, so just ignore the call in this case.
	if (jQuery.inArray(oPage, aPages) > -1) {
		return this;
	}
	
	this.addAggregation("pages", oPage, true);

	// sapMNavItem must be added after addAggregation is called because addAggregation can lead
	// to a removePage-call where the class is removed again.
	oPage.addStyleClass("sapMNavItem"); 
	var iPreviousPageCount = aPages.length;
	
	if (iPreviousPageCount === 0 && /* get the NEW pages count */ this.getPages().length === 1 && this.getDomRef()) { // the added page is the first and only page and has been newly added
		this._ensurePageStackInitialized();
		this.rerender();
	}
	
	return this;
};

sap.m.NavContainer.prototype.insertPage = function(oPage, iIndex) {
	this.insertAggregation("pages", oPage, iIndex, true);

	// sapMNavItem must be added after addAggregation is called because addAggregation can lead
	// to a removePage-call where the class is removed again.
	oPage.addStyleClass("sapMNavItem");
	var iPreviousPageCount = this.getPages().length;
	
	if (iPreviousPageCount === 0 && this.getPages().length === 1 && this.getDomRef()) { // the added page is the first and only page and has been newly added
		this._ensurePageStackInitialized();
		this.rerender();
	}
	
	return this;
};



// documentation of the pseudo events (beforeShow, afterShow, beforeHide etc.)

/**
 * sap.m.NavContainerChild is an artificial interface with the only purpose to bear the documentation of 
 * pseudo events triggered by sap.m.NavContainer on its child controls when navigation occurs and child controls are displayed/hidden.
 * 
 * Interested parties outside the child control can listen to one or more of these events by registering a Delegate:
 * <pre>
 * page1.addEventDelegate({
 *    onBeforeShow: function(evt) {
 *       // page1 is about to be shown; act accordingly - if required you can read event information from the evt object
 *    },
 *    onAfterHide: function(evt) {
 *       // ...
 *    }
 * });
 * </pre>
 * 
 * @name sap.m.NavContainerChild
 * @interface 
 * @public
*/


/**
 * This event is fired before the NavContainer shows this child control for the first time.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @name sap.m.NavContainerChild.prototype.BeforeFirstShow
 * @public
*/

/**
 * This event is fired every time before the NavContainer shows this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @name sap.m.NavContainerChild.prototype.BeforeShow
 * @public
*/

/**
 * This event is fired every time when the NavContainer has made this child control visible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @name sap.m.NavContainerChild.prototype.AfterShow
 * @public
*/

/**
 * This event is fired every time before the NavContainer hides this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @name sap.m.NavContainerChild.prototype.BeforeHide
 * @public
*/

/**
 * This event is fired every time when the NavContainer has made this child control invisible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now no longer being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @name sap.m.NavContainerChild.prototype.AfterHide
 * @public
*/

}; // end of sap/m/NavContainer.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectAttribute') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectAttribute.
jQuery.sap.declare("sap.m.ObjectAttribute");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ObjectAttribute.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getActive active} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ObjectAttribute#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ObjectAttribute displays a text field that can be normal or active. Object attribute fires a press event when the user selects active text.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.ObjectAttribute
 */
sap.ui.core.Control.extend("sap.m.ObjectAttribute", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"active" : {type : "boolean", group : "Misc", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectAttribute with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectAttribute.extend
 * @function
 */

sap.m.ObjectAttribute.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>visible</code>.
 * Indicates if the object attribute is visible. Invisible object attribute is not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ObjectAttribute#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#setVisible
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The object attribute text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.ObjectAttribute#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#setText
 * @function
 */


/**
 * Getter for property <code>active</code>.
 * Indicates if the object attribute text is selectable by the user
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>active</code>
 * @public
 * @name sap.m.ObjectAttribute#getActive
 * @function
 */

/**
 * Setter for property <code>active</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bActive  new value for property <code>active</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#setActive
 * @function
 */


/**
 * Event is fired when the user clicks active text 
 *
 * @name sap.m.ObjectAttribute#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.domRef Dom reference of the object attributes' text to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectAttribute</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks active text 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectAttribute</code>.<br/> itself.
 *
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the object attributes' text to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ObjectAttribute#firePress
 * @function
 */


// Start of sap\m\ObjectAttribute.js
///**
// * This file defines behavior for the control,
// */

/**
 * @private
 */
sap.m.ObjectAttribute.prototype.ontap = function(oEvent) {
	if(!!this.getActive()) {
		this.firePress({domRef: this.getDomRef()});
	}
};

/**
 * See 'return'.
 * 
 * @private
 * @returns {boolean} true if attribute's text is empty or only consists of whitespaces.
 */
sap.m.ObjectAttribute.prototype._isEmpty = function() {
	return !this.getText().trim();
};

/**
 * Function is called when the control is touched.  
 *
 * @private
 */
sap.m.ObjectAttribute.prototype.ontouchstart = function(oEvent) {
	if(!!this.getActive()) {
		// for control who need to know if they should handle events from the ObjectAttribute control
		oEvent.originalEvent._sapui_handledByControl = true;
	}
};

	

}; // end of sap/m/ObjectAttribute.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectHeader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectHeader.
jQuery.sap.declare("sap.m.ObjectHeader");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ObjectHeader.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIntroActive introActive} : boolean</li>
 * <li>{@link #getTitleActive titleActive} : boolean</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconActive iconActive} : boolean</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getMarkFavorite markFavorite} : boolean (default: false)</li>
 * <li>{@link #getMarkFlagged markFlagged} : boolean (default: false)</li>
 * <li>{@link #getShowMarkers showMarkers} : boolean (default: false)</li>
 * <li>{@link #getShowTitleSelector showTitleSelector} : boolean (default: false)</li>
 * <li>{@link #getNumberState numberState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getCondensed condensed} : boolean (default: false)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: sap.m.BackgroundDesign.Transparent)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} <strong>(default aggregation)</strong> : sap.m.ObjectAttribute[]</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getStatuses statuses} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ObjectHeader#event:titlePress titlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ObjectHeader#event:introPress introPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ObjectHeader#event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ObjectHeader#event:titleSelectorPress titleSelectorPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ObjectHeader is a display control that enables the user to easily identify a specific object. The object header title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.ObjectHeader
 */
sap.ui.core.Control.extend("sap.m.ObjectHeader", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"number" : {type : "string", group : "Misc", defaultValue : null},
		"numberUnit" : {type : "string", group : "Misc", defaultValue : null},
		"intro" : {type : "string", group : "Misc", defaultValue : null},
		"introActive" : {type : "boolean", group : "Misc", defaultValue : null},
		"titleActive" : {type : "boolean", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconActive" : {type : "boolean", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"iconDensityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"markFavorite" : {type : "boolean", group : "Misc", defaultValue : false},
		"markFlagged" : {type : "boolean", group : "Misc", defaultValue : false},
		"showMarkers" : {type : "boolean", group : "Misc", defaultValue : false},
		"showTitleSelector" : {type : "boolean", group : "Misc", defaultValue : false},
		"numberState" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None},
		"condensed" : {type : "boolean", group : "Appearance", defaultValue : false},
		"backgroundDesign" : {type : "sap.m.BackgroundDesign", group : "Appearance", defaultValue : sap.m.BackgroundDesign.Transparent}
	},
	defaultAggregation : "attributes",
	aggregations : {
    	"attributes" : {type : "sap.m.ObjectAttribute", multiple : true, singularName : "attribute"}, 
    	"firstStatus" : {type : "sap.m.ObjectStatus", multiple : false, deprecated: true}, 
    	"secondStatus" : {type : "sap.m.ObjectStatus", multiple : false, deprecated: true}, 
    	"statuses" : {type : "sap.ui.core.Control", multiple : true, singularName : "status"}
	},
	events : {
		"titlePress" : {}, 
		"introPress" : {}, 
		"iconPress" : {}, 
		"titleSelectorPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectHeader with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectHeader.extend
 * @function
 */

sap.m.ObjectHeader.M_EVENTS = {'titlePress':'titlePress','introPress':'introPress','iconPress':'iconPress','titleSelectorPress':'titleSelectorPress'};


/**
 * Getter for property <code>title</code>.
 * Object header title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ObjectHeader#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setTitle
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Object header number field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>number</code>
 * @public
 * @name sap.m.ObjectHeader#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setNumber
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * Object header number units qualifier.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.m.ObjectHeader#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>intro</code>.
 * Introductory text for the object header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>intro</code>
 * @public
 * @name sap.m.ObjectHeader#getIntro
 * @function
 */

/**
 * Setter for property <code>intro</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIntro  new value for property <code>intro</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setIntro
 * @function
 */


/**
 * Getter for property <code>introActive</code>.
 * Indicates that the intro is clickable
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>introActive</code>
 * @public
 * @name sap.m.ObjectHeader#getIntroActive
 * @function
 */

/**
 * Setter for property <code>introActive</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bIntroActive  new value for property <code>introActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setIntroActive
 * @function
 */


/**
 * Getter for property <code>titleActive</code>.
 * Indicates that the title is clickable
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>titleActive</code>
 * @public
 * @name sap.m.ObjectHeader#getTitleActive
 * @function
 */

/**
 * Setter for property <code>titleActive</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bTitleActive  new value for property <code>titleActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setTitleActive
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Object header icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.ObjectHeader#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setIcon
 * @function
 */


/**
 * Getter for property <code>iconActive</code>.
 * Indicates that the object header icon is clickable
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>iconActive</code>
 * @public
 * @name sap.m.ObjectHeader#getIconActive
 * @function
 */

/**
 * Setter for property <code>iconActive</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bIconActive  new value for property <code>iconActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setIconActive
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Indicateds if object header is visible. Invisible object headers are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ObjectHeader#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setVisible
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.ObjectHeader#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setIconDensityAware
 * @function
 */


/**
 * Getter for property <code>markFavorite</code>.
 * Set the favorite state to true or false. The showMarkers property must be true for this property to take effect.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>markFavorite</code>
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#getMarkFavorite
 * @function
 */

/**
 * Setter for property <code>markFavorite</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bMarkFavorite  new value for property <code>markFavorite</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#setMarkFavorite
 * @function
 */


/**
 * Getter for property <code>markFlagged</code>.
 * Set the flagged state to true or false. The showMarkers property must be true for this property to take effect.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>markFlagged</code>
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#getMarkFlagged
 * @function
 */

/**
 * Setter for property <code>markFlagged</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bMarkFlagged  new value for property <code>markFlagged</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#setMarkFlagged
 * @function
 */


/**
 * Getter for property <code>showMarkers</code>.
 * Indicates if object header supports showing markers such as flagged and favorite.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showMarkers</code>
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#getShowMarkers
 * @function
 */

/**
 * Setter for property <code>showMarkers</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowMarkers  new value for property <code>showMarkers</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#setShowMarkers
 * @function
 */


/**
 * Getter for property <code>showTitleSelector</code>.
 * When it is true, the selector arrow icon/image is shown and can be pressed.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showTitleSelector</code>
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#getShowTitleSelector
 * @function
 */

/**
 * Setter for property <code>showTitleSelector</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowTitleSelector  new value for property <code>showTitleSelector</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#setShowTitleSelector
 * @function
 */


/**
 * Getter for property <code>numberState</code>.
 * Object header number and numberUnit value state.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>numberState</code>
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#getNumberState
 * @function
 */

/**
 * Setter for property <code>numberState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oNumberState  new value for property <code>numberState</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#setNumberState
 * @function
 */


/**
 * Getter for property <code>condensed</code>.
 * Displays the condensed object header with title, one attribute, number and number unit.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>condensed</code>
 * @public
 * @name sap.m.ObjectHeader#getCondensed
 * @function
 */

/**
 * Setter for property <code>condensed</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCondensed  new value for property <code>condensed</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setCondensed
 * @function
 */


/**
 * Getter for property <code>backgroundDesign</code>.
 * Note: only applied when "condensed" is true.
 * This property is used to set the background color of the ObjectHeader in condensed mode. Depending on the theme you can change the state of the background from "Solid" to "Transparent".
 *
 * Default value is <code>Transparent</code>
 *
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * @name sap.m.ObjectHeader#getBackgroundDesign
 * @function
 */

/**
 * Setter for property <code>backgroundDesign</code>.
 *
 * Default value is <code>Transparent</code> 
 *
 * @param {sap.m.BackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setBackgroundDesign
 * @function
 */


/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * The list of Object Attributes
 * 
 * <strong>Note</strong>: this is the default aggregation for ObjectHeader.
 * @return {sap.m.ObjectAttribute[]}
 * @public
 * @name sap.m.ObjectHeader#getAttributes
 * @function
 */


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.m.ObjectAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#insertAttribute
 * @function
 */

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#addAttribute
 * @function
 */

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.m.ObjectAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.m.ObjectAttribute} the removed attribute or null
 * @public
 * @name sap.m.ObjectHeader#removeAttribute
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ObjectAttribute[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ObjectHeader#removeAllAttributes
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ObjectHeader#indexOfAttribute
 * @function
 */
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#destroyAttributes
 * @function
 */


/**
 * Getter for aggregation <code>firstStatus</code>.<br/>
 * First status shown on the right side of the attributes above the second status.
 * If it is not set the first attibute will expand to take the entire row.
 * 
 * @return {sap.m.ObjectStatus}
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @name sap.m.ObjectHeader#getFirstStatus
 * @function
 */


/**
 * Setter for the aggregated <code>firstStatus</code>.
 * @param {sap.m.ObjectStatus} oFirstStatus
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @name sap.m.ObjectHeader#setFirstStatus
 * @function
 */
	

/**
 * Destroys the firstStatus in the aggregation 
 * named <code>firstStatus</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @name sap.m.ObjectHeader#destroyFirstStatus
 * @function
 */


/**
 * Getter for aggregation <code>secondStatus</code>.<br/>
 * Second status shown on the right side of the attributes below the first status.
 * If it is not set the second attibute will expand to take the entire row.
 * 
 * @return {sap.m.ObjectStatus}
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @name sap.m.ObjectHeader#getSecondStatus
 * @function
 */


/**
 * Setter for the aggregated <code>secondStatus</code>.
 * @param {sap.m.ObjectStatus} oSecondStatus
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @name sap.m.ObjectHeader#setSecondStatus
 * @function
 */
	

/**
 * Destroys the secondStatus in the aggregation 
 * named <code>secondStatus</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.0. 
 * Use the statuses aggregation instead.
 * @name sap.m.ObjectHeader#destroySecondStatus
 * @function
 */


/**
 * Getter for aggregation <code>statuses</code>.<br/>
 * The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#getStatuses
 * @function
 */


/**
 * Inserts a status into the aggregation named <code>statuses</code>.
 *
 * @param {sap.ui.core.Control}
 *          oStatus the status to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the status should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the status is inserted at 
 *             the last position        
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#insertStatus
 * @function
 */

/**
 * Adds some status <code>oStatus</code> 
 * to the aggregation named <code>statuses</code>.
 *
 * @param {sap.ui.core.Control}
 *            oStatus the status to add; if empty, nothing is inserted
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#addStatus
 * @function
 */

/**
 * Removes an status from the aggregation named <code>statuses</code>.
 *
 * @param {int | string | sap.ui.core.Control} vStatus the status to remove or its index or id
 * @return {sap.ui.core.Control} the removed status or null
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#removeStatus
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>statuses</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#removeAllStatuses
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>statuses</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oStatus the status whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#indexOfStatus
 * @function
 */
	

/**
 * Destroys all the statuses in the aggregation 
 * named <code>statuses</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#destroyStatuses
 * @function
 */


/**
 * Event is fired when the title is active and the user tap/click on it 
 *
 * @name sap.m.ObjectHeader#titlePress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' title to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 *  
 * Event is fired when the title is active and the user tap/click on it 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 *
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#attachTitlePress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#detachTitlePress
 * @function
 */

/**
 * Fire event titlePress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code> Dom reference of the object header' title to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ObjectHeader#fireTitlePress
 * @function
 */


/**
 * Event is fired when the title is active and the user tap/click on it 
 *
 * @name sap.m.ObjectHeader#introPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' intro to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 *  
 * Event is fired when the title is active and the user tap/click on it 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 *
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#attachIntroPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#detachIntroPress
 * @function
 */

/**
 * Fire event introPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code> Dom reference of the object header' intro to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ObjectHeader#fireIntroPress
 * @function
 */


/**
 * Event is fired when the title icon is active and the user tap/click on it 
 *
 * @name sap.m.ObjectHeader#iconPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' icon to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 *  
 * Event is fired when the title icon is active and the user tap/click on it 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 *
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#attachIconPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#detachIconPress
 * @function
 */

/**
 * Fire event iconPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code> Dom reference of the object header' icon to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ObjectHeader#fireIconPress
 * @function
 */


/**
 * Event is fired when the object header title selector (down-arrow) is pressed 
 *
 * @name sap.m.ObjectHeader#titleSelectorPress
 * @event
 * @since 1.16.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' titleArrow to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'titleSelectorPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 *  
 * Event is fired when the object header title selector (down-arrow) is pressed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 *
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#attachTitleSelectorPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'titleSelectorPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectHeader#detachTitleSelectorPress
 * @function
 */

/**
 * Fire event titleSelectorPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>object</code> Dom reference of the object header' titleArrow to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.0
 * @name sap.m.ObjectHeader#fireTitleSelectorPress
 * @function
 */


// Start of sap\m\ObjectHeader.js
///**
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.m.ObjectHeader.prototype.init = function() {

	this._fNumberWidth = undefined;
	
	//TODO Remove placeholder when Safari iconFont issue is addressed.
	var oPlaceholderIconUri = sap.ui.core.IconPool.getIconURI("fridge");
	this._oPlaceholderIcon = sap.ui.core.IconPool.createControlByURI({
		id : this.getId() + "-placeholder",
		src : oPlaceholderIconUri
	});	
	this._oPlaceholderIcon.addStyleClass("sapMObjStatusMarkerInvisible");

	var oFlagIconUri = sap.ui.core.IconPool.getIconURI("flag");
	this._oFlagIcon = sap.ui.core.IconPool.createControlByURI({
		id : this.getId() + "-flag",
		src : oFlagIconUri,
		visible : false
	});

	var oFavIconUri = sap.ui.core.IconPool.getIconURI("favorite");	
	this._oFavIcon = sap.ui.core.IconPool.createControlByURI({
		id : this.getId() + "-favorite",
		src : oFavIconUri,
		visible : false
	});
	
	var oTitleArrowIconUri = sap.ui.core.IconPool.getIconURI("slim-arrow-down");	
	this._oTitleArrowIcon = sap.ui.core.IconPool.createControlByURI({
		id : this.getId() + "-titleArrow",
		src : oTitleArrowIconUri,
		visible : false
	});		   
			
	this._titleText = new sap.m.Text(this.getId() + "-titleText");
	this._titleText.setMaxLines(3);
};

sap.m.ObjectHeader.prototype.ontap = function(oEvent) {

	var sourceId = oEvent.target.id;
	if (this.getIntroActive() && sourceId === this.getId() + "-intro") {
		this.fireIntroPress({
			domRef : jQuery.sap.domById(sourceId)
		});
	} else if (this.getTitleActive() && oEvent.srcControl === this._titleText) {
		this.fireTitlePress({
			domRef : jQuery.sap.domById(sourceId)
		});
	} else if (this.getIconActive() && (sourceId === this.getId() + "-img" || sourceId === this.getId() + "-icon")) {
		this.fireIconPress({
			domRef : jQuery.sap.domById(sourceId)
		});
	} else if (sourceId === this.getId() + "-titleArrow") {		
		this.fireTitleSelectorPress({
			domRef : jQuery.sap.domById(sourceId)	 
		});
	} 
};

/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.m.ObjectHeader.prototype.exit = function() {

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}

	if (this._oImageControl) {
		this._oImageControl.destroy();
		this._oImageControl = undefined;
	}

	if (this._oPlaceholderIcon) {
		this._oPlaceholderIcon.destroy();
		this._oPlaceholderIcon = undefined;
	}

	if (this._oFavIcon) {
		this._oFavIcon.destroy();
		this._oFavIcon = undefined;
	}

	if (this._oFlagIcon) {
		this._oFlagIcon.destroy();
		this._oFlagIcon = undefined;
	}
	
	if (this._oTitleArrowIcon) {
		this._oTitleArrowIcon.destroy();
		this._oTitleArrowIcon = undefined;
	}
	
	if(this._titleText){
		this._titleText.destroy();
		this._titleText = undefined;
	}

};

/**
 * Lazy load object header's image.
 * 
 * @private
 */
sap.m.ObjectHeader.prototype._getImageControl = function() {

	var sImgId = this.getId() + "-img";
	var sSize = sap.ui.Device.system.phone ? "2.5rem" : "3rem";

	var mProperties = {
		src : this.getIcon(),
		height : sSize,
		width : sSize,
		size : sSize,
		densityAware : this.getIconDensityAware()
	};

	this._oImageControl = sap.m.ImageHelper.getImageControl(sImgId, this._oImageControl, this, mProperties);

	return this._oImageControl;
};

sap.m.ObjectHeader.prototype.onBeforeRendering = function() {

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}

};

sap.m.ObjectHeader.prototype.onAfterRendering = function() {
	
	if (this.getShowTitleSelector()) {
		this._oTitleArrowIcon.$().css("cursor", "pointer");
	}
	
	if (this.$("number").length > 0) {
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this._resizeElements, this));
		setTimeout(jQuery.proxy(this._resizeElements, this));
	}
};

sap.m.ObjectHeader.prototype._resizeElements = function() {

	if (!this.getDomRef())
		return;

	var id = this.getId();
	var $numberDiv = jQuery.sap.byId(id + "-numberdiv");
	var bHasWrap = $numberDiv.hasClass("sapMOHNumberWrap");

	if (this._fNumberWidth === undefined) {
		this._fNumberWidth = $numberDiv.outerWidth();
	}

	var bOverflow = $numberDiv.parent().width() * 35 / 100 < this._fNumberWidth;

	if (bOverflow != bHasWrap) {
		$numberDiv.toggleClass("sapMOHNumberWrap");
		jQuery.sap.byId(id + "-titlediv").toggleClass("sapMOHNumberWrap");

		jQuery(sap.m.ObjectHeader._escapeId(id) + " .sapMOHBottomRow").css("margin-top", bOverflow && sap.ui.Device.system.phone ? ".25rem" : "");
		this._titleText.setMaxLines(bOverflow ? 2 : 3).rerender();
	}
};

/**
 * @param [string]
 *            sId control id to be escaped
 * @returns escaped control id with "#" prefix
 * @private
 */
sap.m.ObjectHeader._escapeId = function(sId) {

	return sId ? "#" + sId.replace(/(:|\.)/g, '\\$1') : "";
};

/**
 * @private
 * @returns {boolean}
 */
sap.m.ObjectHeader.prototype._hasBottomContent = function() {

	return (this._hasAttributes() || this._hasStatus() || this.getShowMarkers());
};

/**
 * @private
 * @returns {boolean}
 */
sap.m.ObjectHeader.prototype._hasIcon = function() {

	return !!this.getIcon().trim();
};

/**
 * @private
 * @returns {boolean}
 */
sap.m.ObjectHeader.prototype._hasAttributes = function() {

	var attributes = this.getAttributes();
	if (attributes && attributes.length > 0) {
		for ( var i = 0; i < attributes.length; i++) {
			if (!attributes[i]._isEmpty()) {
				return true;
			}
		}
	}
	return false;
};

/**
 * @private
 * @returns {boolean}
 */
sap.m.ObjectHeader.prototype._hasStatus = function() {

	var bHasStatus = ((this.getFirstStatus() && !this.getFirstStatus()._isEmpty()) || (this.getSecondStatus() && !this.getSecondStatus()._isEmpty()));

	if (!bHasStatus && this.getStatuses() && this.getStatuses().length > 0) {
		var statuses = this.getStatuses();
		for ( var i = 0; i < statuses.length; i++) {
			if (statuses[i] instanceof sap.m.ObjectStatus && !statuses[i]._isEmpty()) {
				bHasStatus = true;
				break;
			}
			else if (statuses[i] instanceof sap.m.ProgressIndicator) {
				bHasStatus = true;
				break;
			}
		}
	}

	return bHasStatus;
};

}; // end of sap/m/ObjectHeader.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectIdentifier') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectIdentifier.
jQuery.sap.declare("sap.m.ObjectIdentifier");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ObjectIdentifier.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getBadgeNotes badgeNotes} : boolean</li>
 * <li>{@link #getBadgePeople badgePeople} : boolean</li>
 * <li>{@link #getBadgeAttachments badgeAttachments} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ObjectIdentifier is a display control that enables the user to easily identify a specific object. The object identifier title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.ObjectIdentifier
 */
sap.ui.core.Control.extend("sap.m.ObjectIdentifier", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"badgeNotes" : {type : "boolean", group : "Misc", defaultValue : null},
		"badgePeople" : {type : "boolean", group : "Misc", defaultValue : null},
		"badgeAttachments" : {type : "boolean", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectIdentifier with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectIdentifier.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The object title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ObjectIdentifier#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setTitle
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The object text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.ObjectIdentifier#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setText
 * @function
 */


/**
 * Getter for property <code>badgeNotes</code>.
 * Indicates whether or not the notes icon is displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>badgeNotes</code>
 * @public
 * @name sap.m.ObjectIdentifier#getBadgeNotes
 * @function
 */

/**
 * Setter for property <code>badgeNotes</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bBadgeNotes  new value for property <code>badgeNotes</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setBadgeNotes
 * @function
 */


/**
 * Getter for property <code>badgePeople</code>.
 * Indicates whether or not the address book icon is displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>badgePeople</code>
 * @public
 * @name sap.m.ObjectIdentifier#getBadgePeople
 * @function
 */

/**
 * Setter for property <code>badgePeople</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bBadgePeople  new value for property <code>badgePeople</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setBadgePeople
 * @function
 */


/**
 * Getter for property <code>badgeAttachments</code>.
 * Indicates whether or not the attachments icon is displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>badgeAttachments</code>
 * @public
 * @name sap.m.ObjectIdentifier#getBadgeAttachments
 * @function
 */

/**
 * Setter for property <code>badgeAttachments</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bBadgeAttachments  new value for property <code>badgeAttachments</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setBadgeAttachments
 * @function
 */


// Start of sap\m\ObjectIdentifier.js
///**
// * This file defines behavior for the control
// */

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype.exit = function() {

    if (this._attachmentsIcon) {
        this._attachmentsIcon.destroy();
        this._attachmentsIcon = null;
    }

    if (this._peopleIcon) {
        this._peopleIcon.destroy();
        this._peopleIcon = null;
    }

    if (this._notesIcon) {
        this._notesIcon.destroy();
        this._notesIcon = null;
    }
};

/**
 * Lazy load attachments icon.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype._getAttachmentsIcon = function() {

	if (!this._attachmentsIcon){
		this._attachmentsIcon = this._getIcon(sap.ui.core.IconPool.getIconURI("attachment"), this.getId() + "-attachments");
	}

    return this._attachmentsIcon;
};

/**
 * Lazy load people icon.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype._getPeopleIcon = function() {

	if (!this._peopleIcon){
		this._peopleIcon = this._getIcon(sap.ui.core.IconPool.getIconURI("group"), this.getId() + "-people");
	}

    return this._peopleIcon;
};

/**
 * Lazy load notes icon.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype._getNotesIcon = function() {

	if(!this._notesIcon ) {
		this._notesIcon  = this._getIcon(sap.ui.core.IconPool.getIconURI("notes"), this.getId() + "-notes");
	}

    return this._notesIcon;
};

/**
 * Create icon image.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype._getIcon = function(sURI, sImageId) {

    var sSize = sap.ui.Device.system.phone ? "1em" : "1em";
    var oImage;

    oImage = this._icon || sap.ui.core.IconPool.createControlByURI({
        src : sURI,
        id : sImageId + "-icon",
        size : sSize
    }, sap.m.Image);

    oImage.setSrc(sURI);

    return oImage;
};
}; // end of sap/m/ObjectIdentifier.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectListItem.
jQuery.sap.declare("sap.m.ObjectListItem");




/**
 * Constructor for a new ObjectListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getMarkFavorite markFavorite} : boolean</li>
 * <li>{@link #getMarkFlagged markFlagged} : boolean</li>
 * <li>{@link #getShowMarkers showMarkers} : boolean</li>
 * <li>{@link #getNumberState numberState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} <strong>(default aggregation)</strong> : sap.m.ObjectAttribute[]</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ObjectListItem is a display control that provides summary information about an object as an item in a list. The object list item title is the key identifier of the object. Additional text and icons can be used to further distinguish it from other objects. Attributes and statuses can be used to provide additional meaning about the object to the user.
 * @extends sap.m.ListItemBase
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.ObjectListItem
 */
sap.m.ListItemBase.extend("sap.m.ObjectListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"number" : {type : "string", group : "Misc", defaultValue : null},
		"numberUnit" : {type : "string", group : "Misc", defaultValue : null},
		"intro" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconDensityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"markFavorite" : {type : "boolean", group : "Misc", defaultValue : null},
		"markFlagged" : {type : "boolean", group : "Misc", defaultValue : null},
		"showMarkers" : {type : "boolean", group : "Misc", defaultValue : null},
		"numberState" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None}
	},
	defaultAggregation : "attributes",
	aggregations : {
    	"attributes" : {type : "sap.m.ObjectAttribute", multiple : true, singularName : "attribute"}, 
    	"firstStatus" : {type : "sap.m.ObjectStatus", multiple : false}, 
    	"secondStatus" : {type : "sap.m.ObjectStatus", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectListItem.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Object list item title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ObjectListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Object list item number
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>number</code>
 * @public
 * @name sap.m.ObjectListItem#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setNumber
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * The number units qualifier of the object list item
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.m.ObjectListItem#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>intro</code>.
 * Introductory text for the object list item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>intro</code>
 * @public
 * @name sap.m.ObjectListItem#getIntro
 * @function
 */

/**
 * Setter for property <code>intro</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIntro  new value for property <code>intro</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setIntro
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Object list item icon displayed to the left of the title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.ObjectListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * Icon displayed when the object list item is active.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.ObjectListItem#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.ObjectListItem#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setIconDensityAware
 * @function
 */


/**
 * Getter for property <code>markFavorite</code>.
 * Set the favorite state for the object list item
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>markFavorite</code>
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectListItem#getMarkFavorite
 * @function
 */

/**
 * Setter for property <code>markFavorite</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bMarkFavorite  new value for property <code>markFavorite</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectListItem#setMarkFavorite
 * @function
 */


/**
 * Getter for property <code>markFlagged</code>.
 * Set the flagged state for the object list item
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>markFlagged</code>
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectListItem#getMarkFlagged
 * @function
 */

/**
 * Setter for property <code>markFlagged</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bMarkFlagged  new value for property <code>markFlagged</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectListItem#setMarkFlagged
 * @function
 */


/**
 * Getter for property <code>showMarkers</code>.
 * Set to true if the object list item can be marked with icons such as favorite and flag.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>showMarkers</code>
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectListItem#getShowMarkers
 * @function
 */

/**
 * Setter for property <code>showMarkers</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bShowMarkers  new value for property <code>showMarkers</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectListItem#setShowMarkers
 * @function
 */


/**
 * Getter for property <code>numberState</code>.
 * Object list item number and numberUnit value state.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>numberState</code>
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectListItem#getNumberState
 * @function
 */

/**
 * Setter for property <code>numberState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oNumberState  new value for property <code>numberState</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.ObjectListItem#setNumberState
 * @function
 */


/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * List of attributes displayed below the title to the left of the status fields.
 * 
 * <strong>Note</strong>: this is the default aggregation for ObjectListItem.
 * @return {sap.m.ObjectAttribute[]}
 * @public
 * @name sap.m.ObjectListItem#getAttributes
 * @function
 */


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.m.ObjectAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#insertAttribute
 * @function
 */

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#addAttribute
 * @function
 */

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.m.ObjectAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.m.ObjectAttribute} the removed attribute or null
 * @public
 * @name sap.m.ObjectListItem#removeAttribute
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ObjectAttribute[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ObjectListItem#removeAllAttributes
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ObjectListItem#indexOfAttribute
 * @function
 */
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#destroyAttributes
 * @function
 */


/**
 * Getter for aggregation <code>firstStatus</code>.<br/>
 * First status text field shown on the right side of the attributes.
 * 
 * @return {sap.m.ObjectStatus}
 * @public
 * @name sap.m.ObjectListItem#getFirstStatus
 * @function
 */


/**
 * Setter for the aggregated <code>firstStatus</code>.
 * @param {sap.m.ObjectStatus} oFirstStatus
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setFirstStatus
 * @function
 */
	

/**
 * Destroys the firstStatus in the aggregation 
 * named <code>firstStatus</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#destroyFirstStatus
 * @function
 */


/**
 * Getter for aggregation <code>secondStatus</code>.<br/>
 * Second status text field shown on the right side of the attributes.
 * 
 * @return {sap.m.ObjectStatus}
 * @public
 * @name sap.m.ObjectListItem#getSecondStatus
 * @function
 */


/**
 * Setter for the aggregated <code>secondStatus</code>.
 * @param {sap.m.ObjectStatus} oSecondStatus
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setSecondStatus
 * @function
 */
	

/**
 * Destroys the secondStatus in the aggregation 
 * named <code>secondStatus</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#destroySecondStatus
 * @function
 */


// Start of sap\m\ObjectListItem.js
///**
// * This file defines behavior for the control,
// */

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * @private
 */
sap.m.ObjectListItem.prototype.exit = function(oEvent) {
	// image or icon if initialized
	if (this._oImageControl) {
		this._oImageControl.destroy();
	}
	
	if (this._oPlaceholderIcon) {
		this._oPlaceholderIcon.destroy();
		this._oPlaceholderIcon = undefined;
	}

	if (this._oFavIcon) {
		this._oFavIcon.destroy();
		this._oFavIcon = undefined;
	}
	
	if (this._oFlagIcon) {
		this._oFlagIcon.destroy();
		this._oFlagIcon = undefined;
	}	
	
	if(this._oTitleText){
		this._oTitleText.destroy();
		this._oTitleText = undefined;
	}
	
	sap.m.ListItemBase.prototype.exit.apply(this);
};

/**
 * @private
 * @returns {boolean}
 */
sap.m.ObjectListItem.prototype._hasAttributes = function() {
	var attributes = this.getAttributes(); 
	if(attributes.length > 0) {
		for(var i=0; i < attributes.length; i++) {
			if(!attributes[i]._isEmpty()) {
				return true;
			}
		}
	}
	return false;
};

/**
 * @private
 * @returns {boolean}
 */
sap.m.ObjectListItem.prototype._hasStatus = function() {
	return ((this.getFirstStatus() && !this.getFirstStatus()._isEmpty())
			|| (this.getSecondStatus() && !this.getSecondStatus()._isEmpty() ));
};

/**
 * @private
 * @returns {boolean}
 */
sap.m.ObjectListItem.prototype._hasBottomContent = function() {
	
	return (this._hasAttributes() || this._hasStatus() || this.getShowMarkers());
};

/**
 * @private
 * @returns {Array}
 */
sap.m.ObjectListItem.prototype._getVisibleAttributes = function() {

	var aAllAttributes = this.getAttributes();
	var aVisibleAttributes = [];

	for (var i=0; i < aAllAttributes.length; i++) {
		if(aAllAttributes[i].getVisible()){
			aVisibleAttributes.push(aAllAttributes[i]);
		}
	};

	return aVisibleAttributes;
};

/**
 * Lazy load list item's image.
 *
 * @private
 */
sap.m.ObjectListItem.prototype._getImageControl = function() {

	var sImgId = this.getId() + '-img';
	var sSize = "2.5rem";
	var mProperties = { 
		src : this.getIcon(),
		height : sSize,
		width : sSize,
		size: sSize,
		densityAware : this.getIconDensityAware()
	};
	var aCssClasses = ['sapMObjLIcon'];
	
	this._oImageControl = sap.m.ImageHelper.getImageControl(sImgId, this._oImageControl, this, mProperties, aCssClasses);
	
	return this._oImageControl;
};

/**
 * Overwrite base method to hook into list item's active handling
 * 
 * @private
 */
sap.m.ObjectListItem.prototype._activeHandlingInheritor = function() {
	var sActiveSrc = this.getActiveIcon();
	
	if(!!this._oImageControl  && !!sActiveSrc) {
		this._oImageControl.setSrc(sActiveSrc);
	}	
};

/**
 * Overwrite base method to hook into list item's inactive handling
 * 
 * @private
 */
sap.m.ObjectListItem.prototype._inactiveHandlingInheritor = function() {
	var sSrc = this.getIcon();
	if(!!this._oImageControl) {
		this._oImageControl.setSrc(sSrc);
	}	
};

/**
 * @private
 * @returns Flag icon control
 */
//TODO Remove placeholder when Safari iconFont issue is addressed.
sap.m.ObjectListItem.prototype._getPlaceholderIcon = function() {
	
	if(!this._oPlaceholderIcon) {

		var oPlaceholderIconUri = sap.ui.core.IconPool.getIconURI("fridge");
		this._oPlaceholderIcon = sap.ui.core.IconPool.createControlByURI({
			id: this.getId() + "-placeholder",
			src: oPlaceholderIconUri
		});
		
		this._oPlaceholderIcon.addStyleClass("sapMObjStatusMarkerInvisible");
	}	
	return this._oPlaceholderIcon;
};

/**
 * @private
 * @returns Flag icon control
 */
sap.m.ObjectListItem.prototype._getFlagIcon = function() {
	
	if(!this._oFlagIcon) {

		var oFlagIconUri = sap.ui.core.IconPool.getIconURI("flag");
		this._oFlagIcon = sap.ui.core.IconPool.createControlByURI({
			id: this.getId() + "-flag",
			src: oFlagIconUri
		});
	}	
	return this._oFlagIcon;
};

/**
 * @private
 * @returns Favorite icon control
 */
sap.m.ObjectListItem.prototype._getFavoriteIcon = function() {
	
	if(!this._oFavIcon) {

	    var oFavIconUri = sap.ui.core.IconPool.getIconURI("favorite");
	    this._oFavIcon = sap.ui.core.IconPool.createControlByURI({
	           id: this.getId() + "-favorite",
	           src: oFavIconUri
	    });	
	}
	return this._oFavIcon;
};

/**
 * @private
 * @returns title text control
 */
sap.m.ObjectListItem.prototype._getTitleText = function() {
	
	if(!this._oTitleText) {
		this._oTitleText = new sap.m.Text(this.getId() + "-titleText", {
			maxLines: 2
		});
	}
	return this._oTitleText;
};
}; // end of sap/m/ObjectListItem.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectNumber') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectNumber.
jQuery.sap.declare("sap.m.ObjectNumber");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ObjectNumber.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEmphasized emphasized} : boolean (default: true)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getUnit unit} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ObjectNumber displays number and number unit properties for an object. The number can be displayed using semantic colors to provide addition meaning about the object to the user.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.ObjectNumber
 */
sap.ui.core.Control.extend("sap.m.ObjectNumber", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"number" : {type : "string", group : "Misc", defaultValue : null},
		"numberUnit" : {type : "string", group : "Misc", defaultValue : null, deprecated: true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"emphasized" : {type : "boolean", group : "Appearance", defaultValue : true},
		"state" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None},
		"unit" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectNumber with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectNumber.extend
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Number field of the object number
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>number</code>
 * @public
 * @name sap.m.ObjectNumber#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectNumber#setNumber
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @deprecated Since version 1.16.1. 
 * 
 * Replaced by unit property due to the number before unit is redundant.
 * @name sap.m.ObjectNumber#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16.1. 
 * 
 * Replaced by unit property due to the number before unit is redundant.
 * @name sap.m.ObjectNumber#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Indicates if object number is visible. Invisible object number is not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ObjectNumber#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectNumber#setVisible
 * @function
 */


/**
 * Getter for property <code>emphasized</code>.
 * Indicates if the object number should appear emphasized
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>emphasized</code>
 * @public
 * @name sap.m.ObjectNumber#getEmphasized
 * @function
 */

/**
 * Setter for property <code>emphasized</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEmphasized  new value for property <code>emphasized</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectNumber#setEmphasized
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * The object number's value state. Setting this state will cause the number to be rendered in state-specific colors (only blue-crystal theme).
 *
 * Default value is <code>sap.ui.core.ValueState.None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * @name sap.m.ObjectNumber#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>sap.ui.core.ValueState.None</code> 
 *
 * @param {sap.ui.core.ValueState} oState  new value for property <code>state</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectNumber#setState
 * @function
 */


/**
 * Getter for property <code>unit</code>.
 * Number units qualifier. If numberUnit and unit are both set, the unit value is used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>unit</code>
 * @public
 * @since 1.16.1
 * @name sap.m.ObjectNumber#getUnit
 * @function
 */

/**
 * Setter for property <code>unit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUnit  new value for property <code>unit</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * @name sap.m.ObjectNumber#setUnit
 * @function
 */


// Start of sap\m\ObjectNumber.js
///**
// * This file defines behavior for the control,
// */

/**
 * String to prefix css class for number status to be used in
 * controler and renderer
 * @private 
 */
sap.m.ObjectNumber.prototype._sCSSPrefixObjNumberStatus = 'sapMObjectNumberStatus';

/**
 * API method to set the object number's value state
 *
 * @param sState the Object Number's value state
 * @public
 */
sap.m.ObjectNumber.prototype.setState = function(sState) {
	//remove the current value state css class
	this.$().removeClass(this._sCSSPrefixObjNumberStatus + this.getState());

	//do suppress rerendering
	this.setProperty("state", sState, true);

	//now set the new css state class
	this.$().addClass(this._sCSSPrefixObjNumberStatus + this.getState());

	return this;
};
}; // end of sap/m/ObjectNumber.js
if ( !jQuery.sap.isDeclared('sap.m.ObjectStatus') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectStatus.
jQuery.sap.declare("sap.m.ObjectStatus");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ObjectStatus.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Status information that may be either text with a value state, or an icon.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.ObjectStatus
 */
sap.ui.core.Control.extend("sap.m.ObjectStatus", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"state" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconDensityAware" : {type : "boolean", group : "Appearance", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectStatus with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectStatus.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.ObjectStatus#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectStatus#setText
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * Text value state.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * @name sap.m.ObjectStatus#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oState  new value for property <code>state</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectStatus#setState
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon URI. This may be either an icon font or image path.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.ObjectStatus#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectStatus#setIcon
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.ObjectStatus#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectStatus#setIconDensityAware
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Shows or hides the ObjectStatus instance
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ObjectStatus#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectStatus#setVisible
 * @function
 */


// Start of sap\m\ObjectStatus.js
///**
// * This file defines behavior for the control
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained



/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.m.ObjectStatus.prototype.exit = function() {
	if(this._oImageControl) {
		this._oImageControl.destroy();
		this._oImageControl = null;
	}
};

/**
 * Lazy load feed icon image.
 *
 * @private
 */
sap.m.ObjectStatus.prototype._getImageControl = function() {
	var sImgId = this.getId() + '-icon';
	var mProperties = { 
		src : this.getIcon(),
		densityAware : this.getIconDensityAware()
	};
	
	this._oImageControl = sap.m.ImageHelper.getImageControl(sImgId, this._oImageControl, this, mProperties);
	
	return this._oImageControl;
};

/**
 * @private
 * @returns {boolean}
 */
sap.m.ObjectStatus.prototype._isEmpty = function() {
	
	return !(this.getText().trim() || this.getIcon().trim());
};
}; // end of sap/m/ObjectStatus.js
if ( !jQuery.sap.isDeclared('sap.m.Page') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Page.
jQuery.sap.declare("sap.m.Page");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Page.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowNavButton showNavButton} : boolean (default: false)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getNavButtonText navButtonText} : string</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.PageBackgroundDesign (default: sap.m.PageBackgroundDesign.Standard)</li>
 * <li>{@link #getNavButtonType navButtonType} : sap.m.ButtonType (default: sap.m.ButtonType.Back)</li>
 * <li>{@link #getShowFooter showFooter} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>
 * <li>{@link #getFooter footer} : sap.m.Bar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.Bar</li>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Page#event:navButtonTap navButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Page#event:navButtonPress navButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A page is a basic container for a mobile application screen. Usually one page is displayed at a time (in landscape mode or on tablets depending on the layout two pages might be displayed side-by-side).
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Page
 */
sap.ui.core.Control.extend("sap.m.Page", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"scrollTo"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Data", defaultValue : null},
		"showNavButton" : {type : "boolean", group : "Appearance", defaultValue : false},
		"showHeader" : {type : "boolean", group : "Appearance", defaultValue : true},
		"navButtonText" : {type : "string", group : "Misc", defaultValue : null, deprecated: true},
		"enableScrolling" : {type : "boolean", group : "Behavior", defaultValue : true},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null, deprecated: true},
		"backgroundDesign" : {type : "sap.m.PageBackgroundDesign", group : "Appearance", defaultValue : sap.m.PageBackgroundDesign.Standard},
		"navButtonType" : {type : "sap.m.ButtonType", group : "Appearance", defaultValue : sap.m.ButtonType.Back, deprecated: true},
		"showFooter" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"customHeader" : {type : "sap.m.Bar", multiple : false}, 
    	"footer" : {type : "sap.m.Bar", multiple : false}, 
    	"subHeader" : {type : "sap.m.Bar", multiple : false}, 
    	"headerContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "headerContent"}, 
    	"_internalHeader" : {type : "sap.m.Bar", multiple : false, visibility : "hidden"}
	},
	events : {
		"navButtonTap" : {deprecated: true}, 
		"navButtonPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Page with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Page.extend
 * @function
 */

sap.m.Page.M_EVENTS = {'navButtonTap':'navButtonTap','navButtonPress':'navButtonPress'};


/**
 * Getter for property <code>title</code>.
 * The title text appearing in the page header bar.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Page#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setTitle
 * @function
 */


/**
 * Getter for property <code>showNavButton</code>.
 * A nav button will be rendered on the left area of header bar if this property is set to true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showNavButton</code>
 * @public
 * @name sap.m.Page#getShowNavButton
 * @function
 */

/**
 * Setter for property <code>showNavButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowNavButton  new value for property <code>showNavButton</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setShowNavButton
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * Whether this page shall have a header.
 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.m.Page#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setShowHeader
 * @function
 */


/**
 * Getter for property <code>navButtonText</code>.
 * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>navButtonText</code>
 * @public
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * @name sap.m.Page#getNavButtonText
 * @function
 */

/**
 * Setter for property <code>navButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNavButtonText  new value for property <code>navButtonText</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * @name sap.m.Page#setNavButtonText
 * @function
 */


/**
 * Getter for property <code>enableScrolling</code>.
 * Whether the Page takes special measures to make page content scrollable and keep headers fixed.
 * If set to false, there will be no scrolling at all; for performance reasons this is highly recommended when scrolling is not needed.
 * 
 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @public
 * @name sap.m.Page#getEnableScrolling
 * @function
 */

/**
 * Setter for property <code>enableScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableScrolling  new value for property <code>enableScrolling</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setEnableScrolling
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI theme.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * @name sap.m.Page#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * @name sap.m.Page#setIcon
 * @function
 */


/**
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.m.PageBackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * @name sap.m.Page#getBackgroundDesign
 * @function
 */

/**
 * Setter for property <code>backgroundDesign</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.m.PageBackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setBackgroundDesign
 * @function
 */


/**
 * Getter for property <code>navButtonType</code>.
 * This property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header, you can set the value to "Default".
 *
 * Default value is <code>Back</code>
 *
 * @return {sap.m.ButtonType} the value of property <code>navButtonType</code>
 * @public
 * @since 1.12
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property is only useable with a Button text in that theme.
 * @name sap.m.Page#getNavButtonType
 * @function
 */

/**
 * Setter for property <code>navButtonType</code>.
 *
 * Default value is <code>Back</code> 
 *
 * @param {sap.m.ButtonType} oNavButtonType  new value for property <code>navButtonType</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @deprecated Since version 1.20. 
 * Deprecated since the MVI theme is removed now. This property is only useable with a Button text in that theme.
 * @name sap.m.Page#setNavButtonType
 * @function
 */


/**
 * Getter for property <code>showFooter</code>.
 * Whether this page shall have a footer
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showFooter</code>
 * @public
 * @since 1.13.1
 * @name sap.m.Page#getShowFooter
 * @function
 */

/**
 * Setter for property <code>showFooter</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowFooter  new value for property <code>showFooter</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.1
 * @name sap.m.Page#setShowFooter
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this page
 * 
 * <strong>Note</strong>: this is the default aggregation for Page.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Page#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Page#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Page#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Page#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * The (optional) custom header of this page.
 * Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
 * If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.Page#getCustomHeader
 * @function
 */


/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.m.Bar} oCustomHeader
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setCustomHeader
 * @function
 */
	

/**
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyCustomHeader
 * @function
 */


/**
 * Getter for aggregation <code>footer</code>.<br/>
 * The (optional) footer of this page. It is always located at the bottom of the page
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.Page#getFooter
 * @function
 */


/**
 * Setter for the aggregated <code>footer</code>.
 * @param {sap.m.Bar} oFooter
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setFooter
 * @function
 */
	

/**
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyFooter
 * @function
 */


/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * a subHeader will be rendered directly under the header
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.Page#getSubHeader
 * @function
 */


/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.m.Bar} oSubHeader
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setSubHeader
 * @function
 */
	

/**
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroySubHeader
 * @function
 */


/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * Controls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.
 * When a customHeader is used, this aggregation will be ignored.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Page#getHeaderContent
 * @function
 */


/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#insertHeaderContent
 * @function
 */

/**
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#addHeaderContent
 * @function
 */

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerContent or null
 * @public
 * @name sap.m.Page#removeHeaderContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Page#removeAllHeaderContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Page#indexOfHeaderContent
 * @function
 */
	

/**
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyHeaderContent
 * @function
 */


/**
 * this event is fired when Nav Button is tapped 
 *
 * @name sap.m.Page#navButtonTap
 * @event
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Page</code>.<br/> itself. 
 *  
 * this event is fired when Nav Button is tapped 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.
 *
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * @name sap.m.Page#attachNavButtonTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * @name sap.m.Page#detachNavButtonTap
 * @function
 */

/**
 * Fire event navButtonTap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.12.2. 
 * the navButtonPress event is replacing this event
 * @name sap.m.Page#fireNavButtonTap
 * @function
 */


/**
 * this event is fired when Nav Button is pressed 
 *
 * @name sap.m.Page#navButtonPress
 * @event
 * @since 1.12.2
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navButtonPress' event of this <code>sap.m.Page</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Page</code>.<br/> itself. 
 *  
 * this event is fired when Nav Button is pressed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.
 *
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * @name sap.m.Page#attachNavButtonPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'navButtonPress' event of this <code>sap.m.Page</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.2
 * @name sap.m.Page#detachNavButtonPress
 * @function
 */

/**
 * Fire event navButtonPress to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @protected
 * @since 1.12.2
 * @name sap.m.Page#fireNavButtonPress
 * @function
 */


/**
 * Scrolls to the given position. Only available if enableScrolling is set to "true".
 *
 * @name sap.m.Page.prototype.scrollTo
 * @function
 * @param {int} 
 *         iY
 *         The vertical pixel position to scroll to. Scrolling down happens with positive values.
 * @param {int} 
 *         iTime
 *         The duration of animated scrolling. To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.

 * @type sap.m.Page
 * @public
 */


// Start of sap\m\Page.js
sap.m.Page.prototype.init = function() {
	jQuery.sap.require("sap.ui.core.theming.Parameters");
	this._bIsPlatformDependent = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true";
	
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");
	if (this.getNavButtonText() == "" && this._bIsPlatformDependent){
		this.setNavButtonText(this._rb.getText("PAGE_NAVBUTTON_TEXT"));
	}
};

// Return true if scrolling is allowed
sap.m.Page.prototype._hasScrolling = function() {
	return this.getEnableScrolling();
};

sap.m.Page.prototype.onBeforeRendering = function() {
	if(this._oScroller && !this._hasScrolling()){
		this._oScroller.destroy();
		this._oScroller = null;
	}
	else if( this._hasScrolling() && !this._oScroller){
		jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
		this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
			horizontal: false,
			vertical: true,
			zynga: false,
			iscroll: this._bUseIScroll,
			preventDefault: false,
			nonTouchScrolling: "scrollbar",
			scrollbarClass: "sapMScrollbar"
		});
	}
};

/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.Page.prototype.exit = function() {
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}
	if (this._headerTitle){
		this._headerTitle.destroy();
		this._headerTitle = null;
	}
	if (this._navBtn){
		this._navBtn.destroy();
		this._navBtn = null;
	}
	if (this._appIcon){
		this._appIcon.destroy();
		this._appIcon = null;
	}
};

sap.m.Page.prototype.setBackgroundDesign = function(sBgDesign) {
	var sBgDesignOld = this.getBackgroundDesign();

	this.setProperty("backgroundDesign", sBgDesign, true);
	this.$().removeClass("sapMPageBg" + sBgDesignOld).addClass("sapMPageBg" + this.getBackgroundDesign());
	return this;
};

sap.m.Page.prototype.setTitle = function(sTitle) {
	var bWasNull = !this._headerTitle;
	
	this._headerTitle = this._headerTitle || new sap.m.Label(this.getId() +"-title", {text: sTitle});
	this._headerTitle.setText(sTitle);
	
	if(bWasNull){
		if (this._bIsPlatformDependent){
			if(sap.ui.Device.os.ios){
				this._updateHeaderContent(this._headerTitle, 'middle', 0);
			} else {
				this._titleIndex = this._titleIndex || 0;
				this._updateHeaderContent(this._headerTitle, 'left', this._titleIndex);
			}
		} else {
			this._updateHeaderContent(this._headerTitle, 'middle', 0);
		}
	}
	
	this.setProperty("title", sTitle, true);
	return this;
};

sap.m.Page.prototype.setShowNavButton = function (bShowNavBtn) {
	var bOldValue = !!this.getShowNavButton();
	if(bShowNavBtn === bOldValue){
		return this;
	}

	this.setProperty("showNavButton", bShowNavBtn, true);
	this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {press: jQuery.proxy(function(){this.fireNavButtonPress(); this.fireNavButtonTap();},this)});
	var sNavButtonType = this.getNavButtonType();
	if(sap.ui.Device.os.android && sNavButtonType == sap.m.ButtonType.Back){
		this._navBtn.setType(sap.m.ButtonType.Up);
	} else {
		this._navBtn.setType(sNavButtonType);
		if (this._bIsPlatformDependent){
			this._navBtn.setText(this.getNavButtonText()); 
		}
	}

	if (bShowNavBtn){
		if (sap.ui.Device.os.android && this._bIsPlatformDependent){
			//On android show the title after the navButton
			this._titleIndex = 1;
			if(this.getIcon()) {
				this._navBtn.setIcon(this.getIcon());
			}
		}
		if (this._appIcon){
			this._updateHeaderContent(this._appIcon, 'left', -1);
		}

		this._updateHeaderContent(this._navBtn, 'left', 0);
	} else {
		// remove back button from header bar
		this._updateHeaderContent(this._navBtn, 'left', -1);
		if (this._bIsPlatformDependent && !sap.ui.Device.os.ios && this.getIcon()){
			this._appIcon = this._appIcon || new sap.m.Image(this.getId()+"-icon", {src: this.getIcon()});
			this._updateHeaderContent(this._appIcon, 'left', 0);
		}
	}
	return this;
};

sap.m.Page.prototype.setNavButtonType = function (sNavButtonType) {
	this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {press: jQuery.proxy(function(){this.fireNavButtonPress(); this.fireNavButtonTap();},this)});
	if(!sap.ui.Device.os.ios && sNavButtonType == sap.m.ButtonType.Back){
		// internal conversion from Back to Up for non-iOS platform
		this._navBtn.setType(sap.m.ButtonType.Up);
	} else {
		this._navBtn.setType(sNavButtonType);
	}
	this.setProperty("navButtonType", sNavButtonType, true);
	return this;
};

sap.m.Page.prototype.setNavButtonText = function (sText) {
	this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {press: jQuery.proxy(function(){this.fireNavButtonPress(); this.fireNavButtonTap();},this)});
	if (sText == "" && this._bIsPlatformDependent){
		sText = this._rb.getText("PAGE_NAVBUTTON_TEXT");
	}
	if(sap.ui.Device.os.ios && this._bIsPlatformDependent){
		this._navBtn.setText(sText);
	}
	this.setProperty("navButtonText", sText, true);
	return this;
};

sap.m.Page.prototype.setIcon = function (sIconSrc) {
	var sOldValue = this.getIcon();
	if(sOldValue === sIconSrc){
		return this;
	}
	
	if (!sap.ui.Device.os.ios && this._bIsPlatformDependent){
		if(sIconSrc){
			if (this.getShowNavButton()){
				this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {press: jQuery.proxy(function(){this.fireNavButtonPress(); this.fireNavButtonTap();},this)});
				this._navBtn.setIcon(sIconSrc);	
				if (this._appIcon){
					this._updateHeaderContent(this._appIcon, 'left', -1);
				}
			} else {
				this._appIcon = this._appIcon || new sap.m.Image(this.getId()+"-icon", {src: sIconSrc}).addStyleClass("sapMPageAppIcon");
				this._appIcon.setSrc(sIconSrc);
				if (this._navBtn){
					this._updateHeaderContent(this._navBtn, 'left', -1);
				}
				this._updateHeaderContent(this._appIcon, 'left', 0);
			}
			this._titleIndex = 1;
		}else{
			//I can't remove the icon from button, so we need to do it later...
			if(this._appIcon){
				this._updateHeaderContent(this._appIcon, 'left', -1);
				this._titleIndex = 0;
				this._appIcon.destroy();
				this._appIcon = null;
			}
		}
	}
	this.setProperty("icon", sIconSrc, true);
	return this;
};

/**
 * Update content of internal header
 * @param oContent: control to be added
 * @param sContentPosition: position where the control should be located, possible values left/middle/right
 * @param iContentIndex: the order of the control to be placed. If set to -1, the control will be removed from the header
 * @private 
 */
sap.m.Page.prototype._updateHeaderContent = function (oContent, sContentPosition, iContentIndex){
	var oInternalHeader = this._getInternalHeader();

	if (oInternalHeader){
		switch (sContentPosition){
		case 'left':
			if (iContentIndex == -1){
				if(oInternalHeader.getContentLeft()){
					oInternalHeader.removeContentLeft(oContent);
				}
			} else {
				if (oInternalHeader.indexOfContentLeft(oContent)!= iContentIndex){
					oInternalHeader.insertContentLeft(oContent, iContentIndex);
					oInternalHeader.invalidate(); // workaround for bOutput problem
				}
			}
			break;
		case 'middle':
			if (iContentIndex == -1){
				if(oInternalHeader.getContentMiddle()){
					oInternalHeader.removeContentMiddle(oContent);
				}
			} else {
				if (oInternalHeader.indexOfContentMiddle(oContent)!= iContentIndex){
					oInternalHeader.insertContentMiddle(oContent, iContentIndex);
					oInternalHeader.invalidate();
				}
			}
			break;
		case 'right':
			if (iContentIndex == -1){
				if(oInternalHeader.getContentRight()){
					oInternalHeader.removeContentRight(oContent);
				}
			} else {
				if (oInternalHeader.indexOfContentRight(oContent)!= iContentIndex){
					oInternalHeader.insertContentRight(oContent, iContentIndex);
					oInternalHeader.invalidate();
				}
			}
			break;
		default:
			break;
		}
	}
};

/**
 * Create internal header
 * @private
 */

sap.m.Page.prototype._getInternalHeader= function() {
	var oInternalHeader = this.getAggregation("_internalHeader");
	if (!oInternalHeader){
		this.setAggregation('_internalHeader', new sap.m.Bar(this.getId() + "-intHeader"));
		oInternalHeader = this.getAggregation("_internalHeader");
		oInternalHeader._context = 'header';
		if(sap.ui.Device.os.ios){
			if (this.getShowNavButton() && this._navBtn){
				this._updateHeaderContent(this._navBtn, 'left', 0);
			}
			if (this.getTitle() && this._headerTitle){
				this._updateHeaderContent(this._headerTitle, 'middle', 0);
			}
		} else {
			if (this.getShowNavButton() && this._navBtn){
				this._updateHeaderContent(this._navBtn, 'left', 0);
				this._titleIndex = 1;
			} else {
				if(this._bIsPlatformDependent && this.getIcon() && this._appIcon){
					this._updateHeaderContent(this._appIcon, 'left', 0);
					this._titleIndex = 1;
				}
			}
			if (this.getTitle() && this._headerTitle){
				if (this._bIsPlatformDependent){
					this._titleIndex = this._titleIndex || 0;
					this._updateHeaderContent(this._headerTitle, 'left', this._titleIndex);
				} else {
					this._updateHeaderContent(this._headerTitle, 'middle', 0);
				}
			}
		}
	}
	return oInternalHeader;
};

/**
 * Returns the custom or internal header
 * @private
 */
sap.m.Page.prototype._getAnyHeader = function() {
	var oCustomHeader = this.getCustomHeader();
	if (oCustomHeader) {
		oCustomHeader._context = 'header';
		// return aggregated header, if it exists
		return oCustomHeader.addStyleClass("sapMPageHeader sapMHeader-CTX");
	} else {
		return this._getInternalHeader().addStyleClass("sapMPageHeader sapMHeader-CTX");
	}
};

/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 *
 * @private
 */
sap.m.Page.prototype.getScrollDelegate = function() {
	return this._oScroller;
};

//*** API Methods ***

sap.m.Page.prototype.scrollTo = function(y, time) {
	if (this._oScroller){
		this._oScroller.scrollTo(0, y, time);
	}
	return this;
};


//*** Methods forwarding the "headerContent" pseudo-aggregation calls ***

sap.m.Page.prototype.getHeaderContent = function() {
	return this._getInternalHeader().getContentRight();
};

sap.m.Page.prototype.indexOfHeaderContent = function(oControl) {
	return this._getInternalHeader().indexOfContentRight(oControl);
};

sap.m.Page.prototype.insertHeaderContent = function(oControl, iIndex) {
	return this._getInternalHeader().insertContentRight(oControl, iIndex);
};

sap.m.Page.prototype.addHeaderContent = function(oControl) {
	return this._getInternalHeader().addContentRight(oControl);
};

sap.m.Page.prototype.removeHeaderContent = function(oControl) {
	return this._getInternalHeader().removeContentRight(oControl);
};

sap.m.Page.prototype.removeAllHeaderContent = function() {
	return this._getInternalHeader().removeAllContentRight();
};

sap.m.Page.prototype.destroyHeaderContent = function() {
	return this._getInternalHeader().destroyContentRight();
};
}; // end of sap/m/Page.js
if ( !jQuery.sap.isDeclared('sap.m.Panel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Panel.
jQuery.sap.declare("sap.m.Panel");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Panel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getHeaderToolbar headerToolbar} : sap.m.Toolbar</li>
 * <li>{@link #getInfoToolbar infoToolbar} : sap.m.Toolbar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Panel control is a container for controls with a solid background and a header text.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.Panel
 */
sap.ui.core.Control.extend("sap.m.Panel", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"headerText" : {type : "string", group : "Data", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : 'auto'}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"headerToolbar" : {type : "sap.m.Toolbar", multiple : false}, 
    	"infoToolbar" : {type : "sap.m.Toolbar", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.Panel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Panel.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Is the control visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Panel#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Panel#setVisible
 * @function
 */


/**
 * Getter for property <code>headerText</code>.
 * Sets the header text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.m.Panel#getHeaderText
 * @function
 */

/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Panel#setHeaderText
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The Panel width
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Panel#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Panel#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The Panel height
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.Panel#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Panel#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content for the Panel
 * 
 * <strong>Note</strong>: this is the default aggregation for Panel.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Panel#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Panel#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Panel#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Panel#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Panel#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Panel#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Panel#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>headerToolbar</code>.<br/>
 * Header can be used as a Toolbar to add extra controls for user interactions.
 * Note: This aggregation overwrites "headerText" property.
 * 
 * @return {sap.m.Toolbar}
 * @public
 * @since 1.16
 * @name sap.m.Panel#getHeaderToolbar
 * @function
 */


/**
 * Setter for the aggregated <code>headerToolbar</code>.
 * @param {sap.m.Toolbar} oHeaderToolbar
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Panel#setHeaderToolbar
 * @function
 */
	

/**
 * Destroys the headerToolbar in the aggregation 
 * named <code>headerToolbar</code>.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Panel#destroyHeaderToolbar
 * @function
 */


/**
 * Getter for aggregation <code>infoToolbar</code>.<br/>
 * InfoBar is placed below the header and can be used to show extra information to the user.
 * 
 * @return {sap.m.Toolbar}
 * @public
 * @since 1.16
 * @name sap.m.Panel#getInfoToolbar
 * @function
 */


/**
 * Setter for the aggregated <code>infoToolbar</code>.
 * @param {sap.m.Toolbar} oInfoToolbar
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Panel#setInfoToolbar
 * @function
 */
	

/**
 * Destroys the infoToolbar in the aggregation 
 * named <code>infoToolbar</code>.
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Panel#destroyInfoToolbar
 * @function
 */


// Start of sap\m\Panel.js
sap.m.Panel.prototype.init = function() {
};

/**
 * Sets the width of the panel.
 *
 * @param {string} sWidth the width of the panel as CSS size
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.m.Panel.prototype.setWidth = function (sWidth) {
	this.setProperty("width", sWidth, true); // don't rerender
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.width = sWidth;
	}
	return this;
};


/**
 * Sets the height of the panel.
 *
 * @param {string} sHeight the height of the panel as CSS size
 * @return {sap.m.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.m.Panel.prototype.setHeight = function (sHeight) {
	this.setProperty("height", sHeight, true); // don't rerender
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.height = sHeight;
	}
	return this;
};
}; // end of sap/m/Panel.js
if ( !jQuery.sap.isDeclared('sap.m.Popover') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Popover.
jQuery.sap.declare("sap.m.Popover");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Popover.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Right)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getModal modal} : boolean (default: false)</li>
 * <li>{@link #getOffsetX offsetX} : int (default: 0)</li>
 * <li>{@link #getOffsetY offsetY} : int (default: 0)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>
 * <li>{@link #getBounce bounce} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.ui.core.Control</li>
 * <li>{@link #getSubHeader subHeader} : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li>
 * <li>{@link #getBeginButton beginButton} : sap.ui.core.Control</li>
 * <li>{@link #getEndButton endButton} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : string | sap.m.Button</li>
 * <li>{@link #getRightButton rightButton} : string | sap.m.Button</li>
 * <li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Popover#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Popover is to present information temporarily but in a way that does not take over the entire screen. The popover content is layered on top of your existing content and it remains visible until the user taps outside of the popover when modal is set to false or you explicitly dismiss it when modal is set to true. The switching between modal and non-modal can also be done when the popover is already opened.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Popover
 */
sap.ui.core.Control.extend("sap.m.Popover", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.core.PopupInterface"
	],
	publicMethods : [
		// methods
		"close", "openBy", "isOpen"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"placement" : {type : "sap.m.PlacementType", group : "Behavior", defaultValue : sap.m.PlacementType.Right},
		"showHeader" : {type : "boolean", group : "Appearance", defaultValue : true},
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"modal" : {type : "boolean", group : "Behavior", defaultValue : false},
		"offsetX" : {type : "int", group : "Appearance", defaultValue : 0},
		"offsetY" : {type : "int", group : "Appearance", defaultValue : 0},
		"contentWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"contentHeight" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"enableScrolling" : {type : "boolean", group : "Misc", defaultValue : true, deprecated: true},
		"verticalScrolling" : {type : "boolean", group : "Misc", defaultValue : true},
		"horizontalScrolling" : {type : "boolean", group : "Misc", defaultValue : true},
		"bounce" : {type : "boolean", group : "Behavior", defaultValue : null}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"customHeader" : {type : "sap.ui.core.Control", multiple : false}, 
    	"subHeader" : {type : "sap.ui.core.Control", multiple : false}, 
    	"footer" : {type : "sap.ui.core.Control", multiple : false}, 
    	"_internalHeader" : {type : "sap.m.Bar", multiple : false, visibility : "hidden"}, 
    	"beginButton" : {type : "sap.ui.core.Control", multiple : false}, 
    	"endButton" : {type : "sap.ui.core.Control", multiple : false}
	},
	associations : {
		"leftButton" : {type : "sap.m.Button", multiple : false, deprecated: true}, 
		"rightButton" : {type : "sap.m.Button", multiple : false, deprecated: true}, 
		"initialFocus" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"afterOpen" : {}, 
		"afterClose" : {}, 
		"beforeOpen" : {}, 
		"beforeClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Popover with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Popover.extend
 * @function
 */

sap.m.Popover.M_EVENTS = {'afterOpen':'afterOpen','afterClose':'afterClose','beforeOpen':'beforeOpen','beforeClose':'beforeClose'};


/**
 * Getter for property <code>placement</code>.
 * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Vertical, sap.m.PlacementType.Left.Horizontal, sap.m.PlacementType.Left.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.
 *
 * Default value is <code>Right</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * @name sap.m.Popover#getPlacement
 * @function
 */

/**
 * Setter for property <code>placement</code>.
 *
 * Default value is <code>Right</code> 
 *
 * @param {sap.m.PlacementType} oPlacement  new value for property <code>placement</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setPlacement
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * If a header should be shown at the top of the popover.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.m.Popover#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setShowHeader
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title text appears in the header. This property will be ignored when showHeader is set to false.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Popover#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setTitle
 * @function
 */


/**
 * Getter for property <code>modal</code>.
 * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * @name sap.m.Popover#getModal
 * @function
 */

/**
 * Setter for property <code>modal</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bModal  new value for property <code>modal</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setModal
 * @function
 */


/**
 * Getter for property <code>offsetX</code>.
 * The offset for the popover placement in the x axis. It's with unit pixel.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>offsetX</code>
 * @public
 * @name sap.m.Popover#getOffsetX
 * @function
 */

/**
 * Setter for property <code>offsetX</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iOffsetX  new value for property <code>offsetX</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setOffsetX
 * @function
 */


/**
 * Getter for property <code>offsetY</code>.
 * The offset for the popover placement in the y axis. It's with unit pixel.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>offsetY</code>
 * @public
 * @name sap.m.Popover#getOffsetY
 * @function
 */

/**
 * Setter for property <code>offsetY</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iOffsetY  new value for property <code>offsetY</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setOffsetY
 * @function
 */


/**
 * Getter for property <code>contentWidth</code>.
 * Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * @since 1.9.0
 * @name sap.m.Popover#getContentWidth
 * @function
 */

/**
 * Setter for property <code>contentWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentWidth  new value for property <code>contentWidth</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.m.Popover#setContentWidth
 * @function
 */


/**
 * Getter for property <code>contentHeight</code>.
 * Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * @since 1.9.0
 * @name sap.m.Popover#getContentHeight
 * @function
 */

/**
 * Setter for property <code>contentHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentHeight  new value for property <code>contentHeight</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.m.Popover#setContentHeight
 * @function
 */


/**
 * Getter for property <code>enableScrolling</code>.
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @public
 * @deprecated Since version 1.15.0. 
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * @name sap.m.Popover#getEnableScrolling
 * @function
 */

/**
 * Setter for property <code>enableScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableScrolling  new value for property <code>enableScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.0. 
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * @name sap.m.Popover#setEnableScrolling
 * @function
 */


/**
 * Getter for property <code>verticalScrolling</code>.
 * This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @public
 * @since 1.15.0
 * @name sap.m.Popover#getVerticalScrolling
 * @function
 */

/**
 * Setter for property <code>verticalScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.Popover#setVerticalScrolling
 * @function
 */


/**
 * Getter for property <code>horizontalScrolling</code>.
 * This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>horizontalScrolling</code>
 * @public
 * @since 1.15.0
 * @name sap.m.Popover#getHorizontalScrolling
 * @function
 */

/**
 * Setter for property <code>horizontalScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.Popover#setHorizontalScrolling
 * @function
 */


/**
 * Getter for property <code>bounce</code>.
 * Whether bouncing is enabled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>bounce</code>
 * @public
 * @since 1.16.5
 * @name sap.m.Popover#getBounce
 * @function
 */

/**
 * Setter for property <code>bounce</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bBounce  new value for property <code>bounce</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.5
 * @name sap.m.Popover#setBounce
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the popover.
 * 
 * <strong>Note</strong>: this is the default aggregation for Popover.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Popover#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Popover#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Popover#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Popover#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Popover#getCustomHeader
 * @function
 */


/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.ui.core.Control} oCustomHeader
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setCustomHeader
 * @function
 */
	

/**
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#destroyCustomHeader
 * @function
 */


/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @since 1.15.1
 * @name sap.m.Popover#getSubHeader
 * @function
 */


/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.ui.core.Control} oSubHeader
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Popover#setSubHeader
 * @function
 */
	

/**
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Popover#destroySubHeader
 * @function
 */


/**
 * Getter for aggregation <code>footer</code>.<br/>
 * This is optional footer which is shown on the bottom of the popover.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Popover#getFooter
 * @function
 */


/**
 * Setter for the aggregated <code>footer</code>.
 * @param {sap.ui.core.Control} oFooter
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setFooter
 * @function
 */
	

/**
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#destroyFooter
 * @function
 */


/**
 * Getter for aggregation <code>beginButton</code>.<br/>
 * BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @since 1.15.1
 * @name sap.m.Popover#getBeginButton
 * @function
 */


/**
 * Setter for the aggregated <code>beginButton</code>.
 * @param {sap.ui.core.Control} oBeginButton
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Popover#setBeginButton
 * @function
 */
	

/**
 * Destroys the beginButton in the aggregation 
 * named <code>beginButton</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Popover#destroyBeginButton
 * @function
 */


/**
 * Getter for aggregation <code>endButton</code>.<br/>
 * EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @since 1.15.1
 * @name sap.m.Popover#getEndButton
 * @function
 */


/**
 * Setter for the aggregated <code>endButton</code>.
 * @param {sap.ui.core.Control} oEndButton
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Popover#setEndButton
 * @function
 */
	

/**
 * Destroys the endButton in the aggregation 
 * named <code>endButton</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.1
 * @name sap.m.Popover#destroyEndButton
 * @function
 */


/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>leftButton</code> association, or null
 * @public
 * @deprecated Since version 1.15.1. 
 * 
 * This property has been deprecated since 1.15.1. Please use the beginButton instead.
 * 
 * @name sap.m.Popover#getLeftButton
 * @function
 */

/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vLeftButton 
 *    Id of an element which becomes the new target of this <code>leftButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.1. 
 * 
 * This property has been deprecated since 1.15.1. Please use the beginButton instead.
 * 
 * @name sap.m.Popover#setLeftButton
 * @function
 */


	
/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>rightButton</code> association, or null
 * @public
 * @deprecated Since version 1.15.1. 
 * 
 * This property has been deprecated since 1.15.1. Please use the endButton instead.
 * 
 * @name sap.m.Popover#getRightButton
 * @function
 */

/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vRightButton 
 *    Id of an element which becomes the new target of this <code>rightButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.15.1. 
 * 
 * This property has been deprecated since 1.15.1. Please use the endButton instead.
 * 
 * @name sap.m.Popover#setRightButton
 * @function
 */


	
/**
 * Focus is set to the popover in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.
 *
 * @return {string} Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * @public
 * @since 1.15.0
 * @name sap.m.Popover#getInitialFocus
 * @function
 */

/**
 * Focus is set to the popover in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.
 *
 * @param {string | sap.ui.core.Control} vInitialFocus 
 *    Id of an element which becomes the new target of this <code>initialFocus</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.Popover#setInitialFocus
 * @function
 */


	
/**
 * This event will be fired after the popover is opened. 
 *
 * @name sap.m.Popover#afterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired after the popover is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachAfterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachAfterOpen
 * @function
 */

/**
 * Fire event afterOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireAfterOpen
 * @function
 */


/**
 * This event will be fired after the popover is closed. 
 *
 * @name sap.m.Popover#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired after the popover is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachAfterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachAfterClose
 * @function
 */

/**
 * Fire event afterClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireAfterClose
 * @function
 */


/**
 * This event will be fired before the popover is opened. 
 *
 * @name sap.m.Popover#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired before the popover is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachBeforeOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachBeforeOpen
 * @function
 */

/**
 * Fire event beforeOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireBeforeOpen
 * @function
 */


/**
 * This event will be fired before the popover is closed. 
 *
 * @name sap.m.Popover#beforeClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired before the popover is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachBeforeClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachBeforeClose
 * @function
 */

/**
 * Fire event beforeClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireBeforeClose
 * @function
 */


/**
 * Close the popover
 *
 * @name sap.m.Popover.prototype.close
 * @function

 * @type sap.m.Popover
 * @public
 */


/**
 * Open the popover.
 *
 * @name sap.m.Popover.prototype.openBy
 * @function
 * @param {object} 
 *         oControl
 *         This is the control to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover.

 * @type sap.m.Popover
 * @public
 */


/**
 * The method checks if the Popover is open. It returns true when the Popover is currently open (this includes opening and closing animations), otherwise it returns false.
 *
 * @name sap.m.Popover.prototype.isOpen
 * @function

 * @type boolean
 * @public
 * @since 1.9.1
 */


// Start of sap\m\Popover.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/* =========================================================== */
/*                   begin: lifecycle methods                  */
/* =========================================================== */
sap.m.Popover._bOneDesign = (sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== 'true');
sap.m.Popover._bIE9 = (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10);
sap.m.Popover._bIOS7 = sap.ui.Device.os.ios && sap.ui.Device.os.version >= 7 && sap.ui.Device.os.version < 8 && sap.ui.Device.browser.name === "sf";
/**
 * Initializes the popover control
 * @private
 */
sap.m.Popover.prototype.init = function(){
	// The offset of the arrow must be more than _arrowOffsetThreshold from the border of the popover content
	this._arrowOffsetThreshold = sap.m.Popover._bOneDesign ? 4 : 15; // 10 (rounded corner) + 5 (rotate)
	
	this._marginTopInit = false;
	// The following 4 values are the margins which are used to avoid making the popover very near to the border of the screen
	this._marginTop = (!sap.m.Popover._bOneDesign && sap.ui.Device.os.ios) ? 44 : 48; //This is the default value, and dynamic calculation will be done in afterRendering
	
	this._marginLeft = 10;
	this._marginRight = 10;
	this._marginBottom = 10;
	
	this._$window = jQuery(window);
	
	this.oPopup = new sap.ui.core.Popup();
	this.oPopup.setShadow(true);
	this.oPopup.setAutoClose(true);
	this.oPopup.setAnimations(jQuery.proxy(this._openAnimation, this), jQuery.proxy(this._closeAnimation, this));
	
	// This is data used to position the popover depending on the placement property
	this._placements = [sap.m.PlacementType.Top, sap.m.PlacementType.Right, sap.m.PlacementType.Bottom, sap.m.PlacementType.Left, sap.m.PlacementType.Vertical, sap.m.PlacementType.Horizontal, sap.m.PlacementType.Auto];
	this._myPositions = ["center bottom", "begin center", "center top", "end center"];
	this._atPositions = ["center top", "end center", "center bottom", "begin center"];
	this._offsets = ["0 -18", "18 0", "0 18", "-18 0"];
	
	this._arrowOffset = 18;
	
	// used to judge if enableScrolling needs to be disabled
	this._scrollContentList = [sap.m.NavContainer, sap.m.Page, sap.m.ScrollContainer];
	
	// Make this.oPopup call this._setArrowPosition each time after its position is changed
	this._fnSetArrowPosition = jQuery.proxy(this._setArrowPosition, this);
	
	// The orientationchange event listener
	this._fnOrientationChange = jQuery.proxy(this._onOrientationChange, this);
	
	// The handler to close popover when the size or position of the open by control changes
	this._fnFollowOf = jQuery.proxy(function(){
		this.close();
	}, this);
	
	//CSN 0001875244 2013: on desktop explicitly close popover if position of triggering
	//element is moved. Make use of popup's 'followOf' feature. This ensures that popover is
	//closed when a containing scroll container is scrolled, be it via scrollbar or using the
	//mousewheel.
	//There is no need to do this for non desktop environments because the popover is closed
	//in those already, when scrolling in a container occurs. Using 'followOf' in that scenario
	//would lead to an error (I have tried it with an IPad)
	if(sap.ui.Device.system.desktop) {
		//the 'followOf' handler for our popup
		this.setFollowOf(true);
	}

	var that = this;
	this.oPopup._applyPosition = function(oPosition, bFromResize){
		// avoid calling on being closed instances
		if(this.getOpenState() === sap.ui.core.OpenState.CLOSING){
			return;
		}
		//set flag to avoid double calculation
		if (!that._bCalSize) {
			that._bCalSize = true;
			that._storeScrollPosition();
			that._clearCSSStyles();
		}
		//calculate the best placement of the popover if placementType is horizontal,  vertical or auto
		var iPlacePos = jQuery.inArray(that.getPlacement(), that._placements);
		if (iPlacePos > 3 && !that._bPosCalced) {
			that._calcPlacement();
			return;
		}

		// update the "of" property on oPosition because parent can be already rerendered
		if (that._oOpenBy instanceof sap.ui.core.Element) {
			oPosition.of = that._oOpenBy.getDomRef();
		}

		// if the openBy dom reference is null or already detached from the dom tree because of rerendering
		// there's no need to reposition the popover again
		if(!oPosition.of || !jQuery.sap.containsOrEquals(document.documentElement, oPosition.of)){
			jQuery.sap.log.warning("sap.m.Popover: in function applyPosition, the openBy element doesn't have any DOM output or the DOM is already detached from DOM tree" + that);
			return;
		}

		// some browser changes the scrollLeft of window after firing resize event
		// which caused the popover to be positioned at the wrong place.
		jQuery(window).scrollLeft(0);
		//deregister the content resize handler before repositioning
		that._deregisterContentResizeHandler();
		sap.ui.core.Popup.prototype._applyPosition.call(this, oPosition);
		that._fnSetArrowPosition();
		that._restoreScrollPosition();
		//reset the flags
		that._bCalSize = false;
		that._bPosCalced = false;

		//register the content resize handler
		that._registerContentResizeHandler();
	};

	// when popup's close method is called by autoclose handler, the beforeClose event also needs to be fired.
	// popup's close method has been inherited here in order to fire the beforeClose event for calling close on
	// autoclose.
	this.oPopup.close = function(bBeforeCloseFired){
		if(!bBeforeCloseFired){
			that.fireBeforeClose({openBy: that._oOpenBy});
		}

		that._removeFollowOfDelegate();
		that._deregisterContentResizeHandler();
		sap.ui.core.Popup.prototype.close.apply(this, Array.prototype.slice.call(arguments, 1));
	};
};

sap.m.Popover.prototype.onBeforeRendering = function() {
	var oNavContent, oPageContent;

	//if content has scrolling, disable scrolling automatically
	if(this._hasSingleScrollableContent()){
		this._forceDisableScrolling = true;
		jQuery.sap.log.info("VerticalScrolling and horizontalScrolling in sap.m.Popover with ID " + this.getId() +" has been disabled because there's scrollable content inside");
	}else{
		this._forceDisableScrolling = false;
	}

	if(!this._forceDisableScrolling){
		if(!this._oScroller){
			this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
				horizontal: this.getHorizontalScrolling(),
				vertical: this.getVerticalScrolling(),
				zynga: false,
				preventDefault: false,
				nonTouchScrolling: "scrollbar",
				bounce: this.getBounce() === "" ? undefined : this.getBounce()
			});
		}
	}

	if(this._bContentChanged){
		this._bContentChanged = false;
		oNavContent = this._getSingleNavContent();
		oPageContent = this._getSinglePageContent();
		if(oNavContent && !this.getModal() && !sap.ui.Device.support.touch && !jQuery.sap.simulateMobileOnDesktop){
			//gain the focus back to popover in order to prevent the autoclose of the popover
			oNavContent.attachEvent("afterNavigate", function(oEvent){
				jQuery.sap.focus(this.getDomRef());
			}, this);
		}
		if(oNavContent || oPageContent){
			oPageContent = oPageContent || oNavContent.getCurrentPage();
			if(oPageContent._getAnyHeader){
				this.addStyleClass("sapMPopoverWithHeaderCont");
			}
			
			if(oNavContent){
				oNavContent.attachEvent("navigate", function(oEvent){
					var oPage = oEvent.getParameter("to");
					if(oPage instanceof sap.m.Page){
						this.$().toggleClass("sapMPopoverWithHeaderCont", oPage._getAnyHeader());
					}
				}, this);
			}
		}
	}
};	

sap.m.Popover.prototype.onAfterRendering = function(){
	var $openedBy, $page, $header;

	//calculate the height of the header in the current page
	//only for the first time calling after rendering
	if(!this._marginTopInit){
		this._marginTop = 2;
		if(this._oOpenBy){
			$openedBy = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.$() : jQuery(this._oOpenBy);
			//first check if the openedBy isn't inside a header
			if(!($openedBy.closest("header.sapMBar").length > 0)){
				$page = $openedBy.closest(".sapMPage");
				if($page.length > 0){
					$header = $page.children("header.sapMBar");
					if($header.length > 0){
						this._marginTop += $header.outerHeight();
					}
				}
			}
			this._marginTopInit = true;
		}
	}
	
	if(this.isOpen()){
		this._restoreFocus();
	}
};

/**
 * Destroys the popover control
 * @private
 */
sap.m.Popover.prototype.exit = function(){
	this._deregisterContentResizeHandler();
	
	sap.ui.Device.resize.detachHandler(this._fnOrientationChange);
	
	sap.m.InstanceManager.removePopoverInstance(this);
	
	this._removeFollowOfDelegate();
	
	if(this.oPopup){
		this.oPopup.detachEvent("closed", this._handleClosed, this);
		this.oPopup.destroy();
		this.oPopup = null;
	}
	
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}
	
	if(this._internalHeader){
		this._internalHeader.destroy();
		this._internalHeader = null;
	}
	
	if(this._headerTitle){
		this._headerTitle.destroy();
		this._headerTitle = null;
	}
};
/* =========================================================== */
/*                   end: lifecycle methods                    */
/* =========================================================== */



/* =========================================================== */
/*                   begin: API method                         */
/* =========================================================== */
/**
 * Opens the popover and set the popover position according to the {placement} property
 * around the {oControl} parameter.
 *
 * @param {object} oControl The control to which the popover is aligned based on the {placement} property
 * @public
 *
 */
sap.m.Popover.prototype.openBy = function(oControl, bSkipInstanceManager){
	// If already opened with the needed content then return
	var oPopup = this.oPopup,
		ePopupState = this.oPopup.getOpenState(),
		// The control that needs to be focused after popover is open is calculated in following sequence:
		// initialFocus, beginButton, endButton, and popover itself.
		// focus has to be inside/on popover otherwise autoclose() will not work
		sFocusId = this._getInitialFocusId(),
		oParentDomRef, iPlacePos;
		
	if (ePopupState === sap.ui.core.OpenState.OPEN || ePopupState === sap.ui.core.OpenState.OPENING){
		if(this._oOpenBy === oControl) {
			//if the popover is open, and is opening by the same control again, just return
			return this;
		}else{
			//if the popover is open, and is opening by another control, then first close it and open later.
			var afterClosed = function(){
				oPopup.detachEvent("closed", afterClosed, this);
				this.openBy(oControl);
			};
			oPopup.attachEvent("closed", afterClosed, this);
			this.close();
			return this;
		}
	}
	
	if(!oControl){
		return this;
	}
	
	//bind the resize event to window
	//CSN 2012 4216945
	//binding should be registered here (very early) because when keyboard in android closes at the same time, resize event needs to be reacted in order to
	//reposition the popover after the keyboard fully closes.
	if(sap.ui.Device.support.touch){
		sap.ui.Device.resize.attachHandler(this._fnOrientationChange);
	}
	
	if(!this._oOpenBy || oControl !== this._oOpenBy){
		this._oOpenBy = oControl;
	}

	this.fireBeforeOpen({openBy: this._oOpenBy});
	
	oPopup.attachEvent("opened", this._handleOpened, this);
	oPopup.attachEvent("closed", this._handleClosed, this);
	oPopup.setInitialFocusId(sFocusId);
	// Open popup
	iPlacePos = jQuery.inArray(this.getPlacement(), this._placements);
	if(iPlacePos > -1){
		oParentDomRef = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.getDomRef() : this._oOpenBy;
		if(!oParentDomRef){
			jQuery.sap.log.error("sap.m.Popover id = " + this.getId() + ": is opened by a control which isn't rendered yet.");
			return;
		}
		
		// register the followOf delegate from open by when popover is being opened
		this._addFollowOfDelegate();
		
		oPopup.setAutoCloseAreas([oParentDomRef]);
		oPopup.setContent(this);
		//if position has to be calculated wait until it is calculated with setting the position
		if (iPlacePos <= 3) {
			oPopup.setPosition(this._myPositions[iPlacePos], this._atPositions[iPlacePos], oParentDomRef, this._calcOffset(this._offsets[iPlacePos]), "fit");
		}
		var that = this;
		var fCheckAndOpen = function(){
			if(oPopup.getOpenState() === sap.ui.core.OpenState.CLOSING){
				setTimeout(fCheckAndOpen, 150);
			}else{
				// Save current focused element to restore the focus after closing the dialog
				that._oPreviousFocus = sap.ui.core.Popup.getCurrentFocusInfo();
				oPopup.open();
				//if popover shouldn't be managed by Instance Manager
				//e.g. SplitContainer in PopoverMode, the popover which contains the master area should be managed by the SplitContainer control
				if(!bSkipInstanceManager){
					sap.m.InstanceManager.addPopoverInstance(that);
				}
			}
		};
		fCheckAndOpen();
	}else{
		jQuery.sap.log.error(this.getPlacement() + "is not a valid value! It can only be top, right, bottom or left");
	}
	return this;
};

/**
 * Closes the popover when it's already opened.
 * @public
 */
sap.m.Popover.prototype.close = function(){
	var eOpenState = this.oPopup.getOpenState();
	if(!(eOpenState === sap.ui.core.OpenState.CLOSED || eOpenState === sap.ui.core.OpenState.CLOSING)){
		this.fireBeforeClose({openBy: this._oOpenBy});
		
		//beforeCloseEvent is already fired here, the parameter true needs to be passed into the popup's close method.
		this.oPopup.close(true);
		
		// restore previous focus, if any:
		if(this.oPopup.restoreFocus && this._oPreviousFocus){
			sap.ui.core.Popup.applyFocusInfo(this._oPreviousFocus);
			this._oPreviousFocus = null;
		}
	}
	return this;
};

sap.m.Popover.prototype.isOpen = function(){
	return this.oPopup && this.oPopup.isOpen();
};

/**
 * The followOf feature from Popup which closes the popover in desktop browser when
 * the position or the size of open by control changes may leads to unwanted close.
 * 
 * This function is for enabling/disabling the followOf feature which has effect only in desktop browsers.
 * 
 * @param {boolean} bValue enables the followOf feature when set to true and disable the followOf when set to false 
 * @return {sap.m.Popover} The popover itself for method chaining
 * @protected
 * @since 1.16.8
 * @name sap.m.Popover#setFollowOf
 * @function
 */
sap.m.Popover.prototype.setFollowOf = function(bValue){
	if(!sap.ui.Device.system.desktop){
		return this;
	}

	if(bValue){
		this.oPopup.setFollowOf(this._fnFollowOf);
	}else{
		this.oPopup.setFollowOf(false);
	}
	return this;
};

/**
 * Setter for property <code>bounce</code>.
 *
 * Default value is empty
 *
 * @param {boolean} bBounce  new value for property <code>bounce</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#setBounce
 * @function
 */

/* =========================================================== */
/*                     end: API method                         */
/* =========================================================== */


/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */
sap.m.Popover.prototype._clearCSSStyles = function() {
	var oStyle = this.getDomRef().style,
		$content = this.$("cont"),
		$scrollArea = $content.children(".sapMPopoverScroll"),
		oContentStyle = $content[0].style,
		bSAreaPosAbs = $scrollArea.css("position") === "absolute",
		sContentWidth = this.getContentWidth(),
		sContentHeight = this.getContentHeight(),
		$arrow = this.$("arrow"),
		iWindowWidth = this._$window.width(),
		iWindowHeight = this._$window.height();
	
	oStyle.overflow = "";
	
	if(sContentWidth.indexOf("%") > 0){
		sContentWidth = sap.m.PopupHelper.calcPercentageSize(sContentWidth, iWindowWidth);
	}
	
	if(sContentHeight.indexOf("%") > 0){
		sContentHeight = sap.m.PopupHelper.calcPercentageSize(sContentHeight, iWindowHeight);
	}

	oContentStyle.width = sContentWidth || (bSAreaPosAbs ? $scrollArea.outerWidth(true) + "px" : "");
	oContentStyle.height = sContentHeight || (bSAreaPosAbs ? $scrollArea.outerHeight(true) + "px" : "");
	oContentStyle.maxWidth = "";
	oContentStyle.maxHeight = "";

	oStyle.left = "";
	oStyle.right = "";
	oStyle.top = "";
	oStyle.bottom = "";
	oStyle.width = "";
	oStyle.height = "";

	$scrollArea[0].style.width = "";
	
	// clear arrow styles
	$arrow.removeClass("sapMPopoverArrRight sapMPopoverArrLeft sapMPopoverArrDown sapMPopoverArrUp sapMPopoverCrossArr sapMPopoverFooterAlignArr sapMPopoverHeaderAlignArr");
	$arrow.css({
		left : "",
		top : ""
	});
};

sap.m.Popover.prototype._onOrientationChange = function(){
	if(this._bCalSize){
		return;
	}

	var ePopupState = this.oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN || ePopupState === sap.ui.core.OpenState.OPENING)){
		return;
	}

	this.oPopup._applyPosition(this.oPopup._oLastPosition, true);

};

/**
 * Register the listener to close the popover when user taps outside both of the popover and the control that opens the popover.
 * @private
 */
sap.m.Popover.prototype._handleOpened = function(){
	var that = this;
	this.oPopup.detachEvent("opened", this._handleOpened, this);
	
//	recalculate the arrow position when the size of the popover changes.
	if(!sap.ui.Device.support.touch){
		setTimeout(function(){
			sap.ui.Device.resize.attachHandler(that._fnOrientationChange);
		}, 0);
	}
	
	this.fireAfterOpen({openBy: this._oOpenBy});
};

sap.m.Popover.prototype._handleClosed = function(){
	this.oPopup.detachEvent("closed", this._handleClosed, this);
	
	sap.ui.Device.resize.detachHandler(this._fnOrientationChange);

	sap.m.InstanceManager.removePopoverInstance(this);
	this.fireAfterClose({openBy: this._oOpenBy});
};

/**
 * Event handler for the focusin event.
 * If it occurs on the focus handler elements at the beginning of the dialog, the focus is set to the end, and vice versa.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Popover.prototype.onfocusin = function(oEvent){
	var oSourceDomRef = oEvent.target;
	
	//If the invisible FIRST focusable element (suffix '-firstfe') has got focus, move focus to the last focusable element inside
	if (oSourceDomRef.id === this.getId() + "-firstfe") {
		// Search for anything focusable from bottom to top
		var oLastFocusableDomref = jQuery("#" + this.getId() + " .sapMPopoverFooter").lastFocusableDomRef();
		if(!oLastFocusableDomref) {
			oLastFocusableDomref = this.$("cont").lastFocusableDomRef();
			if(!oLastFocusableDomref) {
				oLastFocusableDomref = jQuery("#" + this.getId() + " .sapMPopoverSubHeader").lastFocusableDomRef();
				if(!oLastFocusableDomref) {
					oLastFocusableDomref = jQuery("#" + this.getId() + " .sapMPopoverHeader").lastFocusableDomRef();
				}
			}
		}
		jQuery.sap.focus(oLastFocusableDomref);
	} else if (oSourceDomRef.id === this.getId() + "-lastfe") {
		// Search for anything focusable from top to bottom
		var oFirstFocusableDomref = jQuery("#" + this.getId() + " .sapMPopoverHeader").firstFocusableDomRef();
		if(!oFirstFocusableDomref) {
			oFirstFocusableDomref = jQuery("#" + this.getId() + " .sapMPopoverSubHeader").firstFocusableDomRef();
			if(!oFirstFocusableDomref) {
				var oFirstFocusableDomref = this.$("cont").firstFocusableDomRef();
				if(!oFirstFocusableDomref) {
					oFirstFocusableDomref = jQuery("#" + this.getId() + " .sapMPopoverFooter").firstFocusableDomRef();
				}
			}
		}
		jQuery.sap.focus(oFirstFocusableDomref);
	}
};

sap.m.Popover.prototype.onkeydown = function(oEvent){
	var oKC = jQuery.sap.KeyCodes,
		iKC = oEvent.which || oEvent.keyCode,
		bAlt = oEvent.altKey;

	// Popover should be closed when ESCAPE key or ATL+F4 is pressed
	if(iKC === oKC.ESCAPE || (bAlt && iKC === oKC.F4)){
		// if inner control has already handled the event, dialog doesn't process the event anymore
		if(oEvent.originalEvent && oEvent.originalEvent._sapui_handledByControl){
			return;
		}
		this.close();

		//event should not trigger any further actions
		oEvent.stopPropagation();
		oEvent.preventDefault();
	}
};

/* =========================================================== */
/*                      end: event handlers                  */
/* =========================================================== */



/* =========================================================== */
/*                      begin: internal methods                  */
/* =========================================================== */
/**
 * This method detects if there's a sap.m.NavContainer instance added as a single child into popover's content aggregation or through one or more sap.ui.mvc.View controls.
 * If there is, sapMPopoverNav style class will be added to the root node of the control in order to apply some special css styles to the inner dom nodes.
 */
sap.m.Popover.prototype._hasSingleNavContent = function(){
	return !!this._getSingleNavContent();
};

sap.m.Popover.prototype._getSingleNavContent = function(){
	var aContent = this.getContent();
	
	while(aContent.length === 1 && aContent[0] instanceof sap.ui.core.mvc.View){
		aContent = aContent[0].getContent();
	}
	
	if(aContent.length === 1 && aContent[0] instanceof sap.m.NavContainer){
		return aContent[0];
	}else{
		return null;
	}
};

sap.m.Popover.prototype._getSinglePageContent = function(){
	var aContent = this.getContent();
	
	while(aContent.length === 1 && aContent[0] instanceof sap.ui.core.mvc.View){
		aContent = aContent[0].getContent();
	}
	
	if(aContent.length === 1 && aContent[0] instanceof sap.m.Page){
		return aContent[0];
	}else{
		return null;
	}
};

/**
 * This method detects if there's a sap.m.Page instance added as a single child into popover's content aggregation or through one or more sap.ui.mvc.View controls.
 * If there is, sapMPopoverPage style class will be added to the root node of the control in order to apply some special css styles to the inner dom nodes.
 */
sap.m.Popover.prototype._hasSinglePageContent = function(){
	var aContent = this.getContent();
	
	while(aContent.length === 1 && aContent[0] instanceof sap.ui.core.mvc.View){
		aContent = aContent[0].getContent();
	}
	
	if(aContent.length === 1 && aContent[0] instanceof sap.m.Page){
		return true;
	}else{
		return false;
	}
};

/**
 * If a scrollable control (sap.m.NavContainer, sap.m.ScrollContainer, sap.m.Page) is added to popover's content aggregation as a single child or through one or more sap.ui.mvc.View instances,
 * the scrolling inside popover will be disabled in order to avoid wrapped scrolling areas.
 * 
 * If more than one scrollable control is added to popover, the scrolling needs to be disabled manually.
 */
sap.m.Popover.prototype._hasSingleScrollableContent = function(){
	var aContent = this.getContent(), i;
	
	while(aContent.length === 1 && aContent[0] instanceof sap.ui.core.mvc.View){
		aContent = aContent[0].getContent();
	}
	
	if(aContent.length === 1){
		for(i = 0 ; i < this._scrollContentList.length ; i++){
			if(aContent[0] instanceof this._scrollContentList[i]){
				return true;
			}
		}
		return false;
	}else{
		return false;
	}
};


sap.m.Popover.prototype._calcOffset = function(sOffset){
	var iOffsetX = this.getOffsetX(),
		iOffsetY = this.getOffsetY();
	
	var aParts = sOffset.split(" ");
	return  (parseInt(aParts[0], 10) + iOffsetX) + " " + (parseInt(aParts[1], 10) + iOffsetY);
};

sap.m.Popover.prototype._calcPlacement = function() {
	var oPlacement = this.getPlacement();
	var oParentDomRef = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.getDomRef() : this._oOpenBy;
	
	//calculate the position of the popover
	switch (oPlacement) {
	case sap.m.PlacementType.Auto:
		this._calcAuto();
		break;
	case sap.m.PlacementType.Vertical:
		this._calcVertical();
		break;
	case sap.m.PlacementType.Horizontal:
		this._calcHorizontal();
		break;
	}
	//set flag to avoid calling _applyPosition
	this._bPosCalced = true;

	//set position of popover to calculated position
	var iPlacePos = jQuery.inArray(this._oCalcedPos, this._placements);
	this.oPopup.setPosition(this._myPositions[iPlacePos], this._atPositions[iPlacePos], oParentDomRef, this._calcOffset(this._offsets[iPlacePos]), "fit");
};

sap.m.Popover.prototype._calcVertical = function() {
	var $parent = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.$() : jQuery(this._oOpenBy);
	var iTopSpace = $parent.offset().top - this._marginTop + this.getOffsetY();
	var iParentBottom = $parent.offset().top + $parent.outerHeight();
	var iBottomSpace = this._$window.height() - iParentBottom - this._marginBottom - this.getOffsetY();

	// check on which side (top/bottom) of the parent is more space
	if (iTopSpace > iBottomSpace) {
		this._oCalcedPos = sap.m.PlacementType.Top;
	} else {
		this._oCalcedPos = sap.m.PlacementType.Bottom;
	}
};

sap.m.Popover.prototype._calcHorizontal = function() {
	var $parent = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.$() : jQuery(this._oOpenBy);
	var iLeftSpace = $parent.offset().left - this._marginLeft + this.getOffsetX();
	var iParentRight = $parent.offset().left + $parent.outerWidth();
	var iRightSpace = this._$window.width() - iParentRight - this._marginRight - this.getOffsetX();
	
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	
	// check on which side (left/right) of the parent is more space, in RTL mode, the flipping is done after the PlacementType
	// therefore, PlacementType should be inverted here.
	if (iLeftSpace > iRightSpace) {
		bRtl ? (this._oCalcedPos = sap.m.PlacementType.Right) : (this._oCalcedPos = sap.m.PlacementType.Left);
	} else {
		bRtl ? (this._oCalcedPos = sap.m.PlacementType.Left) : (this._oCalcedPos = sap.m.PlacementType.Right);
	}
};

sap.m.Popover.prototype._calcAuto = function() {
	//calculate which position is the best
	if (this._$window.width() > this._$window.height()) {
		//in "landscape" mode horizontal is preferred, therefore it is checked first
		if (this._checkHorizontal()) {
			this._calcHorizontal();
		} else if (this._checkVertical()) {
			this._calcVertical();
		} else {
			this._calcBestPos();
		}
	} else {
		if (this._checkVertical()) {
			this._calcVertical();
		} else if (this._checkHorizontal()) {
			this._calcHorizontal();
		} else {
			this._calcBestPos();
		}
	}

};

sap.m.Popover.prototype._checkHorizontal = function() {
	//check if there is enough space
	var $parent = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.$() : jQuery(this._oOpenBy);
	var iLeftSpace = $parent.offset().left - this._marginLeft + this.getOffsetX();
	var iParentRight = $parent.offset().left + $parent.outerWidth();
	var iRightSpace = this._$window.width() - iParentRight - this._marginRight - this.getOffsetX();

	var $this = this.$();
	var iWidth = $this.outerWidth() + this._arrowOffset;
	
	if ((iWidth <= iLeftSpace) || (iWidth <= iRightSpace)) {
		return true;
	}
};

sap.m.Popover.prototype._checkVertical = function() {
	//check if there is enough space
	var $parent = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.$() : jQuery(this._oOpenBy);
	var iTopSpace = $parent.offset().top - this._marginTop + this.getOffsetY();
	var iParentBottom = $parent.offset().top + $parent.outerHeight();
	var iBottomSpace = this._$window.height() - iParentBottom - this._marginBottom - this.getOffsetY();
	
	var $this = this.$();
	var iHeight = $this.outerHeight() + this._arrowOffset;
	
	if ((iHeight <= iTopSpace) || (iHeight <= iBottomSpace)) {
		return true;
	}
};

sap.m.Popover.prototype._calcBestPos = function() {
	// if all positions are not big enough, we calculate which position covers the most of the popover
	var $this = this.$();
	var iHeight = $this.outerHeight();
	var iWidth = $this.outerWidth();
	
	var $parent = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.$() : jQuery(this._oOpenBy);
	var iTopSpace = $parent.offset().top - this._marginTop + this.getOffsetY();
	var iParentBottom = $parent.offset().top + $parent.outerHeight();
	var iBottomSpace = this._$window.height() - iParentBottom - this._marginBottom - this.getOffsetY();
	var iLeftSpace = $parent.offset().left - this._marginLeft + this.getOffsetX();
	var iParentRight = $parent.offset().left + $parent.outerWidth();
	var iRightSpace = this._$window.width() - iParentRight - this._marginRight - this.getOffsetX();
	
	//calculation for every possible position how many percent of the popover can be covered
	var fPopoverSize = iHeight * iWidth;
	var fAvailableHeight;
	var fAvaliableWidth;
	
	if ((this._$window.height() - this._marginTop - this._marginBottom) >= iHeight) {
		fAvailableHeight = iHeight;
	} else {
		fAvailableHeight = this._$window.height() - this._marginTop - this._marginBottom;
	}
	
	if ((this._$window.width() - this._marginLeft - this._marginRight) >= iWidth) {
		fAvaliableWidth = iWidth;
	} else {
		fAvaliableWidth = this._$window.width() - this._marginLeft - this._marginRight;
	}
	
	var fLeftCoverage = (fAvailableHeight * (iLeftSpace)) / fPopoverSize;
	var fRightCoverage = (fAvailableHeight * (iRightSpace)) / fPopoverSize;
	var fTopCoverage = (fAvaliableWidth * (iTopSpace)) / fPopoverSize;
	var fBottomCoverage = (fAvaliableWidth * (iBottomSpace)) / fPopoverSize;
	
	//choosing of the position with the biggest coverage and setting of the associated position
	var fMaxCoverageHorizontal = Math.max(fLeftCoverage, fRightCoverage);
	var fMaxCoverageVertical = Math.max(fTopCoverage, fBottomCoverage);
	
	if (fMaxCoverageHorizontal > fMaxCoverageVertical) {
		if (fMaxCoverageHorizontal === fLeftCoverage) {
			this._oCalcedPos = sap.m.PlacementType.Left;
		} else if(fMaxCoverageHorizontal === fRightCoverage) {
			this._oCalcedPos = sap.m.PlacementType.Right;
		}
	} else if (fMaxCoverageVertical > fMaxCoverageHorizontal) {
		if (fMaxCoverageVertical === fTopCoverage) {
			this._oCalcedPos = sap.m.PlacementType.Top;
		} else if(fMaxCoverageVertical === fBottomCoverage) {
			this._oCalcedPos = sap.m.PlacementType.Bottom;
		}
	} else if (fMaxCoverageVertical === fMaxCoverageHorizontal) {
		if (this._$window.height() > this._$window.width()) {
			// in portrait vertical is preferred
			if (fMaxCoverageVertical === fTopCoverage) {
				this._oCalcedPos = sap.m.PlacementType.Top;
			} else if(fMaxCoverageVertical === fBottomCoverage) {
				this._oCalcedPos = sap.m.PlacementType.Bottom;
			}
		} else {
			// in landscape horizontal is preferred
			if (fMaxCoverageHorizontal === fLeftCoverage) {
				this._oCalcedPos = sap.m.PlacementType.Left;
			} else if(fMaxCoverageHorizontal === fRightCoverage) {
				this._oCalcedPos = sap.m.PlacementType.Right;
			}
		}
	}
};
/**
 * Rearrange the arrow and the popover position.
 * @private
 */
sap.m.Popover.prototype._setArrowPosition = function() {
	var ePopupState = this.oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN || ePopupState === sap.ui.core.OpenState.OPENING)){
		return;
	}

	var $parent = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.$() : jQuery(this._oOpenBy),
		$this = this.$(),
		iPopoverBorderLeft = window.parseInt($this.css("border-left-width"), 10),
		iPopoverBorderRight = window.parseInt($this.css("border-right-width"), 10),
		iPopoverBorderTop = window.parseInt($this.css("border-top-width"), 10),
		iPopoverBorderBottom = window.parseInt($this.css("border-bottom-width"), 10),
		iPosTop = window.parseInt($this.css("top"), 10),
		iPosLeft = window.parseInt($this.css("left"), 10),
		sPlacement = this._oCalcedPos || this.getPlacement(),
		$arrow = this.$("arrow"),
		iArrowHeight = $arrow.outerHeight(true),
		$offset = $this.offset(),
		iOffsetX = this.getOffsetX(),
		iOffsetY = this.getOffsetY(),
		iWidth = $this.outerWidth(),
		iHeight = $this.outerHeight(),
		$content = this.$("cont"),
		$scrollArea = $content.children(".sapMPopoverScroll"),
		bSAreaPosAbs = $scrollArea.css("position") === "absolute",
		iContentMarginLeft = window.parseInt($content.css("margin-left"), 10),
		iContentMarginRight = window.parseInt($content.css("margin-right"), 10),
		$header = $this.children(".sapMPopoverHeader"),
		$subHeader = $this.children(".sapMPopoverSubHeader"),
		$footer = $this.children(".sapMPopoverFooter"),
		iMaxContentHeight, iMaxWidth, oArrowPos, oFooterPos, oCSS = {},
		iPosArrow, iHeaderHeight = 0, iSubHeaderHeight = 0, iFooterHeight = 0;
	
	if($header.length > 0){
		iHeaderHeight = $header.outerHeight(true);
	}
	if($subHeader.length > 0){
		iSubHeaderHeight = $subHeader.outerHeight(true);
	}
	if($footer.length > 0){
		iFooterHeight = $footer.outerHeight(true);
	}
	
	//calculates the current window borders
	var iWindowLeft = this._$window.scrollLeft(),
		iWindowTop = this._$window.scrollTop(),
		iWindowRight = this._$window.width(),
		iWindowBottom = (sap.m.Popover._bIOS7 && sap.ui.Device.orientation.landscape && window.innerHeight) ? window.innerHeight : this._$window.height(),
		iDocumentWidth = iWindowLeft + iWindowRight,
		iDocumentHeight = iWindowTop + iWindowBottom;
	
	var iMarginLeft = iWindowLeft + this._marginLeft,
		iMarginRight = this._marginRight,
		iMarginTop = iWindowTop + this._marginTop,
		iMarginBottom = this._marginBottom;
	
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	
	var iLeft, iRight, iTop, iBottom;
	//make the popover never cover the control or dom node that opens the popvoer
	switch(sPlacement){
		case sap.m.PlacementType.Left:
			if (bRtl){
				iMarginLeft = $parent.offset().left + $parent.outerWidth() + this._arrowOffset + this.getOffsetX();
				iLeft = iMarginLeft;
			} else {
				iMarginRight = iDocumentWidth - $parent.offset().left + this._arrowOffset - this.getOffsetX();
				iRight = iMarginRight;
			}
			break;
		case sap.m.PlacementType.Right:
			if (bRtl){
				iMarginRight = iDocumentWidth - $parent.offset().left + this._arrowOffset - this.getOffsetX();
				iRight = iMarginRight;
			} else {
				iMarginLeft = $parent.offset().left + $parent.outerWidth() + this._arrowOffset + this.getOffsetX();
				iLeft = iMarginLeft;
			}
			break;
		case sap.m.PlacementType.Top:
			iMarginBottom = iDocumentHeight - $parent.offset().top + this._arrowOffset - this.getOffsetY();
			iBottom = iMarginBottom;
			break;
		case sap.m.PlacementType.Bottom:
			iMarginTop = $parent.offset().top + $parent.outerHeight() + this._arrowOffset + this.getOffsetY();
			iTop = iMarginTop;
			break;
	}
	
	//check the position of the popover, and do adjustment if necessary
	var iPosToRightBorder = iDocumentWidth - $offset.left - iWidth,
		iPosToBottomBorder = iDocumentHeight - $offset.top - iHeight,
		bExceedHorizontal = (iDocumentWidth - iMarginRight - iMarginLeft) < iWidth,
		bExceedVertical = (iDocumentHeight - iMarginTop - iMarginBottom) < iHeight,
		bOverLeft = $offset.left < iMarginLeft,
		bOverRight = iPosToRightBorder < iMarginRight,
		bOverTop = $offset.top < iMarginTop,
		bOverBottom = iPosToBottomBorder < iMarginBottom;
	
	if(bExceedHorizontal){
		iLeft = iMarginLeft;
		iRight = iMarginRight;
	}else{
		if(bOverLeft){
			iLeft = iMarginLeft;
			if (bRtl){
				// as offset has been updated, the right position applied before also needs to be adjusted
				iRight = parseInt($this.css("right"), 10) - (iLeft - $offset.left);
				if (iRight < iMarginRight) {
					iRight = iMarginRight;
				}
			}
		}else if(bOverRight){
			iRight = iMarginRight;
			//also move the left position of popover when there's enough space left.
			if(iPosLeft - iMarginRight + iPosToRightBorder > iMarginLeft){
				iLeft = iPosLeft - iMarginRight + iPosToRightBorder;
			}
		}
	}
	
	if(bExceedVertical){
		iTop = iMarginTop;
		iBottom = iMarginBottom;
	}else{
		if(bOverTop){
			iTop = iMarginTop;
		}else if(bOverBottom){
			iBottom = iMarginBottom;
			//also move the top position of popover when there's enough space left.
			if(iPosTop - iMarginBottom + iPosToBottomBorder > iMarginTop){
				iTop = iPosTop - iMarginBottom + iPosToBottomBorder;
			}
		}
	}
	
	$this.css({
		top: iTop,
		bottom: iBottom - iWindowTop,
		left: iLeft,
		right: iRight - iWindowLeft
	});
	
	//update size of the popover for arrow position calculation
	iWidth = $this.outerWidth();
	iHeight = $this.outerHeight();
	
	//adapt the width to screen
	if(sPlacement === sap.m.PlacementType.Left){
		iMaxWidth = $this.offset().left + iWidth - this._marginLeft;
	}else{
		iMaxWidth = iDocumentWidth - $this.offset().left - this._marginRight;
	}
	
	iMaxWidth -= (iPopoverBorderLeft + iPopoverBorderRight);
	
	if(bSAreaPosAbs){
		iMaxWidth -= (iContentMarginLeft + iContentMarginRight);
	}
	
	//adapt the height to screen
	iMaxContentHeight = $this.height() - iHeaderHeight - iSubHeaderHeight - iFooterHeight - parseInt($content.css("margin-top"), 10) - parseInt($content.css("margin-bottom"), 10);
	//make sure iMaxContentHeight is NEVER less than 0
	iMaxContentHeight = Math.max(iMaxContentHeight, 0);

	oCSS["max-width"] = iMaxWidth + "px";
	// When Popover can fit into the current screen size, don't set the height on the content div.
	// This can fix the flashing scroll bar problem when content size gets bigger after it's opened.
	// When position: absolute is used on the scroller div, the height has to be kept otherwise content div has 0 height.
	if(this.getContentHeight() || bSAreaPosAbs || ($content.height() > iMaxContentHeight)){
		oCSS["height"] = Math.min(iMaxContentHeight, $content.height()) + "px";
	}else{
		oCSS["height"] = "";
		oCSS["max-height"] = iMaxContentHeight + "px";
	}
	$content.css(oCSS);

	//disable the horizontal scrolling when content inside can fit the container.
	if($scrollArea.outerWidth(true) <= $content.width()){
		$scrollArea.css("display", "block");
	}
	
	//set arrow offset
	if(sPlacement === sap.m.PlacementType.Left || sPlacement === sap.m.PlacementType.Right){
		iPosArrow = $parent.offset().top - $this.offset().top - iPopoverBorderTop + iOffsetY + 0.5 * ($parent.outerHeight(false) - $arrow.outerHeight(false));
		iPosArrow = Math.max(iPosArrow, this._arrowOffsetThreshold);
		iPosArrow = Math.min(iPosArrow, iHeight - this._arrowOffsetThreshold - $arrow.outerHeight());
		$arrow.css("top", iPosArrow);
	}else if(sPlacement === sap.m.PlacementType.Top || sPlacement === sap.m.PlacementType.Bottom){
		if(bRtl){
			iPosArrow =  $this.offset().left + $this.outerWidth(false) - ($parent.offset().left + $parent.outerWidth(false)) + iPopoverBorderRight + iOffsetX + 0.5 * ($parent.outerWidth(false) - $arrow.outerWidth(false));
			iPosArrow = Math.max(iPosArrow, this._arrowOffsetThreshold);
			iPosArrow = Math.min(iPosArrow, iWidth - this._arrowOffsetThreshold - $arrow.outerWidth());
			$arrow.css("right", iPosArrow);
		} else {
			iPosArrow = $parent.offset().left - $this.offset().left - iPopoverBorderLeft + iOffsetX + 0.5 * ($parent.outerWidth(false) - $arrow.outerWidth(false));
			iPosArrow = Math.max(iPosArrow, this._arrowOffsetThreshold);
			iPosArrow = Math.min(iPosArrow, iWidth - this._arrowOffsetThreshold - $arrow.outerWidth());
			$arrow.css("left", iPosArrow);
		}
	}
	
	//set arrow style
	switch(sPlacement){
		case sap.m.PlacementType.Left:
			$arrow.addClass("sapMPopoverArrRight");
			break;
			
		case sap.m.PlacementType.Right:
			$arrow.addClass("sapMPopoverArrLeft");
			break;
			
		case sap.m.PlacementType.Top:
			$arrow.addClass("sapMPopoverArrDown");
			break;
			
		case sap.m.PlacementType.Bottom:
			$arrow.addClass("sapMPopoverArrUp");
			break;
	}

	//cross header or cross footer detection
	oArrowPos = $arrow.position();
	oFooterPos = $footer.position();
	if(sPlacement === sap.m.PlacementType.Left || sPlacement === sap.m.PlacementType.Right){
		if((oArrowPos.top + iArrowHeight) < (iHeaderHeight + iSubHeaderHeight)){
			$arrow.addClass("sapMPopoverHeaderAlignArr");
		}else if( (oArrowPos.top < (iHeaderHeight + iSubHeaderHeight)) || ($footer.length && ((oArrowPos.top + iArrowHeight) > oFooterPos.top) && (oArrowPos.top < oFooterPos.top)) ){
			$arrow.addClass("sapMPopoverCrossArr");
		}else if($footer.length && (oArrowPos.top > oFooterPos.top) ){
			$arrow.addClass("sapMPopoverFooterAlignArr");
		}
	}
	
	$this.css("overflow", "visible");
};

/**
 * Determine if the {oDomNode} is inside the popover or inside the control that opens the popover
 * @private
 */
sap.m.Popover.prototype._isPopupElement = function(oDOMNode) {
	var oParentDomRef = (this._oOpenBy instanceof sap.ui.core.Element) ? this._oOpenBy.getDomRef() : this._oOpenBy;
	return !!(jQuery(oDOMNode).closest(sap.ui.getCore().getStaticAreaRef()).length) || !!(jQuery(oDOMNode).closest(oParentDomRef).length);
};

/**
 * If customHeader is set, this will return the customHeaer. Otherwise it creates a header and put the
 * title and buttons if needed inside, and finally return this newly create header.
 * @private
 */
sap.m.Popover.prototype._getAnyHeader = function(){
	if(this.getCustomHeader()){
		return this.getCustomHeader().addStyleClass("sapMHeader-CTX", true);
	}else{
		if(this.getShowHeader()){
			this._createInternalHeader();
			return this._internalHeader.addStyleClass("sapMHeader-CTX", true);
		}
	}
};

sap.m.Popover.prototype._createInternalHeader = function(){
	if(!this._internalHeader){
		var that = this;
		this._internalHeader = new sap.m.Bar(this.getId() + "-intHeader");
		this.setAggregation("_internalHeader", this._internalHeader);
		this._internalHeader.addEventDelegate({
			onAfterRendering: function(){
				that._restoreFocus();
			}
		});
		return true;
	}else{
		return false;
	}
};

sap.m.Popover.prototype._openAnimation = function($Ref, iRealDuration, fnOpened){
	var that = this;
	if(sap.m.Popover._bIE9 || (sap.ui.Device.os.android && sap.ui.Device.os.version < 2.4)){
		//no animation in ie9 transition not supported
		//no animation in android 2.3.x, because it looks laggy.
		fnOpened();
	}else{
		var bOpenedCalled = false, 
			fnTransitionEnd = function(){
				if(bOpenedCalled || !that.oPopup || that.oPopup.getOpenState() !== sap.ui.core.OpenState.OPENING){
					return;
				}
				$Ref.unbind("webkitTransitionEnd transitionend");
				fnOpened();
				bOpenedCalled = true;
			};
		setTimeout(function(){
			$Ref.addClass("sapMPopoverTransparent");
			$Ref.css("display", "block");
			// has to be done in a timeout to ensure transition properties are set
			setTimeout(function(){
				$Ref.bind("webkitTransitionEnd transitionend", fnTransitionEnd);
				$Ref.removeClass("sapMPopoverTransparent");
				//check if the transitionend event isn't fired, if it's not fired due to unexpected rerendering,
				//fnOpened should be called again.
				setTimeout(function(){
					fnTransitionEnd();
				}, 300);
			}, sap.ui.Device.browser.firefox ? 50 : 0);
		}, 0);
	}
};

sap.m.Popover.prototype._closeAnimation = function($Ref, iRealDuration, fnClose){
	var that = this;
	if(sap.m.Popover._bIE9 || (sap.ui.Device.os.android && sap.ui.Device.os.version < 2.4)){
		//no animation in android 2.3.x, because it looks laggy.
		fnClose();
	}else{
		var bClosedCalled = false,
			fnTransitionEnd = function(){
				if(bClosedCalled){
					return;
				}
				$Ref.unbind("webkitTransitionEnd transitionend");
				setTimeout(function(){
					fnClose();
					bClosedCalled = true;
					$Ref.removeClass("sapMPopoverTransparent");
				}, 0);
			};
		// has to be done in a timeout to ensure transition properties are set
		$Ref.bind("webkitTransitionEnd transitionend", fnTransitionEnd).addClass("sapMPopoverTransparent");
		//check if the transitionend event isn't fired, if it's not fired due to unexpected rerendering,
		//fnClose should be called again.
		setTimeout(function(){
			fnTransitionEnd();
		}, 300);
	}
};

sap.m.Popover.prototype._getInitialFocusId = function(){
	var oBeginButton = this.getBeginButton(),
		oEndButton = this.getEndButton();
	
	// Left or Right button can be visible false and therefore not rendered.
	// In such a case, focus should be set somewhere else.
	return this.getInitialFocus() 
			|| (oBeginButton && oBeginButton.getVisible() && oBeginButton.getId())
			|| (oEndButton && oEndButton.getVisible() && oEndButton.getId())
			|| this.getId();
};

sap.m.Popover.prototype._restoreFocus = function(){
	if(this.isOpen()){
		//restore the focus after rendering when popover is already open
		var sFocusId = this._getInitialFocusId();
		jQuery.sap.focus(jQuery.sap.domById(sFocusId));
	}
};

sap.m.Popover.prototype._oFollowOfDelegate = {
	onBeforeRendering: function(){
		this.setFollowOf(false);
	},
	onAfterRendering: function(){
		this.setFollowOf(true);
	}
};

sap.m.Popover.prototype._registerContentResizeHandler = function(){
	if(!this._sResizeListenerId){
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef("scroll"),  this._fnOrientationChange);
	}
};

sap.m.Popover.prototype._deregisterContentResizeHandler = function(){
	if(this._sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

sap.m.Popover.prototype._storeScrollPosition = function(){
	if(!sap.ui.Device.system.desktop){
		return;
	}
	
	var $content = this.$("cont");
	if($content.length > 0){
		this._oScrollPosDesktop = {x: $content.scrollLeft(), y: $content.scrollTop()};
	}
};

sap.m.Popover.prototype._restoreScrollPosition = function(){
	if(!sap.ui.Device.system.desktop || !this._oScrollPosDesktop){
		return;
	}
	
	var $content = this.$("cont");
	
	if($content.length > 0){
		$content.scrollLeft(this._oScrollPosDesktop.x).
		scrollTop(this._oScrollPosDesktop.y);
	
		this._oScrollPosDesktop = null;
	}
};

sap.m.Popover.prototype._addFollowOfDelegate = function(){
	if(sap.ui.Device.system.desktop && (this._oOpenBy instanceof sap.ui.core.Element)){
		this._oOpenBy.addEventDelegate(this._oFollowOfDelegate, this);
	}
};

sap.m.Popover.prototype._removeFollowOfDelegate = function(){
	if(sap.ui.Device.system.desktop && (this._oOpenBy instanceof sap.ui.core.Element)){
		this._oOpenBy.removeEventDelegate(this._oFollowOfDelegate);
	}
};

/**
 * Getter for property <code>bounce</code>.
 *
 * Default value is empty
 *
 * @return {boolean} the value of property <code>bounce</code>
 * @private
 * @name sap.m.Popover#getBounce
 * @function
 */

/* =========================================================== */
/*                      end: internal methods                  */
/* =========================================================== */


/* ==================================================== */
/*                      begin: Setters                  */
/* ==================================================== */
/**
 * Set the placement of the popover.
 * @public
 *
 */
sap.m.Popover.prototype.setPlacement = function(sPlacement){
	this.setProperty("placement", sPlacement, true);
	var iPlacePos = jQuery.inArray(sPlacement, this._placements);
	if (iPlacePos <= 3) {
		// this variable is internal used for the placement of the popover
		this._oCalcedPos = sPlacement;
	}
	return this;
};

/**
 * The setter of the title property. If you want to show a header in the popover, don't forget to
 * set the {showHeader} to true.
 * @public
 */
sap.m.Popover.prototype.setTitle = function(sTitle){
	if(sTitle){
		this.setProperty("title", sTitle, true);
		if(this._headerTitle){
			this._headerTitle.setText(sTitle);
		}else{
			this._headerTitle = new sap.m.Label(this.getId() + "-title", {
				text: this.getTitle()
			});
			
			this._createInternalHeader();
			
			if(sap.ui.Device.os.ios || sap.m.Popover._bOneDesign){
				this._internalHeader.addContentMiddle(this._headerTitle);
			}else{
				this._internalHeader.addContentLeft(this._headerTitle);
			}
		}
	}
	
	return this;
};

sap.m.Popover.prototype.setBeginButton = function(oButton){
	var oOldBeginButton = this.getBeginButton();

	if(oOldBeginButton === oButton){
		return this;
	}
	
	this._createInternalHeader();
	
	//this is used in the getAggregation method
	this._beginButton = oButton;
	
	if(oButton){
		if(sap.m.Popover._bOneDesign){
			oButton.setType(sap.m.ButtonType.Transparent);
		}
		if(sap.ui.Device.os.ios || sap.m.Popover._bOneDesign){
			if(oOldBeginButton){
				this._internalHeader.removeAggregation("contentLeft", oOldBeginButton, true);
			}
			this._internalHeader.addAggregation("contentLeft", oButton, true);
		}else{
			if(oOldBeginButton){
				this._internalHeader.removeAggregation("contentRight", oOldBeginButton, true);
			}
			this._internalHeader.insertAggregation("contentRight", oButton, 0, true);
		}
		this._internalHeader.invalidate();
	}else{
		if(sap.ui.Device.os.ios || sap.m.Popover._bOneDesign){
			this._internalHeader.removeContentLeft(oOldBeginButton);
		}else{
			this._internalHeader.removeContentRight(oOldBeginButton);
		}
	}
	
	return this;
};

sap.m.Popover.prototype.setEndButton = function(oButton){
	var oOldEndButton = this.getEndButton();

	if(oOldEndButton === oButton){
		return this;
	}
	
	this._createInternalHeader();
	
	//this is used in the getAggregation method
	this._endButton = oButton;

	if(oButton){
		if(sap.m.Popover._bOneDesign){
			oButton.setType(sap.m.ButtonType.Transparent);
		}
		if(oOldEndButton){
			this._internalHeader.removeAggregation("contentRight", oOldEndButton, true);
		}
		this._internalHeader.insertAggregation("contentRight", oButton, 1, true);
		this._internalHeader.invalidate();
	}else{
		this._internalHeader.removeContentRight(oOldEndButton);
	}
	
	return this;
};

sap.m.Popover.prototype.setLeftButton = function(vButton){
	if(!(vButton instanceof sap.m.Button)){
		vButton = sap.ui.getCore().byId(vButton);
	}
	
	//setting leftButton also sets the beginButton
	this.setBeginButton(vButton);
	return this.setAssociation("leftButton", vButton);
};

sap.m.Popover.prototype.setRightButton = function(vButton){
	if(!(vButton instanceof sap.m.Button)){
		vButton = sap.ui.getCore().byId(vButton);
	}
	
	//setting rightButton also sets the endButton
	this.setEndButton(vButton);
	return this.setAssociation("rightButton", vButton);
};

sap.m.Popover.prototype.setShowHeader = function(bValue){
	if(bValue === this.getShowHeader() || this.getCustomHeader()){
		return this;
	}
	
	if(bValue){
		//when internal header is created, show header
		//if not, the header will be created when setting title, beginButton, or endButton
		//the latest time of the header creation before it's rendered is in the renderer, calling get any header.
		if(this._internalHeader){
			this._internalHeader.$().show();
		}
	}else{
		if(this._internalHeader){
			this._internalHeader.$().hide();
		}
	}
	
	//skip the rerendering
	this.setProperty("showHeader", bValue, true);
	
	return this;
};

/**
 * Setter for property <code>modal</code>.
 * This overwrites the default setter of the property <code>modal</code> to avoid rerendering the whole popover control.
 *
 * Default value is <code>false</code>
 *
 * @param {boolean} bModal  new value for property <code>modal</code>.
 * @param {string} [sModalCSSClass] a CSS class (or space-separated list of classes) that should be added to the block layer.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining.
 * @public
 * @name sap.m.Popover#setModal
 * @function
 */
sap.m.Popover.prototype.setModal = function(bModal, sModalCSSClass) {
	if (bModal === this.getModal()) {
		return this;
	}

	this.oPopup.setModal(bModal, jQuery.trim("sapMPopoverBLayer " + sModalCSSClass || ""));

	// suppress re-rendering
	this.setProperty("modal", bModal, true);

	return this;
};

sap.m.Popover.prototype.setOffsetX = function(iValue){
	var ePopupState = this.oPopup.getOpenState(),
		oLastPosition, iPlacePos;
	
	this.setProperty("offsetX", iValue, true);
	
	//if popup isn't open, just return
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return this;
	}
	
	//popup is open
	oLastPosition = this.oPopup._oLastPosition;
	iPlacePos = jQuery.inArray(this.getPlacement(), this._placements);	
	
	if(iPlacePos > -1){
		oLastPosition.offset = this._calcOffset(this._offsets[iPlacePos]);
		this.oPopup._applyPosition(oLastPosition);
	}
	
	return this;
};

sap.m.Popover.prototype.setOffsetY = function(iValue){
	var ePopupState = this.oPopup.getOpenState(),
		oLastPosition, iPlacePos;
	
	this.setProperty("offsetY", iValue, true);
	
	//if popup isn't open, just return
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return this;
	}
	
	//popup is open
	oLastPosition = this.oPopup._oLastPosition;
	iPlacePos = jQuery.inArray(this.getPlacement(), this._placements);
	
	if(iPlacePos > -1){
		oLastPosition.offset = this._calcOffset(this._offsets[iPlacePos]);
		this.oPopup._applyPosition(oLastPosition);
	}
	
	return this;
};

sap.m.Popover.prototype.setEnableScrolling = function(bValue) {
	//map deprecated property to new properties
	this.setHorizontalScrolling(bValue);
	this.setVerticalScrolling(bValue);

	var oldValue = this.getEnableScrolling();
	if(oldValue === bValue){
		return;
	}

	this.setProperty("enableScrolling", bValue, true);

	return this;
};

sap.m.Popover.prototype.setVerticalScrolling = function(bValue) {
	var oldValue = this.getVerticalScrolling();
	if(oldValue === bValue) {
		return;
	}

	this.$().toggleClass("sapMPopoverVerScrollDisabled", !bValue);
	this.setProperty("verticalScrolling", bValue, true);

	if(this._oScroller) {
		this._oScroller.setVertical(bValue);
	}

	return this;

};

sap.m.Popover.prototype.setHorizontalScrolling = function(bValue) {
	var oldValue = this.getHorizontalScrolling();
	if(oldValue === bValue){
		return;
	}

	this.$().toggleClass("sapMPopoverHorScrollDisabled", !bValue);
	this.setProperty("horizontalScrolling", bValue, true);

	if(this._oScroller) {
		this._oScroller.setHorizontal(bValue);
	}

	return this;
};


/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 *
 * @private
 */
sap.m.Popover.prototype.getScrollDelegate = function(){
	return this._oScroller;
};

/* ==================================================== */
/*                      end: Setters                  */
/* ==================================================== */


// beginButton and endButton are managed inside the internal header therefore the following three functions need to be overwritten.
// beginButton and endButton are singular aggregation, overwritting those three functions are enough.
sap.m.Popover.prototype.setAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
	if(sAggregationName === "beginButton" || sAggregationName === "endButton"){
		var sFunctionName = "set" + sAggregationName.charAt(0).toUpperCase() + sAggregationName.slice(1);
		return this[sFunctionName](oObject);
	}else{
		return sap.ui.core.Control.prototype.setAggregation.apply(this, arguments);
	}
};

sap.m.Popover.prototype.getAggregation = function(sAggregationName, oDefaultForCreation){
	if(sAggregationName === "beginButton" || sAggregationName === "endButton"){
		var sButton = this["_"+sAggregationName];
		return sButton || oDefaultForCreation || null;
	}else{
		return sap.ui.core.Control.prototype.getAggregation.apply(this, arguments);
	}
};

sap.m.Popover.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate){
	if(sAggregationName === "beginButton" || sAggregationName === "endButton"){
		var sButton = this["_"+sAggregationName];
		if(sButton){
			sButton.destroy();
			this["_"+sAggregationName] = null;
		}
		return this;
	}else{
		return sap.ui.core.Control.prototype.destroyAggregation.apply(this, arguments);
	}
};

sap.m.Popover.prototype.invalidate = function(oOrigin){
	if(this.isOpen()){
		//when popover is invalidated while is open, the content of popover is rendered manually in order to keep
		//the autoclose function of non modal popver still working.
		sap.m.PopoverRenderer.rerenderContentOnly(this);
	}
};

sap.m.Popover.prototype.addAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
	if(sAggregationName === "content"){
		this._bContentChanged = true;
	}
	sap.ui.core.Control.prototype.addAggregation.apply(this, arguments);
};

}; // end of sap/m/Popover.js
if ( !jQuery.sap.isDeclared('sap.m.ProgressIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ProgressIndicator.
jQuery.sap.declare("sap.m.ProgressIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ProgressIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getDisplayValue displayValue} : string (default: '0%')</li>
 * <li>{@link #getPercentValue percentValue} : float (default: 0)</li>
 * <li>{@link #getShowValue showValue} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '2.5rem')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.
 * Additionally, a user defined string can be displayed on the ProgressIndicator.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.13.1
 * @name sap.m.ProgressIndicator
 */
sap.ui.core.Control.extend("sap.m.ProgressIndicator", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"state" : {type : "sap.ui.core.ValueState", group : "Appearance", defaultValue : sap.ui.core.ValueState.None},
		"displayValue" : {type : "string", group : "Appearance", defaultValue : '0%'},
		"percentValue" : {type : "float", group : "Data", defaultValue : 0},
		"showValue" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '2.5rem'}
	}
}});


/**
 * Creates a new subclass of class sap.m.ProgressIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ProgressIndicator.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ProgressIndicator#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ProgressIndicator#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.ProgressIndicator#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ProgressIndicator#setEnabled
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * The state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * @name sap.m.ProgressIndicator#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oState  new value for property <code>state</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ProgressIndicator#setState
 * @function
 */


/**
 * Getter for property <code>displayValue</code>.
 * The text value to be displayed in the bar.
 *
 * Default value is <code>0%</code>
 *
 * @return {string} the value of property <code>displayValue</code>
 * @public
 * @name sap.m.ProgressIndicator#getDisplayValue
 * @function
 */

/**
 * Setter for property <code>displayValue</code>.
 *
 * Default value is <code>0%</code> 
 *
 * @param {string} sDisplayValue  new value for property <code>displayValue</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ProgressIndicator#setDisplayValue
 * @function
 */


/**
 * Getter for property <code>percentValue</code>.
 * The numerical value for the displayed length of the progress bar.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>percentValue</code>
 * @public
 * @name sap.m.ProgressIndicator#getPercentValue
 * @function
 */

/**
 * Setter for property <code>percentValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fPercentValue  new value for property <code>percentValue</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ProgressIndicator#setPercentValue
 * @function
 */


/**
 * Getter for property <code>showValue</code>.
 * Specifies whether the current value shall be rendered inside the bar.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showValue</code>
 * @public
 * @name sap.m.ProgressIndicator#getShowValue
 * @function
 */

/**
 * Setter for property <code>showValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowValue  new value for property <code>showValue</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ProgressIndicator#setShowValue
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the control.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.ProgressIndicator#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ProgressIndicator#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the control.
 * Suggested size for normal use 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) 1.375rem (22px).
 *
 * Default value is <code>2.5rem</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @since 1.15.0
 * @name sap.m.ProgressIndicator#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>2.5rem</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @since 1.15.0
 * @name sap.m.ProgressIndicator#setHeight
 * @function
 */


// Start of sap\m\ProgressIndicator.js
///**
// * This file defines behavior for the control,
// */
//sap.m.ProgressIndicator.prototype.init = function(){
//   // do something for initialization...
//};

sap.m.ProgressIndicator.prototype.onAfterRendering = function() {
	var lineHeightText = this.$().height();
	this.$("textRight").css("line-height", lineHeightText + "px");
	this.$("textLeft").css("line-height", lineHeightText + "px");
}

sap.m.ProgressIndicator.prototype.setPercentValue = function(fPercentValue) {

	var that = this;

	// validation of fPercentValue
	if (typeof (fPercentValue) == "number") {
		if (!((fPercentValue >= 0) && (fPercentValue <= 100))) {
			jQuery.sap.log.error(this + ": percentValue (" + fPercentValue + ") is not correct! It has to be between 0-100.");
			return this;
		}
	}

	if (that.getPercentValue() != fPercentValue) {
		// animation without rerendering
		this.$().addClass("sapMPIAnimate");
		var time = Math.abs(that.getPercentValue() - fPercentValue) * 20;
		this.setProperty("percentValue", fPercentValue, true);
		var $Bar = this.$("bar");
		$Bar.animate({
			width : fPercentValue + "%"
		}, time, "linear", function() {
			that._setText.apply(that);
			that.$().removeClass("sapMPIAnimate");
		});
	}

	return this;
};

sap.m.ProgressIndicator.prototype._setText = function() {

	this.$().toggleClass("sapMPIValueGreaterHalf", this.getPercentValue() > 50);

	return this;
};

sap.m.ProgressIndicator.prototype.setDisplayValue = function(sDisplayValue) {

	// change of value without rerendering
	this.setProperty("displayValue", sDisplayValue, true);
	var $textLeft = this.$("textLeft");
	var $textRight = this.$("textRight");
	$textLeft.text(sDisplayValue);
	$textRight.text(sDisplayValue);

	return this;
};
}; // end of sap/m/ProgressIndicator.js
if ( !jQuery.sap.isDeclared('sap.m.PullToRefresh') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.PullToRefresh.
jQuery.sap.declare("sap.m.PullToRefresh");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new PullToRefresh.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: false)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.PullToRefresh#event:refresh refresh} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling.
 * On touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event.
 * In non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh" event when clicked.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.9.2
 * @name sap.m.PullToRefresh
 */
sap.ui.core.Control.extend("sap.m.PullToRefresh", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"hide"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"showIcon" : {type : "boolean", group : "Appearance", defaultValue : false},
		"customIcon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"iconDensityAware" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	events : {
		"refresh" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.PullToRefresh with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.PullToRefresh.extend
 * @function
 */

sap.m.PullToRefresh.M_EVENTS = {'refresh':'refresh'};


/**
 * Getter for property <code>visible</code>.
 * Set to false to remove PullToRefresh from the scroll container.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @since 1.16.0
 * @name sap.m.PullToRefresh#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.0
 * @name sap.m.PullToRefresh#setVisible
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * Optional description. May be used to inform a user, for example, when the list has been updated last time.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.m.PullToRefresh#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#setDescription
 * @function
 */


/**
 * Getter for property <code>showIcon</code>.
 * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showIcon</code>
 * @public
 * @name sap.m.PullToRefresh#getShowIcon
 * @function
 */

/**
 * Setter for property <code>showIcon</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowIcon  new value for property <code>showIcon</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#setShowIcon
 * @function
 */


/**
 * Getter for property <code>customIcon</code>.
 * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * @name sap.m.PullToRefresh#getCustomIcon
 * @function
 */

/**
 * Setter for property <code>customIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#setCustomIcon
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.PullToRefresh#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#setIconDensityAware
 * @function
 */


/**
 * Event indicates that the user has requested new data 
 *
 * @name sap.m.PullToRefresh#refresh
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.PullToRefresh</code>.<br/> itself. 
 *  
 * Event indicates that the user has requested new data 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PullToRefresh</code>.<br/> itself.
 *
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#attachRefresh
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#detachRefresh
 * @function
 */

/**
 * Fire event refresh to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.PullToRefresh#fireRefresh
 * @function
 */


/**
 * Hides the control and resets it to the normal state. In non-touch environments the control is not hidden.
 *
 * @name sap.m.PullToRefresh.prototype.hide
 * @function

 * @type void
 * @public
 */


// Start of sap\m\PullToRefresh.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.m.PullToRefresh.prototype.init = function(){
	this._bTouchMode = sap.ui.Device.support.touch || jQuery.sap.simulateMobileOnDesktop; // FIXME: plus fakeOS mode
	this._bPltfDpndnt = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true"; 
	
	this._iState = 0; // 0 - normal; 1 - release to refresh; 2 - loading
	this.oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m"); // texts
	
};

sap.m.PullToRefresh.prototype._loadBI = function(){
	// lazy create a Busy indicator to avoid overhead when invisible at start
	if(this.getVisible() && !this._oBusyIndicator){
		jQuery.sap.require("sap.m.BusyIndicator");
		this._oBusyIndicator = new sap.m.BusyIndicator({
			size: this._bTouchMode ? "2em" : "1.7em", 
			design: this._bPltfDpndnt? "light" : "auto" 
		});
		this._oBusyIndicator.setParent(this);
	}
};

sap.m.PullToRefresh.prototype.onBeforeRendering = function(){
	// Check Busy indicator at later point to avoid overhead when initially invisible
	this._loadBI();

	if (this._bTouchMode) {
		jQuery(window).off("resize.sapMP2R", this.calculateTopTrigger);
		var oParent = this.getParent();
		this._oScroller = oParent && oParent.getScrollDelegate? oParent.getScrollDelegate() : null;

		if (this._oScroller) {
			this._oScroller.setBounce(true);
			this._oScroller.setPullDown(this.getVisible() ? this : null);
		}
	}
};

sap.m.PullToRefresh.prototype.calculateTopTrigger = function(){
	this._iTopTrigger = 1;
	// find the scroll container that embeds the PullToRefresh control
	if(this._oDomRef && this._oDomRef.parentNode && this._oDomRef.parentNode.parentNode &&
			this._oDomRef.parentNode.parentNode.offsetHeight < this._oDomRef.offsetHeight * 1.5){
		// if there is no place to pull to show the image, pull only until the top line of text
		this._iTopTrigger = this.getDomRef("T").offsetTop;
	}
};

sap.m.PullToRefresh.prototype.onAfterRendering = function(){

	this._oDomRef = this.getDomRef();
	
	if (this._bTouchMode) {
		if(this._oScroller){
			this._oScroller.refresh();
		}
		if(this.getVisible() && this._oScroller && this._oScroller._bIScroll){
			// recalculate top pull offset by resize
			jQuery(window).on("resize.sapMP2R", jQuery.proxy(this.calculateTopTrigger, this));
			this.calculateTopTrigger();
		}
	}
};

sap.m.PullToRefresh.prototype.exit = function(){
	if (this._bTouchMode  && this._oScroller && this._oScroller._bIScroll) {
		jQuery(window).off("resize.sapMP2R", this.calculateTopTrigger);
	}
	if(this._oScroller) {
		this._oScroller.setPullDown(null);
		this._oScroller = null;
	}
	if(this._oCustomImage){
		this._oCustomImage.destroy();
		this._oCustomImage = null;
	}
	if(this._oBusyIndicator){
		this._oBusyIndicator.destroy();
		this._oBusyIndicator = null;
	}
};

// ScrollEnablement callback functions
sap.m.PullToRefresh.prototype.doScrollMove = function(){
	//callback for iScroll
	if(!this._oScroller){ return; }
	
	var domRef = this._oDomRef;

	var _scroller = this._oScroller._scroller;
	if(_scroller.y > -this._iTopTrigger && this._iState < 1 ){
		this.setState(1);
		_scroller.minScrollY = 0;
	} else if (_scroller.y < -this._iTopTrigger && this._iState == 1){
		this.setState(0);
		_scroller.minScrollY = -domRef.offsetHeight;
	}
};

sap.m.PullToRefresh.prototype.doPull = function(posY){
	// callback native scrolling, pull
	if(this._bTouchMode && this._iState < 2){
		// switch pull down state: rotate its arrow
		this.setState(posY >= - 1 ? 1: 0);
	}
};

sap.m.PullToRefresh.prototype.doRefresh = function(){
	this.setState(0);
};

sap.m.PullToRefresh.prototype.doScrollEnd = function(){
	if(this._iState == 1){ // if released when ready - load
		this.setState(2);
		this.fireRefresh();
	}
};

/*
* Set display state: 0 - pull to refresh, 1 - release to refresh, 2 - loading
* @private
*/
sap.m.PullToRefresh.prototype.setState = function(iState){

	if(this._iState == iState) return;
	
	this._iState = iState;
	
	if(!this._oDomRef) return;

	var $this = this.$();
	var $text = $this.find(".sapMPullDownText");
	switch(iState){
		case 0:
			$this.toggleClass("sapMFlip", false).toggleClass("sapMLoading", false);
			$text.html(this.oRb.getText(this._bTouchMode ? "PULL2REFRESH_PULLDOWN" : "PULL2REFRESH_REFRESH"));
			$this.find(".sapMPullDownInfo").html(this.getDescription());
			break;
		case 1:
			$this.toggleClass("sapMFlip", true);
			$text.html(this.oRb.getText("PULL2REFRESH_RELEASE"));
			break;
		case 2:
			$this.toggleClass("sapMFlip", false).toggleClass("sapMLoading", true);
			this._oBusyIndicator.setVisible(true);
			$text.html(this.oRb.getText("PULL2REFRESH_LOADING"));
			$this.find(".sapMPullDownInfo").html(this._bTouchMode ? this.oRb.getText("PULL2REFRESH_LOADING_LONG") : "");
			break;
	}
};

/*
* Override re-rendering for description
* @private
*/
sap.m.PullToRefresh.prototype.setDescription = function(sDescription){
	if(this._oDomRef){
		this.$().find(".sapMPullDownInfo").html(jQuery.sap.encodeHTML(sDescription));
	}
	return this.setProperty("description", sDescription, true);
};

/*
* Return a private custom icon image control for internal rendering
* @private
*/
sap.m.PullToRefresh.prototype.getCustomIconImage = function(){
	var mProperties = {
		src : this.getCustomIcon(),
		densityAware : this.getIconDensityAware()
	};
	var aCssClasses = ['sapMPullDownCIImg'];
	
	this._oCustomImage = sap.m.ImageHelper.getImageControl(null, this._oCustomImage, this, mProperties, aCssClasses);
	
	return this._oCustomImage;
};


// mouse version (non-touch)
sap.m.PullToRefresh.prototype.onclick = function() {
	if (!this._bTouchMode) {
		this.setState(2);
		this.fireRefresh();
	}
};

/**
 * Handle the key down event for F5, if focused.
 *
 * @param {jQuery.Event} event - the keyboard event.
 * @private
 */
sap.m.PullToRefresh.prototype.onkeydown = function(event) {
	if( event.which == jQuery.sap.KeyCodes.F5){
		this.onclick();
		// do not refresh browser window
		event.stopPropagation();
		event.preventDefault();
	}
};

// API implementation
sap.m.PullToRefresh.prototype.hide = function(){
	this.setState(0);
	if (this._oScroller){
		this._oScroller.refresh();
	}
};

/*
* Override visibility setter
* @private
*/
sap.m.PullToRefresh.prototype.setVisible = function(bVisible){
	if(this.getVisible() == bVisible) return this;
	
	if(this._oDomRef && this._oScroller && this._oScroller._oControl){
		this._oScroller._oControl.invalidate();
	}
	return this.setProperty("visible", bVisible);
};

}; // end of sap/m/PullToRefresh.js
if ( !jQuery.sap.isDeclared('sap.m.RadioButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.RadioButton.
jQuery.sap.declare("sap.m.RadioButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new RadioButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getGroupName groupName} : string (default: 'sapMRbDefaultGroup')</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.RadioButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Generally, you would create at least two radio button controls which should have the same GroupName;
 * by this, you provide a limited choice for the user. Triggers an Event when User makes a change.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.RadioButton
 */
sap.ui.core.Control.extend("sap.m.RadioButton", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setActiveState"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"selected" : {type : "boolean", group : "Data", defaultValue : false},
		"groupName" : {type : "string", group : "Behavior", defaultValue : 'sapMRbDefaultGroup'},
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"activeHandling" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.RadioButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.RadioButton.extend
 * @function
 */

sap.m.RadioButton.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>visible</code>.
 * Invisible radio buttons are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.RadioButton#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Disabled controls are displayed in another color.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.RadioButton#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setEnabled
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * Specifies the select state of the radio button
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.m.RadioButton#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setSelected
 * @function
 */


/**
 * Getter for property <code>groupName</code>.
 * Name of the radio button group the current radio button belongs to. You can define a new name for the group.
 * If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.
 *
 * Default value is <code>'sapMRbDefaultGroup'</code>
 *
 * @return {string} the value of property <code>groupName</code>
 * @public
 * @name sap.m.RadioButton#getGroupName
 * @function
 */

/**
 * Setter for property <code>groupName</code>.
 *
 * Default value is <code>'sapMRbDefaultGroup'</code> 
 *
 * @param {string} sGroupName  new value for property <code>groupName</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setGroupName
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the RadioButton
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.RadioButton#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setText
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.RadioButton#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setTextDirection
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of Label
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.RadioButton#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setWidth
 * @function
 */


/**
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switch
 * ed off, there will not be visual changes on active state. Default value is 'true'
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * @name sap.m.RadioButton#getActiveHandling
 * @function
 */

/**
 * Setter for property <code>activeHandling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bActiveHandling  new value for property <code>activeHandling</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setActiveHandling
 * @function
 */


/**
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it). 
 *
 * @name sap.m.RadioButton#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.selected Checks whether the RadioButton is active or not.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.RadioButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.RadioButton</code>.<br/> itself. 
 *  
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it). 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RadioButton</code>.<br/> itself.
 *
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.RadioButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selected' of type <code>boolean</code> Checks whether the RadioButton is active or not.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.RadioButton#fireSelect
 * @function
 */


/**
 * Method to set a RadioButton's state to active or inactive.
 *
 * @name sap.m.RadioButton.prototype.setActiveState
 * @function
 * @param {boolean} 
 *         bActive
 *         boolean to set the active state to true or false

 * @type void
 * @public
 */


// Start of sap\m\RadioButton.js
/**
 * This file defines behavior for the control,
 */

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.call(sap.m.RadioButton.prototype);

sap.m.RadioButton.prototype.getFocusDomRef = function() {
	return this.getDomRef("out");
};

/**
 * Function is called when radiobutton is tapped.
 *
 * @private
 */
sap.m.RadioButton.prototype.ontap = function() {
	if (!this.getEnabled()) {
		return;
	}

	this.$("Button").focus();

	if (this.getSelected()) {
		return;
	}

	this.setSelected(true);

	var that = this;
	setTimeout(function() {
		that.fireSelect({selected:true});
	}, 0);
};

/**
 * Function is called when radiobutton is being touched. Only necessary for Android/Black-Berry.
 *
 * @private
 */
sap.m.RadioButton.prototype.ontouchstart = function(oEvent) {
	//for control who need to know if they should handle events from the CheckBox control
	oEvent.originalEvent._sapui_handledByControl = true;
	if(this.getEnabled() && this.getActiveHandling()) {
		this.$().toggleClass('sapMRbBTouched', true);
	}
};

sap.m.RadioButton.prototype.ontouchend = function(oEvent) {
	this.$().toggleClass('sapMRbBTouched', false);
};


// #############################################################################
// Keyboard Handling Events
// #############################################################################
/**
* Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
* @public
*/
sap.m.RadioButton.prototype.onsapselect = function(oEvent) {
	this.ontap(oEvent);
};


// #############################################################################
// Overwritten methods that are also generated in RadioButton.API.js
// #############################################################################

/*
 * Overwrite the definition from RadioButton.API.js
 */
sap.m.RadioButton.prototype.setSelected = function(bSelected) {

	var bSelectedOld = this.getSelected();

	this.setProperty("selected", bSelected, true); // No re-rendering

	if (bSelected) { // If this radio button is selected, explicitly deselect the other radio buttons of the same group
		if (this.getGroupName() && (this.getGroupName() !== "")) { // Do it only if groupName is set
			// TODO: Add control references to some static list when they are constructed, in order to avoid searching every time
			var others = document.querySelectorAll("input[name='"+ this.getGroupName() +"'][type='radio']")
			for (var i = 0; i < others.length; i++) {
				var other = others[i];
				// Recommendation is that the HTML radio button has an ID ending with "-RB"
				if (other.id && (other.id.length > 3) && (other.id.substr(other.id.length-3) === "-RB")) {
					// The SAPUI5 control is known by an ID without the "-RB" suffix
					var oControl = sap.ui.getCore().getElementById(other.id.substr(0, other.id.length-3));
					if (oControl instanceof sap.m.RadioButton && (oControl !== this)) {
						if(oControl.getSelected()){
							oControl.fireSelect({selected:false});
						}
						oControl.setSelected(false);
					}
				}
			}
		}
	}
	if ((bSelectedOld !== bSelected) && this.getDomRef()){

			this.$().toggleClass('sapMRbSel', bSelected).attr('aria-checked', bSelected);
	if(bSelected){
		this.getDomRef("RB").checked = true;
		this.getDomRef("RB").setAttribute('checked', 'checked');
	}else{
		this.getDomRef("RB").checked = false;
		this.getDomRef("RB").removeAttribute('checked');
	}
	}

	return this;
};

sap.m.RadioButton.prototype.setText = function(sText){
	this.setProperty("text", sText, true);
	if(this._oLabel){
		this._oLabel.setText(this.getText());
	}else{
		this._createLabel("text", this.getText());
	}
	return this;
};

sap.m.RadioButton.prototype.setWidth = function(sWidth){
	this.setProperty("width", sWidth, true);
	if(this._oLabel){
		this._oLabel.setWidth(this.getWidth());
	}else{
		this._createLabel("width", this.getWidth());
	}
	return this;
};

sap.m.RadioButton.prototype.setTextDirection = function(sDirection){
	this.setProperty("textDirection", sDirection, true);
	if(this._oLabel){
		this._oLabel.setTextDirection(this.getTextDirection());
	}else{
		this._createLabel("textDirection", this.getTextDirection());
	}
	return this;
};

sap.m.RadioButton.prototype.exit = function() {
	delete this._iTabIndex;
	if(this._oLabel){
		this._oLabel.destroy();
	}
};

sap.m.RadioButton.prototype._createLabel = function(prop, value){
	this._oLabel = new sap.m.Label(this.getId() + "-label", {
					}).addStyleClass("sapMRbBLabel").setParent(this, null, true);
	this._oLabel.setProperty(prop, value, false);
};

/*
 * Sets the tab index of the control
 *
 * @param {int} iTabIndex  greater than or equal -1
 * @return {sap.m.RadioButton}
 * @since 1.16
 * @protected
 */
sap.m.RadioButton.prototype.setTabIndex = function(iTabIndex) {
	this._iTabIndex = iTabIndex;
	this.$().find(".sapMRbB").attr("tabindex", iTabIndex);
	return this;
};

sap.m.RadioButton.prototype.getFocusDomRef = function (oFocusInfo) {
	//set the focus on the radio button wrapper
	return this.getDomRef("Button");
};

sap.m.RadioButton.prototype.applyFocusInfo = function () {
	//set the focus on the radio button wrapper
	this.$("Button").focus();
};

}; // end of sap/m/RadioButton.js
if ( !jQuery.sap.isDeclared('sap.m.RatingIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.RatingIndicator.
jQuery.sap.declare("sap.m.RatingIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new RatingIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getMaxValue maxValue} : int (default: 5)</li>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * <li>{@link #getIconSize iconSize} : sap.ui.core.CSSSize (default: '1.375rem')</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>
 * <li>{@link #getIconUnselected iconUnselected} : sap.ui.core.URI</li>
 * <li>{@link #getIconHovered iconHovered} : sap.ui.core.URI</li>
 * <li>{@link #getVisualMode visualMode} : sap.m.RatingIndicatorVisualMode (default: sap.m.RatingIndicatorVisualMode.Half)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.RatingIndicator#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.RatingIndicator#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Is used to rate content. The amount of rating symbols can be specified, as well as the URIs to the
 * image icons which shall be used as rating symbols. When the user performs a rating, an event is fired.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.14
 * @name sap.m.RatingIndicator
 */
sap.ui.core.Control.extend("sap.m.RatingIndicator", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"maxValue" : {type : "int", group : "Behavior", defaultValue : 5},
		"value" : {type : "float", group : "Behavior", defaultValue : 0, bindable : "bindable"},
		"iconSize" : {type : "sap.ui.core.CSSSize", group : "Behavior", defaultValue : '1.375rem'},
		"iconSelected" : {type : "sap.ui.core.URI", group : "Behavior", defaultValue : null},
		"iconUnselected" : {type : "sap.ui.core.URI", group : "Behavior", defaultValue : null},
		"iconHovered" : {type : "sap.ui.core.URI", group : "Behavior", defaultValue : null},
		"visualMode" : {type : "sap.m.RatingIndicatorVisualMode", group : "Behavior", defaultValue : sap.m.RatingIndicatorVisualMode.Half}
	},
	aggregations : {
    	"_iconsSelected" : {type : "sap.ui.core.Control", multiple : true, singularName : "_iconsSelected", visibility : "hidden"}, 
    	"_iconsUnselected" : {type : "sap.ui.core.Control", multiple : true, singularName : "_iconsUnselected", visibility : "hidden"}, 
    	"_iconsHovered" : {type : "sap.ui.core.Control", multiple : true, singularName : "_iconsHovered", visibility : "hidden"}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.RatingIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.RatingIndicator.extend
 * @function
 */

sap.m.RatingIndicator.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>visible</code>.
 * If set to invisible, the control is not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.RatingIndicator#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.RatingIndicator#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#setEnabled
 * @function
 */


/**
 * Getter for property <code>maxValue</code>.
 * The number of displayed rating symbols
 *
 * Default value is <code>5</code>
 *
 * @return {int} the value of property <code>maxValue</code>
 * @public
 * @name sap.m.RatingIndicator#getMaxValue
 * @function
 */

/**
 * Setter for property <code>maxValue</code>.
 *
 * Default value is <code>5</code> 
 *
 * @param {int} iMaxValue  new value for property <code>maxValue</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#setMaxValue
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The indicated value of the rating
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * @name sap.m.RatingIndicator#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#setValue
 * @function
 */


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#bindValue
 * @function
 */

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#unbindValue
 * @function
 */


/**
 * Getter for property <code>iconSize</code>.
 * The Size of the image or icon to be displayed. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations.
 *
 * Default value is <code>1.375rem</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>iconSize</code>
 * @public
 * @name sap.m.RatingIndicator#getIconSize
 * @function
 */

/**
 * Setter for property <code>iconSize</code>.
 *
 * Default value is <code>1.375rem</code> 
 *
 * @param {sap.ui.core.CSSSize} sIconSize  new value for property <code>iconSize</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#setIconSize
 * @function
 */


/**
 * Getter for property <code>iconSelected</code>.
 * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSelected</code>
 * @public
 * @name sap.m.RatingIndicator#getIconSelected
 * @function
 */

/**
 * Setter for property <code>iconSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSelected  new value for property <code>iconSelected</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#setIconSelected
 * @function
 */


/**
 * Getter for property <code>iconUnselected</code>.
 * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconUnselected</code>
 * @public
 * @name sap.m.RatingIndicator#getIconUnselected
 * @function
 */

/**
 * Setter for property <code>iconUnselected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconUnselected  new value for property <code>iconUnselected</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#setIconUnselected
 * @function
 */


/**
 * Getter for property <code>iconHovered</code>.
 * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconHovered</code>
 * @public
 * @name sap.m.RatingIndicator#getIconHovered
 * @function
 */

/**
 * Setter for property <code>iconHovered</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconHovered  new value for property <code>iconHovered</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#setIconHovered
 * @function
 */


/**
 * Getter for property <code>visualMode</code>.
 * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
 *
 * Default value is <code>Half</code>
 *
 * @return {sap.m.RatingIndicatorVisualMode} the value of property <code>visualMode</code>
 * @public
 * @name sap.m.RatingIndicator#getVisualMode
 * @function
 */

/**
 * Setter for property <code>visualMode</code>.
 *
 * Default value is <code>Half</code> 
 *
 * @param {sap.m.RatingIndicatorVisualMode} oVisualMode  new value for property <code>visualMode</code>
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#setVisualMode
 * @function
 */


/**
 * The event is fired when the user has done a rating. 
 *
 * @name sap.m.RatingIndicator#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.value The rated value
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.RatingIndicator</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.RatingIndicator</code>.<br/> itself. 
 *  
 * The event is fired when the user has done a rating. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code>.<br/> itself.
 *
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.RatingIndicator</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>int</code> The rated value</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.RatingIndicator#fireChange
 * @function
 */


/**
 * This event is triggered during the dragging period, each time the rating value changes. 
 *
 * @name sap.m.RatingIndicator#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {float} oControlEvent.getParameters.value The current value of the rating after a live change event.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.RatingIndicator</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.RatingIndicator</code>.<br/> itself. 
 *  
 * This event is triggered during the dragging period, each time the rating value changes. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code>.<br/> itself.
 *
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.RatingIndicator</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RatingIndicator#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> The current value of the rating after a live change event.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RatingIndicator} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.RatingIndicator#fireLiveChange
 * @function
 */


// Start of sap\m\RatingIndicator.js
///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/* =========================================================== */
/*           temporary flags for jslint syntax check           */
/* =========================================================== */
/*jslint nomen: false */

/* =========================================================== */
/*           begin: API methods                                */
/* =========================================================== */

/**
 * Initializes the control.
 *
 * @private
 */
sap.m.RatingIndicator.prototype.init = function () {

	// deactivate text selection on drag events
	this.allowTextSelection(false);
	this._iIconCounter = 0;
	this._fHoverValue = 0;
	
	if (sap.m.RatingIndicator._pxCalculations === undefined) {
		sap.m.RatingIndicator._pxCalculations = [];
	}
};

/**
 * Sets the rating value. The method is automatically checking whether the value is in the valid range of 0-{maxValue} and if it is a valid number.
 *
 * @param {float} fValue The rating value to be set.
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setValue = function (fValue) {

	// do not set negative values (will be returned by calculation function if there is an error)
	if (fValue < 0) {
		return this;
	}

	// check for valid numbers
	if (isNaN(fValue)) {
		jQuery.sap.log.warning('Ignored new rating value "' + fValue + '" because it is NAN');

	// check if the number is in the range 0-maxValue (only if control is rendered)
	// if control is not rendered it is handled by onBeforeRendering()
	} else if (this.$().length && (fValue > this.getMaxValue())) {
		jQuery.sap.log.warning('Ignored new rating value "' + fValue + '" because it is out  of range (0-' + this.getMaxValue() + ')');
	} else {
		fValue = this._roundValueToVisualMode(fValue);
		this.setProperty("value", fValue, true);

		// always set hover value to current value to allow keyboard / mouse / touch navigation
		this._fHoverValue = fValue;

		// if control is already rendered reflect the changes in the UI as well
		if (this.$().length) {
			this._updateUI(fValue);
		}
	}
	return this;
};

/**
 * Sets the icon size value. The method is automatically updating the UI components if the control has been rendered before.
 *
 * @param {float} sIconSize
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setIconSize = function (sIconSize) {

	// if control is already rendered we calculate the new pixel values for the icon size once
	if (this.$().length) {
		this._iPxIconSize = this._toPx(sIconSize) || 16;
	}

	// then update the property and rerender since updating all widths would be too complex here
	this.setProperty("iconSize", sIconSize, false);
	return this;
};

/**
 * Sets the selected icon without rerendering the control.
 *
 * @param {sap.ui.core.URI} sURI
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setIconSelected = function (sURI) {
	var oItems = this.getAggregation("_iconsSelected"),
		i = 0;

	if (oItems) {
		for (; i < oItems.length; i++) {
			oItems[i].setSrc(sURI);
		}
	}

	this.setProperty("iconSelected", sURI, true);
	return this;
};

/**
 * Sets the unselected icon without rerendering the control.
 *
 * @param {sap.ui.core.URI} sURI
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setIconUnselected = function (sURI) {
	var oItems = this.getAggregation("_iconsUnselected"),
		i = 0;

	if (oItems) {
		for (; i < oItems.length; i++) {
			oItems[i].setSrc(sURI);
		}
	}

	this.setProperty("iconUnselected", sURI, true);
	return this;
};

/**
 * Sets the hovered icon without rerendering the control.
 *
 * @param {sap.ui.core.URI} sURI
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @overwrite
 * @public
 */
sap.m.RatingIndicator.prototype.setIconHovered = function (sURI) {
	var oItems = this.getAggregation("_iconsHovered"),
		i = 0;

	if (oItems) {
		for (; i < oItems.length; i++) {
			oItems[i].setSrc(sURI);
		}
	}

	this.setProperty("iconHovered", sURI, true);
	return this;
};

/**
 * Called before rendering starts by the renderer to readjust values outside the range.
 *
 * @private
 */
sap.m.RatingIndicator.prototype.onBeforeRendering = function () {
	var fVal = this.getValue(),
		iMVal = this.getMaxValue();

	if (fVal > iMVal) {
		this.setValue(iMVal);
		jQuery.sap.log.warning("Set value to maxValue because value is > maxValue (" + fVal + " > " + iMVal + ").");
	} else if (fVal < 0) {
		this.setValue(0);
		jQuery.sap.log.warning("Set value to 0 because value is < 0 (" + fVal + " < 0).");
	}

	this._iPxIconSize = this._toPx(this.getIconSize()) || 16;
	this._iPxPaddingSize = this._toPx(sap.ui.core.theming.Parameters.get("sapUiRIIconPadding")) || 4;
};

/**
 * Destroys the control.
 *
 * @private
 */
sap.m.RatingIndicator.prototype.exit = function () {
	delete this._iIconCounter;
	delete this._fStartValue;
	delete this._iPxIconSize;
	delete this._iPxPaddingSize;
	delete this._fHoverValue;
};

/* =========================================================== */
/*           end: API methods                                  */
/* =========================================================== */

/* =========================================================== */
/*           begin: internal methods and properties            */
/* =========================================================== */

sap.m.RatingIndicator.prototype._toPx = function (cssSize) {
	var  scopeVal = sap.m.RatingIndicator._pxCalculations[cssSize],
		scopeTest;

	if (scopeVal === undefined) {
		scopeTest = jQuery('<div style="display: none; width: ' + cssSize + '; margin: 0; padding:0; height: auto; line-height: 1; font-size: 1; border:0; overflow: hidden">&nbsp;</div>').appendTo(sap.ui.getCore().getStaticAreaRef());
		scopeVal = scopeTest.width();
		scopeTest.remove();
	}

	sap.m.RatingIndicator._pxCalculations[cssSize] = Math.round(scopeVal);
	return sap.m.RatingIndicator._pxCalculations[cssSize];
};

/**
 * Updates the controls's interface to reflect a value change of the rating.
 *
 * @param {float} fValue the rating value to be set
 * @param {boolean} bHover if this parameter is set to true, the hover mode is activated and the value is displayed with {iconHovered} instead of {iconSelected}
 * @private
 */
sap.m.RatingIndicator.prototype._updateUI = function (fValue, bHover) {

	// save a reference on all needed DOM elements
	var $SelectedDiv = this.$("sel"),
		$UnselectedContainerDiv = this.$("unsel-wrapper"),
		$HoveredDiv = this.$("hov"),

		// calculate padding, size, and measurement
		fIconSize = this._iPxIconSize,
		fIconPadding = this._iPxPaddingSize,
		sIconSizeMeasure = "px",
		iSymbolCount = this.getMaxValue(),

		// calculate the width for the selected elements and the complete width
		iSelectedWidth = fValue * fIconSize + (Math.round(fValue) - 1) * fIconPadding,

		iWidth = iSymbolCount * (fIconSize + fIconPadding) - fIconPadding;

	// always set hover value to current value to allow keyboard / mouse / touch navigation
	this._fHoverValue = fValue;

	if (iSelectedWidth < 0) {	// width should not be negative
		iSelectedWidth = 0;
	}

	// adjust unselected container with the remaining width
	$UnselectedContainerDiv.width((iWidth - iSelectedWidth) + sIconSizeMeasure);

	// update the DOM elements to reflect the value by setting the width of the div elements
	if (bHover) { // hide selected div & adjust hover div
		$HoveredDiv.width(iSelectedWidth + sIconSizeMeasure);
		$SelectedDiv.hide();
		$HoveredDiv.show();
	} else { // hide hovered div & adjust selected div
		$SelectedDiv.width(iSelectedWidth + sIconSizeMeasure);
		$HoveredDiv.hide();
		$SelectedDiv.show();
	}

	jQuery.sap.log.debug("Updated rating UI with value " + fValue + " and hover mode " + bHover);
};

/**
 * Load the icons/images of the rating for the different rating states.
 *
 * @param {int} iState The icon to be returned (0 = {iconSelected},  1 = {iconUnseleced}, 2 = {iconHovered}
 * @returns {object} either an sap.m.Image or an sap.m.Icon depending on the URI of the control parameters
 * @private
 */
sap.m.RatingIndicator.prototype._getIcon = function (iState) {

	// single initialization
	var oImage = null,
		sURI = null;

	// preset the variables based on the state requested
	switch (iState) {
	case 1: // unselected
		sURI = this.getIconUnselected() || sap.ui.core.IconPool.getIconURI("favorite");
		break;
	case 2: // Hovered
		sURI = this.getIconHovered() || sap.ui.core.IconPool.getIconURI("favorite");
		break;
	case 0: // Selected
		sURI = this.getIconSelected() || sap.ui.core.IconPool.getIconURI("favorite");
		break;
	}

	if (sURI) {
		oImage = sap.ui.core.IconPool.createControlByURI({
			id: this.getId() + "__icon" + this._iIconCounter++,
			src: sURI
		}, sap.m.Image);

		// store the icons in the corresponding internal aggregation
		switch (iState) {
		case 1: // unselected
			this.addAggregation("_iconsUnselected", oImage, true);
			break;
		case 2: // Hovered
			this.addAggregation("_iconsHovered", oImage, true);
			break;
		case 0: // Selected
			this.addAggregation("_iconsSelected", oImage, true);
			break;
		}
	}

	return oImage;
};

/**
 * Calculated the selected value based on the event position of the tap/move/click event.
 * This function is called by the event handlers to determine the {value} of the rating.
 *
 * @param {jQuery.Event} oEvent The event object passed to the event handler.
 * @returns {float} The rounded rating value based on {visualMode}.
 * @private
 */
sap.m.RatingIndicator.prototype._calculateSelectedValue = function (oEvent) {
	var selectedValue = -1.0,
		percentageWidth = 0.0,
		oControlRoot = this.$(),
		fControlPadding = (oControlRoot.innerWidth() - oControlRoot.width()) / 2,
		oEventPosition,
		bRtl = sap.ui.getCore().getConfiguration().getRTL();

	if (oEvent.targetTouches) {
		oEventPosition = oEvent.targetTouches[0];
	} else {
		oEventPosition = oEvent;
	}

	// get the event position for tap/touch/click events
	if (!oEventPosition || !oEventPosition.pageX) { // desktop fallback
		oEventPosition = oEvent;
		if ((!oEventPosition || !oEventPosition.pageX) && oEvent.changedTouches) { // touchend fallback
			oEventPosition = oEvent.changedTouches[0];
		}
	}

	// if an event position is not present we stop
	if (!oEventPosition.pageX) { // TODO: find out why this happens
		return parseFloat(selectedValue);
	}

	// check if event is happening inside of the control area (minus padding of the control)
	if (oEventPosition.pageX < oControlRoot.offset().left) {
		selectedValue = 0;
	} else if ((oEventPosition.pageX - oControlRoot.offset().left) >  oControlRoot.innerWidth() - fControlPadding) {
		selectedValue = this.getMaxValue();
	} else {

		// calculate the selected value based on the percentage value of the event position
		percentageWidth = (oEventPosition.pageX - oControlRoot.offset().left - fControlPadding) / oControlRoot.width();
		selectedValue = percentageWidth * this.getMaxValue();
	}

	// rtl support
	if (bRtl) {
		selectedValue = this.getMaxValue() - selectedValue;
	}
	
	// return rounded value based on the control's visual mode
	return this._roundValueToVisualMode(selectedValue, true);
};

/**
 * Rounds the float value according to the parameter {visualMode}:
 * - A value of "Full" will result in integer values.
 * - A value of "Half" will result in float values rounded to 0.5.
 *
 * @param {float} fValue The rating value.
 * @returns {float} The rounded rating value.
 * @private
 */
sap.m.RatingIndicator.prototype._roundValueToVisualMode = function (fValue, bInputMode) {
	if (bInputMode) { // we only support full selection of stars
		if (fValue < 0.25) { // to be able to also select 0 stars
			fValue = 0;
		} else if (fValue < this.getMaxValue() - 0.25) { // to optimize selection behaviour
			fValue += 0.25;
		}
		fValue = Math.round(fValue); 
	} else { // for display we round to the correct behavior
		if (this.getVisualMode() === sap.m.RatingIndicatorVisualMode.Full) {
			fValue = Math.round(fValue);
		} else if (this.getVisualMode() === sap.m.RatingIndicatorVisualMode.Half) {
			fValue = Math.round(fValue * 2) / 2;
		}
	}

	return parseFloat(fValue);
};

/* =========================================================== */
/*           end: internal methods                             */
/* =========================================================== */

/* =========================================================== */
/*           begin: event handlers                             */
/* =========================================================== */

/**
 * Handle the touch start event happening on the rating.
 * The UI will be updated accordingly to show a preview of the rating value without actually setting the value.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.RatingIndicator.prototype.ontouchstart = function (oEvent) {

	if (this.getEnabled()) {

		// mark the event for components that needs to know if the event was handled by this Control
		oEvent.setMarked();

		if (!this._touchEndProxy) {
			this._touchEndProxy = jQuery.proxy(this._ontouchend, this);
		}

		if (!this._touchMoveProxy) {
			this._touchMoveProxy = jQuery.proxy(this._ontouchmove, this);
		}

		// here also bound to the mouseup mousemove event to enable it working in
		// desktop browsers
		jQuery(document).on("touchend touchcancel mouseup", this._touchEndProxy);
		jQuery(document).on("touchmove mousemove", this._touchMoveProxy);

		this._fStartValue = this.getValue();
		var fValue = this._calculateSelectedValue(oEvent);

		if (fValue >= 0 && fValue <= this.getMaxValue()) {
			this._updateUI(fValue, true);
			if (this._fStartValue !== fValue) {	// if the value if not the same
				this.fireLiveChange({ value: fValue });
			}
		}
	}
};

/**
 * Handle the touch move event on the rating.
 * The UI will be updated accordingly to show a preview of the rating value without actually setting the value.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.RatingIndicator.prototype._ontouchmove = function (oEvent) {

	if (oEvent.isMarked("delayedMouseEvent")) {
		return;
	}

	// note: prevent native document scrolling
	oEvent.preventDefault();

	if (this.getEnabled()) {
		var fValue = this._calculateSelectedValue(oEvent);

		if (fValue >= 0 && fValue <= this.getMaxValue()) {
			this._updateUI(fValue, true);
			if (this._fStartValue !== fValue) {	// if the value if not the same
				this.fireLiveChange({value: fValue});
			}
		}
	}
};

/**
 * Handle the touch end event on the rating.
 * A change event will be fired when the touch ends, the value will be set, and the UI will be updated accordingly.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.RatingIndicator.prototype._ontouchend = function (oEvent) {

	if (oEvent.isMarked("delayedMouseEvent")) {
		return;
	}

	if (this.getEnabled()) {
		var fValue = this._calculateSelectedValue(oEvent);
		this.setProperty("value", fValue, true);
		this._updateUI(fValue, false);

		if (this._fStartValue !== fValue) {	// if the value if not the same
			this.fireLiveChange({ value: fValue });
			this.fireChange({ value: fValue });
		}

		jQuery(document).off("touchend touchcancel mouseup", this._touchEndProxy);
		jQuery(document).off("touchmove mousemove", this._touchMoveProxy);

		// remove unused properties
		delete this._fStartValue;
	}
};

/**
 * Handle the touch end event.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.RatingIndicator.prototype.ontouchcancel = sap.m.RatingIndicator.prototype.ontouchend;

/**
 * Keyboard navigation event when the user presses Arrow Right (Left in RTL case) or Arrow Up.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.RatingIndicator.prototype.onsapincrease = function (oEvent) {
	var fValue = this.getValue(),
		fOldValue = this.getValue(),
		iMaxValue = this.getMaxValue();

	if (!this.getEnabled()) {
		return false;
	}

	if (this.getVisualMode() === sap.m.RatingIndicatorVisualMode.Full) {
		fValue += 1;
	} else if (this.getVisualMode() === sap.m.RatingIndicatorVisualMode.Half) {
		fValue += 0.5;
	}

	if (fValue > iMaxValue) {
		fValue = iMaxValue;
	}

	this.setValue(fValue);

	if (fValue !== fOldValue) {
		this.fireLiveChange({ value: fValue });
		this.fireChange({ value: fValue });
	}

	// stop browsers default behavior
	if(oEvent) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Keyboard navigation event when the user presses Arrow Left (Right in RTL case) or Arrow Down.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.RatingIndicator.prototype.onsapdecrease = function (oEvent) {
	var fValue = this.getValue(),
		fOldValue = this.getValue();

	if (!this.getEnabled()) {
		return false;
	}

	if (this.getVisualMode() === sap.m.RatingIndicatorVisualMode.Full) {
		fValue -= 1;
	} else if (this.getVisualMode() === sap.m.RatingIndicatorVisualMode.Half) {
		fValue -= 0.5;
	}

	if (fValue < 0) {
		fValue = 0;
	}

	this.setValue(fValue);

	if (fValue !== fOldValue) {
		this.fireLiveChange({ value: fValue });
		this.fireChange({ value: fValue });
	}

	// stop browsers default behavior
	if(oEvent) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
* Keyboard navigation event when the user presses Home.
*
* @param {jQuery.Event} oEvent
* @private
*/
sap.m.RatingIndicator.prototype.onsaphome = function (oEvent) {
	var fValue =  0,
		fOldValue = this.getValue();

	if (!this.getEnabled()) {
		return false;
	}

	this.setValue(fValue);

	if (fValue !== fOldValue) {
		this.fireLiveChange({ value: fValue });
		this.fireChange({ value: fValue });
	}

	// stop browsers default behavior
	if(oEvent) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Keyboard navigation event when the user presses End.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.RatingIndicator.prototype.onsapend = function (oEvent) {
	var fValue =  this.getMaxValue(),
		fOldValue = this.getValue();

	if (!this.getEnabled()) {
		return false;
	}

	this.setValue(fValue);

	if (fValue !== fOldValue) {
		this.fireLiveChange({ value: fValue });
		this.fireChange({ value: fValue });
	}

	// stop browsers default behavior
	if(oEvent) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Keyboard navigation event when the user presses Enter or Space.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.RatingIndicator.prototype.onsapselect = function (oEvent) {
	var fValue = this.getValue(),
		iMaxValue = this.getMaxValue(),
		fOldValue = this.getValue();

	if (!this.getEnabled()) {
		return false;
	}

	if (fValue === iMaxValue) {
		fValue = 0; // start with 0 if we are at maximum
	} else if (this.getVisualMode() === sap.m.RatingIndicatorVisualMode.Full) {
		fValue += 1;
	} else if (this.getVisualMode() === sap.m.RatingIndicatorVisualMode.Half) {
		fValue += 0.5;
	}

	if (fValue > iMaxValue) {
		fValue = iMaxValue;
	}

	this.setValue(fValue);

	if (fValue !== fOldValue) {
		this.fireLiveChange({ value: fValue });
		this.fireChange({ value: fValue });
	}

	// stop browsers default behavior
	if(oEvent) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/* =========================================================== */
/*           end: event handlers                               */
/* =========================================================== */
}; // end of sap/m/RatingIndicator.js
if ( !jQuery.sap.isDeclared('sap.m.ResponsivePopover') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ResponsivePopover.
jQuery.sap.declare("sap.m.ResponsivePopover");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ResponsivePopover.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Right)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getModal modal} : boolean</li>
 * <li>{@link #getOffsetX offsetX} : int</li>
 * <li>{@link #getOffsetY offsetY} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean</li>
 * <li>{@link #getShowCloseButton showCloseButton} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.Bar</li>
 * <li>{@link #getBeginButton beginButton} : sap.m.Button</li>
 * <li>{@link #getEndButton endButton} : sap.m.Button</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ResponsivePopover#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ResponsivePopover#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ResponsivePopover#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ResponsivePopover#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control acts responsively to the type of device. It acts as a sap.m.Popover on desktop and tablet while acts as a sap.m.Dialog with stretch set to true on phone.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.15.1
 * @name sap.m.ResponsivePopover
 */
sap.ui.core.Control.extend("sap.m.ResponsivePopover", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"openBy", "close", "isOpen"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"placement" : {type : "sap.m.PlacementType", group : "Misc", defaultValue : sap.m.PlacementType.Right},
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"modal" : {type : "boolean", group : "Misc", defaultValue : null},
		"offsetX" : {type : "int", group : "Misc", defaultValue : null},
		"offsetY" : {type : "int", group : "Misc", defaultValue : null},
		"contentWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"contentHeight" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"horizontalScrolling" : {type : "boolean", group : "Misc", defaultValue : null},
		"verticalScrolling" : {type : "boolean", group : "Misc", defaultValue : null},
		"showCloseButton" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"customHeader" : {type : "sap.m.Bar", multiple : false}, 
    	"subHeader" : {type : "sap.m.Bar", multiple : false}, 
    	"beginButton" : {type : "sap.m.Button", multiple : false}, 
    	"endButton" : {type : "sap.m.Button", multiple : false}, 
    	"_popup" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	associations : {
		"initialFocus" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"beforeOpen" : {}, 
		"afterOpen" : {}, 
		"beforeClose" : {}, 
		"afterClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ResponsivePopover with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ResponsivePopover.extend
 * @function
 */

sap.m.ResponsivePopover.M_EVENTS = {'beforeOpen':'beforeOpen','afterOpen':'afterOpen','beforeClose':'beforeClose','afterClose':'afterClose'};


/**
 * Getter for property <code>placement</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#placement here}.
 *
 * Default value is <code>Right</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * @name sap.m.ResponsivePopover#getPlacement
 * @function
 */

/**
 * Setter for property <code>placement</code>.
 *
 * Default value is <code>Right</code> 
 *
 * @param {sap.m.PlacementType} oPlacement  new value for property <code>placement</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setPlacement
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#showHeader sap.m.Popover} and {@linkcode sap.m.Dialog#showHeader sap.m.Dialog}
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.m.ResponsivePopover#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setShowHeader
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#title sap.m.Popover} and {@linkcode sap.m.Dialog#title sap.m.Dialog}
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ResponsivePopover#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setTitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * This property only takes effect when runs on phone. Please see the documentation {@linkcode sap.m.Dialog#icon here}.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.ResponsivePopover#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setIcon
 * @function
 */


/**
 * Getter for property <code>modal</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#modal here}.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * @name sap.m.ResponsivePopover#getModal
 * @function
 */

/**
 * Setter for property <code>modal</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bModal  new value for property <code>modal</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setModal
 * @function
 */


/**
 * Getter for property <code>offsetX</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetX here}.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>offsetX</code>
 * @public
 * @name sap.m.ResponsivePopover#getOffsetX
 * @function
 */

/**
 * Setter for property <code>offsetX</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iOffsetX  new value for property <code>offsetX</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setOffsetX
 * @function
 */


/**
 * Getter for property <code>offsetY</code>.
 * This property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetY here}.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>offsetY</code>
 * @public
 * @name sap.m.ResponsivePopover#getOffsetY
 * @function
 */

/**
 * Setter for property <code>offsetY</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iOffsetY  new value for property <code>offsetY</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setOffsetY
 * @function
 */


/**
 * Getter for property <code>contentWidth</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentWidth sap.m.Popover} and {@linkcode sap.m.Dialog#contentWidth sap.m.Dialog}
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * @name sap.m.ResponsivePopover#getContentWidth
 * @function
 */

/**
 * Setter for property <code>contentWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentWidth  new value for property <code>contentWidth</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setContentWidth
 * @function
 */


/**
 * Getter for property <code>contentHeight</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentHeight sap.m.Popover} and {@linkcode sap.m.Dialog#contentHeight sap.m.Dialog}
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * @name sap.m.ResponsivePopover#getContentHeight
 * @function
 */

/**
 * Setter for property <code>contentHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentHeight  new value for property <code>contentHeight</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setContentHeight
 * @function
 */


/**
 * Getter for property <code>horizontalScrolling</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#horizontalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#horizontalScrolling sap.m.Dialog}
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>horizontalScrolling</code>
 * @public
 * @name sap.m.ResponsivePopover#getHorizontalScrolling
 * @function
 */

/**
 * Setter for property <code>horizontalScrolling</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setHorizontalScrolling
 * @function
 */


/**
 * Getter for property <code>verticalScrolling</code>.
 * This property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#verticalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#verticalScrolling sap.m.Dialog}
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>verticalScrolling</code>
 * @public
 * @name sap.m.ResponsivePopover#getVerticalScrolling
 * @function
 */

/**
 * Setter for property <code>verticalScrolling</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setVerticalScrolling
 * @function
 */


/**
 * Getter for property <code>showCloseButton</code>.
 * Whether a close button should be inserted to the dialog's header dynamically to close the dialog. This property only takes effect when runs on the phone.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCloseButton</code>
 * @public
 * @name sap.m.ResponsivePopover#getShowCloseButton
 * @function
 */

/**
 * Setter for property <code>showCloseButton</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCloseButton  new value for property <code>showCloseButton</code>
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setShowCloseButton
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#content sap.m.Popover} and {@linkcode sap.m.Dialog#content sap.m.Dialog}
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.ResponsivePopover#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.ResponsivePopover#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ResponsivePopover#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ResponsivePopover#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * CustomHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#customHeader sap.m.Popover} and {@linkcode sap.m.Dialog#customHeader sap.m.Dialog}
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.ResponsivePopover#getCustomHeader
 * @function
 */


/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param {sap.m.Bar} oCustomHeader
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setCustomHeader
 * @function
 */
	

/**
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#destroyCustomHeader
 * @function
 */


/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * SubHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#subHeader sap.m.Popover} and {@linkcode sap.m.Dialog#subHeader sap.m.Dialog}
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.ResponsivePopover#getSubHeader
 * @function
 */


/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param {sap.m.Bar} oSubHeader
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setSubHeader
 * @function
 */
	

/**
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#destroySubHeader
 * @function
 */


/**
 * Getter for aggregation <code>beginButton</code>.<br/>
 * BeginButton is supported by both variants. It is always show in the left part (right part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.
 * 
 * @return {sap.m.Button}
 * @public
 * @name sap.m.ResponsivePopover#getBeginButton
 * @function
 */


/**
 * Setter for the aggregated <code>beginButton</code>.
 * @param {sap.m.Button} oBeginButton
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setBeginButton
 * @function
 */
	

/**
 * Destroys the beginButton in the aggregation 
 * named <code>beginButton</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#destroyBeginButton
 * @function
 */


/**
 * Getter for aggregation <code>endButton</code>.<br/>
 * EndButton is supported by both variants. It is always show in the right part (left part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.
 * 
 * @return {sap.m.Button}
 * @public
 * @name sap.m.ResponsivePopover#getEndButton
 * @function
 */


/**
 * Setter for the aggregated <code>endButton</code>.
 * @param {sap.m.Button} oEndButton
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setEndButton
 * @function
 */
	

/**
 * Destroys the endButton in the aggregation 
 * named <code>endButton</code>.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#destroyEndButton
 * @function
 */


/**
 * InitialFocus is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#initialFocus sap.m.Popover} and {@linkcode sap.m.Dialog#initialFocus sap.m.Dialog}
 *
 * @return {string} Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * @public
 * @name sap.m.ResponsivePopover#getInitialFocus
 * @function
 */

/**
 * InitialFocus is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#initialFocus sap.m.Popover} and {@linkcode sap.m.Dialog#initialFocus sap.m.Dialog}
 *
 * @param {string | sap.ui.core.Control} vInitialFocus 
 *    Id of an element which becomes the new target of this <code>initialFocus</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#setInitialFocus
 * @function
 */


	
/**
 * Event is fired before popover or dialog is open. 
 *
 * @name sap.m.ResponsivePopover#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy 
						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
					
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. 
 *  
 * Event is fired before popover or dialog is open. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 *
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#attachBeforeOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#detachBeforeOpen
 * @function
 */

/**
 * Fire event beforeOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> 
						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
					</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ResponsivePopover#fireBeforeOpen
 * @function
 */


/**
 * Event is fired after popover or dialog is open. 
 *
 * @name sap.m.ResponsivePopover#afterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy 
						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
					
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. 
 *  
 * Event is fired after popover or dialog is open. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 *
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#attachAfterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#detachAfterOpen
 * @function
 */

/**
 * Fire event afterOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> 
						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
					</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ResponsivePopover#fireAfterOpen
 * @function
 */


/**
 * Event is fired before popover or dialog is closed. 
 *
 * @name sap.m.ResponsivePopover#beforeClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy 
						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
					
 * @param {sap.m.Button} oControlEvent.getParameters.origin 
						This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
					
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. 
 *  
 * Event is fired before popover or dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 *
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#attachBeforeClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#detachBeforeClose
 * @function
 */

/**
 * Fire event beforeClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> 
						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
					</li>
 * <li>'origin' of type <code>sap.m.Button</code> 
						This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
					</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ResponsivePopover#fireBeforeClose
 * @function
 */


/**
 * Event is fired after popover or dialog is closed. 
 *
 * @name sap.m.ResponsivePopover#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy 
						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
					
 * @param {sap.m.Button} oControlEvent.getParameters.origin 
						This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
					
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. 
 *  
 * Event is fired after popover or dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.
 *
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#attachAfterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ResponsivePopover#detachAfterClose
 * @function
 */

/**
 * Fire event afterClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> 
						This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
					</li>
 * <li>'origin' of type <code>sap.m.Button</code> 
						This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
					</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ResponsivePopover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ResponsivePopover#fireAfterClose
 * @function
 */


/**
 * Opens the ResponsivePopover. The ResponsivePopover is positioned relatively to the control parameter when runs on tablet or desktop and is full screen when runs on phone. Therefore the control parameter only has its usage when runs on tablet or desktop and is ignored when runs on phone.
 *
 * @name sap.m.ResponsivePopover.prototype.openBy
 * @function
 * @param {object} 
 *         oControl
 *         
 * When this control runs on tablet or desktop, the ResponsivePopover is positioned relatively to this control.
 * 

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Closes the ResponsivePopover.
 *
 * @name sap.m.ResponsivePopover.prototype.close
 * @function

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Checks whether the ResponsivePopover is currently open.
 *
 * @name sap.m.ResponsivePopover.prototype.isOpen
 * @function

 * @type sap.ui.core.Control
 * @public
 */


// Start of sap\m\ResponsivePopover.js
jQuery.sap.declare("sap.m.ResponsivePopover");
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained




sap.m.ResponsivePopover.prototype.init = function(){
	var that = this;
	
	this._bAppendedToUIArea = false;
	
	var settings = {
		beforeOpen: function(oEvent){
			that.fireBeforeOpen(oEvent);
		},
		afterOpen: function(oEvent){
			that.fireAfterOpen(oEvent);
		},
		beforeClose: function(oEvent){
			that.fireBeforeClose(oEvent);
		},
		afterClose: function(oEvent){
			that.fireAfterClose(oEvent);
		}
	};
	if(sap.ui.Device.system.phone){
		this._aNotSupportedProperties = ["placement", "modal", "offsetX", "offsetY", "showCloseButton"];
		settings.stretch = true;
		settings.type = sap.m.DialogType.Standard;
		this._oControl = new sap.m.Dialog(this.getId() + "-dialog", settings);
	}else{
		this._aNotSupportedProperties = ["icon", "showCloseButton"];
		this._oControl = new sap.m.Popover(this.getId()+ "-popover", settings);
	}

	this.setAggregation("_popup", this._oControl);

	this._oControl.addStyleClass("sapMResponsivePopover");
	
	this._oDelegate = {
		onBeforeRendering: function(){
			var bShowCloseButton = this.getShowCloseButton(),
				oNavContent, oHeader, oPage, oRealPage;
			
			if(!bShowCloseButton ||  !sap.ui.Device.system.phone || !this._bContentChanged){
				return;
			}
			
			this._bContentChanged = false;
			
			oHeader = this._oControl._getAnyHeader();
			if(oHeader){
				this._insertCloseButton(oHeader);
			}else{
				oNavContent = this._getSingleNavContent();
				if(!oNavContent){
					return;
				}
				//insert the close button to current page's header
				oPage = oNavContent.getCurrentPage();
				oRealPage = this._getRealPage(oPage);
				if(oRealPage && (oHeader = oRealPage._getAnyHeader())){
					this._insertCloseButton(oHeader);
				}
				
				//register to the navigation inside navcontainer to insert the closebutton to the page which is being navigated to
				oNavContent.attachEvent("navigate", this._fnOnNavigate , this);
			}
		}
	};
	
	this._oPageDelegate = {
		onAfterShow: function(){
			var oRealPage = that._getRealPage(this),
				oHeader;
			if(oRealPage && (oHeader = oRealPage._getAnyHeader())){
				that._insertCloseButton(oHeader);
			}
		}
	};
	
	this._fnOnNavigate = function(oEvent){
		var oPage = oEvent.getParameter("to");
		if(oPage){
			oPage.addEventDelegate(this._oPageDelegate, oPage);
		}
	};
	
	this._oControl.addEventDelegate(this._oDelegate, this);
	
	//overwrite the _removeChild to detach event listener and remove delegate when the navcontainer is removed from this responsive popover
	this._oControl._removeChild = function(oChild, sAggregationName, bSuppressInvalidate){
		var aPages, i;
		if((sAggregationName === "content") && (oChild instanceof sap.m.NavContainer)){
			aPages = oChild.getPages();
			for(i = 0 ; i < aPages.length ; i++){
				aPages[i].removeEventDelegate(that._oPageDelegate);
			}
			oChild.detachEvent("navigate", that._fnOnNavigate, that);
		}
		sap.ui.core.Control.prototype._removeChild.apply(this, arguments);
	};
};

sap.m.ResponsivePopover.prototype.openBy = function(oParent){
	if(!this._bAppendedToUIArea && !this.getParent()){
		var oStatic = sap.ui.getCore().getStaticAreaRef();
		oStatic = sap.ui.getCore().getUIArea(oStatic);
		oStatic.addContent(this, true);
		this._bAppendedToUIArea = true;
	}
	
	if(sap.ui.Device.system.phone){
		return this._oControl.open();
	}else{
		return this._oControl.openBy(oParent);
	}
};

sap.m.ResponsivePopover.prototype.exit = function(){
	if(this._oCloseButton){
		this._oCloseButton.destroy();
		this._oCloseButton = null;
	}
	
	if(this._oControl){
		this._oControl.removeEventDelegate(this._oDelegate);
		this._oControl.destroy();
		this._oControl = null;
	}
};

sap.m.ResponsivePopover.prototype._getCloseButton = function(){
	if(!this._oCloseButton){
		var that = this;
		this._oCloseButton = new sap.m.Button(this.getId() + "-closeButton", {
			icon: sap.ui.core.IconPool.getIconURI("decline"),
			press: function(){
				that._oControl._oCloseTrigger = this;
				that.close();
			}
		});
	}
	return this._oCloseButton;
};

sap.m.ResponsivePopover.prototype.addContent = function(oContent){
	this._bContentChanged = true;
	this.addAggregation("content", oContent);
};

sap.m.ResponsivePopover.prototype._getSingleNavContent = sap.m.Popover.prototype._getSingleNavContent;

sap.m.ResponsivePopover.prototype._getRealPage = function(oPage){
	var oReturn = oPage, aContent;
	
	while(oReturn){
		if(oReturn instanceof sap.m.Page){
			return oReturn;
		}
		if(oReturn instanceof sap.ui.core.mvc.View){
			aContent = oReturn.getContent();
			if(aContent.length === 1){
				oReturn = aContent[0];
				continue;
			}
		}
		oReturn = null;
	}
	return oReturn;
};

sap.m.ResponsivePopover.prototype._insertCloseButton = function(oHeader){
	var oCloseButton = this._getCloseButton(),
		iIndex;
	if(oHeader){
		iIndex = oHeader.getAggregation("contentRight", []).length;
		oHeader.insertAggregation("contentRight", oCloseButton, iIndex);
	}
};

sap.m.ResponsivePopover.prototype._firstLetterUpperCase = function(sValue){
	return sValue.charAt(0).toUpperCase() + sValue.slice(1);
};

sap.m.ResponsivePopover.prototype._lastIndexOfUpperCaseLetter = function(sValue){
	var i, sChar;
	for(i = sValue.length - 1 ; i >= 0; i--){
		sChar = sValue.charAt(i);
		if(sChar === sChar.toUpperCase()){
			return i;
		}
	}
	return -1;
};

sap.m.ResponsivePopover.prototype._oldSetProperty = sap.m.ResponsivePopover.prototype.setProperty;
sap.m.ResponsivePopover.prototype.setProperty = function(sPropertyName, oValue, bSuppressInvalidate){
	this._oldSetProperty(sPropertyName, oValue, true);
	if(jQuery.inArray(sPropertyName, this._aNotSupportedProperties) === -1){
		this._oControl["set" + this._firstLetterUpperCase(sPropertyName)](oValue);
	}
	return this;
};

sap.m.ResponsivePopover.prototype._oldSetModel = sap.m.ResponsivePopover.prototype.setModel;
sap.m.ResponsivePopover.prototype.setModel = function(oModel, sName){
	this._oControl.setModel(oModel, sName);
	return this._oldSetModel(oModel, sName);
};

sap.m.ResponsivePopover.prototype._createButtonFooter = function(){
	this._oFooter = this._oFooter || new sap.m.Bar(this.getId() + "-footer");
	return this._oFooter;
};

sap.m.ResponsivePopover.prototype._setButton = function(sPos, oButton){
	if(this._oControl instanceof sap.m.Popover){
		var sGetterName = "get" + this._firstLetterUpperCase(sPos) + "Button",
			oOldButton = this[sGetterName](),
			oFooter = this._createButtonFooter(),
			sPrivateName = "_o" + this._firstLetterUpperCase(sPos) + "Button",
			iIndex = (sPos.toLowerCase() === "begin" ? 0 : 1),
			sOtherGetterName = (sPos.toLowerCase() === "begin" ? "getEndButton" : "getBeginButton");
		
		if(oOldButton){
			oFooter.removeContentMiddle(oOldButton);
		}
		if(oButton){
			if(!oFooter.getParent()){
				this._oControl.setFooter(oFooter);
			}
			oFooter.insertAggregation("contentMiddle", oButton, iIndex)
		}else{
			var oOtherButton = this[sOtherGetterName]();
			if(!oOtherButton){
				oFooter.destroy();
				this._oFooter = null;
			}
		}
		
		this[sPrivateName] = oButton;
		return this;
	}else{
		var sAggregationName = sPos.toLowerCase() + "Button";
		return this.setAggregation(sAggregationName, oButton);
	}
};

sap.m.ResponsivePopover.prototype._getButton = function(sPos){
	if(this._oControl instanceof sap.m.Popover){
		var sPrivateName = "_o" + this._firstLetterUpperCase(sPos) + "Button";
		return this[sPrivateName];
	}else{
		var sGetterName = "get" + this._firstLetterUpperCase(sPos) + "Button";
		return this[sGetterName]();
	}
};

sap.m.ResponsivePopover.prototype.setBeginButton = function(oButton){
	return this._setButton("begin", oButton);
};

sap.m.ResponsivePopover.prototype.setEndButton = function(oButton){
	return this._setButton("end", oButton);
};

sap.m.ResponsivePopover.prototype.getBeginButton = function(){
	return this._getButton("begin");
};

sap.m.ResponsivePopover.prototype.getEndButton = function(){
	return this._getButton("end");
};

// forward all aggregation methods to the inner instance, either the popover or the dialog.
["bindAggregation", "validateAggregation", "setAggregation", "getAggregation", "indexOfAggregation", "insertAggregation", 
	"addAggregation", "removeAggregation", "removeAllAggregation", "destroyAggregation", "setAssociation", "getAssociation", 
	"addAssociation", "removeAssociation", "removeAllAssociation"].forEach(function(sName){
		sap.m.ResponsivePopover.prototype[sName] = function(){
			var iLastUpperCase = this._lastIndexOfUpperCaseLetter(sName),
				sMethodName, res;
			if(jQuery.type(arguments[0]) === "string"){
				if(iLastUpperCase !== -1){
					sMethodName = sName.substring(0, iLastUpperCase) + this._firstLetterUpperCase(arguments[0]);
					//_oControl can be already destroyed in exit method
					if(this._oControl && this._oControl[sMethodName]){
						res = this._oControl[sMethodName].apply(this._oControl, Array.prototype.slice.call(arguments, 1));
						return res === this._oControl ? this : res;
					}else{
						return sap.ui.core.Control.prototype[sName].apply(this, arguments);
					}
				}
			}
			res = this._oControl[sName].apply(this._oControl, arguments);
			return res === this._oControl ? this : res; 
		};
});

// forward the other necessary methods to the inner instance, but do not check the existence of generated methods like (addItem)
["invalidate", "close", "isOpen", "addStyleClass", "removeStyleClass", "toggleStyleClass", "hasStyleClass",
	"setBindingContext", "getBindingContext", "getBinding", "getBindingInfo", "getBindingPath"].forEach(function(sName){
		sap.m.ResponsivePopover.prototype[sName] = function(){
			var res = this._oControl[sName].apply(this._oControl ,arguments);
			return res === this._oControl ? this : res;
		};
});
}; // end of sap/m/ResponsivePopover.js
if ( !jQuery.sap.isDeclared('sap.m.ScrollContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ScrollContainer.
jQuery.sap.declare("sap.m.ScrollContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ScrollContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHorizontal horizontal} : boolean (default: true)</li>
 * <li>{@link #getVertical vertical} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.
 * 
 * Note that it is not recommended to have nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled). This is currently not considered a valid use-case of a good UI and the behavior will feel wrong.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.ScrollContainer
 */
sap.ui.core.Control.extend("sap.m.ScrollContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"scrollTo"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"horizontal" : {type : "boolean", group : "Behavior", defaultValue : true},
		"vertical" : {type : "boolean", group : "Behavior", defaultValue : false}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.m.ScrollContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ScrollContainer.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible scroll containers are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ScrollContainer#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the ScrollContainer.
 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.ScrollContainer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the ScrollContainer.
 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
 * 
 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.ScrollContainer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setHeight
 * @function
 */


/**
 * Getter for property <code>horizontal</code>.
 * Whether horizontal scrolling should be possible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>horizontal</code>
 * @public
 * @name sap.m.ScrollContainer#getHorizontal
 * @function
 */

/**
 * Setter for property <code>horizontal</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHorizontal  new value for property <code>horizontal</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setHorizontal
 * @function
 */


/**
 * Getter for property <code>vertical</code>.
 * Whether vertical scrolling should be possible.
 * 
 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>vertical</code>
 * @public
 * @name sap.m.ScrollContainer#getVertical
 * @function
 */

/**
 * Setter for property <code>vertical</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVertical  new value for property <code>vertical</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setVertical
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the ScrollContainer.
 * 
 * <strong>Note</strong>: this is the default aggregation for ScrollContainer.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.ScrollContainer#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.ScrollContainer#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ScrollContainer#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ScrollContainer#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#destroyContent
 * @function
 */


/**
 * Scrolls to the given position.
 * When called while the control is not rendered (yet), the scrolling position is still applied, but there is no animation.
 *
 * @name sap.m.ScrollContainer.prototype.scrollTo
 * @function
 * @param {int} 
 *         iX
 *         The horizontal pixel position to scroll to.
 * Scrolling to the right happens with positive values.
 * If only vertical scrolling is enabled, give 0 as value.
 * @param {int} 
 *         iY
 *         The vertical pixel position to scroll to.
 * Scrolling down happens with positive values.
 * If only horizontal scrolling is enabled, give 0 as value.
 * @param {int} 
 *         iTime
 *         The duration of animated scrolling.
 * To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.

 * @type sap.m.ScrollContainer
 * @public
 */


// Start of sap\m\ScrollContainer.js

/*
 * Better nested scrolling capabilities can be added to iScroll like this (in the _move method).
 * eDir is the direction into which scrolling is handled (if locked) and bOutside is true when we are outside the scolling boundary already; both
 * need to be initialized a couple of lines before this code.
 * 
 * 		e._handled = e._handled || {};
 *		if (e._handled[eDir]) { // current direction already handled
 *			return;
 *		}
 *		
 *		// add information about what this handler handles
 *		e._handled.x = e._handled.x || ((eDir == "x") && !bOutside);
 *		e._handled.y = e._handled.y || ((eDir == "y") && !bOutside);
 *		
 */

/*
 * TODO:
 * - events when scrolling is ongoing
 */


sap.m.ScrollContainer.prototype.init = function() {
	jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
	this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
		horizontal: true,
		vertical: false,
		zynga: false,
		preventDefault: false,
		nonTouchScrolling: "scrollbar"
	});
	// TODO: do the resize listening only when ScrollContainer becomes visible and unbind when getting visible
};

sap.m.ScrollContainer.prototype.onBeforeRendering = function() {
	// properties are not known during init
	this._oScroller.setHorizontal(this.getHorizontal());
	this._oScroller.setVertical(this.getVertical());
};


/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.ScrollContainer.prototype.exit = function() {
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}
};

/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 *
 * @private
 */
sap.m.ScrollContainer.prototype.getScrollDelegate = function() {
	return this._oScroller;
};

//*** API Methods ***

sap.m.ScrollContainer.prototype.scrollTo = function(x, y, time) {
	if (this._oScroller){
		if(this.getDomRef()) { // only if rendered
			this._oScroller.scrollTo(x, y, time);
		} else {
			this._oScroller._scrollX = x; // remember for later rendering
			this._oScroller._scrollY = y;
		}
	}
	return this;
};


sap.m.ScrollContainer.prototype.setHorizontal = function(horizontal) {
	this._oScroller.setHorizontal(horizontal);
	this.setProperty("horizontal", horizontal, true); // no rerendering
};

sap.m.ScrollContainer.prototype.setVertical = function(vertical) {
	this._oScroller.setVertical(vertical);
	this.setProperty("vertical", vertical, true); // no rerendering
};

}; // end of sap/m/ScrollContainer.js
if ( !jQuery.sap.isDeclared('sap.m.SearchField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SearchField.
jQuery.sap.declare("sap.m.SearchField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SearchField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getShowMagnifier showMagnifier} : boolean (default: true)</li>
 * <li>{@link #getShowRefreshButton showRefreshButton} : boolean (default: false)</li>
 * <li>{@link #getRefreshButtonTooltip refreshButtonTooltip} : string</li>
 * <li>{@link #getSelectOnFocus selectOnFocus} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SearchField#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SearchField#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to input a search string.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.SearchField
 */
sap.ui.core.Control.extend("sap.m.SearchField", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"value" : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"placeholder" : {type : "string", group : "Misc", defaultValue : null},
		"showMagnifier" : {type : "boolean", group : "Misc", defaultValue : true},
		"showRefreshButton" : {type : "boolean", group : "Behavior", defaultValue : false},
		"refreshButtonTooltip" : {type : "string", group : "Misc", defaultValue : null},
		"selectOnFocus" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	events : {
		"search" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SearchField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SearchField.extend
 * @function
 */

sap.m.SearchField.M_EVENTS = {'search':'search','liveChange':'liveChange'};


/**
 * Getter for property <code>value</code>.
 * Input Value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.SearchField#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setValue
 * @function
 */


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#bindValue
 * @function
 */

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#unbindValue
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.SearchField#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.SearchField#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible inputs are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.SearchField#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setVisible
 * @function
 */


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.m.SearchField#getMaxLength
 * @function
 */

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setMaxLength
 * @function
 */


/**
 * Getter for property <code>placeholder</code>.
 * Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * @name sap.m.SearchField#getPlaceholder
 * @function
 */

/**
 * Setter for property <code>placeholder</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPlaceholder  new value for property <code>placeholder</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setPlaceholder
 * @function
 */


/**
 * Getter for property <code>showMagnifier</code>.
 * Set to false to hide the magnifier icon. This property is deprecated since version 1.16.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showMagnifier</code>
 * @public
 * @name sap.m.SearchField#getShowMagnifier
 * @function
 */

/**
 * Setter for property <code>showMagnifier</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowMagnifier  new value for property <code>showMagnifier</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setShowMagnifier
 * @function
 */


/**
 * Getter for property <code>showRefreshButton</code>.
 * Set to true to display a "refresh" button. By pressing the refresh button, the user can reload the results list without changing the search string. This is a visual clue only: a normal search event is fired when a user presses on a refresh button.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showRefreshButton</code>
 * @public
 * @since 1.16
 * @name sap.m.SearchField#getShowRefreshButton
 * @function
 */

/**
 * Setter for property <code>showRefreshButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowRefreshButton  new value for property <code>showRefreshButton</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.SearchField#setShowRefreshButton
 * @function
 */


/**
 * Getter for property <code>refreshButtonTooltip</code>.
 * Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>refreshButtonTooltip</code>
 * @public
 * @since 1.16
 * @name sap.m.SearchField#getRefreshButtonTooltip
 * @function
 */

/**
 * Setter for property <code>refreshButtonTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sRefreshButtonTooltip  new value for property <code>refreshButtonTooltip</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.SearchField#setRefreshButtonTooltip
 * @function
 */


/**
 * Getter for property <code>selectOnFocus</code>.
 * Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField during the liveChange event, set this property to false to disable text selection by focus.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>selectOnFocus</code>
 * @public
 * @since 1.20
 * @name sap.m.SearchField#getSelectOnFocus
 * @function
 */

/**
 * Setter for property <code>selectOnFocus</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSelectOnFocus  new value for property <code>selectOnFocus</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.20
 * @name sap.m.SearchField#setSelectOnFocus
 * @function
 */


/**
 * Event which is fired when the user triggers a search. 
 *
 * @name sap.m.SearchField#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The search query string.
 * @param {boolean} oControlEvent.getParameters.refreshButtonPressed Indicates if the user pressed the refresh button.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.SearchField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SearchField</code>.<br/> itself. 
 *  
 * Event which is fired when the user triggers a search. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.
 *
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.SearchField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query string.</li>
 * <li>'refreshButtonPressed' of type <code>boolean</code> Indicates if the user pressed the refresh button.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SearchField#fireSearch
 * @function
 */


/**
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 *
 * @name sap.m.SearchField#liveChange
 * @event
 * @since 1.9.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue Current search string.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SearchField</code>.<br/> itself. 
 *  
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.
 *
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * @name sap.m.SearchField#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * @name sap.m.SearchField#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> Current search string.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @protected
 * @since 1.9.1
 * @name sap.m.SearchField#fireLiveChange
 * @function
 */


// Start of sap\m\SearchField.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.call(sap.m.SearchField.prototype);

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


// Do special table-based rendering in IE
sap.m.SearchField.prototype._bNoFlex = !!sap.ui.Device.browser.internet_explorer;

sap.m.SearchField.prototype.init = function() {

	// IE9 does not fire input event when characters are deleted in an input field, use keyup instead
	this._inputEvent = sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10 ? "keyup" : "input";

	// New design: right-aligned magnifying glass and refresh button
	if(sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== "true"){
		this._sDesign = "bluecrystal";
		this._sSearch = sap.ui.core.IconPool.getIconURI("search");
		this._sReload = sap.ui.core.IconPool.getIconURI("synchronize");
		this._oButton = new sap.m.Button(this.getId()+"-btn", {icon: this._sSearch, press: jQuery.proxy(this._onButtonPress, this) });
		this._oButton.setParent(this);
	}

	// Default placeholder: "Search"
	this.setProperty("placeholder", sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("FACETFILTER_SEARCH"),true);
	// TODO: suggestions and search provider
};

sap.m.SearchField.prototype.exit = function() {
	if (this._oButton) {
		this._oButton.destroy();
		this._oButton = null;
	}
};

sap.m.SearchField.prototype.getFocusDomRef = function() {
	return this._inputElement;
};

// returns correct the width that applied by design
sap.m.SearchField.prototype.getWidth = function() {
	return this.getProperty("width") || "100%";
};

sap.m.SearchField.prototype._hasPlacehoder = (function () {
	return "placeholder" in document.createElement("input");
}());

sap.m.SearchField.prototype.onBeforeRendering = function() {
	jQuery(this._inputElement).unbind();
	this._inputElement = null;
};

sap.m.SearchField.prototype.onAfterRendering = function() {

	// DOM element for the embedded HTML input:
	this._inputElement = this.getDomRef("I");

	// Bind events
	//  search: user has pressed "Enter" button -> fire search event, do search
	//  change: user has focused another control on the page -> do not trigger a search action
	//  input:  key press or paste/cut -> fire liveChange event
	var $input = jQuery(this._inputElement)
		.bind(this._inputEvent,  jQuery.proxy(this.onInput,  this))
		.bind("search", jQuery.proxy(this.onSearch, this))
		.bind("change", jQuery.proxy(this.onChange, this))
		.bind("focus",  jQuery.proxy(this.onFocus,  this))
		.bind("blur",   jQuery.proxy(this.onBlur,  this));
};

sap.m.SearchField.prototype.clear = function() {
	if (!this._inputElement || this.getValue() === "") {
		return;
	}

	this.setValue("");
	this.fireLiveChange({newValue: ""});
	this.fireSearch({query: ""});
};

sap.m.SearchField.prototype.ontouchstart = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the SearchField
	oEvent.setMarked();

	if (!this.getEnabled()) {
		return;
	}

	var oSrc = oEvent.target;

	if(oSrc.id == this.getId()+"-reset"){
		if(oEvent.originalEvent.button === 2) return; // no action on the right mouse button

		var bEmpty = !this.getValue();
		this.clear();
		oEvent.preventDefault();
		oEvent.stopPropagation();

		// When a user presses "x":
		// - always focus input on desktop
		// - focus input only if the soft keyboard is already opened on touch devices (avoid keyboard jumping)
		// When there was no "x" visible (bEmpty):
		// - always focus
		var active = document.activeElement;
		if((sap.ui.Device.system.desktop || bEmpty || /(INPUT|TEXTAREA)/i.test(active.tagName) ) && (active !== this._inputElement)) {
			this._inputElement.focus();
		}
	}

	// focus by form area touch outside of the input field
	this.onmousedown(oEvent);
};

sap.m.SearchField.prototype.onmousedown = function(oEvent) {

	// focus if mouse-clicked on the form outside of the input
	if(this.getEnabled() && oEvent.target.tagName == "FORM"){
		this._inputElement.focus();
		oEvent.preventDefault();
	}
};

/**
 * Process the search event
 *
 * When a user deletes the search string using the "x" button,
 * change event is not fired.
 * Call setValue() to ensure that the value property is updated.
 *
 * @private
 */
sap.m.SearchField.prototype.onSearch = function(event) {
	var value = this._inputElement.value;
	this.setValue(value);
	this.fireSearch({query: value});

	// If the user has pressed the search button on the soft keyboard - close it,
	// but only in case of soft keyboard:
	if (!sap.ui.Device.system.desktop) {
		this._blur();
	}
};

/**
 * Blur the input field
 *
 * @private
 */
sap.m.SearchField.prototype._blur = function() {
	var that = this;
	window.setTimeout( function(){
		if(that._oButton){
			that._oButton.focus();
		} else if(that._inputElement){
			that._inputElement.blur();
		}
	}, 13);
};

/**
 * Process the change event. Update value and do not fire any control events
 * because the user has focused another control on the page without intention to do a search.
 * @private
 */
sap.m.SearchField.prototype.onChange = function(event) {
	this.setValue(this._inputElement.value);
};

/**
 * Process the input event (key press or paste). Update value and fire the liveChange event.
 * @private
 */
sap.m.SearchField.prototype.onInput = function(event) {
	var value = this._inputElement.value;

	// IE fires an input event when an empty input with a placeholder is focused or loses focus.
	// Check if the value has changed, before firing the liveChange event.
	if(value != this.getValue()){
		this.setValue(value);
		this.fireLiveChange({newValue: value});
	}
};

/**
 * React on the Enter and Esc buttons for browsers that do not fire the onsearch event (IE9, IE10).
 * @private
 */
sap.m.SearchField.prototype.onKeyup = function(event) {
	if (event.keyCode === jQuery.sap.KeyCodes.ENTER) {

		// Enter button ==>> search
		this.onSearch(event);
	} else if (event.keyCode === jQuery.sap.KeyCodes.ESCAPE) {

		// Escape button ==>> clear + search
		this.clear();

		// Webkit browsers remove focus on escape. Do the same in IE:
		this._blur();
	}
};

/**
 * Handle the key down event for F5 on all browsers.
 *
 * @param {jQuery.Event}
 *            event - the keyboard event.
 * @private
 */
sap.m.SearchField.prototype.onkeydown = function(event) {
	if (this._oButton && (event.which === jQuery.sap.KeyCodes.F5 || event.which === jQuery.sap.KeyCodes.ENTER)) {

		// set active button state
		this._oButton._activeButton();

		// do not refresh browser window
		event.stopPropagation();
		event.preventDefault();
	}
};

/**
 * Handle the key up event for F5 on all browsers.
 *
 * @param {jQuery.Event}
 *            event - the keyboard event.
 * @private
 */
sap.m.SearchField.prototype.onkeyup = function(event) {
	if (this._oButton && (event.which === jQuery.sap.KeyCodes.F5 || event.which === jQuery.sap.KeyCodes.ENTER)) {

		// set inactive button state
		this._oButton._inactiveButton();
		this._onButtonPress(); // as with the button press: fire search with refreshButtonPressed:true

		// do not refresh browser window
		event.stopPropagation();
		event.preventDefault();
	}
};

/**
 * highlight the background on focus.
 *
 * @private
 */
sap.m.SearchField.prototype.onFocus = function(event) {
	this.$().toggleClass("sapMFocus", true);

	if (this.getShowRefreshButton()) {
		this._setIcon(this._sSearch);
	}

	// Some applications do re-render during the liveSearch event.
	// The input is focused and most browsers select the input text for copy.
	// Any following key press deletes the whole selection.
	// Disable selection by focus:
	var input = this._inputElement;
	if (input && input.value && !this.getSelectOnFocus()) {
		window.setTimeout(function(){input.setSelectionRange(input.value.length,input.value.length);},0);
	}
};

/**
 * Restore the background color on blur.
 *
 * @private
 */
sap.m.SearchField.prototype.onBlur = function(event) {
	this.$().toggleClass("sapMFocus", false);

	if (this.getShowRefreshButton()) {
		this._setIcon(this._sReload, 250);
	}
};


/**
 * React on the search button press.
 *
 * @private
 */
sap.m.SearchField.prototype._onButtonPress = function() {

	this.fireSearch({
		query: this.getValue(), // because of proxy "this" is SearchField, not Button
		refreshButtonPressed: this._oButton && this._sReload && this._oButton.getIcon() == this._sReload
	});
};

/**
 * Toggle the search/refresh icon with optional delay.
 *
 * @private
 */
sap.m.SearchField.prototype._setIcon = function(icon, delay) {
	if (!this._oButton) {
		return;
	}

	if (this._refreshDelay) {
		jQuery.sap.clearDelayedCall(this._refreshDelay);
		this._refreshDelay = null;
	}

	if (this._oButton.getIcon() == icon) {
		return; // do nothing;
	}

	var that = this;
	function setIcon(){
		var showReload = icon == that._sReload,
			button = that._oButton,
			tooltip = showReload? that.getRefreshButtonTooltip() : "";

		that.$().find(".sapMSFB").toggleClass("sapMSFReload", showReload);
		button.setIcon(icon);

		if(tooltip != button.getTooltip_AsString()){
			that._oButton.setTooltip(tooltip);
		}
	}

	if(delay){
		jQuery.sap.delayedCall(delay, this, setIcon);
	} else {
		setIcon();
	}
};

sap.m.SearchField.prototype.setValue = function(value){
	if (this._inputElement) {

		if (this._inputElement.value !== value) {
			this._inputElement.value = value;
		}

		var $this = this.$();
		if($this.hasClass("sapMSFVal") == !value){
			$this.toggleClass("sapMSFVal", !!value);
		}
	}

	this.setProperty("value", value, true);
	return this;
};

sap.m.SearchField.prototype.setShowRefreshButton = function(showRefresh){
	this.setProperty("showRefreshButton", showRefresh);
	this._setIcon(showRefresh? this._sReload : this._sSearch);
	return this;
};

sap.m.SearchField.prototype.setRefreshButtonTooltip = function(tooltip){
	this.setProperty("refreshButtonTooltip", tooltip);
	if (this.getShowRefreshButton() && this._oButton) {
		this._oButton.setTooltip(tooltip);
	}
	return this;
};
}; // end of sap/m/SearchField.js
if ( !jQuery.sap.isDeclared('sap.m.SegmentedButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SegmentedButton.
jQuery.sap.declare("sap.m.SegmentedButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SegmentedButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} <strong>(default aggregation)</strong> : sap.m.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedButton selectedButton} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SegmentedButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A SegmentedButton Control is a horizontal control made of multiple buttons which can display a title or an image. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.SegmentedButton
 */
sap.ui.core.Control.extend("sap.m.SegmentedButton", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"createButton"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	defaultAggregation : "buttons",
	aggregations : {
    	"buttons" : {type : "sap.m.Button", multiple : true, singularName : "button"}
	},
	associations : {
		"selectedButton" : {type : "sap.m.Button", multiple : false}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SegmentedButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SegmentedButton.extend
 * @function
 */

sap.m.SegmentedButton.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>width</code>.
 * Set the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
 * 
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.SegmentedButton#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setWidth
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * boolean property to make the control visible or invisible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.SegmentedButton#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * If disabled all buttons look grey, you cannot focus on them, you can not even click on them.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.SegmentedButton#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setEnabled
 * @function
 */


/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * Buttons of the SegmentedButton control
 * 
 * <strong>Note</strong>: this is the default aggregation for SegmentedButton.
 * @return {sap.m.Button[]}
 * @public
 * @name sap.m.SegmentedButton#getButtons
 * @function
 */


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#insertButton
 * @function
 */

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#addButton
 * @function
 */

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.m.Button} vButton the button to remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @public
 * @name sap.m.SegmentedButton#removeButton
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.SegmentedButton#removeAllButtons
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.SegmentedButton#indexOfButton
 * @function
 */
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#destroyButtons
 * @function
 */


/**
 * Pointer to the selected button of a SegmentedButton control.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedButton</code> association, or null
 * @public
 * @name sap.m.SegmentedButton#getSelectedButton
 * @function
 */

/**
 * Pointer to the selected button of a SegmentedButton control.
 *
 * @param {string | sap.m.Button} vSelectedButton 
 *    Id of an element which becomes the new target of this <code>selectedButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setSelectedButton
 * @function
 */


	
/**
 * Event is fired when the user selects a button, which returns the id and button object 
 *
 * @name sap.m.SegmentedButton#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Button} oControlEvent.getParameters.button Reference to the button that has just been selected
 * @param {string} oControlEvent.getParameters.id Id of the button which has just been selected
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SegmentedButton</code>.<br/> itself. 
 *  
 * Event is fired when the user selects a button, which returns the id and button object 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButton</code>.<br/> itself.
 *
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'button' of type <code>sap.m.Button</code> Reference to the button that has just been selected</li>
 * <li>'id' of type <code>string</code> Id of the button which has just been selected</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SegmentedButton#fireSelect
 * @function
 */


/**
 * Convenient method to add a button with a text as title OR an URI for an icon. Using both is not supported.
 *
 * @name sap.m.SegmentedButton.prototype.createButton
 * @function
 * @param {string} 
 *         sText
 *         Set the text of a SegmentedButton button.
 * @param {sap.ui.core.URI} 
 *         sIcon
 *         Icon to be displayed as graphical element within the button.
 * 
 * Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided.
 * @param {boolean} 
 *         bEnabled
 *         Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings

 * @type void
 * @public
 */


// Start of sap\m\SegmentedButton.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.call(sap.m.SegmentedButton.prototype);

sap.m.SegmentedButton.prototype.init = function() {
	if(sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version <= 10) {
		this._isMie = true;
	}
	this._aButtonWidth = [];
	this._oGhostButton;
	var self = this;
	
	//create the ghost button which is used to get the actual width of each button
	this._createGhostButton();
	
	// Delegate keyboard processing to ItemNavigation, see commons.SegmentedButton
	this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
	this._oItemNavigation.setCycling(true);
	this.addDelegate(this._oItemNavigation);
	
	//Make sure when a button gets removed to reset the selected button
	this.removeButton = function(sButton) {
		sap.m.SegmentedButton.prototype.removeButton.call(this, sButton)
		this.setSelectedButton(this.getButtons()[0]);
	};
};

sap.m.SegmentedButton.prototype._createGhostButton = function(oButton) {
	if(jQuery("#segMtBtn_calc").length == 0) {
		this._oGhostButton = document.createElement("Button");
		var span = document.createElement("span");
		jQuery(span).addClass("sapMBtnContent");
		this._oGhostButton.appendChild(span);
		this._oGhostButton.setAttribute("id", "segMtBtn_calc");
		jQuery(this._oGhostButton).addClass("sapMBtn sapMBtnDefault sapMBtnPaddingLeft sapMSegBBtn");
		this._oGhostButton = jQuery(this._oGhostButton);
	}else {
		this._oGhostButton = jQuery("#segMtBtn_calc");
	}
}

sap.m.SegmentedButton.prototype._setGhostButtonText = function(oButton) {
	var sText = oButton.getText();
	//refresh the dom pointer
	var ghostButton = jQuery("#segMtBtn_calc")
	if(oButton.getIcon().length == 0 && oButton.getWidth().length == 0) {
		ghostButton.find("span").text(sText);
		this._aButtonWidth.push(ghostButton.width());
	}else {
		this._aButtonWidth.push(0);
	}
};

sap.m.SegmentedButton.prototype._getButtonWidths = function() {
	var aButtons = this.getButtons();
	var self = this;
	if(self._oGhostButton.length == 0) {
		return;
	}else {
		for(var i=0; i<aButtons.length; i++) {
			self._setGhostButtonText(aButtons[i]);
		}
	}
}

sap.m.SegmentedButton.prototype.onBeforeRendering = function() {
	this._aButtonWidth = [];
	var oStatiAreaDom = sap.ui.getCore().getStaticAreaRef();
	if(this._sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	
	if(jQuery("#segMtBtn_calc").length == 0) {
		oStatiAreaDom.appendChild(this._oGhostButton[0]);
	}
};

sap.m.SegmentedButton.prototype.onAfterRendering = function() {
	//register resize listener on parent
	if(!this._sResizeListenerId){
		var oParent = this.getParent(), 
			oParentDom;
		if(oParent instanceof sap.ui.core.Control){
			oParentDom = oParent.getDomRef();
		}else if(oParent instanceof sap.ui.core.UIArea){
			oParentDom = oParent.getRootNode();
		}
		if(oParentDom){
			this._sResizeListenerId = sap.ui.core.ResizeHandler.register(oParentDom,  jQuery.proxy(this._fHandleResize, this));
		}
	}
	//get the size of each button
	this._getButtonWidths();
	
	//Flag if control is inside the bar. If inside bar the buttons always use the width they need.
	this._bInsideBar = (this.$().closest('.sapMBar').length > 0) ? true : false;
	//Flag if control is inside a popup
	this._bInsidePopup = (this.$().closest(".sapMPopup-CTX").length > 0);

	var aButtons = this.getButtons();
	var bAllIcons = true;
	var self = this;
	for(var i=0; i < aButtons.length; i++) {
		if(aButtons[i].getIcon() == "") {
			bAllIcons = false;
		}
	}
	if(bAllIcons) {
		this.$().toggleClass("sapMSegBIcons", true);
	}
	if(this._isMie) {
		setTimeout(function() {
			self._fCalcBtnWidth();
		},0);
	}else {
		self._fCalcBtnWidth();
	}
	this.$().removeClass("sapMSegBHide");
	// Keyboard
	this._setItemNavigation();
};

/**
 * Called after the theme has been switched, required for new width calc
 * @private
 */
sap.m.SegmentedButton.prototype.onThemeChanged = function(oEvent){
	//this._fCalcBtnWidth();
};
/**
 * This function is called to manually set the width of each segmentedbutton button 
 * on the basis of the widest item after they have been rendered or an orientation change/theme change
 * took place. 
 * @private
 */
sap.m.SegmentedButton.prototype._fCalcBtnWidth = function() {
	var iItm = this.getButtons().length;
	if (iItm === 0 || !this.$().is(":visible"))  {
		return;
	}
	var iMaxWidth = 5,
		$this = this.$(),
		iParentWidth = 0,
		iCntOutWidth = $this.outerWidth(true) - $this.width(),
		iInnerWidth = $this.children('#' + this.getButtons()[0].getId()).outerWidth(true)-$this.children('#' + this.getButtons()[0].getId()).width();
		// If parent width is bigger than actual screen width set parent width to screen width => android 2.3
		iParentWidth = (jQuery(window).width() < $this.parent().outerWidth())
							? jQuery(window).width() :
								(this._bInsideBar ? $this.closest('.sapMBar').width() : $this.parent().width());
	if(this.getWidth() && this.getWidth().indexOf("%") === -1) {
		iMaxWidth = parseInt(this.getWidth());
		var iCustomBtnWidths = iItm; 
		for (var i=0; i < iItm; i++) {
			var sWidth = this.getButtons()[i].getWidth();
			if(sWidth.length > 0 && sWidth.indexOf("%") === -1) {
				iMaxWidth = iMaxWidth - parseInt(sWidth);
				iCustomBtnWidths--;
			}
		}
		iMaxWidth = iMaxWidth / iCustomBtnWidths;
		iMaxWidth = iMaxWidth - iInnerWidth;
	} else {
		iMaxWidth = Math.max.apply(null, this._aButtonWidth);
		// If buttons' total width is still less than the available space and
		// buttons shouldn't occupy the whole space (not set with 100%)
		if (((iParentWidth -iCntOutWidth) > iMaxWidth * iItm) && this.getWidth().indexOf("%") === -1) {
			iMaxWidth = iMaxWidth;
		} else {
			// otherwise each button gets the same size available
			iMaxWidth = (iParentWidth-iCntOutWidth) / iItm;
			iMaxWidth = iMaxWidth - iInnerWidth;
		}
	}

	for(var i = 0; i < iItm; i++) {
		if (!isNaN(iMaxWidth) && iMaxWidth > 0) {
			// Bug: +2px for IE9(10)
			// When segmentedButton is in popup, its size can't be increased because otherwise it triggers resize of the dialog again.
			iMaxWidth = this._isMie && !this._bInsidePopup ? iMaxWidth + 2 : iMaxWidth;
			// Use the given width of the button (when present)
			if(this.getButtons()[i].getWidth().length > 0) {
				var sBtnWidth = this.getButtons()[i].getWidth();
				var iWidth = sBtnWidth.indexOf("%") == -1 ? ( parseInt(sBtnWidth) - iInnerWidth ) : sBtnWidth
				$this.children('#' + this.getButtons()[i].getId()).width(iWidth);
			}else {
				$this.children('#' + this.getButtons()[i].getId()).width(iMaxWidth);
			}
		}
	}
};
/**
 * The orientationchange event listener
*/
sap.m.SegmentedButton.prototype._fHandleResize = function() {
	this._fCalcBtnWidth();
};

sap.m.SegmentedButton.prototype.exit = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	if(this._oGhostButton) {
		jQuery("#segMtBtn_calc").remove();
		this._oGhostButton = null;
	}

	if (this._oItemNavigation) {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		delete this._oItemNavigation;
	}
};

sap.m.SegmentedButton.prototype._setItemNavigation = function() {
	var aButtons,
		oDomRef = this.getDomRef();

	if (oDomRef) {
		this._oItemNavigation.setRootDomRef(oDomRef);
		aButtons = oDomRef.getElementsByTagName("li");
		this._oItemNavigation.setItemDomRefs(aButtons);
		this._focusSelectedButton();
	}
};

/**
 * Convenient method to add a button with a text as title or an uri for an icon. 
 * Only one is allowed.
 *
 * @param {string}
 *         sText defines the title text of the newly created button
 * @param {sap.ui.core.URI}
 *        sURI defines the icon uri of the button
 * @param {boolean}
 *        [bEnabled] sets the enabled status of the button
 * @return
 * @type {sap.m.Button}
 * @public
 */
sap.m.SegmentedButton.prototype.createButton = function(sText, sURI, bEnabled) {
	var oButton = new sap.m.Button();
	
	if(sURI === null && sText !== null){
		oButton.setText(sText);
	}else if(sURI !== null && sText === null){
		oButton.setIcon(sURI);
	}else
		throw new Error("in control: " + this.toString() + ": method createButton() just accepts text or icon");
	if(bEnabled || bEnabled === undefined) {
		oButton.setEnabled(true);
	}else {
		oButton.setEnabled(false);
	}
	this.addButton(oButton);

	return oButton;
};


(function(){
	sap.m.SegmentedButton.prototype.addButton = function(oButton) {
		if(oButton){
			processButton(oButton, this);
			
			this.addAggregation('buttons', oButton);
			return this;
		}
		
	};

	sap.m.SegmentedButton.prototype.insertButton = function(oButton) {
		if(oButton){
			processButton(oButton, this);
			
			this.insertAggregation('buttons', oButton);
			return this;
		}
		
	};

	function processButton(oButton, oParent){
		oButton.attachPress(function(oEvent) {
			oParent._buttonPressed(oEvent);
		});

		var fnOriginalSetEnabled = sap.m.Button.prototype.setEnabled;
		oButton.setEnabled = function(bEnabled) {
			oButton.$().toggleClass("sapMSegBBtnDis", !bEnabled)
					   .toggleClass("sapMFocusable", bEnabled);

			fnOriginalSetEnabled.apply(oButton, arguments);
		}
		
	};
	
})();

sap.m.SegmentedButton.prototype.removeButton = function(oButton) {
	if(oButton){
		delete oButton.setEnabled;
		this.removeAggregation("buttons", oButton);
	}
	
};

sap.m.SegmentedButton.prototype.removeAllButtons = function() {
	var aButtons = this.getButtons();
	if(aButtons){
		for ( var i = 0; i < aButtons.length; i++) {
			var oButton = aButtons[i];
			if(oButton){
				delete oButton.setEnabled;
				this.removeAggregation("buttons", oButton);
			}
			
		}
	}
	
};

sap.m.SegmentedButton.prototype._buttonPressed = function(oEvent) {
	var sLastSelBtnId = this.getSelectedButton(),
		oControl = oEvent.getSource();
	
	if (sLastSelBtnId !== oControl.getId()) {
		oControl.$().addClass("sapMSegBBtnSel");
		sap.ui.getCore().byId(sLastSelBtnId).$().removeClass("sapMSegBBtnSel");
		
		this.setAssociation('selectedButton', oControl, true);
		this.fireSelect({button:oControl, id: oControl.getId()});
	}
};

sap.m.SegmentedButton.prototype.setSelectedButton = function(vButton) {
	var sOldSelectedButton = this.getSelectedButton();

	this.setAssociation("selectedButton", vButton, true);

	// CSN# 1143859/2014: update selection state in DOM when calling API method to change the selection
	if (sOldSelectedButton !== this.getSelectedButton()) {
		if (typeof vButton === "string") {
			vButton = sap.ui.getCore().byId(vButton);
		}
		this.getButtons().forEach(function (oButton) {
			oButton.$().removeClass("sapMSegBBtnSel");
		});
		if (vButton) {
			vButton.$().addClass("sapMSegBBtnSel");
		}
		this._focusSelectedButton();
	}
};

sap.m.SegmentedButton.prototype._focusSelectedButton = function() {
	var aButtons = this.getButtons();
	var selectedButtonId = this.getSelectedButton();
	for (var i = 0; i < aButtons.length; i++) {
		if (aButtons[i] && aButtons[i].getId() === selectedButtonId) {
			this._oItemNavigation.setFocusedIndex(i);
			break;
		}
	}
};

}; // end of sap/m/SegmentedButton.js
if ( !jQuery.sap.isDeclared('sap.m.Shell') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Shell.
jQuery.sap.declare("sap.m.Shell");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Shell.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getLogo logo} : sap.ui.core.URI</li>
 * <li>{@link #getShowLogout showLogout} : boolean (default: true)</li>
 * <li>{@link #getHeaderRightText headerRightText} : string</li>
 * <li>{@link #getAppWidthLimited appWidthLimited} : boolean (default: true)</li>
 * <li>{@link #getBackgroundColor backgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>
 * <li>{@link #getHomeIcon homeIcon} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getApp app} <strong>(default aggregation)</strong> : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Shell#event:logout logout} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Shell control can be used as root element of applications, it can contain an App or SplitApp control.
 * The Shell provides some overarching functionality for the overall application and takes care of visual adaptation, like a frame around the App, on desktop browser platforms.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.Shell
 */
sap.ui.core.Control.extend("sap.m.Shell", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"logo" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"showLogout" : {type : "boolean", group : "Behavior", defaultValue : true},
		"headerRightText" : {type : "string", group : "Data", defaultValue : null},
		"appWidthLimited" : {type : "boolean", group : "Appearance", defaultValue : true},
		"backgroundColor" : {type : "sap.ui.core.CSSColor", group : "Appearance", defaultValue : null},
		"backgroundImage" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"backgroundRepeat" : {type : "boolean", group : "Appearance", defaultValue : false},
		"backgroundOpacity" : {type : "float", group : "Appearance", defaultValue : 1},
		"homeIcon" : {type : "object", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "app",
	aggregations : {
    	"app" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"logout" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Shell with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Shell.extend
 * @function
 */

sap.m.Shell.M_EVENTS = {'logout':'logout'};


/**
 * Getter for property <code>title</code>.
 * The application title which may or may not be displayed outside the actual application, depending on the available screen size.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Shell#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setTitle
 * @function
 */


/**
 * Getter for property <code>logo</code>.
 * A logo to be displayed next to the app when the screen is sufficiently large.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>logo</code>
 * @public
 * @name sap.m.Shell#getLogo
 * @function
 */

/**
 * Setter for property <code>logo</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLogo  new value for property <code>logo</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setLogo
 * @function
 */


/**
 * Getter for property <code>showLogout</code>.
 * Whether the Logout button should be displayed. This currently only happens on very tall screens (1568px height), otherwise it is always hidden.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLogout</code>
 * @public
 * @name sap.m.Shell#getShowLogout
 * @function
 */

/**
 * Setter for property <code>showLogout</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLogout  new value for property <code>showLogout</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setShowLogout
 * @function
 */


/**
 * Getter for property <code>headerRightText</code>.
 * A text, like the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise it is always hidden.).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerRightText</code>
 * @public
 * @name sap.m.Shell#getHeaderRightText
 * @function
 */

/**
 * Setter for property <code>headerRightText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderRightText  new value for property <code>headerRightText</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setHeaderRightText
 * @function
 */


/**
 * Getter for property <code>appWidthLimited</code>.
 * Whether the width of the content (the aggregated app) should be limited or extend to the full screen width.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>appWidthLimited</code>
 * @public
 * @name sap.m.Shell#getAppWidthLimited
 * @function
 */

/**
 * Setter for property <code>appWidthLimited</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAppWidthLimited  new value for property <code>appWidthLimited</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setAppWidthLimited
 * @function
 */


/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the Shell. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSColor} the value of property <code>backgroundColor</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#getBackgroundColor
 * @function
 */

/**
 * Setter for property <code>backgroundColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSColor} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#setBackgroundColor
 * @function
 */


/**
 * Getter for property <code>backgroundImage</code>.
 * Background image of the Shell. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#getBackgroundImage
 * @function
 */

/**
 * Setter for property <code>backgroundImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#setBackgroundImage
 * @function
 */


/**
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#getBackgroundRepeat
 * @function
 */

/**
 * Setter for property <code>backgroundRepeat</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bBackgroundRepeat  new value for property <code>backgroundRepeat</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#setBackgroundRepeat
 * @function
 */


/**
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to improve readability of the shell content by making the background image partly transparent.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#getBackgroundOpacity
 * @function
 */

/**
 * Setter for property <code>backgroundOpacity</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fBackgroundOpacity  new value for property <code>backgroundOpacity</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#setBackgroundOpacity
 * @function
 */


/**
 * Getter for property <code>homeIcon</code>.
 * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.
 * 
 * This property should be only set once and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.
 * 
 * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
 * The "precomposed" flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
 * {
 * 'phone':'phone-icon_57x57.png',
 * 'phone@2':'phone-retina_114x114.png',
 * 'tablet':'tablet-icon_72x72.png',
 * 'tablet@2':'tablet-retina_144x144.png',
 * 'precomposed':true,
 * 'favicon':'favicon.ico'
 * }
 * 
 * See jQuery.sap.setIcons() for full documentation.
 * 
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>homeIcon</code>
 * @public
 * @name sap.m.Shell#getHomeIcon
 * @function
 */

/**
 * Setter for property <code>homeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setHomeIcon
 * @function
 */


/**
 * Getter for aggregation <code>app</code>.<br/>
 * A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.
 * 
 * <strong>Note</strong>: this is the default aggregation for Shell.
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Shell#getApp
 * @function
 */


/**
 * Setter for the aggregated <code>app</code>.
 * @param {sap.ui.core.Control} oApp
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setApp
 * @function
 */
	

/**
 * Destroys the app in the aggregation 
 * named <code>app</code>.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#destroyApp
 * @function
 */


/**
 * Fired when the user presses the logout button/link. 
 *
 * @name sap.m.Shell#logout
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'logout' event of this <code>sap.m.Shell</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Shell</code>.<br/> itself. 
 *  
 * Fired when the user presses the logout button/link. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Shell</code>.<br/> itself.
 *
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#attachLogout
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'logout' event of this <code>sap.m.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#detachLogout
 * @function
 */

/**
 * Fire event logout to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Shell#fireLogout
 * @function
 */


// Start of sap\m\Shell.js

sap.m.Shell.prototype.init = function() {
	// theme change might change the logo
	sap.ui.getCore().attachThemeChanged(jQuery.proxy(function(){
		var $hdr = this.$("hdr");
		if ($hdr.length) {
			$hdr.find(".sapMShellLogo").remove(); // remove old logo, if present
			var html = sap.m.ShellRenderer.getLogoImageHtml(this);
			$hdr.prepend(jQuery(html)); // insert new logo
		}
	}, this));
	

	jQuery.sap.initMobile({
		statusBar: "default",
		hideBrowser: true
	});
};

sap.m.Shell.prototype.onAfterRendering = function () {
	var ref = this.getDomRef().parentNode,
		$ref;
	// set all parent elements to 100% height this *should* be done by the application in CSS, but people tend to forget it...
	if (ref && !ref._sapui5_heightFixed) {
		ref._sapui5_heightFixed = true;
		while (ref && ref !== document.documentElement) {
			$ref = jQuery(ref);
			if ($ref.attr("data-sap-ui-root-content")) { // some parents (e.g. Unified Shell) do this already
				break;
			}
			if (!ref.style.height) {
				ref.style.height = "100%";
			}
			ref = ref.parentNode;
		}
	}
	this.$("content").css("height", "");
};

sap.m.Shell.prototype.ontap = function(oEvent) {
	if (oEvent.target.className 
			&& oEvent.target.className.indexOf /* not available for SVG elements */ 
			&& oEvent.target.className.indexOf("sapMShellHeaderLogout") > -1) { // logout button clicked
		this.fireLogout();
	}
};


// API methods

sap.m.Shell.prototype.setTitle = function(sTitle) {
	this.$("hdrTxt").text(sTitle);
	this.setProperty("title", sTitle, true); // no rerendering
	return this; 
};

sap.m.Shell.prototype.setHeaderRightText = function(sText) {
	this.setProperty("headerRightText", sText, true); // no rerendering
	if (!sText) {
		sText = "";
	}
	this.$("hdrRightTxt").text(sText).css("display", (!!sText ? "inline" : "none"));
	return this; 
};

sap.m.Shell.prototype.setAppWidthLimited = function(bLimit) {
	this.$().toggleClass("sapMShellAppWidthLimited", bLimit);
	this.setProperty("appWidthLimited", bLimit, true); // no rerendering 
	return this;
};

sap.m.Shell.prototype.setBackgroundOpacity = function(fOpacity) {
	if (fOpacity > 1 || fOpacity < 0) {
		jQuery.sap.log.warning("Invalid value " + fOpacity + " for Shell.setBackgroundOpacity() ignored. Valid values are: floats between 0 and 1.");
		return this;
	}
	this.$("BG").css("opacity", fOpacity);
	return this.setProperty("backgroundOpacity", fOpacity, true); // no rerendering - live opacity change looks cooler
};

sap.m.Shell.prototype.setHomeIcon = function(oIcons) {
	this.setProperty("homeIcon", oIcons, true); // no rerendering
	jQuery.sap.setIcons(oIcons);
};
}; // end of sap/m/Shell.js
if ( !jQuery.sap.isDeclared('sap.m.Slider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Slider.
jQuery.sap.declare("sap.m.Slider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Slider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getMin min} : float (default: 0)</li>
 * <li>{@link #getMax max} : float (default: 100)</li>
 * <li>{@link #getStep step} : float (default: 1)</li>
 * <li>{@link #getProgress progress} : boolean (default: true)</li>
 * <li>{@link #getValue value} : float (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Slider#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Slider#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A slider is a user interface control that enables the user to adjust values in a specified numerical range.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Slider
 */
sap.ui.core.Control.extend("sap.m.Slider", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"stepUp", "stepDown"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"min" : {type : "float", group : "Data", defaultValue : 0},
		"max" : {type : "float", group : "Data", defaultValue : 100},
		"step" : {type : "float", group : "Data", defaultValue : 1},
		"progress" : {type : "boolean", group : "Misc", defaultValue : true},
		"value" : {type : "float", group : "Data", defaultValue : 0}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Slider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Slider.extend
 * @function
 */

sap.m.Slider.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>width</code>.
 * Defines the width of the slider, this value can be provided in %, em, px… and all possible CSS units.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Slider#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the slider value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Slider#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Determines whether the slider is visible. Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Slider#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setVisible
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Slider#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setName
 * @function
 */


/**
 * Getter for property <code>min</code>.
 * The minimum value of the slider.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>min</code>
 * @public
 * @name sap.m.Slider#getMin
 * @function
 */

/**
 * Setter for property <code>min</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMin  new value for property <code>min</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setMin
 * @function
 */


/**
 * Getter for property <code>max</code>.
 * The maximum value of the slider.
 *
 * Default value is <code>100</code>
 *
 * @return {float} the value of property <code>max</code>
 * @public
 * @name sap.m.Slider#getMax
 * @function
 */

/**
 * Setter for property <code>max</code>.
 *
 * Default value is <code>100</code> 
 *
 * @param {float} fMax  new value for property <code>max</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setMax
 * @function
 */


/**
 * Getter for property <code>step</code>.
 * Define the amount of units to change the slider when adjusting by drag and drop.
 * 
 * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10, 15, 20).
 * 
 * The step must be positive, if a negative number is provided, the default value will be used instead.
 * If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>step</code>
 * @public
 * @name sap.m.Slider#getStep
 * @function
 */

/**
 * Setter for property <code>step</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fStep  new value for property <code>step</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setStep
 * @function
 */


/**
 * Getter for property <code>progress</code>.
 * Show a progress bar indicator.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>progress</code>
 * @public
 * @name sap.m.Slider#getProgress
 * @function
 */

/**
 * Setter for property <code>progress</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bProgress  new value for property <code>progress</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setProgress
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Define the value of the slider.
 * 
 * If the value is lower/higher than the allowed minimum/maximum, the value of the properties "min"/"max" are used instead.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * @name sap.m.Slider#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setValue
 * @function
 */


/**
 * This event is triggered after the end user finishes interacting, if there is any change. 
 *
 * @name sap.m.Slider#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {float} oControlEvent.getParameters.value The current value of the slider after a change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br/> itself. 
 *  
 * This event is triggered after the end user finishes interacting, if there is any change. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 *
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> The current value of the slider after a change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Slider#fireChange
 * @function
 */


/**
 * This event is triggered during the dragging period, each time the slider value changes. 
 *
 * @name sap.m.Slider#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {float} oControlEvent.getParameters.value The current value of the slider after a live change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br/> itself. 
 *  
 * This event is triggered during the dragging period, each time the slider value changes. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 *
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> The current value of the slider after a live change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Slider#fireLiveChange
 * @function
 */


/**
 * Increments the slider value by multiplying the step with the given parameter.
 * 
 * The default value for the step is 1.
 *
 * @name sap.m.Slider.prototype.stepUp
 * @function
 * @param {int} 
 *         iIStep
 *         The number of steps the slider goes up.

 * @type sap.m.Slider
 * @public
 */


/**
 * Decrements the slider value by multiplying the step with the given parameter.
 * 
 * The default value for the step is 1.
 *
 * @name sap.m.Slider.prototype.stepDown
 * @function
 * @param {int} 
 *         iIStep
 *         The number of steps the slider goes down.

 * @type sap.m.Slider
 * @public
 */


// Start of sap\m\Slider.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.ui.core.EnabledPropagator.apply(sap.m.Slider.prototype, [true]);

/* =========================================================== */
/* Private methods and properties                              */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* Private properties                                          */
/* ----------------------------------------------------------- */

sap.m.Slider._bRtl  = sap.ui.getCore().getConfiguration().getRTL();

/* ----------------------------------------------------------- */
/* Private methods                                             */
/* ----------------------------------------------------------- */

/**
 * Cache DOM references.
 *
 * @private
 */
sap.m.Slider.prototype._cacheDomRefs = function() {

	// slider control container jQuery DOM reference
	this._$Slider = this.$();

	// slider jQuery DOM reference
	this._$SliderInner = this._$Slider.children("." + sap.m.SliderRenderer.CSS_CLASS + "Inner");

	// progress indicator jQuery DOM reference
	this._$ProgressIndicator = this._$SliderInner.children("." + sap.m.SliderRenderer.CSS_CLASS + "Progress");

	// handle jQuery DOM reference
	this._$Handle = this._$SliderInner.children("." + sap.m.SliderRenderer.CSS_CLASS + "Handle");

	// native input helper jQuery DOM reference
	this._$Input = this._$Slider.children("input." + sap.m.SliderRenderer.CSS_CLASS + "Input");
};

/**
 * Convert <code>fValue</code> for RTL-Mode
 *
 * @param {float} fValue input value
 * @private
 * @returns {float} output value
 */
sap.m.Slider.prototype._convertValueForRtlMode = function(fValue) {
	return this.getMax() - fValue + this.getMin();
};

/**
 * Recalculate some styles.
 *
 * @private
 */
sap.m.Slider.prototype._recalculateStyles = function() {

	// slider width
	this._fSliderWidth = this._$Slider.width();

	// slider padding left
	this._fSliderPaddingLeft = parseFloat(this._$Slider.css("padding-left"));

	// slider offset left
	this._fSliderOffsetLeft = this._$Slider.offset().left;

	// handle width
	this._fHandleWidth = this._$Handle.width();
};

/**
 * Calculate percentage.
 *
 * @param {float} fValue
 * @private
 * @returns {float} percent
 */
sap.m.Slider.prototype._getPercentOfValue = function(fValue) {
	var fMin = this.getMin();

	return (((fValue - fMin) / (this.getMax() - fMin)) * 100);
};

/**
 * Checks whether the given step is of the proper type.
 *
 * @param {int} iStep
 * @private
 * @returns {int}
 */
sap.m.Slider.prototype._validateStep = function(iStep) {
	if (typeof iStep === "undefined") {
		return 1;	// default n = 1
	}

	if (typeof iStep !== "number") {
		jQuery.sap.log.warning('Warning: "iStep" needs to be a number', this);
		return 0;
	}

	if ((Math.floor(iStep) === iStep) && isFinite(iStep)) {
		return iStep;
	}

	jQuery.sap.log.warning('Warning: "iStep" needs to be a finite interger', this);

	return 0;
};

/**
 * Checks whether the minimum is lower than or equal to the maximum and
 * whether the step is bigger than slider range.
 *
 * @private
 * @returns {boolean}
 */
sap.m.Slider.prototype._validateProperties = function() {
	var fMin = this.getMin(),
		fMax = this.getMax(),
		fStep = this.getStep(),
		bMinbiggerThanMax = false,
		bError = false;

	/*
	 *	functional dependencies:
	 *
	 *	min				-> max
	 *	max				-> min
	 *
	 *	max, min		-> step
	 *	max, min, step	-> value
	 *
	 */

	// if the minimum is lower than or equal to the maximum, log a warning
	if (fMin >= fMax) {
		bMinbiggerThanMax = true;
		bError = true;
		jQuery.sap.log.warning("Warning: " + "Property wrong min: " + fMin + " >= max: " + fMax + " on ", this);
	}

	// if the step is negative or 0, set to 1 and log a warning
	if (fStep <= 0) {
		jQuery.sap.log.warning("Warning: " + "The step could not be negative on ", this);
		fStep = 1;

		// update the step to 1 and suppress re-rendering
		this.setProperty("step", fStep, true);
	}

	// the step can't be bigger than slider range, log a warning
	if (fStep > (fMax - fMin) && !bMinbiggerThanMax) {
		bError = true;
		jQuery.sap.log.warning("Warning: " + "Property wrong step: " + fStep + " > max: " + fMax + " - " + "min: " + fMin + " on ", this);
	}

	return bError;
};

/**
 * Setter for property <code>value</code>.
 *
 * @see sap.m.Slider#setValue
 * @param {float} fValue new value for property <code>value</code>.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @private
 * @function
 */
sap.m.Slider.prototype._setValue = function(fNewValue) {
	var fMin = this.getMin(),
		fMax = this.getMax(),
		fStep = this.getStep(),
		fValue = this.getValue(),
		fModStepVal,
		sPerVal;

	// validate the new value before arithmetic calculations
	if (typeof fNewValue !== "number" || !isFinite(fNewValue)) {
		jQuery.sap.log.error("Error:", '"fNewValue" needs to be a finite number on ', this);
		return this;
	}

	fModStepVal = fNewValue % fStep;

	// snap the new value to the nearest step
	fNewValue = fModStepVal * 2 >= fStep ? fNewValue + fStep - fModStepVal
											: fNewValue - fModStepVal;

	// constrain the new value between the maximum and minimum
	fNewValue = fNewValue > fMax ? fMax
									: fNewValue < fMin ? fMin : fNewValue;

	// Floating-point in JavaScript are IEEE 64 bit values and has some problems with big decimals.
	// Round the final value to 5 digits after the decimal point.
	fNewValue = Number(fNewValue.toFixed(5));

	// update the value and suppress re-rendering
	this.setProperty("value", fNewValue, true);

	// if the value is the same, suppress DOM modifications
	if (fValue === this.getValue()) {
		return this;
	}

	if (this._$Slider) {	// after re-rendering

		sPerVal = this._getPercentOfValue(fNewValue) + "%";

		if (this._bInputRendered) {

			// update the input
			this._$Input[0].setAttribute("value", fNewValue);
		}

		if (this._bProgress) {

			// update the progress indicator
			this._$ProgressIndicator[0].style.width = sPerVal;
		}

		// update the position of the handle
		this._$Handle[0].style[sap.m.Slider._bRtl ? "right" : "left"] = sPerVal;

		// update the handle tooltip
		this._$Handle[0].title = fNewValue;

		// update the WAI-ARIA attribute values
		this._$Handle[0].setAttribute("aria-valuenow", fNewValue);
		this._$Handle[0].setAttribute("aria-valuetext", fNewValue);
	}

	return this;
};

/**
 * Returns the closest handle to a touchstart/mousedown event.
 *
 * @returns {object} The nearest handle jQuery DOM reference.
 * @private
 */
sap.m.Slider.prototype._getClosestHandle = function() {

	// there is only one handle, it is always the nearest
	return this._$Handle;
};

/**
 * Increase the value of the slider by the given <code>fIncrement</code>.
 *
 * @param {int} [fIncrement=1]
 * @private
 */
sap.m.Slider.prototype._increaseValueBy = function(fIncrement) {
	var fValue,
		fNewValue;

	if (this.getEnabled()) {
		fValue = this.getValue();
		this.setValue(fValue + (fIncrement || 1));
		fNewValue = this.getValue();

		if (fValue < fNewValue) {
			this._fireChangeAndLiveChange({ value: fNewValue });
		}
	}
};

/**
 * Decrease the value of the slider by the given <code>fDecrement</code>.
 *
 * @param {int} [fDecrement=1]
 * @private
 */
sap.m.Slider.prototype._decreaseValueBy = function(fDecrement) {
	var fValue,
		fNewValue;

	if (this.getEnabled()) {
		fValue = this.getValue();
		this.setValue(fValue - (fDecrement || 1));
		fNewValue = this.getValue();

		if (fValue > fNewValue) {
			this._fireChangeAndLiveChange({ value: fNewValue });
		}
	}
};

sap.m.Slider.prototype._getLongStep = function() {
	var fMin = this.getMin(),
		fMax = this.getMax(),
		fStep = this.getStep(),
		fLongStep = (fMax - fMin) / 10,
		iStepsFromMinToMax = (fMax - fMin) / fStep;

	return iStepsFromMinToMax > 10 ? fLongStep : fStep;
};

sap.m.Slider.prototype._fireChangeAndLiveChange = function(oParam) {
	this.fireChange(oParam);
	this.fireLiveChange(oParam);
};

sap.m.Slider.prototype._hasFocus = function() {
	return document.activeElement === this.getFocusDomRef();
};

/* =========================================================== */
/* Lifecycle methods                                           */
/* =========================================================== */

/**
 * Required adaptations before rendering.
 *
 * @private
 */
sap.m.Slider.prototype.onBeforeRendering = function() {

	var bError = this._validateProperties();

	// update the value only if there aren't errors
	if (!bError) {
		this.setValue(this.getValue());

		// this is the current % value for the slider progress bar
		this._sProgressValue = this._getPercentOfValue(this.getValue()) + "%";
	}

	// flags
	this._bProgress = this.getProgress();
	this._bInputRendered = !!this.getName();
	this._bDisabled = !this.getEnabled();

	if (!this._hasFocus()) {
		this._fInitialFocusValue = this.getValue();
	}
};

/**
 * Required adaptations after rendering.
 *
 * @private
 */
sap.m.Slider.prototype.onAfterRendering = function() {
	this._cacheDomRefs();

	// after all calculations, makes the control visible
	this._$Slider.css("visibility", "");
};

/**
 * Cleans up before destruction.
 *
 * @private
 */
sap.m.Slider.prototype.exit = function() {
	this._$Slider = null;
	this._$SliderInner = null;
	this._$ProgressIndicator = null;
	this._$Handle = null;
	this._$Input = null;
};

/* =========================================================== */
/* Event handlers                                              */
/* =========================================================== */

/**
 * Handle the touchstart event happening on the slider.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.ontouchstart = function(oEvent) {
	var fMin = this.getMin(),
		oNearestHandleDomRef,
		fNewValue;

	// mark the event for components that needs to know if the event was handled by the Slider
	oEvent.setMarked();

	if (oEvent.targetTouches.length > 1 || this._bDisabled) {	// suppress multiTouch events
		return;
	}

	oNearestHandleDomRef = this._getClosestHandle()[0];

	if (oEvent.target !== oNearestHandleDomRef) {

		// set the focus to the nearest slider handle
		jQuery.sap.delayedCall(0, oNearestHandleDomRef, "focus");
	}

	if (!this._hasFocus()) {
		this._fInitialFocusValue = this.getValue();
	}

	// recalculate some styles,
	// those values may change when the device orientation changes
	this._recalculateStyles();

	this._fDiffX = this._fSliderPaddingLeft;
	this._fInitialValue = this.getValue();

	// add active state
	this._$SliderInner.addClass(sap.m.SliderRenderer.CSS_CLASS + "Pressed");

	if (oEvent.target === this._$Handle[0]) {

		this._fDiffX = (oEvent.targetTouches[0].pageX - this._$Handle.offset().left) + this._fSliderPaddingLeft - (this._fHandleWidth / 2);
	} else {

		fNewValue = (((oEvent.targetTouches[0].pageX - this._fSliderPaddingLeft - this._fSliderOffsetLeft) / this._fSliderWidth) * (this.getMax() - fMin)) +  fMin;

		if (sap.m.Slider._bRtl) {
			fNewValue = this._convertValueForRtlMode(fNewValue);
		}

		// update the value
		this.setValue(fNewValue);

		// new validated value
		fNewValue = this.getValue();

		if (this._fInitialValue !== fNewValue) {
			this.fireLiveChange({ value: fNewValue });
		}
	}
};

/**
 * Handle the touchmove event on the slider.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.ontouchmove = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Slider
	oEvent.setMarked();

	// note: prevent native document scrolling
	oEvent.preventDefault();

	if (this._bDisabled) {
		return;
	}

	var fMin = this.getMin(),
		fValue = this.getValue(),
		fNewValue = (((oEvent.targetTouches[0].pageX - this._fDiffX - this._fSliderOffsetLeft) / this._fSliderWidth) * (this.getMax() - fMin)) +  fMin;

	if (sap.m.Slider._bRtl) {
		fNewValue = this._convertValueForRtlMode(fNewValue);
	}

	this.setValue(fNewValue);

	// validated value
	fNewValue = this.getValue();

	if (fValue !== fNewValue) {
		this.fireLiveChange({ value: fNewValue });
	}
};

/**
 * Handle the touchend event on the slider.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.ontouchend = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Slider
	oEvent.setMarked();

	var fValue = this.getValue();

	if (this._bDisabled) {
		return;
	}

	// remove active state
	this._$SliderInner.removeClass(sap.m.SliderRenderer.CSS_CLASS + "Pressed");

	if (this._fInitialValue !== fValue) {
		this.fireChange({ value: fValue });
	}
};

/**
 * Handle the touchcancel event on the slider.
 *
 * @private
 */
sap.m.Slider.prototype.ontouchcancel = sap.m.Slider.prototype.ontouchend;

/* ----------------------------------------------------------- */
/* Keyboard handling                                           */
/* ----------------------------------------------------------- */

/**
 * Handle when right arrow or up arrow is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsapincrease = function(oEvent) {
	var fValue,
		fNewValue;

	// note: prevent document scrolling when arrow keys are pressed
	oEvent.preventDefault();

	// mark the event for components that needs to know if the event was handled by the Slider
	oEvent.setMarked();

	if (this.getEnabled()) {
		fValue = this.getValue();
		this.stepUp(1);
		fNewValue = this.getValue();

		if (fValue < fNewValue) {
			this._fireChangeAndLiveChange({ value: fNewValue });
		}
	}
};

/**
 * Handle when Ctrl + right arrow or up arrow are pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsapincreasemodifiers = function(oEvent) {

	// note: prevent document scrolling when arrow keys are pressed
	oEvent.preventDefault();

	// mark the event for components that needs to know if the event was handled by the Slider
	oEvent.setMarked();

	this._increaseValueBy(this._getLongStep());
};

/**
 * Handle when left arrow or down arrow are pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsapdecrease = function(oEvent) {
	var fValue,
		fNewValue;

	// note: prevent document scrolling when arrow keys are pressed
	oEvent.preventDefault();

	// mark the event for components that needs to know if the event was handled by the Slider
	oEvent.setMarked();

	if (this.getEnabled()) {
		fValue = this.getValue();
		this.stepDown(1);
		fNewValue = this.getValue();

		if (fValue > fNewValue) {
			this._fireChangeAndLiveChange({ value: fNewValue });
		}
	}
};

/**
 * Handle when Ctrl + left or Ctrl + down keys are pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsapdecreasemodifiers = function(oEvent) {

	// note: prevent document scrolling when arrow keys are pressed
	oEvent.preventDefault();

	// mark the event for components that needs to know if the event was handled by the Slider
	oEvent.setMarked();

	this._decreaseValueBy(this._getLongStep());
};

/**
 * Handle when "+" is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsapexpand = sap.m.Slider.prototype.onsapincrease;

/**
 * Handle when "-" is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsapcollapse = sap.m.Slider.prototype.onsapdecrease;

/**
 * Handle when page up is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsappageup = sap.m.Slider.prototype.onsapincreasemodifiers;

/**
 * Handle when page down is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsappagedown = sap.m.Slider.prototype.onsapdecreasemodifiers;

/**
 * Handle Home key pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsaphome = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Slider
	oEvent.setMarked();

	var fMin = this.getMin();

	// note: prevent document scrolling when Home key is pressed
	oEvent.preventDefault();

	if (this.getEnabled() && this.getValue() > fMin) {
		this.setValue(fMin);
		this._fireChangeAndLiveChange({ value: fMin });
	}
};

/**
 * Handle End key pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Slider.prototype.onsapend = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Slider
	oEvent.setMarked();

	var fMax = this.getMax();

	// note: prevent document scrolling when End key is pressed
	oEvent.preventDefault();

	if (this.getEnabled() && this.getValue() < fMax) {
		this.setValue(fMax);
		this._fireChangeAndLiveChange({ value: fMax });
	}
};

/**
 * Handle when tab key is pressed.
 *
 * @private
 */
sap.m.Slider.prototype.onsaptabnext = function() {
	this._fInitialFocusValue = this.getValue();
};

/**
 * Handle when shift + tab keys are pressed.
 *
 * @private
 */
sap.m.Slider.prototype.onsaptabprevious = function() {
	this._fInitialFocusValue = this.getValue();
};

/**
 * Handle when escape key is pressed.
 *
 * @private
 */
sap.m.Slider.prototype.onsapescape = function() {

	// reset the slider back to the value
	// which it had when it got the focus
	this.setValue(this._fInitialFocusValue);
};

/* =========================================================== */
/* API method                                                  */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* Public methods                                              */
/* ----------------------------------------------------------- */

sap.m.Slider.prototype.getFocusDomRef = function() {
	return this.getDomRef() ? this._$Handle[0] : null;
};

/**
 * Increments the slider value by multiplying the <code>step</code> with the given parameter.
 *
 * @name sap.m.Slider.prototype.stepUp
 * @function
 * @param {int} [iStep=1] The number of steps the slider goes up.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @type sap.m.Slider
 * @public
 */
sap.m.Slider.prototype.stepUp = function(iStep) {
	return this.setValue(this.getValue() + (this._validateStep(iStep) * this.getStep()));
};

/**
 * Decrements the slider value by multiplying the step the <code>step</code> with the given parameter.
 *
 * @name sap.m.Slider.prototype.stepDown
 * @function
 * @param {int} [iStep=1] The number of steps the slider goes down.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @type sap.m.Slider
 * @public
 */
sap.m.Slider.prototype.stepDown = function(iStep) {
	return this.setValue(this.getValue() - (this._validateStep(iStep) * this.getStep()));
};

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code>.
 *
 * @param {float} fValue new value for property <code>value</code>.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @public
 * @name sap.m.Slider#setValue
 * @function
 */
sap.m.Slider.prototype.setValue = function(fNewValue) {

	// note: setValue() method sometimes is called, before the step,
	// max and min properties are set, due the value of the slider
	// needs to be updated in onBeforeRendering()
	this.setValue = this._setValue;

	// update the value and suppress re-rendering
	return this.setProperty("value", fNewValue, true);
};
}; // end of sap/m/Slider.js
if ( !jQuery.sap.isDeclared('sap.m.SplitAppRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.SplitAppRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class SplitApp renderer. 
 * @static
 */
sap.m.SplitAppRenderer = {
};

sap.m.SplitAppRenderer = sap.ui.core.Renderer.extend(sap.m.SplitContainerRenderer);

sap.m.SplitAppRenderer.renderAttributes = function(oRm, oControl){
	sap.m.BackgroundHelper.addBackgroundColorStyles(oRm, oControl.getBackgroundColor(),  oControl.getBackgroundImage());
};

sap.m.SplitAppRenderer.renderBeforeContent = function(oRm, oControl){
	sap.m.BackgroundHelper.renderBackgroundImageTag(oRm, oControl, "sapMSplitContainerBG",  oControl.getBackgroundImage(), oControl.getBackgroundRepeat(), oControl.getBackgroundOpacity());
};
}; // end of sap/m/SplitAppRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.SplitContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SplitContainer.
jQuery.sap.declare("sap.m.SplitContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SplitContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDefaultTransitionNameDetail defaultTransitionNameDetail} : string (default: "slide")</li>
 * <li>{@link #getDefaultTransitionNameMaster defaultTransitionNameMaster} : string (default: "slide")</li>
 * <li>{@link #getMode mode} : sap.m.SplitAppMode (default: sap.m.SplitAppMode.ShowHideMode)</li>
 * <li>{@link #getMasterButtonText masterButtonText} : string</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMasterPages masterPages} : sap.ui.core.Control[]</li>
 * <li>{@link #getDetailPages detailPages} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialDetail initialDetail} : string | sap.ui.core.Control</li>
 * <li>{@link #getInitialMaster initialMaster} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SplitContainer#event:masterNavigate masterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:afterMasterNavigate afterMasterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:masterButton masterButton} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:beforeMasterOpen beforeMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:afterMasterOpen afterMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:beforeMasterClose beforeMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:afterMasterClose afterMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:detailNavigate detailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitContainer#event:afterDetailNavigate afterDetailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * SplitContainer maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitContainer.
 * 
 * This control must be rendered as a full screen control in order to make the show/hide master area work properly.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.SplitContainer
 */
sap.ui.core.Control.extend("sap.m.SplitContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"to", "backToPage", "toMaster", "toDetail", "backMaster", "backDetail", "showMaster", "hideMaster", "getCurrentPage", "getCurrentMasterPage", "getCurrentDetailPage", "backToTopMaster", "backToTopDetail", "addPage", "getMasterPage", "getDetailPage", "getPage", "insertPreviousPage", "getPreviousPage", "isMasterShown"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"defaultTransitionNameDetail" : {type : "string", group : "Appearance", defaultValue : "slide"},
		"defaultTransitionNameMaster" : {type : "string", group : "Appearance", defaultValue : "slide"},
		"mode" : {type : "sap.m.SplitAppMode", group : "Appearance", defaultValue : sap.m.SplitAppMode.ShowHideMode},
		"masterButtonText" : {type : "string", group : "Appearance", defaultValue : null},
		"backgroundColor" : {type : "string", group : "Appearance", defaultValue : null},
		"backgroundImage" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"backgroundRepeat" : {type : "boolean", group : "Appearance", defaultValue : false},
		"backgroundOpacity" : {type : "float", group : "Appearance", defaultValue : 1}
	},
	aggregations : {
    	"masterPages" : {type : "sap.ui.core.Control", multiple : true, singularName : "masterPage"}, 
    	"detailPages" : {type : "sap.ui.core.Control", multiple : true, singularName : "detailPage"}, 
    	"_navMaster" : {type : "sap.m.NavContainer", multiple : false, visibility : "hidden"}, 
    	"_navDetail" : {type : "sap.m.NavContainer", multiple : false, visibility : "hidden"}, 
    	"_navPopover" : {type : "sap.m.Popover", multiple : false, visibility : "hidden"}
	},
	associations : {
		"initialDetail" : {type : "sap.ui.core.Control", multiple : false}, 
		"initialMaster" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"masterNavigate" : {}, 
		"afterMasterNavigate" : {}, 
		"masterButton" : {}, 
		"beforeMasterOpen" : {}, 
		"afterMasterOpen" : {}, 
		"beforeMasterClose" : {}, 
		"afterMasterClose" : {}, 
		"detailNavigate" : {}, 
		"afterDetailNavigate" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SplitContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SplitContainer.extend
 * @function
 */

sap.m.SplitContainer.M_EVENTS = {'masterNavigate':'masterNavigate','afterMasterNavigate':'afterMasterNavigate','masterButton':'masterButton','beforeMasterOpen':'beforeMasterOpen','afterMasterOpen':'afterMasterOpen','beforeMasterClose':'beforeMasterClose','afterMasterClose':'afterMasterClose','detailNavigate':'detailNavigate','afterDetailNavigate':'afterDetailNavigate'};


/**
 * Getter for property <code>defaultTransitionNameDetail</code>.
 * The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.
 *
 * Default value is <code>"slide"</code>
 *
 * @return {string} the value of property <code>defaultTransitionNameDetail</code>
 * @public
 * @name sap.m.SplitContainer#getDefaultTransitionNameDetail
 * @function
 */

/**
 * Setter for property <code>defaultTransitionNameDetail</code>.
 *
 * Default value is <code>"slide"</code> 
 *
 * @param {string} sDefaultTransitionNameDetail  new value for property <code>defaultTransitionNameDetail</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#setDefaultTransitionNameDetail
 * @function
 */


/**
 * Getter for property <code>defaultTransitionNameMaster</code>.
 * The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.
 *
 * Default value is <code>"slide"</code>
 *
 * @return {string} the value of property <code>defaultTransitionNameMaster</code>
 * @public
 * @name sap.m.SplitContainer#getDefaultTransitionNameMaster
 * @function
 */

/**
 * Setter for property <code>defaultTransitionNameMaster</code>.
 *
 * Default value is <code>"slide"</code> 
 *
 * @param {string} sDefaultTransitionNameMaster  new value for property <code>defaultTransitionNameMaster</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#setDefaultTransitionNameMaster
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * This mode defines whether the master page will always be shown (in portrait and in landscape)[StretchCompressMode], or if it should be hidden when in protrait mode [ShowHideMode]. Default is ShowHideMode
 *
 * Default value is <code>ShowHideMode</code>
 *
 * @return {sap.m.SplitAppMode} the value of property <code>mode</code>
 * @public
 * @name sap.m.SplitContainer#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>ShowHideMode</code> 
 *
 * @param {sap.m.SplitAppMode} oMode  new value for property <code>mode</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#setMode
 * @function
 */


/**
 * Getter for property <code>masterButtonText</code>.
 * This is the text shown in master button which has a default value "Navigation". This text is only shown in iOS platform and the icon from the current page in detail area is shown in the master button in the other platfroms.
 * 
 * The master button is shown/hidden depending on the orientation of device and also whether the master area is open or not. SplitContainer manages the show/hide of master button by itself only when the page added to detail area are sap.m.Page with built-in header or sap.m.Page with built-in header which is wrapped by one or several sap.ui.core.mvc.View. Otherwise the show/hide of master button needs to be managed by the application.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>masterButtonText</code>
 * @public
 * @name sap.m.SplitContainer#getMasterButtonText
 * @function
 */

/**
 * Setter for property <code>masterButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMasterButtonText  new value for property <code>masterButtonText</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#setMasterButtonText
 * @function
 */


/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the SplitContainer. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>backgroundColor</code>
 * @public
 * @since 1.11.2
 * @name sap.m.SplitContainer#getBackgroundColor
 * @function
 */

/**
 * Setter for property <code>backgroundColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.SplitContainer#setBackgroundColor
 * @function
 */


/**
 * Getter for property <code>backgroundImage</code>.
 * Background image of the SplitContainer. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @since 1.11.2
 * @name sap.m.SplitContainer#getBackgroundImage
 * @function
 */

/**
 * Setter for property <code>backgroundImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.SplitContainer#setBackgroundImage
 * @function
 */


/**
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole SplitContainer (false) or whether it should be tiled (true).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @public
 * @since 1.11.2
 * @name sap.m.SplitContainer#getBackgroundRepeat
 * @function
 */

/**
 * Setter for property <code>backgroundRepeat</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bBackgroundRepeat  new value for property <code>backgroundRepeat</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.SplitContainer#setBackgroundRepeat
 * @function
 */


/**
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @public
 * @since 1.11.2
 * @name sap.m.SplitContainer#getBackgroundOpacity
 * @function
 */

/**
 * Setter for property <code>backgroundOpacity</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fBackgroundOpacity  new value for property <code>backgroundOpacity</code>
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.SplitContainer#setBackgroundOpacity
 * @function
 */


/**
 * Getter for aggregation <code>masterPages</code>.<br/>
 * The content entities between which this SplitContainer navigates in master area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.SplitContainer#getMasterPages
 * @function
 */


/**
 * Inserts a masterPage into the aggregation named <code>masterPages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oMasterPage the masterPage to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the masterPage should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the masterPage is inserted at 
 *             the last position        
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#insertMasterPage
 * @function
 */

/**
 * Adds some masterPage <code>oMasterPage</code> 
 * to the aggregation named <code>masterPages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage to add; if empty, nothing is inserted
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#addMasterPage
 * @function
 */

/**
 * Removes an masterPage from the aggregation named <code>masterPages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vMasterPage the masterPage to remove or its index or id
 * @return {sap.ui.core.Control} the removed masterPage or null
 * @public
 * @name sap.m.SplitContainer#removeMasterPage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>masterPages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.SplitContainer#removeAllMasterPages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>masterPages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.SplitContainer#indexOfMasterPage
 * @function
 */
	

/**
 * Destroys all the masterPages in the aggregation 
 * named <code>masterPages</code>.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#destroyMasterPages
 * @function
 */


/**
 * Getter for aggregation <code>detailPages</code>.<br/>
 * The content entities between which this SplitContainer navigates in detail area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.SplitContainer#getDetailPages
 * @function
 */


/**
 * Inserts a detailPage into the aggregation named <code>detailPages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oDetailPage the detailPage to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the detailPage should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the detailPage is inserted at 
 *             the last position        
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#insertDetailPage
 * @function
 */

/**
 * Adds some detailPage <code>oDetailPage</code> 
 * to the aggregation named <code>detailPages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage to add; if empty, nothing is inserted
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#addDetailPage
 * @function
 */

/**
 * Removes an detailPage from the aggregation named <code>detailPages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vDetailPage the detailPage to remove or its index or id
 * @return {sap.ui.core.Control} the removed detailPage or null
 * @public
 * @name sap.m.SplitContainer#removeDetailPage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>detailPages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.SplitContainer#removeAllDetailPages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>detailPages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.SplitContainer#indexOfDetailPage
 * @function
 */
	

/**
 * Destroys all the detailPages in the aggregation 
 * named <code>detailPages</code>.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#destroyDetailPages
 * @function
 */


/**
 * Sets the initial detail page, which is shown on application launch.
 *
 * @return {string} Id of the element which is the current target of the <code>initialDetail</code> association, or null
 * @public
 * @name sap.m.SplitContainer#getInitialDetail
 * @function
 */

/**
 * Sets the initial detail page, which is shown on application launch.
 *
 * @param {string | sap.ui.core.Control} vInitialDetail 
 *    Id of an element which becomes the new target of this <code>initialDetail</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#setInitialDetail
 * @function
 */


	
/**
 * Sets the initial master page, which is shown on application launch.
 *
 * @return {string} Id of the element which is the current target of the <code>initialMaster</code> association, or null
 * @public
 * @name sap.m.SplitContainer#getInitialMaster
 * @function
 */

/**
 * Sets the initial master page, which is shown on application launch.
 *
 * @param {string | sap.ui.core.Control} vInitialMaster 
 *    Id of an element which becomes the new target of this <code>initialMaster</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#setInitialMaster
 * @function
 */


	
/**
 * The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @name sap.m.SplitContainer#masterNavigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 *
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#attachMasterNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#detachMasterNavigate
 * @function
 */

/**
 * Fire event masterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitContainer#fireMasterNavigate
 * @function
 */


/**
 * The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @name sap.m.SplitContainer#afterMasterNavigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 *
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#attachAfterMasterNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#detachAfterMasterNavigate
 * @function
 */

/**
 * Fire event afterMasterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitContainer#fireAfterMasterNavigate
 * @function
 */


/**
 * Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically. 
 *
 * @name sap.m.SplitContainer#masterButton
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 *  
 * Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 *
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#attachMasterButton
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#detachMasterButton
 * @function
 */

/**
 * Fire event masterButton to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitContainer#fireMasterButton
 * @function
 */


/**
 * This event is fired before the master area is opened. 
 *
 * @name sap.m.SplitContainer#beforeMasterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 *  
 * This event is fired before the master area is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 *
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#attachBeforeMasterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#detachBeforeMasterOpen
 * @function
 */

/**
 * Fire event beforeMasterOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitContainer#fireBeforeMasterOpen
 * @function
 */


/**
 * This event is fired when the master area is fully opened after animation if there is. 
 *
 * @name sap.m.SplitContainer#afterMasterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 *  
 * This event is fired when the master area is fully opened after animation if there is. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 *
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#attachAfterMasterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#detachAfterMasterOpen
 * @function
 */

/**
 * Fire event afterMasterOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitContainer#fireAfterMasterOpen
 * @function
 */


/**
 * This event is fired before the master area is closed. 
 *
 * @name sap.m.SplitContainer#beforeMasterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 *  
 * This event is fired before the master area is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 *
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#attachBeforeMasterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#detachBeforeMasterClose
 * @function
 */

/**
 * Fire event beforeMasterClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitContainer#fireBeforeMasterClose
 * @function
 */


/**
 * This event is fired when the master area is fully closed after the animation when there is. 
 *
 * @name sap.m.SplitContainer#afterMasterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 *  
 * This event is fired when the master area is fully closed after the animation when there is. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 *
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#attachAfterMasterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#detachAfterMasterClose
 * @function
 */

/**
 * Fire event afterMasterClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitContainer#fireAfterMasterClose
 * @function
 */


/**
 * The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @name sap.m.SplitContainer#detailNavigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 *
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#attachDetailNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#detachDetailNavigate
 * @function
 */

/**
 * Fire event detailNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitContainer#fireDetailNavigate
 * @function
 */


/**
 * The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @name sap.m.SplitContainer#afterDetailNavigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.
 *
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#attachAfterDetailNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitContainer#detachAfterDetailNavigate
 * @function
 */

/**
 * Fire event afterDetailNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitContainer#fireAfterDetailNavigate
 * @function
 */


/**
 * Navigate to given page inside the SplitContainer. The navigation is done inside the master area if the page has been added, otherwise it tries to do the page navigation in the detail area.
 *
 * @name sap.m.SplitContainer.prototype.to
 * @function
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.

 * @type sap.m.SplitContainer
 * @public
 * @since 1.10.0
 */


/**
 * Navigates back to the nearest previous page in the SplitContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the SplitContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 *
 * @name sap.m.SplitContainer.prototype.backToPage
 * @function
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.SplitContainer
 * @public
 * @since 1.10.0
 */


/**
 * navigate to given master page
 *
 * @name sap.m.SplitContainer.prototype.toMaster
 * @function
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData

 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters

 * @since 1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.

 * @type sap.m.SplitContainer
 * @public
 */


/**
 * navigate to given detail page
 *
 * @name sap.m.SplitContainer.prototype.toDetail
 * @function
 * @param {string} 
 *         sPageId
 *         
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.

 * @type sap.m.SplitContainer
 * @public
 */


/**
 * navigate back within MasterView
 *
 * @name sap.m.SplitContainer.prototype.backMaster
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.SplitContainer
 * @public
 */


/**
 * navigate back within DetailView
 *
 * @name sap.m.SplitContainer.prototype.backDetail
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.SplitContainer
 * @public
 */


/**
 * When in ShowHideMode and the device is in portrait mode, this function can be used to make the master page visible.
 *
 * @name sap.m.SplitContainer.prototype.showMaster
 * @function

 * @type sap.m.SplitContainer
 * @public
 */


/**
 * When in ShowHideMode and the device is in portrait mode, this function can be used to hide the master page.
 *
 * @name sap.m.SplitContainer.prototype.hideMaster
 * @function

 * @type sap.m.SplitContainer
 * @public
 */


/**
 * Returns the current shown page either in master area or in detail area. When the parameter is set to true, the current page in master area is returned. Otherwise the current page in detail area is returned.
 * 
 * This method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.
 *
 * @name sap.m.SplitContainer.prototype.getCurrentPage
 * @function
 * @param {boolean} 
 *         bMaster
 *         States if this function returns the current page in master area. If it's set to false, the current page in detail area will be returned.

 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */


/**
 * Returns the current shown master page.
 *
 * @name sap.m.SplitContainer.prototype.getCurrentMasterPage
 * @function

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Returns the current shown detail page.
 *
 * @name sap.m.SplitContainer.prototype.getCurrentDetailPage
 * @function

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Navigates back to the initial/top level of Master (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 *
 * @name sap.m.SplitContainer.prototype.backToTopMaster
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Navigates back to the initial/top level of Detail (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 *
 * @name sap.m.SplitContainer.prototype.backToTopDetail
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Add a content entity either to master area or detail area depending on the master parameter.
 * 
 * This method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.
 *
 * @name sap.m.SplitContainer.prototype.addPage
 * @function
 * @param {sap.ui.core.Control} 
 *         oPage
 *         The content entities between which this SplitContainer navigates in either master area or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * @param {boolean} 
 *         bMaster
 *         States if the page should be added to the master area. If it's set to false, the page is added to detail area.

 * @type sap.m.SplitContainer
 * @public
 * @since 1.11.1
 */


/**
 * Returns the page with the given id in master area. If there's no page that has the given id, null is returned.
 *
 * @name sap.m.SplitContainer.prototype.getMasterPage
 * @function
 * @param {string} 
 *         sId
 *         The id of the page that needs to be fetched.

 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */


/**
 * Returns the page with the given id in detail area. If there's no page that has the given id, null is returned.
 *
 * @name sap.m.SplitContainer.prototype.getDetailPage
 * @function
 * @param {string} 
 *         sId
 *         The id of the page that needs to be fetched.

 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */


/**
 * Returns the page with the given id from either master area or detail area depending on the master parameter. If there's no page that has the given id, null is returned.
 *
 * @name sap.m.SplitContainer.prototype.getPage
 * @function
 * @param {string} 
 *         sId
 *         The id of the page that needs to be fetched.
 * @param {boolean} 
 *         bMaster
 *         If the page with given id should be fetched from the master area. If it's set to false, the page will be fetched from detail area.

 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */


/**
 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
 * 
 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be possible because there is no previous page in the SplitContainer's history stack.
 *
 * @name sap.m.SplitContainer.prototype.insertPreviousPage
 * @function
 * @param {string} 
 *         sPageId
 *         The ID of the control/page/screen which is inserted into the history stack. The respective control must be aggregated by the SplitContainer, otherwise this will cause an error.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
 * This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.

 * @type sap.m.SplitContainer
 * @public
 */


/**
 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
 * If there is no previous page, "undefined" is returned.
 *
 * @name sap.m.SplitContainer.prototype.getPreviousPage
 * @function
 * @param {boolean} 
 *         bMaster
 *         States if this function returns the previous page in master area. If it's set to false, the previous page in detail area will be returned.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * 
 * Returns whether master area is currently shown on the screen. In desktop browser or tablet, this method returns true when master area is shown on the screen no matter in portrait or landscape mode. And on mobile phone devices, this method returns true when the current shown page is from the pages which are added to the master area, otherwise it returns false.
 * 
 *
 * @name sap.m.SplitContainer.prototype.isMasterShown
 * @function

 * @type boolean
 * @public
 * @since 1.16.5
 */


// Start of sap\m\SplitContainer.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**************************************************************
* START - Life Cycle Methods
**************************************************************/
sap.m.SplitContainer.prototype.init = function() {
	var oSplitContainer = this;
	this._isMie9 = false;
	this._isPlatformDependent = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true";
	//Check for IE9
	if(sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10) {
		this._isMie9 = true;
	}
	this.oCore = sap.ui.getCore();
	// Pages arrays: As we delegate the pages to internal navigation container we have to remember the pages
	// in private member variables. By doing this we can return the right pages for master /detail aggregations.
	this._aMasterPages = [];
	this._aDetailPages = [];
	if(!sap.ui.Device.system.phone) {
		this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");
		//initialize the master nav container
		this._oMasterNav = new sap.m.NavContainer(this.getId() + "-Master", {
			width: "",
			navigate: function(oEvent){
				oSplitContainer._handleNavigationEvent(oEvent, false, true);
			},
			afterNavigate: function(oEvent){
				oSplitContainer._handleNavigationEvent(oEvent, true, true);
			}
		});

		//initialize the master nav container
		this._oDetailNav = new sap.m.NavContainer(this.getId() + "-Detail", {
			width: "",
			navigate: function(oEvent){
				oSplitContainer._handleNavigationEvent(oEvent, false, false);
			},
			afterNavigate: function(oEvent){
				oSplitContainer._handleNavigationEvent(oEvent, true, false);
			}
		});
		
		this.setAggregation("_navMaster", this._oMasterNav, true);
		this.setAggregation("_navDetail", this._oDetailNav, true);

		//initialize the navigation button
		this._createShowMasterButton();

		//initialize the popover
		this._oPopOver = new sap.m.Popover(this.getId() + "-Popover", {
			placement: sap.m.PlacementType.Bottom,
			showHeader: false,
			contentWidth: "320px",
			contentHeight: "600px",
			beforeOpen: function(){
				oSplitContainer.fireBeforeMasterOpen();
			},
			beforeClose: function(){
				oSplitContainer.fireAfterMasterOpen();
			},
			afterOpen: function(){
				oSplitContainer.fireAfterMasterOpen();
				oSplitContainer._bMasterisOpen = true;
			},
			afterClose: function(){
				oSplitContainer.fireAfterMasterClose();
				oSplitContainer._bMasterisOpen = false;
			}
		}).addStyleClass("sapMSplitContainerPopover");
		
		this.setAggregation("_navPopover", this._oPopOver, true);
	}else {
		//master nav and detail nav are the same in phone
		this._oMasterNav = this._oDetailNav =  new sap.m.NavContainer();
		this.setAggregation("_navMaster", this._oMasterNav, true);
	}
	
	this._oldIsLandscape = sap.ui.Device.orientation.landscape;
	//if master page is open when device is in portrait and show/hide mode
	this._bMasterisOpen = false; 

	// Patch removeChild methods of navigation container. This is to remove the page from the internal pages array
	// when a page is moved to another aggregation.
	var that = this;
	var fnPatchRemoveChild = function(fnRemoveChild, sNavContainerProperty, sPagesArrayProperty) {
		return function(oChild, sAggregationName, bSuppressInvalidate) {
			fnRemoveChild.apply(that[sNavContainerProperty], arguments);
			if (sAggregationName === "pages" && jQuery.inArray(oChild, that[sPagesArrayProperty])) {
				that._removePageFromArray(that[sPagesArrayProperty], oChild);
			}
		};
	};

	var fnMasterNavRemoveChild = this._oMasterNav._removeChild;
	this._oMasterNav._removeChild = fnPatchRemoveChild(fnMasterNavRemoveChild, "_oMasterNav", "_aMasterPages");

	if (this._oDetailNav) {
		var fnDetailNavRemoveChild = this._oDetailNav._removeChild;
		this._oDetailNav._removeChild = fnPatchRemoveChild(fnDetailNavRemoveChild, "_oDetailNav", "_aDetailPages");
	}
};

sap.m.SplitContainer.prototype.onBeforeRendering = function() {
	if(this._fnOrientationChange) {
		sap.ui.Device.resize.detachHandler(this._fnOrientationChange);
	}
	
	//if SplitContainer is rerendered while the master is open, clear the status.
	if(this._bMasterisOpen && (this._portraitHide() || this._hideMode())){
		this._oShowMasterBtn.removeStyleClass("sapMSplitContainerMasterBtnHidden");
		this._bMasterisOpen = false;
	}
};

sap.m.SplitContainer.prototype.exit = function() {
	if(this._fnOrientationChange){
		sap.ui.Device.resize.detachHandler(this._fnOrientationChange);
	}
	delete this._aMasterPages;
	delete this._aDetailPages;
	if(this._oShowMasterBtn) {
		this._oShowMasterBtn.destroy();
		this._oShowMasterBtn = null;
	}
};

sap.m.SplitContainer.prototype.onAfterRendering = function() {
	if(!sap.ui.Device.system.phone) {
		if(this._oPopOver && this._oPopOver.isOpen()){
			this._oPopOver.close();
		}
		if(!this._fnOrientationChange){
			this._fnOrientationChange = jQuery.proxy(this._handleOrientationChange, this);
		}
		sap.ui.Device.resize.attachHandler(this._fnOrientationChange);
	}
	
	if(sap.ui.Device.browser.internet_explorer){
		this._oMasterNav.$().append('<iframe class="sapMSplitContainerMasterBlindLayer" src="about:blank"></iframe>');
	}
};
/**************************************************************
* END - Life Cycle Methods
**************************************************************/

/**************************************************************
* START - Touch Event Handlers
**************************************************************/
sap.m.SplitContainer.prototype.ontouchstart = function(oEvent){
	if(!sap.ui.Device.system.phone){
		if(oEvent.originalEvent && oEvent.originalEvent._sapui_handledByControl){
			this._bIgnoreSwipe = true;
		}else{
			this._bIgnoreSwipe = false;
		}
	}
};

sap.m.SplitContainer.prototype.onswiperight = function(oEvent) {
	//only enabled on tablet or Windows 8
	if((sap.ui.Device.system.tablet || (sap.ui.Device.os.windows && sap.ui.Device.os.version >= 8))
		&& (this._portraitHide() || this._hideMode()) 
		&& !this._bIgnoreSwipe) {
		//if event is already handled by inner control, master won't be shown.
		//this fix the problem when for example, carousel control in rendered in detail area.
		//CSN 2013 224661
		if(!this._bDetailNavButton){
			this.showMaster();
		}
	}
};

//handles closing of master navContainer and navigation inside it
sap.m.SplitContainer.prototype.ontap = function(oEvent) {
	if(sap.ui.Device.system.phone){
		return;
	}

	var bIsMasterNav = true;

	if(jQuery(oEvent.target).parents(".sapMSplitContainerDetail").length > 0) {
		bIsMasterNav = false;
	}

	// when press not in MasterNav and not the showMasterButton, master will be hidden
	// this should happen when:
	// 1. showhidemode in portrait
	// 2. hidemode
	if(((!this._oldIsLandscape && this.getMode() == "ShowHideMode") || this.getMode() == "HideMode")
			// press isn't occuring in master area
			&& !bIsMasterNav
			// master is open
			&& this._bMasterisOpen
			// press isn't triggered by the showMasterButton
			&& !jQuery.sap.containsOrEquals(this._oShowMasterBtn.getDomRef(), oEvent.target)){
		this.hideMaster();
	}
};

sap.m.SplitContainer.prototype.onswipeleft = function(oEvent) {
	//only enabled on tablet or Windows 8
	if((sap.ui.Device.system.tablet || (sap.ui.Device.os.windows && sap.ui.Device.os.version >= 8)) 
		&& (this._portraitHide() || this._hideMode()) 
		&& !this._bIgnoreSwipe) {
		this.hideMaster();
	}
};

sap.m.SplitContainer.prototype._onMasterButtonTap = function(oEvent){
	if(sap.ui.Device.system.phone){
		return;
	}

	if(!this._oldIsLandscape){
		if(this.getMode() == "PopoverMode") {
			if(!this._oPopOver.isOpen()){
				this._oPopOver.openBy(this._oShowMasterBtn, true);
			}else{
				this._oPopOver.close();
			}
		}else{
			this.showMaster();
		}
	}else{
		if(this.getMode() === "HideMode"){
			this.showMaster();
		}
	}
};
//**************************************************************
//* End - Touch Event Handlers
//**************************************************************

//**************************************************************
//* START - Public methods
//**************************************************************

sap.m.SplitContainer.prototype.to = function(pageId, transitionName, data, oTransitionParameters) {
	if (this._oMasterNav.getPage(pageId)) {
		this._oMasterNav.to(pageId, transitionName, data, oTransitionParameters);
	} else {
		this._oDetailNav.to(pageId, transitionName, data, oTransitionParameters);
	}
};

sap.m.SplitContainer.prototype.backToPage = function(pageId, backData, oTransitionParameters) {
	if (this._oMasterNav.getPage(pageId)) {
		this._oMasterNav.backToPage(pageId, backData, oTransitionParameters);
	} else {
		this._oDetailNav.backToPage(pageId, backData, oTransitionParameters);
	}
};


sap.m.SplitContainer.prototype.insertPreviousPage = function(pageId, transitionName, data) {
	if (this._oMasterNav.getPage(pageId)) {
		this._oMasterNav.insertPreviousPage(pageId, transitionName, data);
	} else {
		this._oDetailNav.insertPreviousPage(pageId, transitionName, data);
	}
	return this;
};


sap.m.SplitContainer.prototype.toMaster = function(pageId, transitionName, data, oTransitionParameters) {
	this._oMasterNav.to(pageId, transitionName, data, oTransitionParameters);
};

sap.m.SplitContainer.prototype.backMaster = function(backData, oTransitionParameters) {
	this._oMasterNav.back(backData, oTransitionParameters);
};

sap.m.SplitContainer.prototype.backMasterToPage = function(pageId, backData, oTransitionParameters) {
	this._oMasterNav.backToPage(pageId, backData, oTransitionParameters);
};

sap.m.SplitContainer.prototype.toDetail = function(pageId, transitionName, data, oTransitionParameters) {
	this._oDetailNav.to(pageId, transitionName, data, oTransitionParameters);
};

sap.m.SplitContainer.prototype.backDetail = function(backData, oTransitionParameters) {
	this._oDetailNav.back(backData, oTransitionParameters);
};

sap.m.SplitContainer.prototype.backDetailToPage = function(pageId, backData, oTransitionParameters) {
	this._oDetailNav.backToPage(pageId, backData, oTransitionParameters);
};

sap.m.SplitContainer.prototype.backToTopMaster = function(backData, oTransitionParameters) {
	this._oMasterNav.backToTop(backData, oTransitionParameters);
};

sap.m.SplitContainer.prototype.backToTopDetail = function(backData, oTransitionParameters) {
	this._oDetailNav.backToTop(backData, oTransitionParameters);
};

sap.m.SplitContainer.prototype.addMasterPage = function(oPage) {
	var oRealPage = this._getRealPage(oPage);

	if(this._hasPageInArray(this._aMasterPages, oPage)) {
		return;
	}

	// When the same NavContainer is used for both aggregations, calling "addPage()" will not do anything in case the oPage is already
	// aggregated by this NavContainer, but in the other "virtual" aggregation of this SplitContainer (i.e. moved from detailPages to masterPages).
	// This would lead to the page being added to the "master" array, but not removed from the "detail" array because the patched method
	// in the NavContainer (removePage) is not called. Hence, remove it directly from the detail array.
	if (this._oMasterNav === this._oDetailNav && jQuery.inArray(oPage, this._oDetailNav.getPages())) {
		this._removePageFromArray(this._aDetailPages, oPage);
	}
	this._oMasterNav.addPage(oPage);
	this._aMasterPages.push(oPage);
	return this;
};

sap.m.SplitContainer.prototype.addDetailPage = function(oPage) {
	var oSplitContainer = this,
		oRealPage = this._getRealPage(oPage),
		oCore = this.oCore,
		sPageId = oRealPage ? oRealPage.getId() : "";

	if(this._hasPageInArray(this._aDetailPages, oPage)) {
		return;
	}
	
	//processing the header in page
	oPage.addDelegate({
		onBeforeFirstShow: function(){
			if(oRealPage){
				var oNavButton = oCore.byId(sPageId + "-navButton"),
					oIconImage = oCore.byId(sPageId + "-icon");
				if(!sap.ui.Device.system.phone){
					if(oNavButton){
						//oNavButton.addStyleClass("sapMSplitContainerHiddenChild");
					}
					if(oIconImage){
						//oIconImage.addStyleClass("sapMSplitContainerHiddenChild");
					}
				}
			}
		},
		onBeforeShow: function(){
			if(oRealPage){
				if(!sap.ui.Device.system.phone){
					//now it's a tablet
					//this is the initialization of header in page inside the detail navigation container
					//rules are displayed below
					// 1. navigation button is completely removed from the page in detail nav container
					// 2. iOS: show title if there is
					// 3: Android: Icon isn't shown directly in header, the icon is added to the showMasterButton.
					// 4: Android: show title in portrait mode, hide title in landscape
					if((oSplitContainer._portraitHide() || oSplitContainer._hideMode() || oSplitContainer._portraitPopover()) && (!oSplitContainer._bMasterisOpen || oSplitContainer._bMasterClosing)) {
						oSplitContainer._setMasterButton(oRealPage, jQuery.proxy(oSplitContainer._setTitleVisibility, oSplitContainer));
					}else{
						oSplitContainer._setTitleVisibility(oRealPage);
					}
				}
			}
		}
	});
	
	if(oRealPage){
		oRealPage.addDelegate({
			//before rendering is used in order to avoid invalidate in renderer (set button to the header in page)
			onBeforeRendering: function(){
				if(!sap.ui.Device.system.phone) {
					if(oSplitContainer._portraitHide() || oSplitContainer._hideMode()) {
						if(!oSplitContainer._bMasterisOpen || oSplitContainer._bMasterClosing){
							oSplitContainer._setMasterButton(oRealPage);
						}
					}else if(oSplitContainer._portraitPopover()) {
						oSplitContainer._setMasterButton(oRealPage);
					}else {
						oSplitContainer._removeMasterButton(oRealPage);
					}
				}
			}
		});
	}
	
	// When the same NavContainer is used for both aggregations, calling "addPage()" will not do anything in case the oPage is already
	// aggregated by this NavContainer, but in the other "virtual" aggregation of this SplitContainer (i.e. moved from masterPages to detailPages).
	// This would lead to the page being added to the "detail" array, but not removed from the "master" array because the patched method
	// in the NavContainer (removePage) is not called. Hence, remove it directly from the master array.
	if (this._oMasterNav === this._oDetailNav && jQuery.inArray(oPage, this._oMasterNav.getPages())) {
		this._removePageFromArray(this._aMasterPages, oPage);
	}
	
	this._oDetailNav.addPage(oPage);
	this._aDetailPages.push(oPage);
	return this;
};

sap.m.SplitContainer.prototype.getMasterPages = function() {
	return this._aMasterPages;
};

sap.m.SplitContainer.prototype.getDetailPages = function() {
	return this._aDetailPages;
};

sap.m.SplitContainer.prototype.indexOfMasterPage = function(oPage) {
	return this._indexOfMasterPage(oPage);
};

sap.m.SplitContainer.prototype.indexOfDetailPage = function(oPage) {
	return this._indexOfDetailPage(oPage);
};

sap.m.SplitContainer.prototype.insertMasterPage = function(oPage, iIndex, bSuppressInvalidate) {
	return this._insertPage(this._aMasterPages, "masterPages", oPage, iIndex, bSuppressInvalidate)
};

sap.m.SplitContainer.prototype.removeMasterPage = function(oPage, bSuppressInvalidate) {
	return this._removePage(this._aMasterPages, "masterPages", oPage, bSuppressInvalidate);
};

sap.m.SplitContainer.prototype.removeAllMasterPages = function(bSuppressInvalidate) {
	this._aMasterPages = [];
	return this.removeAllAggregation("masterPages", bSuppressInvalidate);
};

sap.m.SplitContainer.prototype.insertDetailPage = function(oPage, iIndex, bSuppressInvalidate) {
	return this._insertPage(this._aDetailPages, "detailPages", oPage, iIndex, bSuppressInvalidate)
};

sap.m.SplitContainer.prototype.removeDetailPage = function(oPage, bSuppressInvalidate) {
	return this._removePage(this._aDetailPages, "detailPages", oPage, bSuppressInvalidate);
};

sap.m.SplitContainer.prototype.removeAllDetailPages = function(bSuppressInvalidate) {
	this._aDetailPages = [];
	return this.removeAllAggregation("detailPages", bSuppressInvalidate);
};

sap.m.SplitContainer.prototype.addPage = function(oPage, bMaster){
	if(bMaster){
		return this.addMasterPage(oPage);
	}else{
		return this.addDetailPage(oPage);
	}
};

sap.m.SplitContainer.prototype.showMaster = function() {
	var _this$ = this._oMasterNav.$(),
		that = this,
		_curPage = this._getRealPage(this._oDetailNav.getCurrentPage());
	if(this._portraitPopover()) {
        if(!this._oPopOver.isOpen()){
        	function afterPopoverOpen(){
        		this._oPopOver.detachAfterOpen(afterPopoverOpen, this);
        		this._bMasterOpening = false;
        		this._bMasterisOpen = true;
        		this.fireAfterMasterOpen();
        	}
        	this._oPopOver.attachAfterOpen(afterPopoverOpen, this);
        	this.fireBeforeMasterOpen();
        	this._oPopOver.openBy(this._oShowMasterBtn, true);
        	this._bMasterOpening = true;
        }
	}else{
		if((this._portraitHide() || this._hideMode()) 
			&& (!this._bMasterisOpen || this._bMasterClosing)) {
			if(this._isMie9) {
				this._oMasterNav.$().css("width", "320px");
				_this$.animate({
					left: "+=320"
				}, {
					duration: 300
				});
				this._bMasterisOpen = true;
				that._bMasterOpening = false;
				this._removeMasterButton(_curPage, jQuery.proxy(this._setTitleVisibility, this));
			}
			_this$.bind((sap.ui.Device.os.ios || !this._isPlatformDependent) ? "webkitTransitionEnd transitionend" : "webkitAnimationEnd animationend", function(){
				jQuery(this).unbind("webkitTransitionEnd transitionend");
				jQuery(this).unbind("webkitAnimationEnd animationend");
				that._bMasterOpening = false;
				that._bMasterisOpen = true;
				that._removeMasterButton(_curPage, jQuery.proxy(that._setTitleVisibility, that));
				that.fireAfterMasterOpen();
			});
			this.fireBeforeMasterOpen();
			_this$.toggleClass("sapMSplitContainerMasterVisible", true);
			_this$.toggleClass("sapMSplitContainerMasterHidden", false);
			this._bMasterOpening = true;
			
			// workaround for bug in current webkit versions: in slided-in elements the z-order may be wrong and will be corrected once a re-layout is enforced 
			// see http://code.google.com/p/chromium/issues/detail?id=246965
			if (sap.ui.Device.browser.webkit) {
				var oMNav = this._oMasterNav;
				window.setTimeout(function(){
					oMNav.$().css("box-shadow", "none"); // remove box-shadow
					window.setTimeout(function(){
						oMNav.$().css("box-shadow", "");  // add it again
					},50);
				},0);
			}
		}
	}
	return this;
};

sap.m.SplitContainer.prototype.hideMaster = function() {
	var _this$ = this._oMasterNav.$(),
		that = this,
		_curPage = that._getRealPage(that._oDetailNav.getCurrentPage());
	if(this._portraitPopover()) {
        if(this._oPopOver.isOpen()){
        	function afterPopoverClose(){
        		this._oPopOver.detachAfterClose(afterPopoverClose, this);
        		this._bMasterClosing = false;
        		this._bMasterisOpen = false;
        		this.fireAfterMasterClose();
        	}
        	this._oPopOver.attachAfterClose(afterPopoverClose, this);
        	this.fireBeforeMasterClose();
        	this._oPopOver.close();
        	this._bMasterClosing = true;
        }
	}else{
		if((this._portraitHide() || this._hideMode()) 
			&& this._bMasterisOpen) {
			if(this._isMie9) {
				_this$.animate({
					left: "-=320"
				}, {
					duration: 300
				});
				this._bMasterisOpen = false;
				this._setMasterButton(_curPage, jQuery.proxy(this._setTitleVisibility, this));
			}
			_this$.bind((sap.ui.Device.os.ios || !this._isPlatformDependent) ? "webkitTransitionEnd transitionend" : "webkitAnimationEnd animationend", function(){
				jQuery(this).unbind("webkitTransitionEnd transitionend");
				jQuery(this).unbind("webkitAnimationEnd animationend");
				that._bMasterClosing = false;
				that._bMasterisOpen = false;
				that._setMasterButton(_curPage, jQuery.proxy(that._setTitleVisibility, that));
				that.fireAfterMasterClose();
			});
			this.fireBeforeMasterClose();
			_this$.toggleClass("sapMSplitContainerMasterVisible" , false);
			_this$.toggleClass("sapMSplitContainerMasterHidden" , true);
			this._bMasterClosing = true;
		}
	}
	return this;
};

sap.m.SplitContainer.prototype.getCurrentMasterPage = function() {
	return this._oMasterNav.getCurrentPage();
};



sap.m.SplitContainer.prototype.getCurrentDetailPage = function() {
	return this._oDetailNav.getCurrentPage();
};

sap.m.SplitContainer.prototype.getCurrentPage = function(bMaster){
	if(bMaster){
		return this.getCurrentMasterPage();
	}else{
		return this.getCurrentDetailPage();
	}
};


sap.m.SplitContainer.prototype.getPreviousPage = function(bMaster) {	
	if(bMaster){
		return this._oMasterNav.getPreviousPage();
	}else{
		return this._oDetailNav.getPreviousPage();
	}
};

sap.m.SplitContainer.prototype.getMasterPage = function(pageId){
	return this._oMasterNav.getPage(pageId);
};

sap.m.SplitContainer.prototype.getDetailPage = function(pageId){
	return this._oDetailNav.getPage(pageId);
};

sap.m.SplitContainer.prototype.getPage = function(pageId, bMaster){
	if(bMaster){
		return this.getMasterPage(pageId);
	}else{
		return this.getDetailPage(pageId);
	}
};

sap.m.SplitContainer.prototype.isMasterShown = function(){
	if(sap.ui.Device.system.phone){
		var oCurPage = this._oMasterNav.getCurrentPage();
		return this._indexOfMasterPage(oCurPage) !== -1;
	}else{
		var sMode = this.getMode();
		switch(sMode){
			case sap.m.SplitAppMode.StretchCompressMode:
				// master area is always shown in this mode
				return true;
			case sap.m.SplitAppMode.HideMode:
				return this._bMasterisOpen;
			case sap.m.SplitAppMode.PopoverMode:
			case sap.m.SplitAppMode.ShowHideMode:
				return sap.ui.Device.orientation.landscape || this._bMasterisOpen;
			default:
				return false;
		}
	}
};

//**************************************************************
//* END - Public methods
//**************************************************************

//**************************************************************
//* START - Setters/Getters of the SplitContainer control
//**************************************************************
sap.m.SplitContainer.prototype.setInitialMaster = function(sPage) {
	this._oMasterNav.setInitialPage(sPage);
	this.setAssociation('initialMaster', sPage, true);
	return this;
};

sap.m.SplitContainer.prototype.setInitialDetail = function(sPage) {
	if(!sap.ui.Device.system.phone) {
		this._oDetailNav.setInitialPage(sPage);
	}
	this.setAssociation('initialDetail', sPage, true);
	return this;
};

sap.m.SplitContainer.prototype.setDefaultTransitionNameDetail = function(sTransition) {
	this.setProperty("defaultTransitionNameDetail", sTransition, true);
	this._oDetailNav.setDefaultTransitionName(sTransition);
	return this;
};

sap.m.SplitContainer.prototype.setDefaultTransitionNameMaster = function(sTransition) {
	this.setProperty("defaultTransitionNameMaster", sTransition, true);
	this._oMasterNav.setDefaultTransitionName(sTransition);
	return this;
};

sap.m.SplitContainer.prototype.setMasterButtonText = function(sText) {
	if((sap.ui.Device.os.ios || !this._isPlatformDependent) && !sap.ui.Device.system.phone){
		if(!sText){
			sText = this._rb.getText("SplitContainer_NAVBUTTON_TEXT");
		}
		this._oShowMasterBtn.setText(sText);
	}
	this.setProperty("masterButtonText", sText, true);
	return this;
};

sap.m.SplitContainer.prototype.setMode = function(sMode) {
	var sOldMode = this.getMode();
	if(sOldMode === sMode){
		return;
	}
	this.setProperty("mode", sMode, true);
	this._bMasterisOpen = false;
	//the reposition of master and detail area only occurs in tablet and after it's rendered
	if(!sap.ui.Device.system.phone && this.getDomRef()){
		if(sOldMode === "HideMode" && this._oldIsLandscape){
			//remove the master button
			this._removeMasterButton(this._oDetailNav.getCurrentPage(), jQuery.proxy(this._setTitleVisibility, this));
			if(this._isMie9) {
				this._oMasterNav.$().css({
					left: 0,
					width: ""
				});
			}
		}
		
		if(sMode !== "PopoverMode" && this._oPopOver.getContent().length > 0) {
			this._updateMasterPosition("landscape");
		}else if(sMode == "PopoverMode"){
			if(!this._oldIsLandscape){
				if(this._oPopOver.getContent().length === 0){
					this._updateMasterPosition("popover");
				}
				this._setMasterButton(this._oDetailNav.getCurrentPage(), jQuery.proxy(this._setTitleVisibility, this));
			}
			this.$().toggleClass("sapMSplitContainerShowHide", false);
			this.$().toggleClass("sapMSplitContainerStretchCompress", false);
			this.$().toggleClass("sapMSplitContainerHideMode", false);
			this.$().toggleClass("sapMSplitContainerPopover", true);
		}
		
		if(sMode == "StretchCompressMode") {
			this.$().toggleClass("sapMSplitContainerShowHide", false);
			this.$().toggleClass("sapMSplitContainerPopover", false);
			this.$().toggleClass("sapMSplitContainerHideMode", false);
			this.$().toggleClass("sapMSplitContainerStretchCompress", true);
			this._removeMasterButton(this._oDetailNav.getCurrentPage(), jQuery.proxy(this._setTitleVisibility, this));
		}
		
		if(sMode == "ShowHideMode") {
			this.$().toggleClass("sapMSplitContainerPopover", false);
			this.$().toggleClass("sapMSplitContainerStretchCompress", false);
			this.$().toggleClass("sapMSplitContainerHideMode", false);
			this.$().toggleClass("sapMSplitContainerShowHide", true);
			if(!sap.ui.Device.orientation.landscape){
				this._setMasterButton(this._oDetailNav.getCurrentPage(), jQuery.proxy(this._setTitleVisibility, this));
			}
		}
		
		if(sMode === "HideMode"){
			this.$().toggleClass("sapMSplitContainerPopover", false);
			this.$().toggleClass("sapMSplitContainerStretchCompress", false);
			this.$().toggleClass("sapMSplitContainerShowHide", false);
			this.$().toggleClass("sapMSplitContainerHideMode", true);
			this._setMasterButton(this._oDetailNav.getCurrentPage(), jQuery.proxy(this._setTitleVisibility, this));
			if(this._isMie9) {
				this._oMasterNav.$().css({
					left: "",
					width: "auto"
				});
			}
		}
	}
	return this;
};

sap.m.SplitContainer.prototype.setBackgroundOpacity = function(fOpacity) {
	if (fOpacity > 1 || fOpacity < 0) {
		jQuery.sap.log.warning("Invalid value " + fOpacity + " for SplitContainer.setBackgroundOpacity() ignored. Valid values are: floats between 0 and 1.");
		return this;;
	}
	this.$("BG").css("opacity", fOpacity);
	return this.setProperty("backgroundOpacity", fOpacity, true); // no rerendering - live opacity change looks cooler
};


/**************************************************************
* START - Private methods
**************************************************************/

/**
 * @private
 */
sap.m.SplitContainer.prototype._indexOfMasterPage = function(oPage) {
	return jQuery.inArray(oPage, this._aMasterPages);
};

/**
 * @private
 */
sap.m.SplitContainer.prototype._indexOfDetailPage = function(oPage) {
	return jQuery.inArray(oPage, this._aDetailPages);
};


/**
 * @private
 */
sap.m.SplitContainer.prototype._insertPage = function(aPageArray, sAggregation, oPage, iIndex, bSuppressInvalidate) {
	this.insertAggregation(sAggregation, oPage, iIndex, bSuppressInvalidate);
	var i = iIndex < 0 ? 0 : (iIndex > aPageArray.length ? aPageArray.length : iIndex);
	var iOldIndex = jQuery.inArray(oPage, aPageArray);;
	aPageArray.splice(i, 0, oPage);
	if (iOldIndex != -1) {
		// this is the insert order ui5 is doing it: first add, then remove when it was added before (even so this would remove the just added control)
		this._removePageFromArray(aPageArray, oPage);
	}
	return this;
};


/**
 * @private
 */
sap.m.SplitContainer.prototype._removePage = function(aPageArray, sAggregation, oPage, bSuppressInvalidate) {
	var oRemovedPage = this.removeAggregation(sAggregation, oPage, bSuppressInvalidate);
	if (oRemovedPage) {
		this._removePageFromArray(aPageArray, oRemovedPage);
	}
	return oRemovedPage;
};


/**
 * @private
 */
sap.m.SplitContainer.prototype._removePageFromArray = function(aPageArray, oPage) {
	var iIndex = jQuery.inArray(oPage, aPageArray);
	if (iIndex != -1) {
		aPageArray.splice(iIndex, 1);
	}
};


sap.m.SplitContainer.prototype._handleNavigationEvent = function(oEvent, bAfter, bMaster){
	var sEventName = (bAfter ? "After" : "") + (bMaster ? "Master" : "Detail") + "Navigate";
	sEventName = sEventName.charAt(0).toLowerCase() + sEventName.slice(1);
	
	this.fireEvent(sEventName, oEvent.mParameters);
};

sap.m.SplitContainer.prototype._handleOrientationChange = function() {
	var isLandscape = sap.ui.Device.orientation.landscape,
		_currentPage = this._oDetailNav.getCurrentPage(),
		mode = this.getMode();

	if(this._oldIsLandscape !== isLandscape) {
		this._oldIsLandscape = isLandscape;	
		if (!sap.ui.Device.system.phone) {
			this.$().toggleClass("sapMSplitContainerPortrait", !isLandscape);
	
			//hidemode doesn't react to orientation change
			if(mode === "HideMode"){
				return;
			}
		
			if(mode === "ShowHideMode"){
				if(isLandscape) {
					this.fireBeforeMasterOpen();
				}else{
					this.fireBeforeMasterClose();
				}
			}
			
			if(this._isMie9) {
				if(isLandscape) {
					this._oMasterNav.$().css({
						left: 0,
						width: ""
					});
				}else {
					if(mode === "ShowHideMode" || mode === "PopoverMode"){
						this._oMasterNav.$().css({
							left: -320,
							width: "auto"
						});
					}
				}
			}
			
			if(mode === "ShowHideMode" || mode === "PopoverMode") {
				if(isLandscape) {
					this._oMasterNav.$().toggleClass("sapMSplitContainerMasterVisible", false);
					this._oMasterNav.$().toggleClass("sapMSplitContainerMasterHidden", false);
				}
			}
			
			if(mode === "ShowHideMode"){
				if(isLandscape) {
					this._bMasterisOpen = true;
					this.fireAfterMasterOpen();
				}else{
					this._bMasterisOpen = false;
					this.fireAfterMasterClose();
				}
			}
			
			if(this.getMode() == "PopoverMode") {
				if(this._oPopOver.oPopup.isOpen()){
				//Wait for the popover to be closed properly
					this._oPopOver.attachAfterClose(this._handlePopClose, this);
					this._oPopOver.close();
				} else {
					this._handlePopClose();
				}
			}
			
			_currentPage = this._getRealPage(_currentPage);
			if(!this._oldIsLandscape && mode != "StretchCompressMode") {
				this._setMasterButton(_currentPage, jQuery.proxy(this._setTitleVisibility, this));
			}else {
				this._removeMasterButton(_currentPage, jQuery.proxy(this._setTitleVisibility, this));
			}			
		}
	}
};

sap.m.SplitContainer.prototype._setTitleVisibility = function(oPage){
	var oRealPage = oPage || this._getRealPage(this._oDetailNav.getCurrentPage()),
		oCore = this.oCore,
		sPageId = oRealPage ? oRealPage.getId() : "";
	if(sPageId){
		var oTitle = oCore.byId(sPageId + "-title");
		if(!sap.ui.Device.os.ios && this._isPlatformDependent){
			if((this._portraitHide() || this._portraitPopover() || this._hideMode()) && (!this._bMasterisOpen || this._bMasterClosing)){
				oTitle && oTitle.removeStyleClass("sapMSplitContainerHiddenChild");
			}else{
				oTitle && oTitle.addStyleClass("sapMSplitContainerHiddenChild");
			}
		}
	};
};

sap.m.SplitContainer.prototype._handlePopClose = function(oEvent) {
	this._oPopOver.detachAfterClose(this._handlePopClose, this);
	if(this._oldIsLandscape) {
		this._updateMasterPosition("landscape");
	}else {
		this._updateMasterPosition("popover");
	}
};

sap.m.SplitContainer.prototype._getRealPage = function(oPage){
	var oReturn = oPage, aContent;
	
	while(oReturn){
		if(oReturn instanceof sap.m.Page){
			return oReturn;
		}
		if(oReturn instanceof sap.ui.core.mvc.View){
			aContent = oReturn.getContent();
			if(aContent.length === 1){
				oReturn = aContent[0];
				continue;
			}
		}
		oReturn = null;
	}
	return oReturn;
};

 //updates the dom position of the Master NavContainer (inside popover or left next to the Detail NavContainer)
sap.m.SplitContainer.prototype._updateMasterPosition = function(sPos) {
	var that = this;
	if(sPos == "popover") {
		//remove the NavContainer dom from the left side without rerendering the whole app
		this.removeAggregation("_navMaster", this._oMasterNav, true);
		this._oMasterNav.$().remove();
		this._oPopOver.addContent(this._oMasterNav);
		this._bMasterisOpen = false;
	}
	if(sPos == "landscape") {
		var fRearrangeNavMaster = function(){
			that._oPopOver.removeAggregation("content", that._oMasterNav, false);
			that.setAggregation("_navMaster", that._oMasterNav, true);
			//render only the master navContainer, to prevent the whole app from rerendering
			var $master = that.$();
			if ($master[0]) {
				var rm = sap.ui.getCore().createRenderManager();
				rm.renderControl(that._oMasterNav.addStyleClass("sapMSplitContainerMaster"));
				rm.flush($master[0], false, 1);
				rm.destroy();
			}
		};
		
		if(this._oPopOver.isOpen()){
			var fAfterCloseHandler = function(){
				this._oPopOver.detachAfterClose(fAfterCloseHandler, this);
				this._bMasterisOpen = false;
				fRearrangeNavMaster();
			};
			this._oPopOver.attachAfterClose(fAfterCloseHandler, this);
			this._oPopOver.close();
		}else{
			fRearrangeNavMaster();
		}
	}
};

//Portrait - Tablet - ShowHideMode
sap.m.SplitContainer.prototype._portraitHide = function() {
	if(!this._oldIsLandscape && !sap.ui.Device.system.phone && this.getMode() === "ShowHideMode") {
		return true;
	} else {
		return false;
	}
};

//Portrait - Tablet - PopoverMode
sap.m.SplitContainer.prototype._portraitPopover = function() {
	if(!this._oldIsLandscape && !sap.ui.Device.system.phone && this.getMode() === "PopoverMode") {
		return true;
	} else {
		return false;
	}
};

//hide mode - not phone
sap.m.SplitContainer.prototype._hideMode = function() {
	return this.getMode() === "HideMode" && !sap.ui.Device.system.phone;
};

sap.m.SplitContainer.prototype._createShowMasterButton = function() {
	if (this._oShowMasterBtn && !this._oShowMasterBtn.bIsDestroyed) {
		return;
	}

	this._oShowMasterBtn = new sap.m.Button(this.getId() + "-MasterBtn", {
		text: (sap.ui.Device.os.ios && this._isPlatformDependent) ? this._rb.getText("SPLITCONTAINER_NAVBUTTON_TEXT") : "",
		icon: !this._isPlatformDependent ? sap.ui.core.IconPool.getIconURI("menu2") : "",
		type: (sap.ui.Device.os.ios || !this._isPlatformDependent) ? sap.m.ButtonType.Default : sap.m.ButtonType.Up,
		press: jQuery.proxy(this._onMasterButtonTap, this)
	}).addStyleClass("sapMSplitContainerMasterBtn");
};

sap.m.SplitContainer.prototype._setMasterButton = function(oPage, fnCallBack) {
	if(!oPage){
		return;
	}
	
	oPage = this._getRealPage(oPage);
	var aHeaderContent = oPage._getAnyHeader().getContentLeft();
	for(var i=0; i < aHeaderContent.length; i++) {
		if(aHeaderContent[i] instanceof sap.m.Button && (aHeaderContent[i].getType() == sap.m.ButtonType.Back || (aHeaderContent[i].getType() == sap.m.ButtonType.Up && aHeaderContent[i] !== this._oShowMasterBtn))) {
			this._bDetailNavButton = true;
			return;
		}
	}
	this._bDetailNavButton = false;
	
	if(oPage /*&& !this._checkCustomHeader(oPage)*/) {
		var oPageHeader = oPage._getAnyHeader(),
			oContentLeft = oPageHeader.getContentLeft(),
			sIcon = oPage.getIcon();
		var bIsSet = false;
		if(oContentLeft){
			for(var i=0; i<oContentLeft.length; i++) {
				if(oContentLeft[i] === this._oShowMasterBtn) {
					bIsSet = true;
				}
			}
		}
		if(!bIsSet) {
			// showMasterBtn could have already be destroyed by destroying the customHeader of the previous page
			// When this is the case, showMasterBtn will be instantiated again
			this._createShowMasterButton();

			this._oShowMasterBtn.removeStyleClass("sapMSplitContainerMasterBtnHidden");

			if(!sap.ui.Device.os.ios && sIcon && this._isPlatformDependent){
				sap.ui.getCore().byId(oPage.getId() + "-icon").addStyleClass("sapMSplitContainerHiddenChild");
				this._oShowMasterBtn.setIcon(sIcon);
			}

			if(oPageHeader){
				//if the header is empty in android, the title index has to be 1 since the back button needs to be the first item in the header
				if(!sap.ui.Device.os.ios && this._isPlatformDependent && oContentLeft.length === 0) {
					oPage._titleIndex = 1;
				}
				oPageHeader.insertContentLeft(this._oShowMasterBtn, 0);
			}
		} else {
			if(this._isMie9) {
				this._oShowMasterBtn.$().fadeIn();
			}
			this._oShowMasterBtn.$().parent().toggleClass("sapMSplitContainerMasterBtnHide", false);	
			this._oShowMasterBtn.removeStyleClass("sapMSplitContainerMasterBtnHidden");	
			this._oShowMasterBtn.$().parent().toggleClass("sapMSplitContainerMasterBtnShow", true);		
		}
		
		if(fnCallBack){
			fnCallBack(oPage);
		}
		this.fireMasterButton({show: true});
	}
};

sap.m.SplitContainer.prototype._removeMasterButton = function(oPage, fnCallBack) {
	if(!oPage){
		return;
	}
	
	var oSplitContainer = this, oHeader;
	
	if(!this._oShowMasterBtn.$().is(":hidden")) {
		oPage = this._getRealPage(oPage);
		oHeader = oPage._getAnyHeader();
		if(oPage && oHeader /*&& !this._checkCustomHeader(oPage)*/) {
			var oContentLeft = oHeader.getContentLeft();
			for(var i=0; i<oContentLeft.length; i++) {
				if(oContentLeft[i] === this._oShowMasterBtn) {
					if(this._isMie9) {
						this._oShowMasterBtn.$().fadeOut();
						if(fnCallBack){
							fnCallBack(oPage);
						}
					}
					this._oShowMasterBtn.$().parent().toggleClass("sapMSplitContainerMasterBtnShow", false);
					this._oShowMasterBtn.$().parent().toggleClass("sapMSplitContainerMasterBtnHide", true);
					this._oShowMasterBtn.$().parent().bind("webkitAnimationEnd animationend", function(){
						jQuery(this).unbind("webkitAnimationEnd animationend");
						oSplitContainer._oShowMasterBtn.addStyleClass("sapMSplitContainerMasterBtnHidden");
						if(fnCallBack){
							fnCallBack(oPage);
						}
					});
					return;
				}
			}
		}
		this.fireMasterButton({show: false});
	}else{
		if(fnCallBack){
			fnCallBack(oPage);
		}
	}
};

sap.m.SplitContainer.prototype._callMethodInManagedObject = function(sFunctionName, sAggregationName){
	var args = Array.prototype.slice.call(arguments);
	if(sAggregationName === "masterPages"){
		if (sFunctionName === "indexOfAggregation") {
			return this._indexOfMasterPage.apply(this, args.slice(2));
		} else {
			return this._callNavContainerMethod(sFunctionName, this._oMasterNav, args);
		}
	}else if(sAggregationName === "detailPages"){
		if (sFunctionName === "indexOfAggregation") {
			return this._indexOfDetailPage.apply(this, args.slice(2));
		} else {
			return this._callNavContainerMethod(sFunctionName, this._oDetailNav, args);
		}
	}else{
		return sap.ui.base.ManagedObject.prototype[sFunctionName].apply(this, args.slice(1));
	}
};

sap.m.SplitContainer.prototype._callNavContainerMethod = function(sFunctionName, oNavContainer, aArgs) {
	aArgs[1] = "pages";
	aArgs = aArgs.slice(1);
	var sRealFunctionName = sap.m.SplitContainer._mFunctionMapping[sFunctionName];
	if (sRealFunctionName) {
		aArgs.shift();
		sFunctionName = sRealFunctionName;
	}
	return oNavContainer[sFunctionName].apply(oNavContainer, aArgs);
};

/**************************************************************
* END - Private methods
**************************************************************/

/**************************************************************
* START - forward aggregation related methods to NavContainer
**************************************************************/
sap.m.SplitContainer.prototype.validateAggregation = function(sAggregationName, oObject, bMultiple){
	return this._callMethodInManagedObject("validateAggregation", sAggregationName, oObject, bMultiple);
};

sap.m.SplitContainer.prototype.setAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
	this._callMethodInManagedObject("setAggregation", sAggregationName, oObject, bSuppressInvalidate);
	return this;
};

sap.m.SplitContainer.prototype.getAggregation = function(sAggregationName, oDefaultForCreation){
	return this._callMethodInManagedObject("getAggregation", sAggregationName, oDefaultForCreation);
};

sap.m.SplitContainer.prototype.indexOfAggregation = function(sAggregationName, oObject){
	return this._callMethodInManagedObject("indexOfAggregation", sAggregationName, oObject);
};

sap.m.SplitContainer.prototype.insertAggregation = function(sAggregationName, oObject, iIndex, bSuppressInvalidate){
	this._callMethodInManagedObject("insertAggregation", sAggregationName, oObject, iIndex, bSuppressInvalidate);
	return this;
};

sap.m.SplitContainer.prototype.addAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
	this._callMethodInManagedObject("addAggregation", sAggregationName, oObject, bSuppressInvalidate);
	return this;
};

sap.m.SplitContainer.prototype.removeAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
	return this._callMethodInManagedObject("removeAggregation", sAggregationName, oObject, bSuppressInvalidate);
};

sap.m.SplitContainer.prototype.removeAllAggregation = function(sAggregationName, bSuppressInvalidate){
	return this._callMethodInManagedObject("removeAllAggregation", sAggregationName, bSuppressInvalidate);
};

sap.m.SplitContainer.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate){
	this._callMethodInManagedObject("destroyAggregation", sAggregationName, bSuppressInvalidate);
	return this;
};
/**************************************************************
* END - forward aggregation related methods to NavContainer
**************************************************************/

/**************************************************************
* START - Static methods
**************************************************************/
/**
 * @private
 */
sap.m.SplitContainer._mFunctionMapping = {
	"getAggregation" : "getPage",
	"addAggregation" : "addPage",
	"insertAggregation" : "insertPage",
	"removeAggregation" : "removePage",
	"removeAllAggregation" : "removeAllPages"
};

/*
 * @private
 */
sap.m.SplitContainer.prototype._hasPageInArray= function (array, oPage) {
	var bFound = false;
	
	array.forEach(function(oArrayEntry) {
		if(oPage === oArrayEntry) {
			bFound = true;
		}
	})
	return bFound;
}

/**************************************************************
* END - Static methods
**************************************************************/

}; // end of sap/m/SplitContainer.js
if ( !jQuery.sap.isDeclared('sap.m.StandardListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.StandardListItem.
jQuery.sap.declare("sap.m.StandardListItem");




/**
 * Constructor for a new StandardListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconInset iconInset} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getAdaptTitleSize adaptTitleSize} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The StandardListItem is a list item providing image, titel and description.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.StandardListItem
 */
sap.m.ListItemBase.extend("sap.m.StandardListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconInset" : {type : "boolean", group : "Appearance", defaultValue : true},
		"iconDensityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"info" : {type : "string", group : "Misc", defaultValue : null},
		"infoState" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None},
		"adaptTitleSize" : {type : "boolean", group : "Appearance", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.m.StandardListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.StandardListItem.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * List item text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.StandardListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * Description
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.m.StandardListItem#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setDescription
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * List item icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.StandardListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>iconInset</code>.
 * If false image will not be shown as embedded icon. Instead it will take the full height of the listitem.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconInset</code>
 * @public
 * @name sap.m.StandardListItem#getIconInset
 * @function
 */

/**
 * Setter for property <code>iconInset</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconInset  new value for property <code>iconInset</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setIconInset
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.StandardListItem#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setIconDensityAware
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * List item active icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.StandardListItem#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * Info text shown on the right side of the description.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.m.StandardListItem#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setInfo
 * @function
 */


/**
 * Getter for property <code>infoState</code>.
 * Info state defines the color of the info text. E.g. Error, Warning, Success...
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * @name sap.m.StandardListItem#getInfoState
 * @function
 */

/**
 * Setter for property <code>infoState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oInfoState  new value for property <code>infoState</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setInfoState
 * @function
 */


/**
 * Getter for property <code>adaptTitleSize</code>.
 * By default the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without description this results in titles with different sizes. In this cases it can be better to switch the size adaption off with setting this property to "false".
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>adaptTitleSize</code>
 * @public
 * @since 1.16.3
 * @name sap.m.StandardListItem#getAdaptTitleSize
 * @function
 */

/**
 * Setter for property <code>adaptTitleSize</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAdaptTitleSize  new value for property <code>adaptTitleSize</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * @name sap.m.StandardListItem#setAdaptTitleSize
 * @function
 */


// Start of sap\m\StandardListItem.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.m.StandardListItem.prototype.exit = function() {
	if (this._image) {
		this._image.destroy();
	}
	
	sap.m.ListItemBase.prototype.exit.apply(this, arguments);
};


/**
 * @private
 */
sap.m.StandardListItem.prototype._getImage = function(sImgId, sImgStyle, sSrc, bIconDensityAware) {
	var oImage = this._image;
	if(oImage)
	{
		oImage.setSrc(sSrc);
		if(oImage instanceof sap.m.Image)
			oImage.setDensityAware(bIconDensityAware);
	}
	else
	{
		oImage = sap.ui.core.IconPool.createControlByURI({
			id: sImgId,
      src : sSrc,
      densityAware : bIconDensityAware
    }, sap.m.Image).setParent(this, null, true);
	}
	
	if(oImage instanceof sap.m.Image){
		oImage.addStyleClass(sImgStyle, true);
	}
	else{
		oImage.addStyleClass(sImgStyle + "Icon", true);
	}
	
	return this._image = oImage;
};

// overwrite base method to hook into the active handling
sap.m.StandardListItem.prototype._activeHandlingInheritor = function() {
	var img = sap.ui.getCore().byId(this.getId() + "-img");
	if(img instanceof sap.ui.core.Icon){
		img.$().toggleClass('sapMSLIIconActive', this._active);
		return;
	}
	
	if (img && this.getActiveIcon()) {
			img.setSrc(this.getActiveIcon());
	}	
};

// overwrite base method to hook into the inactive handling
sap.m.StandardListItem.prototype._inactiveHandlingInheritor = function() {
	var img = sap.ui.getCore().byId(this.getId() + "-img");
		if(img instanceof sap.ui.core.Icon){
		img.$().toggleClass('sapMSLIIconActive', this._active);
		return;
	}
	
	if (img) {
			img.setSrc(this.getIcon());
	}
};
}; // end of sap/m/StandardListItem.js
if ( !jQuery.sap.isDeclared('sap.m.StandardTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.StandardTileRenderer");

/**
 * @class CustomTile renderer. 
 * @static
 */
sap.m.StandardTileRenderer = sap.ui.core.Renderer.extend(sap.m.TileRenderer);

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oControl an object representation of the control that should be rendered
 */
sap.m.StandardTileRenderer._renderContent = function(rm, oTile) {

	rm.write("<div"); // Start top row
	rm.addClass("sapMStdTileTopRow");	
	rm.writeClasses();
	rm.write(">");
	if (oTile.getIcon()) {
		rm.write("<div");
		rm.addClass("sapMStdTileIconDiv");
		
		switch(oTile.getType()) {
			case sap.m.StandardTileType.Monitor:
				rm.addClass("sapMStdIconMonitor");
				break;
			case sap.m.StandardTileType.Create:
				rm.addClass("sapMStdIconCreate");
				break;
		}
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oTile._getImage());
		rm.write("</div>");
	}
	
	
	if (oTile.getNumber()) {
		
		rm.write("<div");
		rm.addClass("sapMStdTileNumDiv");
		rm.writeClasses();
		rm.write(">");
		
		rm.write("<div");
		rm.writeAttribute("id", oTile.getId() + "-number");
		
		var numberLength = oTile.getNumber().length;
		if (numberLength < 5){
			rm.addClass("sapMStdTileNum");
		} else if (numberLength < 8){
			rm.addClass("sapMStdTileNumM");
		} else {
			rm.addClass("sapMStdTileNumS");
		}			
		
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oTile.getNumber());
		rm.write("</div>");
	
		if (oTile.getNumberUnit()) {
			rm.write("<div");
			rm.writeAttribute("id", oTile.getId() + "-numberUnit");
			rm.addClass("sapMStdTileNumUnit");
			rm.writeClasses();
			rm.write(">");
			rm.writeEscaped(oTile.getNumberUnit());
			rm.write("</div>");
		}	
		rm.write("</div>"); // End number div
	}
	rm.write("</div>"); // End top row div
	
	
	rm.write("<div"); // Start monitoring tile styling
	rm.addClass("sapMStdTileBottomRow");
	if(oTile.getType() === sap.m.StandardTileType.Monitor) {
		rm.addClass("sapMStdTileMonitorType");
	}
	rm.writeClasses();
	rm.write(">");
	
	rm.write("<div");  // Start title div
	rm.writeAttribute("id", oTile.getId() + "-title");
	rm.addClass("sapMStdTileTitle");
	rm.writeClasses();
	rm.write(">");
	if (oTile.getTitle()) {
		rm.writeEscaped(oTile.getTitle());
	}
	rm.write("</div>"); // End title div
	
	if(oTile.getInfo()) {
		rm.write("<div"); // Start info
		rm.writeAttribute("id", oTile.getId() + "-info");
		rm.addClass("sapMStdTileInfo");
		rm.addClass("sapMStdTileInfo" + oTile.getInfoState());
		rm.writeClasses();
		rm.write(">");
		if (oTile.getInfo()) {
			rm.writeEscaped(oTile.getInfo());
		}
		rm.write("</div>"); // End info
	}
	rm.write("</div>"); // End bottom row type tile styling
	
};

}; // end of sap/m/StandardTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.Switch') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Switch.
jQuery.sap.declare("sap.m.Switch");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Switch.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getState state} : boolean (default: false)</li>
 * <li>{@link #getCustomTextOn customTextOn} : string</li>
 * <li>{@link #getCustomTextOff customTextOff} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getType type} : sap.m.SwitchType (default: sap.m.SwitchType.Default)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Switch#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Switch
 */
sap.ui.core.Control.extend("sap.m.Switch", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"state" : {type : "boolean", group : "Misc", defaultValue : false},
		"customTextOn" : {type : "string", group : "Misc", defaultValue : null},
		"customTextOff" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Data", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"type" : {type : "sap.m.SwitchType", group : "Appearance", defaultValue : sap.m.SwitchType.Default}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Switch with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Switch.extend
 * @function
 */

sap.m.Switch.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>state</code>.
 * A boolean value indicating whether the switch is on or off.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>state</code>
 * @public
 * @name sap.m.Switch#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bState  new value for property <code>state</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setState
 * @function
 */


/**
 * Getter for property <code>customTextOn</code>.
 * Custom text for the "ON" state.
 * 
 * "ON" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>customTextOn</code>
 * @public
 * @name sap.m.Switch#getCustomTextOn
 * @function
 */

/**
 * Setter for property <code>customTextOn</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCustomTextOn  new value for property <code>customTextOn</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setCustomTextOn
 * @function
 */


/**
 * Getter for property <code>customTextOff</code>.
 * Custom text for the "OFF" state.
 * 
 * "OFF" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>customTextOff</code>
 * @public
 * @name sap.m.Switch#getCustomTextOff
 * @function
 */

/**
 * Setter for property <code>customTextOff</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCustomTextOff  new value for property <code>customTextOff</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setCustomTextOff
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible switches are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Switch#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Whether the switch is enabled.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Switch#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setEnabled
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Switch#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setName
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type of a Switch. Possibles values "Default", "AcceptReject".
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.m.SwitchType} the value of property <code>type</code>
 * @public
 * @name sap.m.Switch#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.m.SwitchType} oType  new value for property <code>type</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setType
 * @function
 */


/**
 * Triggered when a switch changes the state. 
 *
 * @name sap.m.Switch#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.state The new state of the switch.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Switch</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Switch</code>.<br/> itself. 
 *  
 * Triggered when a switch changes the state. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Switch</code>.<br/> itself.
 *
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Switch</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'state' of type <code>boolean</code> The new state of the switch.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Switch#fireChange
 * @function
 */


// Start of sap\m\Switch.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.ui.core.IconPool.insertFontFaceStyle();

sap.ui.core.EnabledPropagator.apply(sap.m.Switch.prototype, [true]);

/* =========================================================== */
/* Internal methods and properties                             */
/* =========================================================== */

/**
 * Slide the switch.
 *
 * @private
 */
sap.m.Switch.prototype._slide = function(iPosition) {
	iPosition = iPosition > sap.m.Switch._OFFPOSITION ? sap.m.Switch._OFFPOSITION
														: iPosition < sap.m.Switch._ONPOSITION ? sap.m.Switch._ONPOSITION : iPosition;

	if (this._iCurrentPosition === iPosition) {
		return;
	}

	this._iCurrentPosition = iPosition;
	this._$SwitchInner[0].style[sap.m.Switch._bRtl ? "right" : "left"] = iPosition + "px";
	this._setTempState(Math.abs(iPosition) < sap.m.Switch._SWAPPOINT);
};

sap.m.Switch.prototype._setTempState = function(b) {
	if (this._bTempState === b) {
		return;
	}

	this._bTempState = b;
	this._$Handle[0].setAttribute("data-sap-ui-swt", b ? this._sOn : this._sOff);
};

sap.m.Switch._getCssParameter = function(sParameter) {
	var fnGetCssParameter = sap.ui.core.theming.Parameters.get;

	return fnGetCssParameter(sParameter) || fnGetCssParameter(sParameter + "-" + sap.ui.Device.os.name.toLowerCase());
};

(function() {
	var sParamTransitionTime = "sapMSwitch-TRANSITIONTIME",

	sTransitionTime = sap.m.Switch._getCssParameter(sParamTransitionTime);

	// a boolean property to indicate if transition or not
	sap.m.Switch._bUseTransition = !!(Number(sTransitionTime));

	// the milliseconds takes the transition from one state to another
	sap.m.Switch._TRANSITIONTIME = Number(sTransitionTime) || 0;
}());

sap.m.Switch._bRtl  = sap.ui.getCore().getConfiguration().getRTL();

// the position of the inner HTML element whether the switch is "ON"
sap.m.Switch._ONPOSITION = Number(sap.m.Switch._getCssParameter("sapMSwitch-ONPOSITION"));

// the position of the inner HTML element whether the switch is "OFF"
sap.m.Switch._OFFPOSITION = Number(sap.m.Switch._getCssParameter("sapMSwitch-OFFPOSITION"));

// swap point
sap.m.Switch._SWAPPOINT = Math.abs((sap.m.Switch._ONPOSITION - sap.m.Switch._OFFPOSITION) / 2);

// resource bundle
sap.m.Switch._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

/* =========================================================== */
/* Lifecycle methods                                           */
/* =========================================================== */

/**
 * Required adaptations before rendering.
 *
 * @private
 */
sap.m.Switch.prototype.onBeforeRendering = function() {
	var Swt = sap.m.Switch;

	this._sOn = this.getCustomTextOn() || Swt._oRb.getText("SWITCH_ON");
	this._sOff = this.getCustomTextOff() || Swt._oRb.getText("SWITCH_OFF");

	// flags
	this._bDisabled = !this.getEnabled();
	this._bCheckboxRendered = this.getName();
};

/**
 * Required adaptations after rendering.
 *
 * @private
 */
sap.m.Switch.prototype.onAfterRendering = function() {
	var $SwitchCont,
		CSS_CLASS = "." + sap.m.SwitchRenderer.CSS_CLASS;

	// switch control container jQuery DOM reference
	$SwitchCont = this.$();

	// switch jQuery DOM reference
	this._$Switch = $SwitchCont.find(CSS_CLASS);

	// switch inner jQuery DOM reference
	this._$SwitchInner = this._$Switch.children(CSS_CLASS + "Inner");

	// switch handle jQuery DOM reference
	this._$Handle = this._$SwitchInner.children(CSS_CLASS + "Handle");

	// checkbox jQuery DOM reference
	this._$Checkbox = $SwitchCont.children("input");
};

/* =========================================================== */
/* Event handlers                                              */
/* =========================================================== */

/**
 * Handle the touch start event happening on the switch.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Switch.prototype.ontouchstart = function(oEvent) {
	var oTargetTouch = oEvent.targetTouches[0],
		CSS_CLASS = sap.m.SwitchRenderer.CSS_CLASS;

	// mark the event for components that needs to know if the event was handled by the Switch
	oEvent.setMarked();

	// Process only single touches, if there is already a touch happening
	// or two simultaneous touches, then ignore them.
	if (sap.m.touch.countContained(oEvent.touches, this.getId()) > 1 || this._bDisabled) {
		return;
	}

	jQuery.sap.delayedCall(0, this._$Handle[0], "focus");

	this._$Switch.addClass(CSS_CLASS + "Pressed")
				.removeClass(CSS_CLASS + "Trans");

	this._iActiveTouch = oTargetTouch.identifier;
	this._bTempState = this.getState();
	this._iStartPressPosX = oTargetTouch.pageX;
	this._iPosition = this._$SwitchInner.position().left;
	this._bDragging = false;
};

/**
 * Handle the touch move event on the switch.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Switch.prototype.ontouchmove = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Switch
	oEvent.setMarked();

	// note: prevent native document scrolling
	oEvent.preventDefault();

	var oTouch,
		iPosition,
		fnTouch = sap.m.touch;

	if (this._bDisabled) {
		return;
	}

	// the active touch has to be in the list of touches
	jQuery.sap.assert(fnTouch.find(oEvent.touches, this._iActiveTouch), "missing touchend");

	// find the active touch
	oTouch = fnTouch.find(oEvent.changedTouches, this._iActiveTouch);

	// only respond to the active touch
	if (!oTouch ||

		// Note: do not rely on a specific granularity of the touchmove event.
		// On windows 8 surfaces, the touchmove events are dispatched even if
		// the user doesn’t move the touch point along the surface.
		oTouch.pageX === this._iStartPressPosX) {
		return;
	}

	this._bDragging = true;
	iPosition = ((this._iStartPressPosX - oTouch.pageX) * -1) + this._iPosition;

	if (sap.m.Switch._bRtl) {
		iPosition = -iPosition;
	}

	this._slide(iPosition);
};

/**
 * Handle the touch end event on the switch.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Switch.prototype.ontouchend = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Switch
	oEvent.setMarked();

	var fnTouch = sap.m.touch,
		assert = jQuery.sap.assert;

	if (this._bDisabled) {
		return;
	}

	assert(this._iActiveTouch !== undefined, "expect to already be touching");

	// if the touch we're tracking isn't changing here, ignore this event
	if (!fnTouch.find(oEvent.changedTouches, this._iActiveTouch)) {

		// In most cases, our active touch will be in the touches collection,
		// but we can't assert that because occasionally two touch end events can
		// occur at almost the same time with both having empty touches lists.
		return;
	}

	// the touchend for the touch we're monitoring
	assert(!fnTouch.find(oEvent.touches, this._iActiveTouch), "touch ended also still active");

	// remove active state
	this._$Switch.removeClass(sap.m.SwitchRenderer.CSS_CLASS + "Pressed");

	// change the state
	this.setState(this._bDragging ? this._bTempState : !this._bTempState, true);
};

/**
 * Handle the touchcancel event on the switch.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Switch.prototype.ontouchcancel = sap.m.Switch.prototype.ontouchend;

/**
 *  Handle when the space or enter key are pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Switch.prototype.onsapselect = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Switch
	oEvent.setMarked();

	// note: prevent document scrolling when space keys is pressed
	oEvent.preventDefault();

	this.setState(!this.getState());
};

/* =========================================================== */
/* API method                                                  */
/* =========================================================== */

sap.m.Switch.prototype.getFocusDomRef = function() {
	return this.getDomRef() ? this._$Handle[0] : null;
};

/**
 * Change the switch state between on and off.
 *
 * @param {boolean} bState
 * @public
 * @return {sap.m.Switch} <code>this</code> to allow method chaining.
 */
sap.m.Switch.prototype.setState = function(bState, bTriggerEvent) {
	var sState,
		bNewState,
		Swt = sap.m.Switch,
		CSS_CLASS = sap.m.SwitchRenderer.CSS_CLASS;

	if (this._bDisabled && bTriggerEvent) {
		return this;
	}

	bNewState = !(this.getState() === bState);

	if (bNewState) {
		this.setProperty("state", bState, true);	// validation and suppress re-rendering
	}

	if (!this._$Switch) {
		return this;
	}

	bState = this.getState();
	sState = bState ? this._sOn : this._sOff;

	if (bNewState) {
		this._$Handle[0].setAttribute("data-sap-ui-swt", sState);

		if (this._bCheckboxRendered) {
			this._$Checkbox[0].setAttribute("checked", bState);
			this._$Checkbox[0].setAttribute("value", sState);
		}

		bState ? this._$Switch.removeClass(CSS_CLASS + "Off").addClass(CSS_CLASS + "On")
				: this._$Switch.removeClass(CSS_CLASS + "On").addClass(CSS_CLASS + "Off");

		if (bTriggerEvent) {
			if (Swt._bUseTransition) {
				jQuery.sap.delayedCall(Swt._TRANSITIONTIME, this, function() {
					this.fireChange({ state: bState });
				}, [bState]);
			} else {
				this.fireChange({ state: bState });
			}
		}
	}

	this._$Switch.addClass(CSS_CLASS + "Trans");

	// remove inline styles
	this._$SwitchInner.removeAttr("style");

	return this;
};
}; // end of sap/m/Switch.js
if ( !jQuery.sap.isDeclared('sap.m.Text') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Text.
jQuery.sap.declare("sap.m.Text");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Text.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLines maxLines} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Text control is used to display some continuous text.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Text
 */
sap.ui.core.Control.extend("sap.m.Text", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "", defaultValue : '', bindable : "bindable"},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"wrapping" : {type : "boolean", group : "Appearance", defaultValue : true},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"maxLines" : {type : "int", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.Text with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Text.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text to be displayed.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Text#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setText
 * @function
 */


/**
 * Binder for property <code>text</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#bindText
 * @function
 */

/**
 * Unbinder for property <code>text</code>.
 *
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#unbindText
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.Text#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setTextDirection
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set this property to false to make the text invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Text#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setVisible
 * @function
 */


/**
 * Getter for property <code>wrapping</code>.
 * Set this property to false to disable the automatic text wrapping.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * @name sap.m.Text#getWrapping
 * @function
 */

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setWrapping
 * @function
 */


/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.m.Text#getTextAlign
 * @function
 */

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setTextAlign
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Text#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setWidth
 * @function
 */


/**
 * Getter for property <code>maxLines</code>.
 * Limits the number of lines for wrapping texts.
 * 
 * Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>maxLines</code>
 * @public
 * @since 1.13.2
 * @name sap.m.Text#getMaxLines
 * @function
 */

/**
 * Setter for property <code>maxLines</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iMaxLines  new value for property <code>maxLines</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.2
 * @name sap.m.Text#setMaxLines
 * @function
 */


// Start of sap\m\Text.js
/**
 * Default line height value as a number when line-height is normal.
 * This value is required during max-height calculation for the browsers that do not support line-clamping.
 * It is better to define line-height in CSS instead of "normal" to get consistent maxLines results since normal line-height
 * not only vary from browser to browser but they also vary from one font face to another and can also vary within a given face.
 *
 * Default value is 1.2
 *
 * @since 1.22
 * @protected
 * @type {Number}
 */
sap.m.Text.prototype.normalLineHeight = 1.2;

/**
 * Determines per instance whether line height should be cached or not.
 * Default value is true.
 *
 * @since 1.22
 * @protected
 * @type {Boolean}
 */
sap.m.Text.prototype.cacheLineHeight = true;

/**
 * Ellipsis(…) text to indicate more text when clampText function is used.
 * Can be overwritten with 3dots(...) if fonts do not support this UTF-8 character.
 *
 * @since 1.13.2
 * @protected
 * @type {String}
 */
sap.m.Text.prototype.ellipsis = '…';

/**
 * Defines whether browser supports native line clamp or not
 *
 * @since 1.13.2
 * @returns {Boolean}
 * @protected
 * @readonly
 * @static
 */
sap.m.Text.hasNativeLineClamp = (function() {
	return (typeof document.documentElement.style.webkitLineClamp != "undefined");
})();


// suppress invalidation of text property setter
sap.m.Text.prototype.setText = function(sText) {
	this.setProperty("text", sText , true);

	// check text dom ref
	var oDomRef = this.getTextDomRef();
	if (oDomRef) {
		oDomRef.textContent = this.getText(true);
	}

	return this;
};

// returns the text value and normalize line-ending character for rendering
sap.m.Text.prototype.getText = function(bNormalize) {
	var sText = this.getProperty("text");

	// handle line ending characters for renderer
	if (bNormalize) {
		return sText.replace(/\r\n/g, "\n");
	}

	return sText;
};

// required adaptations after rendering
sap.m.Text.prototype.onAfterRendering = function() {
	// check visible, max-lines and line-clamping support
	if (this.getVisible() &&
		this.hasMaxLines() &&
		!this.canUseNativeLineClamp()) {

		// set max-height for maxLines support
		this.clampHeight();
	}
};

/**
 * Determines whether max lines should be rendered or not
 *
 * @since 1.22
 * @protected
 * @returns {HTMLElement|null}
 */
sap.m.Text.prototype.hasMaxLines = function() {
	return (this.getWrapping() && this.getMaxLines() > 1);
};

/**
 * Returns the text node container's DOM reference.
 * This can be different then getDomRef when inner wrapper is needed.
 *
 * @since 1.22
 * @protected
 * @returns {HTMLElement|null}
 */
sap.m.Text.prototype.getTextDomRef = function() {
	if (!this.getVisible()) {
		return null;
	}

	if (this.hasMaxLines()) {
		return this.getDomRef("inner");
	}

	return this.getDomRef();
};

/**
 * Decides whether the control can use native line clamp feature or not.
 * In RTL mode native line clamp feature is not supported
 *
 * @since 1.20
 * @protected
 * @return {Boolean}
 */
sap.m.Text.prototype.canUseNativeLineClamp = function() {
	// has line clamp feature
	if (!sap.m.Text.hasNativeLineClamp) {
		return false;
	}

	// is text direction rtl
	var oDirection = sap.ui.core.TextDirection;
	if (this.getTextDirection() == oDirection.RTL) {
		return false;
	}

	// is text direction inherited as rtl
	if (this.getTextDirection() == oDirection.Inherit && sap.ui.getCore().getConfiguration().getRTL()) {
		return false;
	}

	return true;
};

/**
 * Caches and returns the computed line height of the text.
 *
 * @since 1.22
 * @protected
 * @see sap.m.Text#cacheLineHeight
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number}
 */
sap.m.Text.prototype.getLineHeight = function(oDomRef) {
	// return cached value if possible and available
	if (this.cacheLineHeight && this._iLineHeight) {
		return this._iLineHeight;
	}

	// check whether dom ref exist or not
	oDomRef = oDomRef || this.getTextDomRef();
	if (!oDomRef) {
		return 0;
	}

	// check line-height
	var oStyle = window.getComputedStyle(oDomRef),
		fLineHeight = parseFloat(oStyle.lineHeight);

	// we should ignore "normal" line-height so calculate with font-size
	if (!fLineHeight) {
		fLineHeight = parseFloat(oStyle.fontSize) * this.normalLineHeight;
	}

	// on rasterizing the font, sub pixel line-heights are converted to integer
	// this can differ from browser font rendering engine, in this case
	// we should create one line text on the fly and check the height
	var iLineHeight = Math.floor(fLineHeight);

	// cache line height
	if (this.cacheLineHeight) {
		this._iLineHeight = iLineHeight;
	}

	// return
	return iLineHeight;
};

/**
 * Returns the max height according to max lines and line height calculation.
 * This is not calculated max-height!
 *
 * @since 1.22
 * @protected
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number}
 */
sap.m.Text.prototype.getClampHeight = function(oDomRef) {
	oDomRef = oDomRef || this.getTextDomRef();
	return this.getMaxLines() * this.getLineHeight(oDomRef);
};

/**
 * Sets the max-height to support maxLines property
 *
 * @since 1.22
 * @protected
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number} calculated max height value
 */
sap.m.Text.prototype.clampHeight = function(oDomRef) {
	oDomRef = oDomRef || this.getTextDomRef();
	if (!oDomRef) {
		return 0;
	}

	// calc the max height and set on dom
	var iMaxHeight = this.getClampHeight(oDomRef);
	oDomRef.style.maxHeight = iMaxHeight + "px";
	return iMaxHeight;
};

/**
 * Clamps the wrapping text according to max lines and returns the found ellipsis position.
 * Parameters can be used for better performance.
 *
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @param {number} [iStartPos] Start point of the ellipsis search.
 * @param {number} [iEndPos] End point of the ellipsis search.
 * @returns {number|undefined} Returns found ellipsis position or undefined
 * @since 1.20
 * @protected
 */
sap.m.Text.prototype.clampText = function(oDomRef, iStartPos, iEndPos) {
	// check DOM reference
	oDomRef = oDomRef || this.getTextDomRef();
	if (!oDomRef) {
		return;
	}

	// init
	var iEllipsisPos;
	var sText = this.getText(true);
	var iMaxHeight = this.getClampHeight(oDomRef);

	// init positions
	iStartPos = iStartPos || 0;
	iEndPos = iEndPos || sText.length;

	// do not set content if not needed
	oDomRef.textContent = sText.slice(0, iEndPos);

	// if text overflow
	if (oDomRef.scrollHeight > iMaxHeight) {

		// cache values
		var oStyle = oDomRef.style,
			sHeight = oStyle.height,
			sEllipsis = this.ellipsis,
			iEllipsisLen = sEllipsis.length;

		// set height during ellipsis search
		oStyle.height = iMaxHeight + "px";

		// implementing binary search to find the position of ellipsis
		// complexity O(logn) so 1024 characters text can be found within 10 steps!
		while ((iEndPos - iStartPos) > iEllipsisLen) {

			// check the middle position and update text
			iEllipsisPos = (iStartPos + iEndPos) >> 1;
			oDomRef.textContent = sText.slice(0, iEllipsisPos - iEllipsisLen) + sEllipsis;

			// check overflow
			if (oDomRef.scrollHeight > iMaxHeight) {
				iEndPos = iEllipsisPos;
			} else {
				iStartPos = iEllipsisPos;
			}
		}

		// last check maybe we overflowed on last character
		if (oDomRef.scrollHeight > iMaxHeight && iStartPos > 0) {
			iEllipsisPos = iStartPos;
			oDomRef.textContent = sText.slice(0, iEllipsisPos - iEllipsisLen) + sEllipsis;
		}

		// reset height
		oStyle.height = sHeight;
	}

	// return the found position
	return iEllipsisPos;
};
}; // end of sap/m/Text.js
if ( !jQuery.sap.isDeclared('sap.m.TextArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.TextArea.
jQuery.sap.declare("sap.m.TextArea");




/**
 * Constructor for a new TextArea.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRows rows} : int (default: 2)</li>
 * <li>{@link #getCols cols} : int (default: 20)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getWrapping wrapping} : sap.ui.core.Wrapping</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.TextArea#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enable users to input multi-line text.
 * @extends sap.m.InputBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.9.0
 * @name sap.m.TextArea
 */
sap.m.InputBase.extend("sap.m.TextArea", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"rows" : {type : "int", group : "Appearance", defaultValue : 2},
		"cols" : {type : "int", group : "Appearance", defaultValue : 20},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"wrapping" : {type : "sap.ui.core.Wrapping", group : "Behavior", defaultValue : null}
	},
	events : {
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.TextArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.TextArea.extend
 * @function
 */

sap.m.TextArea.M_EVENTS = {'liveChange':'liveChange'};


/**
 * Getter for property <code>rows</code>.
 * Specifies the height of the text area (in lines).
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>rows</code>
 * @public
 * @name sap.m.TextArea#getRows
 * @function
 */

/**
 * Setter for property <code>rows</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iRows  new value for property <code>rows</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setRows
 * @function
 */


/**
 * Getter for property <code>cols</code>.
 * Specifies the width of the textarea (in average character width).
 *
 * Default value is <code>20</code>
 *
 * @return {int} the value of property <code>cols</code>
 * @public
 * @name sap.m.TextArea#getCols
 * @function
 */

/**
 * Setter for property <code>cols</code>.
 *
 * Default value is <code>20</code> 
 *
 * @param {int} iCols  new value for property <code>cols</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setCols
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Defines the height of the textarea with CSS. This property can overwrite the rows property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.TextArea#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setHeight
 * @function
 */


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters that user can input. If your value property's length bigger than maxLength then value is not truncated and user can see whole value property but cannot write anymore.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.m.TextArea#getMaxLength
 * @function
 */

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setMaxLength
 * @function
 */


/**
 * Getter for property <code>wrapping</code>.
 * The wrap attribute specifies how the text in a text area is to be wrapped when submitted in a form. Possible values are: Soft, Hard, Off.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.Wrapping} the value of property <code>wrapping</code>
 * @public
 * @name sap.m.TextArea#getWrapping
 * @function
 */

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.Wrapping} oWrapping  new value for property <code>wrapping</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setWrapping
 * @function
 */


/**
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @name sap.m.TextArea#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The new value of the textarea.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TextArea</code>.<br/> itself. 
 *  
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TextArea</code>.<br/> itself.
 *
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The new value of the textarea.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TextArea#fireLiveChange
 * @function
 */


// Start of sap\m\TextArea.js
sap.m.TextArea.prototype.init = function() {
	sap.m.InputBase.prototype.init.call(this);
	this._inputProxy = jQuery.proxy(this._onInput, this);
};

sap.m.TextArea.prototype.exit = function() {
	sap.m.InputBase.prototype.exit.call(this);
	delete this._oIScroll;
};

// Attach listeners on after rendering and find iscroll
sap.m.TextArea.prototype.onAfterRendering = function() {
	sap.m.InputBase.prototype.onAfterRendering.call(this);

	// bind events
	this._bindToInputEvent(this._inputProxy);

	if (sap.ui.Device.support.touch) {

		if (this._behaviour.INSIDE_SCROLLABLE_WITHOUT_FOCUS) {
			this._oIScroll = null;	// set null to find iScroll

			// Bind browser events to mimic native scrolling
			this._$input.on("touchstart", jQuery.proxy(this._onTouchStart, this));
			this._$input.on("touchmove", jQuery.proxy(this._onTouchMove, this));
		} else if (this._behaviour.PAGE_NON_SCROLLABLE_AFTER_FOCUS) {

			// stop bubbling to disable iScroll
			this._$input.on("touchmove", function(e) {
				if (jQuery(this).is(":focus")) {
					e.stopPropagation();
				}
			});
		}
	}
};

sap.m.TextArea.prototype.setRows = function(iRows) {
	this.setProperty("rows", iRows, true);

	if (this.getDomRef()) {
		this._$input.attr("rows", this.getRows());
	}

	return this;
};

sap.m.TextArea.prototype.setCols = function(iCols) {
	this.setProperty("cols", iCols, true);

	if (this.getDomRef()) {
		this._$input.attr("cols", this.getCols());
	}

	return this;
};

sap.m.TextArea.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight, true);

	if (this.getDomRef()) {
		this._$input.css("height", this.getHeight());
	}

	return this;
};

sap.m.TextArea.prototype._onInput = function(oEvent) {
	var value = this._$input.val();

	// some browsers does not respect to maxlength property of textarea
	if (this.getMaxLength() > 0 && value.length > this.getMaxLength()) {
		value = value.substring(0, this.getMaxLength());
		this._$input.val(value);
	}

	if (value != this.getValue()) {
		this.setProperty("value", value, true);
		this._curpos = this._$input.cursorPos();
		this._setLabelVisibility();
		this.fireLiveChange({
			newValue : value
		});
	}
};

/**
 * Some browsers let us to scroll inside of the textarea without focusing.
 * Android is very buggy and no touch event is publishing after focus.
 * Android 4.1+ has touch events but page scroll is not possible after
 * we reached the edge(bottom, top) of the textarea
 *
 * @private
 */
sap.m.TextArea.prototype._behaviour = (function(oDevice) {
	return {
		INSIDE_SCROLLABLE_WITHOUT_FOCUS : oDevice.os.ios || oDevice.os.blackberry || oDevice.browser.chrome,
		PAGE_NON_SCROLLABLE_AFTER_FOCUS : oDevice.os.android && oDevice.os.version >= 4.1
	};
}(sap.ui.Device));


/**
 * On touch start get iscroll and save starting point
 *
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.TextArea.prototype._onTouchStart = function(oEvent) {
	if (this._oIScroll === null) {
		this._oIScroll = sap.m.getIScroll(this);
	}

	this._startY = oEvent.touches[0].pageY;
	this._startX = oEvent.touches[0].pageX;
	this._bHorizontalScroll = undefined;
	this._iDirection = 0;

	oEvent.setMarked("swipestartHandled"); //disable swipe in jQuery-mobile
};


/**
 * Touch move listener doing native scroll workaround
 *
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.TextArea.prototype._onTouchMove = function(oEvent) {

	var textarea = this._$input[0],	// dom reference
		pageY = oEvent.touches[0].pageY,
		isTop = textarea.scrollTop <= 0,
		isBottom = textarea.scrollTop + textarea.clientHeight >= textarea.scrollHeight,
		isGoingUp = this._startY > pageY,
		isGoingDown =  this._startY < pageY,
		isOnEnd = isTop && isGoingDown || isBottom && isGoingUp;

	// Native scrolling:
	if (!this._oIScroll) {

		if(this._bHorizontalScroll === undefined){ // do once
			this._bHorizontalScroll = Math.abs(this._startY - pageY) < Math.abs(this._startX - oEvent.touches[0].pageX);
		}

		if (this._bHorizontalScroll || !isOnEnd) { // mark if it can scroll itself
			oEvent.setMarked();
		}

		return;
	}

	// iScroll:

	// update position
	this._startY = pageY;

	// if we reached the edges of textarea then enable page scrolling
	if (isOnEnd) {
		var iDirection = (isGoingDown) ? -1 : 1;

		if (!(this._iDirection == iDirection) && this._oIScroll) {
			// set current touch point as iscroll last point
			this._oIScroll.pointY = pageY;
			this._iDirection = iDirection;
		}

		// let page scroll happen
		oEvent.preventDefault();
		return;
	}

	// do not let event bubbling needed for textarea scrolling
	oEvent.stopPropagation();
};

/**
 * in iOS(5-6) if transforms(iScroll) are in use textarea is not working properly
 *	- auto-scroll to bottom doesn't work when typing
 *  - user cannot focus to specific text position with tap
 *
 *  As a very lame workaround
 *   1 - turn off -webkit-transform style from the child of iScroll element while textarea is in focus.
 *   2 - immediately set scrollTop value to avoid jumping of scrolled content.
 *   3 - set iScroll useTransform option to false for any internal calculation during this time
 *   4 - return original styles and options on blur
 */
if (sap.ui.Device.os.ios && sap.ui.Device.os.version < 7) {

sap.m.TextArea.prototype.onfocusin = function() {
	if (!this._oIScroll || !this._oIScroll.options.useTransform) {
		return;
	}

	this._oIScroll.scroller.style.webkitTransform = '';
	this._oIScroll.wrapper.scrollTop = -this._oIScroll.y;
	this._oIScroll.options.useTransform = false;
	this._lastOffset = {
		x : this._oIScroll.x,
		y : this._oIScroll.y
	};
};

sap.m.TextArea.prototype.onfocusout = function() {
	if (!this._oIScroll || !this._lastOffset) {
		return;
	}

	// return original styles on blur
	this._oIScroll.wrapper.scrollTop = 0;
	this._oIScroll.options.useTransform = true;
	this._oIScroll.scrollTo(this._lastOffset.x, this._lastOffset.y);
};

}
}; // end of sap/m/TextArea.js
if ( !jQuery.sap.isDeclared('sap.m.Tile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Tile.
jQuery.sap.declare("sap.m.Tile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Tile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRemovable removable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Tile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A tile to be displayed in the tile container. Use this
 * tile as the base class for
 * specialized tile implementations.
 * Use the renderers _addOuterClass methods to add a style class to the main
 * surface of the Tile. In this class set the background color, gradients
 * or background images.
 * Instead of implementing the default render method in the renderer implement
 * your content HTML in the _renderContent method of the specialized
 * tile.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.Tile
 */
sap.ui.core.Control.extend("sap.m.Tile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"removable" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Tile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Tile.extend
 * @function
 */

sap.m.Tile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>removable</code>.
 * Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile contianer.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>removable</code>
 * @public
 * @name sap.m.Tile#getRemovable
 * @function
 */

/**
 * Setter for property <code>removable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bRemovable  new value for property <code>removable</code>
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Tile#setRemovable
 * @function
 */


/**
 * Tap event is raised if the user tap or click to the
 * control. 
 *
 * @name sap.m.Tile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Tile</code>.<br/> itself. 
 *  
 * Tap event is raised if the user tap or click to the
 * control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code>.<br/> itself.
 *
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Tile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Tile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Tile#firePress
 * @function
 */


// Start of sap\m\Tile.js
/*
 * @see JSDoc generated by SAPUI5 Control API generator
 */


/**
 * Initializes the control
 * @private
 */
sap.m.Tile.prototype.init = function() {
	//keyboard support for desktop environments
	if(sap.ui.Device.system.desktop) {
		var fnOnSpace = jQuery.proxy(function(oEvent) {
			this.ontap();
			//event should not trigger any further actions
			oEvent.stopPropagation();
		}, this);
		this.onsapspace = fnOnSpace;
	}
};

/**
 * Handles the internal event onAfterRendering
 * @private
 */
sap.m.Tile.prototype.onAfterRendering = function(){
	if (this._rendered && !this._bIsDragged && this.getParent() instanceof sap.m.TileContainer) {
		this.setPos(this._posX,this._posY);
	}
	this._rendered = true;
};


/**
 * Sets the position of the tile to the given coordinates.
 * @param {int} iX left position
 * @param {int} iY top position
 * @private
 */ 
sap.m.Tile.prototype.setPos = function(iX,iY){
	// store in member
	this._posX = iX = Math.floor(iX);
	this._posY = iY = Math.floor(iY);
	if (!this._rendered) return;
	var o = this.getDomRef();
	if ("webkitTransform" in o.style) {
		this.$().css('-webkit-transform','translate3d('+iX+'px,'+iY+'px,0)');
	} else if ("transform" in o.style) {
		this.$().css('transform','translate3d('+iX+'px,'+iY+'px,0)');
	} else if ("msTransform" in o.style) {
		this.$().css('msTransform','translate('+iX+'px,'+iY+'px)');
	} else if ("MozTransform" in o.style) {
		this.$().css('-moz-transform','translate3d('+iX+'px,'+iY+'px,0)');
	}
	if(this._invisible){
		this.$().css("visibility","");
		delete this._invisible;
	}
	//jQuery.sap.log.info("Set tile pos, id:" + this.getId() + ", x:" + iX + ", y:" + iY);
	
};

/**
 * Sets the pixel size of the tile 
 * @param {int} iX left position
 * @param {int} iY top position
 * @private
 */ 
sap.m.Tile.prototype.setSize = function(iWidth,iHeight){
	//jQuery.sap.log.debug("Set tile size, id:" + this.getId() + ", x:" + iWidth + ", y:" + iHeight);
	this._width = iWidth;
	this._height = iHeight;
};


/**
 * Returns and optionally sets whether the tile is editable.
 * @param {boolean} optional The editable state of the tile.
 * @returns {boolean} whether the tile is editable
 * @see {sap.m.TileContainer}
 * @private
 */
sap.m.Tile.prototype.isEditable = function(bIsEditable) {
	if (bIsEditable === true || bIsEditable === false) {
		this._bIsEditable = bIsEditable;
	}
	
	return this._bIsEditable;
};

/**
 * Returns and optionally sets whether the tile is dragged and applies or removes the drag styles.
 * @param {boolean} optional The editable state of the tile.
 * @returns {boolean} whether the tile is dragged
 * @see {sap.m.TileContainer}
 * @private
 */
sap.m.Tile.prototype.isDragged = function(bIsDragged) {
	if (!this._bIsEditable) return;
	if (bIsDragged === true || bIsDragged === false) {
		var o = this.$();
		 o.toggleClass("sapMTileDrag",bIsDragged);
		this._bIsDragged = bIsDragged;
	}
	return this._bIsDragged;
};

/**
 * Set active state.
 * @private
 */
sap.m.Tile.prototype.ontouchstart = function(oEvent) {
	if (!this.isEditable()&& !this._parentPreventsTapEvent) {
		this.$().toggleClass("sapMTileActive sapMTileActive-CTX",true);
		this._clientX = oEvent.clientX;
		this._clientY = oEvent.clientY;
	}
};

/**
 * Unset active state.
 * @private
 */
sap.m.Tile.prototype.ontouchend = function() {
	if (!this.isEditable()) {
		this.$().toggleClass("sapMTileActive sapMTileActive-CTX",false);
	}	
};

/**
 * Check if a parent Tile wants to prevent the Tap events for its children - readonly
 * @private
 */
Object.defineProperty(sap.m.Tile.prototype,"_parentPreventsTapEvent",{ 
	get : function (){
		var oParent = this.getParent();
		while (oParent) {
			if (oParent._bAvoidChildTapEvent || (oParent instanceof sap.m.Tile && oParent.isEditable())) {
				return true;
			}
			oParent = oParent.getParent();
		}
		
		return false;
	}
});

/**
 * Unset active state on touch move
 * @private
 */
sap.m.Tile.prototype.ontouchmove = function(oEvent) {
	if (!this.isEditable() && !this._parentPreventsTapEvent) {
		if (Math.abs(oEvent.clientX-this._clientX) > 30 || Math.abs(oEvent.clientY-this._clientY) > 10) {
			this.$().toggleClass("sapMTileActive sapMTileActive-CTX",false);
		}
	}
};

sap.m.Tile.prototype.ontap = function() {
	if (!this.isEditable()&& !this._parentPreventsTapEvent) {
		this.firePress({});
	}
};

/**
 * Set initial visibility of the tile
 * @param {boolean} bVisible visibility
 * @private
 */ 
sap.m.Tile.prototype._setVisible = function(bVisible){
	this._invisible = !bVisible;
	return this;
}

}; // end of sap/m/Tile.js
if ( !jQuery.sap.isDeclared('sap.m.TileContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.TileContainer.
jQuery.sap.declare("sap.m.TileContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TileContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEditable editable} : boolean</li>
 * <li>{@link #getAllowAdd allowAdd} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.TileContainer#event:tileMove tileMove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TileContainer#event:tileDelete tileDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TileContainer#event:tileAdd tileAdd} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container that arranges same-size tiles nicely on carousel pages
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.TileContainer
 */
sap.ui.core.Control.extend("sap.m.TileContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"moveTile", "scrollIntoView", "getPageFirstTileIndex"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"editable" : {type : "boolean", group : "Misc", defaultValue : null},
		"allowAdd" : {type : "boolean", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "tiles",
	aggregations : {
    	"tiles" : {type : "sap.ui.core.Control", multiple : true, singularName : "tile"}
	},
	events : {
		"tileMove" : {}, 
		"tileDelete" : {}, 
		"tileAdd" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.TileContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.TileContainer.extend
 * @function
 */

sap.m.TileContainer.M_EVENTS = {'tileMove':'tileMove','tileDelete':'tileDelete','tileAdd':'tileAdd'};


/**
 * Getter for property <code>width</code>.
 * The width of the container in pixel
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.TileContainer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the container in pixel
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.TileContainer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#setHeight
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Whether the tile container is editable and you can move or delete or add tiles.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.m.TileContainer#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#setEditable
 * @function
 */


/**
 * Getter for property <code>allowAdd</code>.
 * Determines whether the user is allowed to add tiles in edit mode (editable = true)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>allowAdd</code>
 * @public
 * @name sap.m.TileContainer#getAllowAdd
 * @function
 */

/**
 * Setter for property <code>allowAdd</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bAllowAdd  new value for property <code>allowAdd</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#setAllowAdd
 * @function
 */


/**
 * Getter for aggregation <code>tiles</code>.<br/>
 * The tiles to be displayed by the tile container
 * 
 * <strong>Note</strong>: this is the default aggregation for TileContainer.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.TileContainer#getTiles
 * @function
 */


/**
 * Inserts a tile into the aggregation named <code>tiles</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTile the tile to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tile should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tile is inserted at 
 *             the last position        
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#insertTile
 * @function
 */

/**
 * Adds some tile <code>oTile</code> 
 * to the aggregation named <code>tiles</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTile the tile to add; if empty, nothing is inserted
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#addTile
 * @function
 */

/**
 * Removes an tile from the aggregation named <code>tiles</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTile the tile to remove or its index or id
 * @return {sap.ui.core.Control} the removed tile or null
 * @public
 * @name sap.m.TileContainer#removeTile
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.TileContainer#removeAllTiles
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tiles</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.TileContainer#indexOfTile
 * @function
 */
	

/**
 * Destroys all the tiles in the aggregation 
 * named <code>tiles</code>.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#destroyTiles
 * @function
 */


/**
 * Fired if a tile was moved 
 *
 * @name sap.m.TileContainer#tileMove
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Tile} oControlEvent.getParameters.tile The tile that has been moved
 * @param {int} oControlEvent.getParameters.newIndex The new index of the tile in the tiles aggregation
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br/> itself. 
 *  
 * Fired if a tile was moved 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 *
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#attachTileMove
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#detachTileMove
 * @function
 */

/**
 * Fire event tileMove to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'tile' of type <code>sap.m.Tile</code> The tile that has been moved</li>
 * <li>'newIndex' of type <code>int</code> The new index of the tile in the tiles aggregation</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TileContainer#fireTileMove
 * @function
 */


/**
 * Fired if a tile is deleted during edit mode. 
 *
 * @name sap.m.TileContainer#tileDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Tile} oControlEvent.getParameters.tile The tile

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br/> itself. 
 *  
 * Fired if a tile is deleted during edit mode. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 *
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#attachTileDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#detachTileDelete
 * @function
 */

/**
 * Fire event tileDelete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'tile' of type <code>sap.m.Tile</code> The tile
</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TileContainer#fireTileDelete
 * @function
 */


/**
 * Fired if a Tile is added 
 *
 * @name sap.m.TileContainer#tileAdd
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br/> itself. 
 *  
 * Fired if a Tile is added 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 *
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#attachTileAdd
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#detachTileAdd
 * @function
 */

/**
 * Fire event tileAdd to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TileContainer#fireTileAdd
 * @function
 */


/**
 * Moves a given tile to the given index
 *
 * @name sap.m.TileContainer.prototype.moveTile
 * @function
 * @param {int} 
 *         iTile
 *         The tile or tile index to move
 * @param {int} 
 *         iNewIndex
 *         The new Tile position in the tiles aggregation

 * @type void
 * @public
 */


/**
 * Scrolls to the page where the given tile or tile index is included.
 * Optionally this can be done animated or not. With IE9 the scroll is never animated.
 *
 * @name sap.m.TileContainer.prototype.scrollIntoView
 * @function
 * @param {int} 
 *         iTile
 *         The tile or tile index to be scrolled into view
 * @param {boolean} 
 *         bAnimated
 *         Whether the scroll should be animated

 * @type void
 * @public
 */


/**
 * Returns the index of the first tile that is visible in the current page
 *
 * @name sap.m.TileContainer.prototype.getPageFirstTileIndex
 * @function

 * @type int
 * @public
 */


// Start of sap\m\TileContainer.js
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();

sap.m.TileContainer.prototype._bRtl  = sap.ui.getCore().getConfiguration().getRTL();

/**
 * Initializes the control
 *
 * @private
 */
sap.m.TileContainer.prototype.init = function() {
	this._iCurrentTileStartIndex = 0;
	this._iCurrentPage = 0;
	this._iPages = 0;
	this._iScrollLeft = 0;
	this._iScrollGap = 0;	// gap to the left and right that is allowed to be moved while touchmove event if max scrollwidth or min scrollwidth is already reached

	if (!sap.ui.Device.system.desktop) {
		this._iScrollGap = 0;
	}

	this.bAllowTextSelection = false;

	//ugly but needed, initial timeout to wait until all elements are resized. 
	//TODO: Check whether this is needed in no less mode
	this._iInitialResizeTimeout = 400; //needed

	this._oDragSession = null;
	this._oTouchSession = null;

	this._bAvoidChildTapEvent = false;

	// the amount on the left and right during drag drop of a tile needed to start showing the edge of the page
	this._iEdgeShowStart = sap.ui.Device.system.phone ? 10 : 20;

	// the amount of pixels a tile needs to be moved over the left or right edge to trigger a scroll
	this._iTriggerScrollOffset = sap.ui.Device.system.phone ? 10 : sap.ui.Device.system.desktop ? -40 : 20;

	// keyboard support
		this._iCurrentFocusIndex = -1;
		var fnOnHome = jQuery.proxy(function(oEvent) {
				var oFirstTile = this.getTiles()[0];

				if (!!oFirstTile) {
					this._findTile(oFirstTile.$()).focus();

					//event should not trigger any further actions
					oEvent.stopPropagation();
				}
			}, this),

			fnOnEnd = jQuery.proxy(function(oEvent) {

				if (this.getTiles().length > 0) {
					this._findTile(this.getTiles()[this.getTiles().length -1].$()).focus();

					//event should not trigger any further actions
					oEvent.stopPropagation();
				}
			}, this),

			fnOnPageUp = jQuery.proxy(function(oEvent) {

				if (this.getTiles().length > 0) {
					var iModCurr = this._iCurrentFocusIndex % this._iMaxTiles,
					iNextIndex = this._iCurrentFocusIndex - iModCurr;

					if (iModCurr === 0) {
						iNextIndex -= this._iMaxTiles;
					}

					var oNextTile = this.getTiles()[iNextIndex];
					if(!!oNextTile) {
						this._findTile(oNextTile.$()).focus();

						//event should not trigger any further actions
						oEvent.stopPropagation();
					}
				}
			}, this),

			fnOnPageDown = jQuery.proxy(function(oEvent) {
				var iTilesCount = this.getTiles().length;

				if (iTilesCount > 0) {
					var iModCurr = this._iCurrentFocusIndex % this._iMaxTiles,
						iNextIndex = this._iCurrentFocusIndex - iModCurr + this._iMaxTiles -1;

					if (iModCurr === this._iMaxTiles -1) {
						iNextIndex += this._iMaxTiles;
					}

					// check if we are on the last page
					if(iNextIndex - iTilesCount >= 0) {
						iNextIndex = iTilesCount -1;
					}

					var oNextTile = this.getTiles()[iNextIndex];

					if (!!oNextTile) {
						this._findTile(oNextTile.$()).focus();

						//event should not trigger any further actions
						oEvent.stopPropagation();
					}
				}
			}, this),

			fnOnRight = jQuery.proxy(function(oEvent) {

				if (this._iCurrentFocusIndex >= 0) {
					var iModCurr = (this._iCurrentFocusIndex + 2) % this._iMaxTilesX,
						iNextIndex = this._iCurrentFocusIndex + 1;

					if (iModCurr === 1) {
						iNextIndex += (this._iMaxTiles - this._iMaxTilesX);
					}

					var oNextTile = this.getTiles()[iNextIndex];

					if (!!oNextTile) {
						this._findTile(oNextTile.$()).focus();

						//event should not trigger any further actions
						oEvent.stopPropagation();
					}
				}

			}, this),

			fnOnLeft = jQuery.proxy(function(oEvent) {

				if (this._iCurrentFocusIndex >= 0) {
					var iModCurr = this._iCurrentFocusIndex % this._iMaxTilesX,
						iNextIndex = this._iCurrentFocusIndex - 1;

					if (iModCurr === 0) {
						iNextIndex -= (this._iMaxTiles - this._iMaxTilesX);
					}

					var oNextTile = this.getTiles()[iNextIndex];

					if (!!oNextTile) {
						this._findTile(oNextTile.$()).focus();

						//event should not trigger any further actions
						oEvent.stopPropagation();
					}
				}

			}, this),

			fnOnDown = jQuery.proxy(function(oEvent) {

				if (this._iCurrentFocusIndex >= 0) {
					var iModCurr = this._iCurrentFocusIndex % this._iMaxTiles,
						iNextIndex = this._iCurrentFocusIndex + this._iMaxTilesX,
						iModNext = iNextIndex % this._iMaxTiles;

					var oNextTile = this.getTiles()[iNextIndex];

					if ((iModNext > iModCurr) && !!oNextTile) {

						//'(iModNext > iModCurr)' means: still on same page
						this._findTile(oNextTile.$()).focus();

						//event should not trigger any further actions
						oEvent.stopPropagation();
					}
				}

			}, this),

			fnOnUp = jQuery.proxy(function(oEvent) {

				if (this._iCurrentFocusIndex >= 0) {
					var iModCurr = this._iCurrentFocusIndex % this._iMaxTiles,
						iNextIndex = this._iCurrentFocusIndex - this._iMaxTilesX,
						iModNext = iNextIndex % this._iMaxTiles;

					var oNextTile = this.getTiles()[iNextIndex];
					if((iModNext < iModCurr) && !!oNextTile) {

						//'(iModNext < iModCurr)' means: still on same page
						this._findTile(oNextTile.$()).focus();

						//event should not trigger any further actions
						oEvent.stopPropagation();
					}
				}

			}, this);

		this.onsaphome = fnOnHome;
		this.onsapend = fnOnEnd;
		this.onsapright = this._bRtl ? fnOnLeft : fnOnRight;
		this.onsapleft  = this._bRtl ? fnOnRight : fnOnLeft;
		this.onsapup = fnOnUp;
		this.onsapdown = fnOnDown;
		this.onsappageup = fnOnPageUp;
		this.onsappagedown = fnOnPageDown;
};

/**
 * Handles the internal event onBeforeRendering.
 *
 * @private
 */
sap.m.TileContainer.prototype.onBeforeRendering = function() {

	// unregister the resize listener
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

/**
 * Handles the internal event onAfterRendering.
 *
 * @private
 */
sap.m.TileContainer.prototype.onAfterRendering = function() {

	// init resizing
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef().parentElement,  jQuery.proxy(this._resize, this));

	// init the dimensions to the container scoll area
	this._applyDimension();
	this.$().toggleClass("sapMTCEditable",this.getEditable() === true);
	var that = this;

	this._sInitialResizeTimeoutId = setTimeout(function() {
		that._update(true);
	}, this._iInitialResizeTimeout);
};

/**
 * Sets the editable property to the tile container that allows to move icons.
 * This is currently also set with a long tap
 *
 * @param {boolean} Whether the container is in edit mode or not.
 * @returns {sap.m.TileContainer} This tile container.
 * @public
 */
sap.m.TileContainer.prototype.setEditable = function(bValue) {
	var aTiles = this.getTiles();

	// set the property
	this.setProperty("editable", bValue, true);
	var bEditable = this.getEditable();
	this.$().toggleClass("sapMTCEditable", bEditable);

	for (var i=0;i<aTiles.length; i++) {
		var oTile = aTiles[i];

		if (oTile instanceof sap.m.Tile) {
			oTile.isEditable(bEditable);
		}
	}

	return this;	// allow chaining;
};

/**
 * Applies the containers dimensions.
 *
 * @private
 */
sap.m.TileContainer.prototype._applyDimension = function() {
	var oDim = this._getContainerDimension(),
		$this = this.$(),
		oThisPos,
		iOffset = 10,
		$scroll = this.$("scrl"),
		scrollPos,
		scrollOuterHeight,
		pagerHeight = this.$("pager").outerHeight();

	$scroll.css({
		width : oDim.outerwidth + "px",
		height : (oDim.outerheight - pagerHeight) + "px"
	});

	oThisPos = $this.position();

	scrollPos  = $scroll.position();
	scrollOuterHeight = $scroll.outerHeight();

	if (sap.ui.Device.system.phone) {
		iOffset = 2;
	} else if (sap.ui.Device.system.desktop) {
		iOffset = 0;
	}

	this.$("blind").css({
		top : (scrollPos.top + iOffset) + "px",
		left : (scrollPos.left + iOffset) + "px",
		right: "auto",
		width : ($scroll.outerWidth() - iOffset) + "px",
		height : (scrollOuterHeight - iOffset) + "px"
	});

	this.$("rightedge").css({
		top : (oThisPos.top + iOffset) + "px",
		right : iOffset + "px",
		left : "auto",
		height : (scrollOuterHeight - iOffset) + "px"
	});

	this.$("leftedge").css({
		top : (oThisPos.top + iOffset) + "px",
		left : (oThisPos.left + iOffset) + "px",
		right: "auto",
		height : (scrollOuterHeight - iOffset) + "px"
	});
};

/**
 * Handles the resize event for the tile container.
 * This is called whenever the orientation of browser size changes.
 *
 * @private
 */
sap.m.TileContainer.prototype._resize = function() {
	if (this._oDragSession) {
		return;
	}

	setTimeout(jQuery.proxy(function() {
		this._update(true);
		delete this._iInitialResizeTimeout;
	},this),
	this._iInitialResizeTimeout);

	this._iInitialResizeTimeout = 0; //now we do not need to wait
};

/**
 * Called from parent if the control is destroyed.
 *
 * @private
 */
sap.m.TileContainer.prototype.exit = function() {

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}

	if (this._sInitialResizeTimeoutId) {
		clearTimeout(this._sInitialResizeTimeoutId);
	}
};

/**
 * Updates all tiles
 *
 * @private
 */
sap.m.TileContainer.prototype._update = function(bAnimated) {

	if (!this.getDomRef()) {
		return;
	}

	if(!this.$().is(":visible")) {
		return;
	}

	this._updateTilePositions();

	if (!this._oDragSession) {
		this.scrollIntoView(this._iCurrentTileStartIndex || 0, bAnimated);
	}
};

/**
 * Returns the index of the first tile that is visible in the current page
 *
 * @returns {sap.m.TileContainer} The index of the first tile that is visible in the current page.
 * @public
 */
sap.m.TileContainer.prototype.getPageFirstTileIndex = function() {
	return this._iCurrentTileStartIndex || 0;
};

/**
 * Moves a given tile to the given index.
 *
 * @param {sap.m.Tile} oTile The tile to move
 * @param {int} iIndex The new Tile position in the tiles aggregation.
 * @returns {sap.m.TileContainer} This tile container.
 * @public
 */
sap.m.TileContainer.prototype.moveTile = function(vTile, iNewIndex) {
	if (!isNaN(vTile)) {
		vTile = this.getTiles()[vTile];
	}

	if (!vTile) {
		jQuery.sap.log.info("No Tile to move");
		return this;
	}

	this.deleteTile(vTile);
	this.insertTile(vTile,iNewIndex);
	return this;
};

/**
 * Adds a tile to the end of the tiles collection
 *
 * @param {sap.m.Tile} oTile The tile to add.
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 */
sap.m.TileContainer.prototype.addTile = function(oTile) {
	this.insertTile(oTile,this.getTiles().length);
};

/**
 * Inserts a tile to the given index
 *
 * @param {sap.m.Tile} oTile The tile to insert
 * @param {int} iIndex The new Tile position in the tiles aggregation.
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 */
sap.m.TileContainer.prototype.insertTile = function(oTile, iIndex) {

	if (this.getDomRef()) {
		this.insertAggregation("tiles", oTile, iIndex, true);

		if (!this._oDragSession) {
			var oRm = sap.ui.getCore().createRenderManager(),
				oContent = this.$("cnt")[0]; 
			oRm.render(oTile, oContent);
			oRm.destroy();
		}

		//this._applyPageStartIndex(iIndex);
		this._update(false);
	} else {
		this.insertAggregation("tiles",oTile,iIndex);
	}

	// keyboard support for desktop environments
		var that = this,
			fnOnFocusIn = function(oEvent) {
				var iIndex = that.indexOfAggregation("tiles", this),
					iExpectedPage = Math.floor(iIndex / that._iMaxTiles),
					iPageDelta = iExpectedPage - that._iCurrentPage;

				if (iPageDelta != 0) {
					that.scrollIntoView(iIndex);
					that._resize();
				}

				that._iCurrentFocusIndex = iIndex;
			};

		oTile.onfocusin = fnOnFocusIn;

	return this;
};

/**
 * Deletes a tile.
 *
 * @param {sap.m.Tile} oTile The tile to move
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 */
sap.m.TileContainer.prototype.deleteTile = function(oTile) {

	if (this.getDomRef()) {
		var iIndex = this.indexOfAggregation("tiles",oTile)-1;
		this.removeAggregation("tiles",oTile,true);

		if (!this._oDragSession) {
			oTile.getDomRef().parentNode.removeChild(oTile.getDomRef());
		}

		this._applyPageStartIndex(iIndex < 0 ? 0 : iIndex);
		this._update(false);
	} else {
		this.removeAggregation("tiles",oTile,false);
	}

	return this;
};

sap.m.TileContainer.prototype.rerender = function() {
	if (!this._oDragSession || this._oDragSession.bDropped) {
		sap.ui.core.Control.prototype.rerender.apply(this);
	}
};

/**
 * Scrolls one page to the left
 *
 * @public
 */
sap.m.TileContainer.prototype.scrollLeft = function() {
	if(this._bRtl){
		this.scrollIntoView(this._iCurrentTileStartIndex + this._iMaxTiles);
	} else {
		this.scrollIntoView(this._iCurrentTileStartIndex - this._iMaxTiles);
	}
};

/**
 * Scrolls one page to the right.
 *
 * @public
 */
sap.m.TileContainer.prototype.scrollRight = function() {
	if(this._bRtl){
		this.scrollIntoView(this._iCurrentTileStartIndex - this._iMaxTiles);
	} else {
		this.scrollIntoView(this._iCurrentTileStartIndex + this._iMaxTiles);
	}
};

/**
 * Scrolls to the page where the given tile or tile index is included.
 * Optionally this can be done animated or not. With IE9 the scroll is never animated.
 *
 * @param {sap.m.Tile|int} vTile The tile or tile index to be scrolled into view.
 * @param {boolean} bAnimated Whether the scroll should be animated.
 * @public
 */
sap.m.TileContainer.prototype.scrollIntoView = function(vTile, bAnimated) {

	var iContentWidth = this._getContentDimension().outerwidth,
		iIndex = vTile;

	if (isNaN(vTile)) {
		iIndex = this.indexOfAggregation("tiles",vTile);
	}

	if (!this.getTiles()[iIndex]) {
		return;
	}

	this._applyPageStartIndex(iIndex);

	this._iCurrentPage = Math.floor(this._iCurrentTileStartIndex / this._iMaxTiles);

	if (this._bRtl) {
		this._scrollTo((this._iPages - this._iCurrentPage) * iContentWidth, bAnimated);
	} else {
		this._scrollTo(this._iCurrentPage * iContentWidth, bAnimated);
	}

	this._updatePager();
};

/**
 * Updates the tile positions.
 *
 * @private
 */
sap.m.TileContainer.prototype._updateTilePositions = function(){

	if (this.getTiles().length === 0) {	// no tiles
		return;
	}

	this._applyPageStartIndex(this._iCurrentTileStartIndex);
	this._applyDimension();

	var aTiles = this.getTiles(),
		oContentDimension = this._getContentDimension();

	this._iPages = Math.ceil(aTiles.length / this._iMaxTiles);

	for (var i=0; i < aTiles.length; i++) {

		if (aTiles[i].isDragged()) {
			continue;
		}

		var iPage =  Math.floor(i / this._iMaxTiles),
			oTile = aTiles[i],
			iLeft = (iPage * oContentDimension.outerwidth) + this._iOffsetX + i % this._iMaxTilesX * this._oTileDimension.width,
			iTop =  this._iOffsetY + Math.floor(i / this._iMaxTilesX) * this._oTileDimension.height - (iPage * this._iMaxTilesY * this._oTileDimension.height);

		if (this._bRtl) {
			iLeft = (this._iPages - iPage) * oContentDimension.outerwidth - this._iOffsetX - (i % this._iMaxTilesX  + 1) * this._oTileDimension.width;
		}

		oTile.setPos(iLeft,iTop);
		oTile.setSize(this._oTileDimension.width, this._oTileDimension.height);
	}
}; 

/**
 * Convenience method which returns $node if it has css class 'sapMTile'
 * or the first child with that class.
 *
 * @private
 */
sap.m.TileContainer.prototype._findTile = function($node) {
	if($node.hasClass('sapMTile')) {
		return $node;
	} else {
		return $node.find('.sapMTile');
	}
};

/**
 * Updates the pager part of the tile container.
 * This is done dynamically 
 *
 * @private
 */
sap.m.TileContainer.prototype._updatePager = function() {

	var oPager = this.$("pager")[0],
		oScrollLeft = this.$("leftscroller")[0],
		oScrollRight = this.$("rightscroller")[0];

	if (this._iPages > 1) {
		var aHTML = [""];

		for (var i=0;i<this._iPages;i++) {
			aHTML.push("");
		}

		oPager.innerHTML = aHTML.join("<span></span>");
		oPager.style.display = "block";
		oPager.childNodes[this._iCurrentPage].className = "sapMTCActive";

		if (sap.ui.Device.system.desktop) {

			var hide = {
				r: this._iCurrentPage == this._iPages-1,
				l: this._iCurrentPage == 0
			};

			if (this._bRtl) {
				var tmp = hide.r;
				hide.r = hide.l;
				hide.l = tmp;
				// Less builder swaps left and right in RTL styles,
				// and that is not required here
				oScrollRight.style.left = "auto";
				oScrollLeft.style.right = "auto";
			}

			oScrollRight.style.right = hide.r ? "-100px" : "1rem";
			oScrollLeft.style.left   = hide.l ? "-100px" : "1rem";
			oScrollLeft.style.display  = "block";
			oScrollRight.style.display = "block";

			if (hide.r) {
				oScrollRight.style.display = "none";
			}

			if (hide.l) {
				oScrollLeft.style.display = "none";
			}
		}
	} else {

		oPager.innerHTML = "";
		oScrollRight.style.right = "-100px";
		oScrollLeft.style.left = "-100px";
		oScrollLeft.style.display = "none";
		oScrollRight.style.display = "none";
	}
};

/**
 * Returns the dimension (width and height) of the pages content.
 *
 * @returns {object} Width and height of the pages content
 * @private
 */
sap.m.TileContainer.prototype._getContentDimension = function() {

	if (!this.getDomRef()) {
		return;
	}

	var oScroll = this.$("scrl");

	return {
		width  		: oScroll.width(),
		height 		: oScroll.height()-20,
		outerheight : oScroll.outerHeight()-20,
		outerwidth 	: oScroll.outerWidth()
	};
};

/**
 * Returns the dimension (width and height) of the tile container content.
 *
 * @returns {object} Width and height of the pages content.
 * @private
 */
sap.m.TileContainer.prototype._getContainerDimension = function() {
	var oDomRef = this.$();

	if (!oDomRef) {
		return;
	}

	return {
		width  		: oDomRef.width(),
		height 		: oDomRef.height(),
		outerheight : oDomRef.outerHeight(),
		outerwidth 	: oDomRef.outerWidth()
	};
};

/**
 * Returns the dimension (width and height) of a tile.
 *
 * @returns {object} Width and height of a tile.
 * @private
 */
sap.m.TileContainer.prototype._getTileDimension = function() {

	if (!this.getDomRef()) {
		return;
	}

	if (this._oTileDim) {
		return this._oTileDim;
	}

	//TODO: Why the dimensions of the first Tile?
	var oTile = this.getTiles()[0];
	this._oTileDim = {
		width  : Math.round(oTile.$().outerWidth(true)),
		height : Math.round(oTile.$().outerHeight(true))
	};

	return this._oTileDim;
};

/**
 * Calculates the tile page sizes.
 *
 * @private
 */
sap.m.TileContainer.prototype._calculatePositions = function() {

	if (this.getTiles().length === 0) {	// no tiles
		return;
	}

	this._oTileDimension = this._getTileDimension();

	var oContentDimension = this._getContainerDimension(),
		iTiles = this.getTiles().length,
		iPagerHeight = this.$("pager")[0].offsetHeight;

	if (oContentDimension.height === 0) {	// nothing to do because the height of the content is not (yet) available
		return;
	}

	if (sap.ui.Device.system.desktop) {
		oContentDimension.width  -= 45 * 2;
	}

	var iMaxTilesX = Math.max( Math.floor( oContentDimension.width / this._oTileDimension.width ),1), 		  //at least one tile needs to be visible
		iMaxTilesY = Math.max( Math.floor((oContentDimension.height - iPagerHeight) / this._oTileDimension.height),1), //at least one tile needs to be visible
		iNumTileX = (iTiles < iMaxTilesX)  ? iTiles : iMaxTilesX,
		iNumTileY = (iTiles / iNumTileX < iMaxTilesY)  ? Math.ceil(iTiles / iNumTileX) : iMaxTilesY;

	// set the member vars for further usage
	this._iMaxTiles = iMaxTilesX * iMaxTilesY;
	this._iMaxTilesX = iMaxTilesX;
	this._iMaxTilesY = iMaxTilesY;
	this._iOffsetX = Math.floor(( oContentDimension.width  -  (this._oTileDimension.width * iNumTileX)) / 2);

	if (sap.ui.Device.system.desktop) {
		this._iOffsetX += 45;
	}

	this._iOffsetY = Math.floor(( oContentDimension.height - iPagerHeight - (this._oTileDimension.height * iNumTileY )) / 2);

	jQuery.sap.log.debug("maxtiles "+ this._iMaxTiles +" on page " + this.getId());
};

/**
 * Returns an array for a given pixel position in the tile container.
 * Normally there is only one tile for a position.
 *
 * @param {int} iX Position in pixels.
 * @param {int} iY Position in pixels.
 * @returns {array} Array of tiles for the given position
 * @private
 */
sap.m.TileContainer.prototype._getTilesFromPosition = function(iX, iY) {

	if (!this.getTiles().length) {
		return [];
	}

	iX = iX + this._iScrollLeft;

	var aTiles = this.getTiles(),
		aResult = [];

	for (var i=0;i<aTiles.length;i++) {
		var oTile = aTiles[i],
			oRect = {
				top: oTile._posY,
				left: oTile._posX,
				width: oTile._width,
				height: oTile._height
			};

		if (!aTiles[i].isDragged() && iY > oRect.top && iY < oRect.top + oRect.height && iX > oRect.left && iX < oRect.left + oRect.width) {
			aResult.push(aTiles[i]);
		}
	}

	return aResult;
};

/**
 * Applies the start index of the pages first tile according to the given index.
 *
 * @param {int} iIndex The index of the tile that should be visible.
 * @private
 */
sap.m.TileContainer.prototype._applyPageStartIndex = function(iIndex) {
	this._calculatePositions();
	var iLength = this.getTiles().length;

	if (iIndex < 0) {
		iIndex = 0;
	} else if (iIndex > iLength-1) {
		iIndex = iLength-1;
	}

	// where does the page start
	var iCurrentPage = Math.floor(iIndex / this._iMaxTiles || 0);
	this._iCurrentTileStartIndex = iCurrentPage * (this._iMaxTiles  || 0);

	jQuery.sap.log.info("current index " + this._iCurrentTileStartIndex);
};

/**
 * Scrolls to the given position.
 *
 * @param {int} The new scroll position.
 * @private
 */
sap.m.TileContainer.prototype._scrollTo = function(iScrollLeft, bAnimated) {
	if (bAnimated !== false) {
		bAnimated = true; // animated needs to be set explicitly to false
	}

	this._applyTranslate(this.$("cnt"), -iScrollLeft, 0, bAnimated);

	if (this._bRtl) {
		this._iScrollLeft = iScrollLeft - this._getContentDimension().outerwidth;
	} else {
		this._iScrollLeft = iScrollLeft;
	}
};

/**
 * Applies the translate x and y to the given jQuery object.
 *
 * @param {object} o$ The jQuery object
 * @param {int} iX The pixel x value for the translate
 * @param {int} iY The pixel y value for the translate
 * @param {boolean} bAnimated Whether the translate should be animated or not.
 * @private
 */
sap.m.TileContainer.prototype._applyTranslate = function(o$, iX, iY, bAnimated) {
	var o = o$[0];

	this.$("cnt").toggleClass("sapMTCAnim",bAnimated);

	if ("webkitTransform" in o.style) {
		o$.css('-webkit-transform','translate3d('+iX+'px,'+iY+'px,0)');
	} else if ("MozTransform" in o.style) {
		o$.css('-moz-transform','translate('+iX+'px,'+iY+'px)');
	} else if ("transform" in o.style) {
		o$.css('transform','translate3d('+iX+'px,'+iY+'px,0)');
	} else if ("msTransform" in o.style) {
		o$.css('-ms-transform','translate('+iX+'px,'+iY+'px)');
	}
};

/**
 * Initializes the touch session for the tile container.
 *
 * @param {jQuery.Event} oEvent The event object that started the touch.
 * @private
 */
sap.m.TileContainer.prototype._initTouchSession = function(oEvent) {
	if (oEvent.type == "touchstart") {
		var targetTouches = oEvent.targetTouches[0];
		this._oTouchSession = {
			dStartTime : new Date(),
			fStartX : targetTouches.pageX,
			fStartY : targetTouches.pageY,
			fDiffX : 0,
			fDiffY : 0,
			oControl : oEvent.srcControl,
			iOffsetX :  targetTouches.pageX - oEvent.target.offsetLeft
		};
	} else { // mousedown
		this._oTouchSession = {
			dStartTime : new Date(),
			fStartX : oEvent.pageX,
			fStartY : oEvent.pageY,
			fDiffX : 0,
			fDiffY : 0,
			oControl : oEvent.srcControl,
			iOffsetX :  oEvent.pageX - oEvent.target.offsetLeft
		};
	}
};

/**
 * Initializes the drag session for the tile container.
 *
 * @param {jQuery.Event} oEvent The event object that started the drag.
 * @private
 */
sap.m.TileContainer.prototype._initDragSession = function(oEvent) {
	while (oEvent.srcControl && oEvent.srcControl.getParent() != this) {
		 oEvent.srcControl =  oEvent.srcControl.getParent();
	}

	var iIndex = this.indexOfAggregation("tiles",oEvent.srcControl);

	if (oEvent.type == "touchstart") {

	this._oDragSession = {
			oTile  : oEvent.srcControl,
			oTileElement  : oEvent.srcControl.$()[0],
			iOffsetLeft : oEvent.targetTouches[0].pageX - oEvent.srcControl._posX + this._iScrollLeft,
			iOffsetTop  : oEvent.targetTouches[0].pageY - oEvent.srcControl._posY,
			iIndex : iIndex,
			iOldIndex : iIndex,
			iDiffX : oEvent.targetTouches[0].pageX,
			iDiffY : oEvent.targetTouches[0].pageY
	};
	} else { // mousedown
		this._oDragSession = {
				oTile  : oEvent.srcControl,
				oTileElement  : oEvent.srcControl.$()[0],
				iOffsetLeft : oEvent.pageX - oEvent.srcControl._posX + this._iScrollLeft,
				iOffsetTop  : oEvent.pageY - oEvent.srcControl._posY,
				iIndex : iIndex,
				iOldIndex : iIndex,
				iDiffX : oEvent.pageX,
				iDiffY : oEvent.pageY
		};
	}
};

/**
 * Handle click events for scollers in desktop case.
 *
 * @param {jQuery.Event} oEvent The event object that started the drag.
 * @private
 */
sap.m.TileContainer.prototype.onclick = function(oEvent) {
	var oPager = this.$("pager")[0];

	if (oEvent.target.id == this.getId() + "-leftscroller" || oEvent.target.parentNode.id == this.getId() + "-leftscroller") {
		this.scrollLeft();
	} else if (oEvent.target.id == this.getId() + "-rightscroller" || oEvent.target.parentNode.id == this.getId() + "-rightscroller") {
		this.scrollRight();
	} else if (oEvent.target == oPager && sap.ui.Device.system.desktop) {
		if (oEvent.offsetX < oPager.offsetWidth/2) {
			this.scrollLeft();
		} else {
			this.scrollRight();
		}
	}
};

/**
 * Handle the touchstart event on the TileContainer.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.TileContainer.prototype.ontouchstart = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by this control.
	oEvent.setMarked();

	if (oEvent.targetTouches.length > 1 || this._oTouchSession) {	// allow only one touch session
		return;
	}

	while (oEvent.srcControl && oEvent.srcControl.getParent() != this) {
		 oEvent.srcControl =  oEvent.srcControl.getParent();
	}

	if (oEvent.srcControl instanceof sap.m.Tile && this.getEditable()) {

		if (oEvent.target.className != "sapMTCRemove") {
			this._initDragSession(oEvent);
			this._initTouchSession(oEvent);
			this._oDragSession.oTile.isDragged(true);
		} else {
			this._initTouchSession(oEvent);
		}

		this._bAvoidChildTapEvent = true;
	} else {
		this._initTouchSession(oEvent);
	}

	jQuery(document).on("touchmove mousemove", jQuery.proxy(this._onmove, this));
	jQuery(document).on("touchend touchcancel mouseup", jQuery.proxy(this._onend, this));
};

/**
 * Handle the touch move event on the TileContainer.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.TileContainer.prototype._onmove = function(oEvent) {

	if (document.selection && document.selection.clear) {
		document.selection.clear();
	}

	if (oEvent.isMarked("delayedMouseEvent")) {
		return;
	}

	if (oEvent.targetTouches && oEvent.targetTouches.length > 1) {	//allow only one touch session
		return;
	}

	if (!oEvent.targetTouches) {
		oEvent.targetTouches=[{pageX:oEvent.pageX,pageY:oEvent.pageY}];
	}

	var oTouchSession = this._oTouchSession;
	oTouchSession.fDiffX = oTouchSession.fStartX - oEvent.targetTouches[0].pageX;
	oTouchSession.fDiffY = oTouchSession.fStartY - oEvent.targetTouches[0].pageY;

	if (this._oDragSession) {

		if (Math.abs(oTouchSession.fDiffX)>5) {
			if (!this._oDragSession.bStarted) {
				this._oDragSession.bStarted = true;
				this._onDragStart(oEvent);
			} else {
				this._onDrag(oEvent);
			}

			this._bAvoidChildTapEvent = true;
		}
	} else if (oTouchSession) {
		var contentWidth = this._getContentDimension().outerwidth;
		var iNewLeft = -this._iScrollLeft - oTouchSession.fDiffX;

		if (iNewLeft > this._iScrollGap) {
			return;
		} else if (iNewLeft < -(((this._iPages-1) * contentWidth) + this._iScrollGap)) {
			return;
		}

		if (this._bRtl){
			iNewLeft = iNewLeft - contentWidth;
		}

		this._applyTranslate(this.$("cnt"),iNewLeft,0,false);
	}
};

/**
 * Handle the touchend and mouseup events on the TileContainer.
 *
 * @param {jQuery.Event} The event object.
 * @private
 */
sap.m.TileContainer.prototype._onend = function(oEvent) {

	if (oEvent.isMarked("delayedMouseEvent")) {
		return;
	}

	jQuery(document).off("touchend touchcancel mouseup", this._onend);
	jQuery(document).off("touchmove mousemove", this._onmove);

	if (this._oDragSession) {

		this._onDrop(oEvent);
		delete this._oTouchSession;
		return;
	}

	if (!this._oTouchSession) {
		return;
	}

	var oTouchSession = this._oTouchSession,
		oDate = new Date(),
		bFast = (oDate - oTouchSession.dStartTime < 600),
		iRtl = this._bRtl? -1 : 1;

	// handle fast swipe or tap
	if (bFast) {
		var oPager = this.$("pager")[0];

		if (Math.abs(oTouchSession.fDiffX) > 30) {

			this._applyPageStartIndex(this._iCurrentTileStartIndex + ((oTouchSession.fDiffX * iRtl > 0 ? 1 : -1) * this._iMaxTiles));
			this._bAvoidChildTapEvent = true;
		} else if (oEvent.target == oPager && !sap.ui.Device.system.desktop) {

			if ((oTouchSession.iOffsetX - oPager.offsetWidth/2) * iRtl < 0) {
				this.scrollLeft();
			} else {
				this.scrollRight();
			}

			this._bAvoidChildTapEvent = true;
		} else if (oEvent.target.className == "sapMTCRemove") {
			this.fireTileDelete({ tile: oTouchSession.oControl });
		}
	} else {
		var oContentDimension = this._getContentDimension();

		if (Math.abs(oTouchSession.fDiffX) > oContentDimension.outerwidth/2) {
			this._applyPageStartIndex(this._iCurrentTileStartIndex + ((oTouchSession.fDiffX * iRtl > 0 ? 1 : -1) * this._iMaxTiles));
			this._bAvoidChildTapEvent = true;
		}
	}

	this._update();

	// remove unused properties
	delete this._oDragSession;
	delete this._oTouchSession;
	var that = this;

	setTimeout(function(){
		that._bAvoidChildTapEvent = false;
	},100);
};

/**
 * Handles the drag start of an item in edit mode.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.TileContainer.prototype._onDragStart = function(oEvent) {
	this.$().append(this._oDragSession.oTileElement);
	this._oDragSession.iDiffX = this._oTouchSession.fStartX - this._oTouchSession.fDiffX;
	this._oDragSession.iDiffY = this._oTouchSession.fStartY - this._oTouchSession.fDiffY;
	this._oDragSession.oTile.setPos(this._oDragSession.iDiffX - this._oDragSession.iOffsetLeft,this._oDragSession.iDiffY - this._oDragSession.iOffsetTop);
	this.$("blind").css("display","block");
};

/**
 * Handles the dragging of an item.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.TileContainer.prototype._onDrag = function(oEvent) {

	// calculate the center and middle position of the dragged tile
	if (!this._oTouchSession) {

		// if onDrag is fired after an scroll interval but the drag session was already ended.
		clearTimeout(this.iScrollTimer);
		this._oDragSession = null;
		this.iScrollTimer = null;
		this._bTriggerScroll = false;
		return;
	}

	this._oDragSession.iDiffX = this._oTouchSession.fStartX - this._oTouchSession.fDiffX;
	this._oDragSession.iDiffY = this._oTouchSession.fStartY - this._oTouchSession.fDiffY;

	var oContentDimension = this._getContentDimension(),
		iTop = this._oDragSession.iDiffY - this._oDragSession.iOffsetTop,
		iLeft = this._oDragSession.iDiffX - this._oDragSession.iOffsetLeft,
		iMiddle = iTop + (this._oDragSession.oTileElement.offsetHeight/2),
		iCenter = iLeft + (this._oDragSession.oTileElement.offsetWidth/2),
		bScrollRight = iLeft +  this._oDragSession.oTileElement.offsetWidth - this._iTriggerScrollOffset > oContentDimension.width,
		bScrollLeft =  iLeft  < -this._iTriggerScrollOffset,
		iNearRight = oContentDimension.width - (iLeft +  this._oDragSession.oTileElement.offsetWidth),
		iNearLeft =  iLeft;

	//jQuery.sap.log.info("ScrollLeft = " + this._iScrollLeft + " Left = " + iLeft + " Top = " + iTop);
	this._oDragSession.oTile.setPos(iLeft,iTop);

	// reset the clipping of the tile
	this._oDragSession.oTile.$().css("clip","auto");

	// clip the right part of the tile if it is near the right edge
	var oRight = this.$("rightedge")[0];
	if (iLeft + this._oDragSession.oTile._width > oRight.offsetLeft + oRight.offsetWidth && this._iCurrentPage < this._iPages-1) {
		var iClipRight =oRight.offsetLeft + oRight.offsetWidth - iLeft - ((this._oDragSession.oTile._width-this._oDragSession.oTile.$().outerWidth(false))/2)-2;
		this._oDragSession.oTile.$().css("clip","rect(-25px,"+iClipRight+"px," + (this._oDragSession.oTile._height +20) + "px,-25px)");
	}

	// clip the left part of the tile if it is near the left edge
	var oLeft = this.$("leftedge")[0];
	if (iLeft < oLeft.offsetLeft + 2 + ((this._oDragSession.oTile._width - this._oDragSession.oTile.$().outerWidth(false))/2) && this._iCurrentPage > 0) {
		var iClipLeft = oLeft.offsetLeft + 4 - iLeft - ((this._oDragSession.oTile._width-this._oDragSession.oTile.$().outerWidth(false))/2);
		this._oDragSession.oTile.$().css("clip","rect(-25px,"+this._oDragSession.oTile._width+"px," + (this._oDragSession.oTile._height +20) + "px,"+iClipLeft+"px)");	
	}

	// increase the opacity of the right edge the closer the tile is moved
	if (iNearRight < this._iEdgeShowStart && this._iCurrentPage < this._iPages-1) {
		var iOpacity = (this._iEdgeShowStart-iNearRight) / (this._iEdgeShowStart + this._iTriggerScrollOffset);
		this.$("rightedge").css("opacity","" + iOpacity);
	} else {

		// not near the edge
		this.$("rightedge").css("opacity","0.01");
	}

	// increase the opacity of the left edge the closer the tile is moved
	if (iNearLeft < this._iEdgeShowStart && this._iCurrentPage > 0) {
		var iOpacity = (this._iEdgeShowStart-iNearLeft) / (this._iEdgeShowStart + this._iTriggerScrollOffset);
		this.$("leftedge").css("opacity",""+iOpacity);
	} else {

		// not near the edge
		this.$("leftedge").css("opacity","0.01");
	}

	// check if scrolling needed
	var bScrollNeeded;

	if (this._bRtl){
		bScrollNeeded = bScrollRight && this._iCurrentPage > 0 || bScrollLeft && this._iCurrentPage < this._iPages-1;
	} else {
		bScrollNeeded = bScrollLeft && this._iCurrentPage > 0 || bScrollRight && this._iCurrentPage < this._iPages-1;
	}

	if (bScrollNeeded) {
		if (this._bTriggerScroll) {
			bScrollLeft ? this.scrollLeft() : this.scrollRight();
		} else {

			// start the interval timer
			var that = this;
			if (!this.iScrollTimer) {
				this.iScrollTimer = setInterval(function () {
					that._bTriggerScroll = true;
					that._onDrag(oEvent); //retrigger the event
					that._bTriggerScroll = false;
				},1000);
			}
		}

		// do not process further to avoid hovered tiles from the next page to be processed
		return;
	} else {

		// reset the interval timer
		if (this.iScrollTimer) {
			clearTimeout(this.iScrollTimer);
			this._bTriggerScroll = false;
			this.iScrollTimer = null;
		}
	}

	// get the hovered tile
	var aHoveredTiles = this._getTilesFromPosition(iCenter, iMiddle);
	if (aHoveredTiles && aHoveredTiles.length > 0) {

		// insert the tile after if center is on the right half of the target tile
		var oHoveredTile = aHoveredTiles[0],
			oRect = {
				top: oHoveredTile._posY,
				left: oHoveredTile._posX,
				width: oHoveredTile._width,
				height: oHoveredTile._height
			};

		var iIndex = this.indexOfAggregation("tiles", oHoveredTile);

		// (iIndex % this._iMaxTilesX) != 0 = Not a start tile in a row to avoid inserting in previous row which would flicker if 
		// drag right before the first tile in a row.
		if (iCenter + this._iScrollLeft < ((oRect.left + oRect.width)/2) && (iIndex % this._iMaxTilesX) != 0) {
			iIndex--;
		}

		this._oDragSession.iIndex = iIndex;
		this.moveTile(this._oDragSession.oTile,this._oDragSession.iIndex);
	} else if (this._iCurrentPage == this._iPages - 1) {

		// check whether the dragged tile is at the end of the tile container
		var aTiles = this.getTiles(),
			oLastTile = aTiles[aTiles.length-1];

		if (oLastTile && iCenter > oLastTile._posX - this._iScrollLeft && iMiddle > oLastTile._posY) {
			this._oDragSession.iIndex = aTiles.length - 1;
			this.moveTile(this._oDragSession.oTile, this._oDragSession.iIndex);
		}
	}
};

/**
 * Handles the drop of a tile.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.TileContainer.prototype._onDrop = function(oEvent) {
	if (this._oDragSession) {
		var oTile = this._oDragSession.oTile,
			iIndex = this._oDragSession.iIndex;

		this._oDragSession.oTile.isDragged(false);

		if (this._oDragSession.iOldIndex != this._oDragSession.iIndex) {
			this.fireTileMove({
				tile: oTile,
				newIndex: iIndex
			});
		}

		this.$("blind").css("display","block");

		if (this._oDragSession.bStarted) {
			this._oDragSession.oTile.setPos(this._oDragSession.oTile._posX + this._iScrollLeft, this._oDragSession.oTile._posY);
		}

		// reset the clipping
		this._oDragSession.oTile.$().css("clip","auto");

		// reset the edges
		this.$("rightedge").css("opacity","0.01");
		this.$("leftedge").css("opacity","0.01");
		this.$("cnt").append(this._oDragSession.oTileElement);
		delete this._oDragSession;
		this.moveTile(oTile, iIndex);
		this.scrollIntoView(oTile, false);
		this.$("blind").css("display","none");
	}
};
}; // end of sap/m/TileContainer.js
if ( !jQuery.sap.isDeclared('sap.m.ToolbarLayoutData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ToolbarLayoutData.
jQuery.sap.declare("sap.m.ToolbarLayoutData");

jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained



/**
 * Constructor for a new ToolbarLayoutData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShrinkable shrinkable} : boolean (default: false)</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Holds layout data for the toolbar items.
 * @extends sap.ui.core.LayoutData
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.20
 * @name sap.m.ToolbarLayoutData
 */
sap.ui.core.LayoutData.extend("sap.m.ToolbarLayoutData", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"shrinkable" : {type : "boolean", group : "Behavior", defaultValue : false},
		"minWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"maxWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.ToolbarLayoutData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ToolbarLayoutData.extend
 * @function
 */


/**
 * Getter for property <code>shrinkable</code>.
 * Determines whether the control in the toolbar is shrinkable or not. If the related control has fixed width(e.g. 100px, 5rem) then this property is ignored.
 * 
 * Note: Nested layout controls should not be shrinkable.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>shrinkable</code>
 * @public
 * @name sap.m.ToolbarLayoutData#getShrinkable
 * @function
 */

/**
 * Setter for property <code>shrinkable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShrinkable  new value for property <code>shrinkable</code>
 * @return {sap.m.ToolbarLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ToolbarLayoutData#setShrinkable
 * @function
 */


/**
 * Getter for property <code>minWidth</code>.
 * Sets the minimum width of the toolbar item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * @name sap.m.ToolbarLayoutData#getMinWidth
 * @function
 */

/**
 * Setter for property <code>minWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.m.ToolbarLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ToolbarLayoutData#setMinWidth
 * @function
 */


/**
 * Getter for property <code>maxWidth</code>.
 * Sets the maximum width of the toolbar item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * @name sap.m.ToolbarLayoutData#getMaxWidth
 * @function
 */

/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.m.ToolbarLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ToolbarLayoutData#setMaxWidth
 * @function
 */


// Start of sap\m\ToolbarLayoutData.js
/*
 * Returns the parent's live style object from DOM
 * Here parent is the control who is setting the layout data
 *
 * @returns {Object}
 * @protected
 */
sap.m.ToolbarLayoutData.prototype.getParentStyle = function() {
	var oParent = this.getParent();
	if (!oParent || !oParent.getDomRef) {
		return {};
	}

	var oDomRef = oParent.getDomRef();
	return oDomRef ? oDomRef.style : {};
};

/*
 * If the control that is using ToolbarLayoutData has been already rendered,
 * then this function can be used to apply layout data properties to related control
 *
 * @returns {sap.m.ToolbarLayoutData}
 * @protected
 */
sap.m.ToolbarLayoutData.prototype.applyProperties = function() {
	var oStyle = this.getParentStyle();
	oStyle.minWidth = this.getMinWidth();
	oStyle.maxWidth = this.getMaxWidth();
	return this;
};
}; // end of sap/m/ToolbarLayoutData.js
if ( !jQuery.sap.isDeclared('sap.m.ToolbarSpacer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ToolbarSpacer.
jQuery.sap.declare("sap.m.ToolbarSpacer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ToolbarSpacer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control can be used to add horizontal space between toolbar items.
 * Note: ToolbarLayoutData should not be used with this control.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.ToolbarSpacer
 */
sap.ui.core.Control.extend("sap.m.ToolbarSpacer", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : ''}
	}
}});


/**
 * Creates a new subclass of class sap.m.ToolbarSpacer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ToolbarSpacer.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the horizontal space.
 * Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
 * This feature can be used to push next item to the edge of the toolbar.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.ToolbarSpacer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ToolbarSpacer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ToolbarSpacer#setWidth
 * @function
 */


// Start of sap\m\ToolbarSpacer.js
/**
 * Flexible Spacer Class Name
 * @protected
 */
sap.m.ToolbarSpacer.flexClass = "sapMTBSpacerFlex";
}; // end of sap/m/ToolbarSpacer.js
if ( !jQuery.sap.isDeclared('sap.m.VBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.VBox.
jQuery.sap.declare("sap.m.VBox");




/**
 * Constructor for a new VBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control as it is just a specialized FlexBox control.
 * 
 * Browser support:
 * This control is not supported in Internet Explorer 9!
 * @extends sap.m.FlexBox
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.VBox
 */
sap.m.FlexBox.extend("sap.m.VBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m"
}});


/**
 * Creates a new subclass of class sap.m.VBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.VBox.extend
 * @function
 */


// Start of sap\m\VBox.js

}; // end of sap/m/VBox.js
if ( !jQuery.sap.isDeclared('sap.m.VBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.m.VBoxRenderer");


/**
 * @class VBox renderer.
 * @static
 */
sap.m.VBoxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.VBoxRenderer.render = function(oRm, oControl){
	sap.m.FlexBoxRenderer.render.apply(this, [oRm, oControl]);
};

}; // end of sap/m/VBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.m.ViewSettingsDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ViewSettingsDialog.
jQuery.sap.declare("sap.m.ViewSettingsDialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ViewSettingsDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSortDescending sortDescending} : boolean (default: false)</li>
 * <li>{@link #getGroupDescending groupDescending} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSortItems sortItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getGroupItems groupItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getFilterItems filterItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getPresetFilterItems presetFilterItems} : sap.m.ViewSettingsItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedSortItem selectedSortItem} : string | sap.m.ViewSettingsItem</li>
 * <li>{@link #getSelectedGroupItem selectedGroupItem} : string | sap.m.ViewSettingsItem</li>
 * <li>{@link #getSelectedPresetFilterItem selectedPresetFilterItem} : string | sap.m.ViewSettingsItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ViewSettingsDialog#event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ViewSettingsDialog#event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ViewSettingsDialog#event:resetFilters resetFilters} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ViewSettingsDialog provides functionality to easily select the options for sorting, grouping, and filtering data. It is a composite control, consisting of a modal popover and several internal lists. There are three different tabs (Sort, Group, Filter) in the dialog that can be activated by filling the respecive associations. If only one assication is filled, the other tabs are automatically hidden. The selected options can be used to create sorters and filters for the table.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.ViewSettingsDialog
 */
sap.ui.core.Control.extend("sap.m.ViewSettingsDialog", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"open", "getSelectedFilters", "getSelectedFilterString", "getSelectedFilterKeys", "setSelectedFilterKeys"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Behavior", defaultValue : null},
		"sortDescending" : {type : "boolean", group : "Behavior", defaultValue : false},
		"groupDescending" : {type : "boolean", group : "Behavior", defaultValue : false}
	},
	aggregations : {
    	"sortItems" : {type : "sap.m.ViewSettingsItem", multiple : true, singularName : "sortItem", bindable : "bindable"}, 
    	"groupItems" : {type : "sap.m.ViewSettingsItem", multiple : true, singularName : "groupItem", bindable : "bindable"}, 
    	"filterItems" : {type : "sap.m.ViewSettingsItem", multiple : true, singularName : "filterItem", bindable : "bindable"}, 
    	"presetFilterItems" : {type : "sap.m.ViewSettingsItem", multiple : true, singularName : "presetFilterItem", bindable : "bindable"}
	},
	associations : {
		"selectedSortItem" : {type : "sap.m.ViewSettingsItem", multiple : false}, 
		"selectedGroupItem" : {type : "sap.m.ViewSettingsItem", multiple : false}, 
		"selectedPresetFilterItem" : {type : "sap.m.ViewSettingsItem", multiple : false}
	},
	events : {
		"confirm" : {}, 
		"cancel" : {}, 
		"resetFilters" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ViewSettingsDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ViewSettingsDialog.extend
 * @function
 */

sap.m.ViewSettingsDialog.M_EVENTS = {'confirm':'confirm','cancel':'cancel','resetFilters':'resetFilters'};


/**
 * Getter for property <code>title</code>.
 * Title of the dialog. If not set, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively if there is only one active tab.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ViewSettingsDialog#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#setTitle
 * @function
 */


/**
 * Getter for property <code>sortDescending</code>.
 * If set to true, the sort order is descending, otherwise ascending (default).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>sortDescending</code>
 * @public
 * @name sap.m.ViewSettingsDialog#getSortDescending
 * @function
 */

/**
 * Setter for property <code>sortDescending</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSortDescending  new value for property <code>sortDescending</code>
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#setSortDescending
 * @function
 */


/**
 * Getter for property <code>groupDescending</code>.
 * If set to true, the group order is descending, otherwise ascending (default).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>groupDescending</code>
 * @public
 * @name sap.m.ViewSettingsDialog#getGroupDescending
 * @function
 */

/**
 * Setter for property <code>groupDescending</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bGroupDescending  new value for property <code>groupDescending</code>
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#setGroupDescending
 * @function
 */


/**
 * Getter for aggregation <code>sortItems</code>.<br/>
 * List of items with key and value that can be sorted over (e.g. a list of columns for a table).
 * 
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * @name sap.m.ViewSettingsDialog#getSortItems
 * @function
 */


/**
 * Inserts a sortItem into the aggregation named <code>sortItems</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *          oSortItem the sortItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the sortItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the sortItem is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#insertSortItem
 * @function
 */

/**
 * Adds some sortItem <code>oSortItem</code> 
 * to the aggregation named <code>sortItems</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oSortItem the sortItem to add; if empty, nothing is inserted
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#addSortItem
 * @function
 */

/**
 * Removes an sortItem from the aggregation named <code>sortItems</code>.
 *
 * @param {int | string | sap.m.ViewSettingsItem} vSortItem the sortItem to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed sortItem or null
 * @public
 * @name sap.m.ViewSettingsDialog#removeSortItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>sortItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ViewSettingsDialog#removeAllSortItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>sortItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oSortItem the sortItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ViewSettingsDialog#indexOfSortItem
 * @function
 */
	

/**
 * Destroys all the sortItems in the aggregation 
 * named <code>sortItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#destroySortItems
 * @function
 */


/**
 * Binder for aggregation <code>sortItems</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#bindSortItems
 * @function
 */

/**
 * Unbinder for aggregation <code>sortItems</code>.
 *
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#unbindSortItems
 * @function
 */


/**
 * Getter for aggregation <code>groupItems</code>.<br/>
 * List of items with key and value that can be grouped on (e.g. a list of columns for a table).
 * 
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * @name sap.m.ViewSettingsDialog#getGroupItems
 * @function
 */


/**
 * Inserts a groupItem into the aggregation named <code>groupItems</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *          oGroupItem the groupItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the groupItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the groupItem is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#insertGroupItem
 * @function
 */

/**
 * Adds some groupItem <code>oGroupItem</code> 
 * to the aggregation named <code>groupItems</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oGroupItem the groupItem to add; if empty, nothing is inserted
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#addGroupItem
 * @function
 */

/**
 * Removes an groupItem from the aggregation named <code>groupItems</code>.
 *
 * @param {int | string | sap.m.ViewSettingsItem} vGroupItem the groupItem to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed groupItem or null
 * @public
 * @name sap.m.ViewSettingsDialog#removeGroupItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>groupItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ViewSettingsDialog#removeAllGroupItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>groupItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oGroupItem the groupItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ViewSettingsDialog#indexOfGroupItem
 * @function
 */
	

/**
 * Destroys all the groupItems in the aggregation 
 * named <code>groupItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#destroyGroupItems
 * @function
 */


/**
 * Binder for aggregation <code>groupItems</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#bindGroupItems
 * @function
 */

/**
 * Unbinder for aggregation <code>groupItems</code>.
 *
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#unbindGroupItems
 * @function
 */


/**
 * Getter for aggregation <code>filterItems</code>.<br/>
 * List of items with key and value that can be filtered on (e.g. a list of columns for a table). A filterItem is associated with one or more detail filters.
 * 
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * @name sap.m.ViewSettingsDialog#getFilterItems
 * @function
 */


/**
 * Inserts a filterItem into the aggregation named <code>filterItems</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *          oFilterItem the filterItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the filterItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the filterItem is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#insertFilterItem
 * @function
 */

/**
 * Adds some filterItem <code>oFilterItem</code> 
 * to the aggregation named <code>filterItems</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oFilterItem the filterItem to add; if empty, nothing is inserted
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#addFilterItem
 * @function
 */

/**
 * Removes an filterItem from the aggregation named <code>filterItems</code>.
 *
 * @param {int | string | sap.m.ViewSettingsItem} vFilterItem the filterItem to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed filterItem or null
 * @public
 * @name sap.m.ViewSettingsDialog#removeFilterItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>filterItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ViewSettingsDialog#removeAllFilterItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>filterItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oFilterItem the filterItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ViewSettingsDialog#indexOfFilterItem
 * @function
 */
	

/**
 * Destroys all the filterItems in the aggregation 
 * named <code>filterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#destroyFilterItems
 * @function
 */


/**
 * Binder for aggregation <code>filterItems</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#bindFilterItems
 * @function
 */

/**
 * Unbinder for aggregation <code>filterItems</code>.
 *
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#unbindFilterItems
 * @function
 */


/**
 * Getter for aggregation <code>presetFilterItems</code>.<br/>
 * List of preset filter items that allow the selection of more complex or custom filters. These entries are displayed at the top of the filter tab.
 * 
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * @name sap.m.ViewSettingsDialog#getPresetFilterItems
 * @function
 */


/**
 * Inserts a presetFilterItem into the aggregation named <code>presetFilterItems</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *          oPresetFilterItem the presetFilterItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the presetFilterItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the presetFilterItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the presetFilterItem is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#insertPresetFilterItem
 * @function
 */

/**
 * Adds some presetFilterItem <code>oPresetFilterItem</code> 
 * to the aggregation named <code>presetFilterItems</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oPresetFilterItem the presetFilterItem to add; if empty, nothing is inserted
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#addPresetFilterItem
 * @function
 */

/**
 * Removes an presetFilterItem from the aggregation named <code>presetFilterItems</code>.
 *
 * @param {int | string | sap.m.ViewSettingsItem} vPresetFilterItem the presetFilterItem to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed presetFilterItem or null
 * @public
 * @name sap.m.ViewSettingsDialog#removePresetFilterItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>presetFilterItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ViewSettingsDialog#removeAllPresetFilterItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>presetFilterItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oPresetFilterItem the presetFilterItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ViewSettingsDialog#indexOfPresetFilterItem
 * @function
 */
	

/**
 * Destroys all the presetFilterItems in the aggregation 
 * named <code>presetFilterItems</code>.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#destroyPresetFilterItems
 * @function
 */


/**
 * Binder for aggregation <code>presetFilterItems</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#bindPresetFilterItems
 * @function
 */

/**
 * Unbinder for aggregation <code>presetFilterItems</code>.
 *
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#unbindPresetFilterItems
 * @function
 */


/**
 * Sort item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedSortItem"
 *
 * @return {string} Id of the element which is the current target of the <code>selectedSortItem</code> association, or null
 * @public
 * @name sap.m.ViewSettingsDialog#getSelectedSortItem
 * @function
 */

/**
 * Sort item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedSortItem"
 *
 * @param {string | sap.m.ViewSettingsItem} vSelectedSortItem 
 *    Id of an element which becomes the new target of this <code>selectedSortItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#setSelectedSortItem
 * @function
 */


	
/**
 * Group item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedGrouptItem"
 *
 * @return {string} Id of the element which is the current target of the <code>selectedGroupItem</code> association, or null
 * @public
 * @name sap.m.ViewSettingsDialog#getSelectedGroupItem
 * @function
 */

/**
 * Group item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedGrouptItem"
 *
 * @param {string | sap.m.ViewSettingsItem} vSelectedGroupItem 
 *    Id of an element which becomes the new target of this <code>selectedGroupItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#setSelectedGroupItem
 * @function
 */


	
/**
 * Preset filter item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedPresetFilterItem". Note that either a preset filter OR multiple detail filters can be active at the same time.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedPresetFilterItem</code> association, or null
 * @public
 * @name sap.m.ViewSettingsDialog#getSelectedPresetFilterItem
 * @function
 */

/**
 * Preset filter item that is selected. It can be set by either passing a key or the item itself to the function "setSelectedPresetFilterItem". Note that either a preset filter OR multiple detail filters can be active at the same time.
 *
 * @param {string | sap.m.ViewSettingsItem} vSelectedPresetFilterItem 
 *    Id of an element which becomes the new target of this <code>selectedPresetFilterItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#setSelectedPresetFilterItem
 * @function
 */


	
/**
 * The event indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page. 
 *
 * @name sap.m.ViewSettingsDialog#confirm
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.sortItem Selected sort item.
 * @param {boolean} oControlEvent.getParameters.sortDescending Selected sort order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.groupItem Selected group item
 * @param {boolean} oControlEvent.getParameters.groupDescending Selected group order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.presetFilterItem Selected preset filter item.
 * @param {sap.m.ViewSettingsItem[]} oControlEvent.getParameters.filterItems Selected filters in an array of ViewSettingsItem.
 * @param {object} oControlEvent.getParameters.filterKeys Selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (e.g. the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.
 * @param {string} oControlEvent.getParameters.filterString Selected filter items in string format to display in a control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself. 
 *  
 * The event indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.
 *
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#attachConfirm
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#detachConfirm
 * @function
 */

/**
 * Fire event confirm to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'sortItem' of type <code>sap.m.ViewSettingsItem</code> Selected sort item.</li>
 * <li>'sortDescending' of type <code>boolean</code> Selected sort order (true = descending, false = ascending).</li>
 * <li>'groupItem' of type <code>sap.m.ViewSettingsItem</code> Selected group item</li>
 * <li>'groupDescending' of type <code>boolean</code> Selected group order (true = descending, false = ascending).</li>
 * <li>'presetFilterItem' of type <code>sap.m.ViewSettingsItem</code> Selected preset filter item.</li>
 * <li>'filterItems' of type <code>sap.m.ViewSettingsItem[]</code> Selected filters in an array of ViewSettingsItem.</li>
 * <li>'filterKeys' of type <code>object</code> Selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (e.g. the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.</li>
 * <li>'filterString' of type <code>string</code> Selected filter items in string format to display in a control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ViewSettingsDialog#fireConfirm
 * @function
 */


/**
 * Event is called when the cancel button is pressed. It can be used to set the state of custom filter controls. 
 *
 * @name sap.m.ViewSettingsDialog#cancel
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself. 
 *  
 * Event is called when the cancel button is pressed. It can be used to set the state of custom filter controls. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.
 *
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#attachCancel
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#detachCancel
 * @function
 */

/**
 * Fire event cancel to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ViewSettingsDialog#fireCancel
 * @function
 */


/**
 * Event is called when the reset filters button is pressed. It can be used to clear the state of custom filter controls. 
 *
 * @name sap.m.ViewSettingsDialog#resetFilters
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'resetFilters' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself. 
 *  
 * Event is called when the reset filters button is pressed. It can be used to clear the state of custom filter controls. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.
 *
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#attachResetFilters
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'resetFilters' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsDialog#detachResetFilters
 * @function
 */

/**
 * Fire event resetFilters to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ViewSettingsDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ViewSettingsDialog#fireResetFilters
 * @function
 */


/**
 * Open the dialog.
 *
 * @name sap.m.ViewSettingsDialog.prototype.open
 * @function
 * @param {object} 
 *         oControl
 *         This is the control to which the dialog will be placed. It can be not only a UI5 control, but also an existing dom reference.

 * @type sap.m.ViewSettingsDialog
 * @public
 */


/**
 * Returns the selected filters as an array of ViewSettingsItems. It can be used to create matching sorters and filters to apply the selected settings to the data.
 *
 * @name sap.m.ViewSettingsDialog.prototype.getSelectedFilters
 * @function

 * @type sap.m.ViewSettingsItem[]
 * @public
 */


/**
 * Returns the filter string in the format "filter name (subfilter1 name, subfilter2 name, ...), ..." to be displayed in table/list headers. For custom filters and preset filters it will only add the filter name to the resulting string.
 *
 * @name sap.m.ViewSettingsDialog.prototype.getSelectedFilterString
 * @function

 * @type string
 * @public
 */


/**
 * Returns the filter state of the dialog based on filter keys 8the following format: { key: boolean }. It can be used to create matching sorters and filters to apply the selected settings to the data.
 *
 * @name sap.m.ViewSettingsDialog.prototype.getSelectedFilterKeys
 * @function

 * @type object
 * @public
 */


/**
 * Sets the filter state of the dialog based on filter keys.
 *
 * @name sap.m.ViewSettingsDialog.prototype.setSelectedFilterKeys
 * @function
 * @param {object} 
 *         oFilters
 *         Configuration object to set the dialogs filter state with the following format: { key: boolean }. Setting boolean to true will set the filter to true, false or ommiting an entry will set the filter to false. It can be used to set the dialog state based on presets.

 * @type sap.m.ViewSettingsDialog
 * @public
 */


// Start of sap\m\ViewSettingsDialog.js
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/* =========================================================== */
/* begin: API methods */
/* =========================================================== */

sap.m.ViewSettingsDialog.prototype.init = function() {
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");
	this._sDialogWidth = "350px";
	this._sDialogHeight = "434px";
	this._bAppendedToUIArea = false; // this control does not have a
										// renderer, so we need to take care of
										// adding it to the ui tree manually
	this._showSubHeader = false;
	this._filterDetailList = undefined;
	this._iContentPage = -1;
	this._oContentItem = null;
	this._oPreviousState = {};
};

sap.m.ViewSettingsDialog.prototype.exit = function() {
	// helper variables
	this._rb = null;
	this._sDialogWidth = null;
	this._sDialogHeight = null;
	this._bAppendedToUIArea = null;
	this._showSubHeader = null;
	this._iContentPage = null;
	this._oContentItem = null;
	this._oPreviousState = null;
	this._sortContent = null;
	this._groupContent = null;
	this._filterContent = null;

	// controls that are internally managed and may or may not be assigned to an
	// aggregation (have to be destroyed manually to be sure)

	// dialog
	if (this._dialog) {
		this._dialog.destroy();
		this._dialog = null;
	}
	if (this._navContainer) {
		this._navContainer.destroy();
		this._navContainer = null;
	}
	if (this._titleLabel) {
		this._titleLabel.destroy();
		this._titleLabel = null;
	}

	// page1 (sort/group/filter)
	if (this._page1) {
		this._page1.destroy();
		this._page1 = null;
	}
	if (this._header) {
		this._header.destroy();
		this._header = null;
	}
	if (this._resetButton) {
		this._resetButton.destroy();
		this._resetButton = null;
	}
	if (this._subHeader) {
		this._subHeader.destroy();
		this._subHeader = null;
	}
	if (this._segmentedButton) {
		this._segmentedButton.destroy();
		this._segmentedButton = null;
	}
	if (this._sortButton) {
		this._sortButton.destroy();
		this._sortButton = null;
	}
	if (this._groupButton) {
		this._groupButton.destroy();
		this._groupButton = null;
	}
	if (this._filterButton) {
		this._filterButton.destroy();
		this._filterButton = null;
	}
	if (this._sortList) {
		this._sortList.destroy();
		this._sortList = null;
	}
	if (this._sortOrderList) {
		this._sortOrderList.destroy();
		this._sortOrderList = null;
	}

	if (this._groupList) {
		this._groupList.destroy();
		this._groupList = null;
	}
	if (this._groupOrderList) {
		this._groupOrderList.destroy();
		this._groupOrderList = null;
	}

	if (this._presetFilterList) {
		this._presetFilterList.destroy();
		this._presetFilterList = null;
	}
	if (this._filterList) {
		this._filterList.destroy();
		this._filterList = null;
	}

	// page2 (filter details)
	if (this._page2) {
		this._page2.destroy();
		this._page2 = null;
	}
	if (this._detailTitleLabel) {
		this._detailTitleLabel.destroy();
		this._detailTitleLabel = null;
	}
	if (this._filterDetailList) {
		this._filterDetailList.destroy();
		this._filterDetailList = null;
	}
};

/*
 * Invalidates the control (suppressed because we don't have a renderer)
 * @overwrite @public
 */
sap.m.ViewSettingsDialog.prototype.invalidate = function() {
	// CSN #80686/2014: only invalidate inner dialog if call does not come from inside
	if (this._dialog && (!arguments[0] || arguments[0] && arguments[0].getId() !== this.getId() + "-dialog")) {
		this._dialog.invalidate(arguments);
	} else {
		sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	}
};

/**
 * Set the title of the internal dialog
 * 
 * @overwrite
 * @public
 * @param {string}
 *            sTitle the title text for the dialog
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setTitle = function(sTitle) {
	this._getTitleLabel().setText(sTitle);
	this.setProperty("title", sTitle, true);
	return this;
};

/**
 * Adds a sort item and sets the association to reflect the selected state
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to be added to the aggregation
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.addSortItem = function(oItem) {
	if (oItem.getSelected()) {
		this.setSelectedSortItem(oItem);
	}
	this.addAggregation("sortItems", oItem);
	return this;
};

/**
 * Adds a group item and sets the association to reflect the selected state
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to be added to the aggregation
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.addGroupItem = function(oItem) {
	if (oItem.getSelected()) {
		this.setSelectedGroupItem(oItem);
	}
	this.addAggregation("groupItems", oItem);
	return this;
};

/**
 * Adds a preset filter item and sets the association to reflect the selected
 * state
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.addPresetFilterItem = function(oItem) {
	if (oItem.getSelected()) {
		this.setSelectedPresetFilterItem(oItem);
	}
	this.addAggregation("presetFilterItems", oItem);
	return this;
};

/**
 * Set the selected sort item (either by key or by item)
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setSelectedSortItem = function(oItem) {
	var aItems = this.getSortItems(), i = 0;

	// convenience, also allow strings
	if (typeof oItem === "string") {
		// find item with this id
		for (; i < aItems.length; i++) {
			if (aItems[i].getKey() === oItem) {
				oItem = aItems[i];
				break;
			}
		}
	}

	// set selected = true for this item & selected = false for all others items
	for (i = 0; i < aItems.length; i++) {
		aItems[i].setSelected(false);
	}
	if (oItem) {
		oItem.setSelected(true);
	}

	// update the list selection
	if (this._getDialog().isOpen()) {
		this._updateListSelection(this._sortList, oItem);
	}
	this.setAssociation("selectedSortItem", oItem, true);
	return this;
};

/**
 * Set the selected group item (either by key or by item)
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setSelectedGroupItem = function(oItem) {
	var aItems = this.getGroupItems(), i = 0;

	// convenience, also allow strings
	if (typeof oItem === "string") {
		// find item with this id
		for (; i < aItems.length; i++) {
			if (aItems[i].getKey() === oItem) {
				oItem = aItems[i];
				break;
			}
		}
	}

	// set selected = true for this item & selected = false for all others items
	for (i = 0; i < aItems.length; i++) {
		aItems[i].setSelected(false);
	}
	if (oItem) {
		oItem.setSelected(true);
	}

	// update the list selection
	if (this._getDialog().isOpen()) {
		this._updateListSelection(this._groupList, oItem);
	}
	this.setAssociation("selectedGroupItem", oItem, true);
	return this;
};

/**
 * Set the selected preset filter item
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem}
 *            oItem the selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setSelectedPresetFilterItem = function(oItem) {
	var aItems = this.getPresetFilterItems(), i = 0;

	// convenience, also allow strings
	if (typeof oItem === "string") {
		// find item with this id
		for (; i < aItems.length; i++) {
			if (aItems[i].getKey() === oItem) {
				oItem = aItems[i];
				break;
			}
		}
	}
	// set selected = true for this item & selected = false for all others items
	for (i = 0; i < aItems.length; i++) {
		aItems[i].setSelected(false);
	}
	if (oItem) {
		oItem.setSelected(true);
		// clear filters (only one mode is allowed, preset filters or filters)
		this._clearSelectedFilters();
	}
	this.setAssociation("selectedPresetFilterItem", oItem, true);
	return this;
};

/**
 * Opens the view settings dialog relative to the parent control
 * 
 * @public
 * @param {sap.ui.core.Control}
 *            oParentControl the parent control
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.open = function(oParentControl) {
	// add to static UI area manually because we don't have a renderer
	if (!this.getParent() && !this._bAppendedToUIArea) {
		var oStatic = sap.ui.getCore().getStaticAreaRef();
		oStatic = sap.ui.getCore().getUIArea(oStatic);
		oStatic.addContent(this, true);
		this._bAppendedToUIArea = true;
	}

	// init the dialog content based on the aggregations
	this._initDialogContent();

	// store the current dialog state to be able to reset it on cancel
	this._oPreviousState = {
		sortItem : sap.ui.getCore().byId(this.getSelectedSortItem()),
		sortDescending : this.getSortDescending(),
		groupItem : sap.ui.getCore().byId(this.getSelectedGroupItem()),
		groupDescending : this.getGroupDescending(),
		presetFilterItem : sap.ui.getCore().byId(
				this.getSelectedPresetFilterItem()),
		filterKeys : this.getSelectedFilterKeys(),
		navPage : this._getNavContainer().getCurrentPage(),
		contentPage : this._iContentPage,
		contentItem : this._oContentItem
	};

	// open dialog
	this._getDialog().open();
	return this;
};

/**
 * Returns the selected filters in an array of ViewSettingsItem.
 * 
 * @overwrite
 * @public
 * @return {sap.m.ViewSettingsItem[]} an array of selected filter items
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterItems = function() {
	var aSelectedFilterItems = [], aFilterItems = this.getFilterItems(), aSubFilterItems, bMultiSelect = true, i = 0, j;

	for (; i < aFilterItems.length; i++) {
		if (aFilterItems[i] instanceof sap.m.ViewSettingsCustomItem) {
			if (aFilterItems[i].getSelected()) {
				aSelectedFilterItems.push(aFilterItems[i]);
			}
		} else if (aFilterItems[i] instanceof sap.m.ViewSettingsFilterItem) {
			aSubFilterItems = aFilterItems[i].getItems();
			bMultiSelect = aFilterItems[i].getMultiSelect();
			for (j = 0; j < aSubFilterItems.length; j++) {
				if (aSubFilterItems[j].getSelected()) {
					aSelectedFilterItems.push(aSubFilterItems[j]);
					if (!bMultiSelect) {
						break; // only first item is added to the selection on
								// single select items
					}
				}
			}
		}
	}

	return aSelectedFilterItems;
};

/**
 * Get the filter string in the format "filter name (subfilter1 name, subfilter2
 * name, ...), ..." For custom filters and preset filters it will only add the
 * filter name to the resulting string
 * 
 * @public
 * @return {string} the selected filter string
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterString = function() {
	var sFilterString = "", sSubfilterString, oPresetFilterItem = this
			.getSelectedPresetFilterItem(), aFilterItems = this
			.getFilterItems(), aSubFilterItems, bMultiSelect = true, i = 0, j;

	if (oPresetFilterItem) {
		// preset filter: add "filter name"
		sFilterString = this._rb.getText("VIEWSETTINGS_FILTERTEXT").concat(
				" " + sap.ui.getCore().byId(oPresetFilterItem).getText());
	} else { // standard & custom filters
		for (; i < aFilterItems.length; i++) {
			if (aFilterItems[i] instanceof sap.m.ViewSettingsCustomItem) {
				// custom filter: add "filter name,"
				if (aFilterItems[i].getSelected()) {
					sFilterString += aFilterItems[i].getText() + ", ";
				}
			} else if (aFilterItems[i] instanceof sap.m.ViewSettingsFilterItem) {
				// standard filter: add "filter name (sub filter 1 name, sub
				// filter 2 name, ...), "
				aSubFilterItems = aFilterItems[i].getItems();
				bMultiSelect = aFilterItems[i].getMultiSelect();
				sSubfilterString = "";
				for (j = 0; j < aSubFilterItems.length; j++) {
					if (aSubFilterItems[j].getSelected()) {
						sSubfilterString += aSubFilterItems[j].getText() + ", ";
						if (!bMultiSelect) {
							break; // only first item is added to the selection
									// on single select items
						}
					}
				}
				// remove last comma
				sSubfilterString = sSubfilterString.substring(0,
						sSubfilterString.length - 2);

				// add surrounding brackets and comma
				if (sSubfilterString) {
					sSubfilterString = " (" + sSubfilterString + ")";
					sFilterString += aFilterItems[i].getText()
							+ sSubfilterString + ", ";
				}
			}
		}

		// remove last comma
		sFilterString = sFilterString.substring(0, sFilterString.length - 2);

		// add "Filtered by: " text
		if (sFilterString) {
			sFilterString = this._rb.getText("VIEWSETTINGS_FILTERTEXT").concat(
					" " + sFilterString);
		}
	}
	return sFilterString;
};

/**
 * Get the selected filter object in format {key: boolean}
 * 
 * @public
 * @return {object} an object with item and subitem keys
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterKeys = function() {
	var oSelectedFilterKeys = {}, aSelectedFilterItems = this
			.getSelectedFilterItems(), i = 0;

	for (; i < aSelectedFilterItems.length; i++) {
		oSelectedFilterKeys[aSelectedFilterItems[i].getKey()] = aSelectedFilterItems[i]
				.getSelected();
	}

	return oSelectedFilterKeys;
};

/**
 * Set the selected filter object in format {key: boolean}
 * 
 * @public
 * @param {object}
 *            oAny an object with filter item and sub keys
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 */
sap.m.ViewSettingsDialog.prototype.setSelectedFilterKeys = function(
		oSelectedFilterKeys) {
	var sKey = "", aFilterItems = this.getFilterItems(), aSubFilterItems = {}, oFilterItem, bMultiSelect, i, j, k;

	// clear preset filters (only one mode is allowed, preset filters or
	// filters)
	if (Object.keys(oSelectedFilterKeys).length) {
		this._clearPresetFilter();
	}

	// loop through the provided object array {key -> subKey -> boolean}
	for (sKey in oSelectedFilterKeys) { // filter key
		oFilterItem = null;
		if (oSelectedFilterKeys.hasOwnProperty(sKey)) {
			for (i = 0; i < aFilterItems.length; i++) {
				if (aFilterItems[i] instanceof sap.m.ViewSettingsCustomItem) {
					// just compare the key of this control
					if (aFilterItems[i].getKey() === sKey) {
						oFilterItem = aFilterItems[i];
						aFilterItems[i].setSelected(oSelectedFilterKeys[sKey]);
					}
				} else if (aFilterItems[i] instanceof sap.m.ViewSettingsFilterItem) {
					// find the sub filter item with the specified key
					aSubFilterItems = aFilterItems[i].getItems();
					bMultiSelect = aFilterItems[i].getMultiSelect();
					for (j = 0; j < aSubFilterItems.length; j++) {
						if (aSubFilterItems[j].getKey() === sKey) {
							oFilterItem = aSubFilterItems[j];
							// set all other entries to false for single select
							// entries
							if (!bMultiSelect) {
								for (k = 0; k < aSubFilterItems.length; k++) {
									aSubFilterItems[k].setSelected(false);
								}
							}
							break;
						}
					}
				}
				if (oFilterItem) {
					break;
				}
			}

			// skip if we don't have an item with this key
			if (oFilterItem === null) {
				jQuery.sap.log.warning('Cannot set state for key "' + sKey
						+ '" because there is no filter with these keys');
				continue;
			}

			// set the the selected state on the item
			oFilterItem.setSelected(oSelectedFilterKeys[sKey]);
		}
	}

	return this;
};

/* =========================================================== */
/* end: API methods */
/* =========================================================== */

/* =========================================================== */
/* begin: internal methods and properties */
/* =========================================================== */

/*
 * Lazy initialization of the internal dialog @private
 */
sap.m.ViewSettingsDialog.prototype._getDialog = function() {
	var that = this;

	// create an internal instance of a dialog
	if (this._dialog === undefined) {
		this._dialog = new sap.m.Dialog(this.getId() + "-dialog", {
			showHeader : false,
			stretch : sap.ui.Device.system.phone,
			verticalScrolling : true,
			horizontalScrolling : false,
			contentWidth : this._sDialogWidth,
			contentHeight : this._sDialogHeight,
			content : this._getNavContainer(),
			beginButton : new sap.m.Button({
				text : this._rb.getText("VIEWSETTINGS_ACCEPT")
			}).attachPress(this._onConfirm, this),
			endButton : new sap.m.Button({
				text : this._rb.getText("VIEWSETTINGS_CANCEL")
			}).attachPress(this._onCancel, this)
		}).addStyleClass("sapMVSD");

		// CSN# 3696452/2013: ESC key should also cancel dialog, not only close
		// it
		var fnDialogEscape = this._dialog.onsapescape;
		this._dialog.onsapescape = function(oEvent) {
			// call original escape function of the dialog
			if (fnDialogEscape) {
				fnDialogEscape.call(that._dialog, oEvent);
			}
			// execute cancel action
			that._onCancel();
		};
	}

	return this._dialog;
};

/*
 * Lazy initialization of the internal nav container @private
 */
sap.m.ViewSettingsDialog.prototype._getNavContainer = function() {
	// create an internal instance of a dialog
	if (this._navContainer === undefined) {
		this._navContainer = new sap.m.NavContainer(this.getId()
				+ '-navcontainer', {
			pages : []
		});
	}
	return this._navContainer;
};

/*
 * Lazy initialization of the internal title label @private
 */
sap.m.ViewSettingsDialog.prototype._getTitleLabel = function() {
	if (this._titleLabel === undefined) {
		this._titleLabel = new sap.m.Label(this.getId() + "-title", {
			text : this._rb.getText("VIEWSETTINGS_TITLE")
		}).addStyleClass("sapMVSDTitle");
	}
	return this._titleLabel;
};

/*
 * Lazy initialization of the internal reset button @private
 */
sap.m.ViewSettingsDialog.prototype._getResetButton = function() {
	var that = this;

	if (this._resetButton === undefined) {
		this._resetButton = new sap.m.Button(this.getId() + "-resetbutton", {
			icon : sap.ui.core.IconPool.getIconURI("refresh"),
			press : function() {
				that._onClearFilters();
			},
			tooltip : this._rb.getText("VIEWSETTINGS_CLEAR_FILTER_TOOLTIP")
		});
	}
	return this._resetButton;
};

/*
 * Lazy initialization of the internal detail title lable @private
 */
sap.m.ViewSettingsDialog.prototype._getDetailTitleLabel = function() {
	if (this._detailTitleLabel === undefined) {
		this._detailTitleLabel = new sap.m.Label(this.getId() + "-detailtitle",
				{
					text : this._rb.getText("VIEWSETTINGS_TITLE_FILTERBY")
				}).addStyleClass("sapMVSDTitle");
	}
	return this._detailTitleLabel;
};

/*
 * Lazy initialization of the internal header @private
 */
sap.m.ViewSettingsDialog.prototype._getHeader = function() {
	if (this._header === undefined) {
		this._header = new sap.m.Bar({
			contentMiddle : [ this._getTitleLabel() ],
		}).addStyleClass("sapMVSDBar");
	}
	return this._header;
};

/*
 * Lazy initialization of the internal sub header @private
 */
sap.m.ViewSettingsDialog.prototype._getSubHeader = function() {
	if (this._subHeader === undefined) {
		this._subHeader = new sap.m.Bar({
			contentLeft : [ this._getSegmentedButton() ]
		}).addStyleClass("sapMVSDBar");
	}
	return this._subHeader;
};

/*
 * Lazy initialization of the internal segmented button @private
 */
sap.m.ViewSettingsDialog.prototype._getSegmentedButton = function() {
	var that = this;

	if (this._segmentedButton === undefined) {
		this._segmentedButton = new sap.m.SegmentedButton({
			select : function(oEvent) {
				var selectedId = oEvent.getParameter('id');
				if (selectedId === that.getId() + "-sortbutton") {
					that._switchToPage(0);
				} else if (selectedId === that.getId() + "-groupbutton") {
					that._switchToPage(1);
				} else if (selectedId === that.getId() + "-filterbutton") {
					that._switchToPage(2);
				}
				jQuery.sap.log.info('press event segmented: '
						+ oEvent.getParameter('id'));
			}
		}).addStyleClass("sapMVSDSeg");

		// workaround to fix flickering caused by css measurement in
		// SegmentedButton
		this._segmentedButton._fCalcBtnWidth = function() {
			// do nothing here
		};
	}
	return this._segmentedButton;
};

/*
 * Lazy initialization of the internal sort button @private
 */
sap.m.ViewSettingsDialog.prototype._getSortButton = function() {
	if (this._sortButton === undefined) {
		this._sortButton = new sap.m.Button(this.getId() + "-sortbutton", {
			visible : false, // controlled by update state method
			icon : sap.ui.core.IconPool.getIconURI("sort"),
			tooltip : this._rb.getText("VIEWSETTINGS_TITLE_SORT")
		});
	}
	return this._sortButton;
};

/*
 * Lazy initialization of the internal group button @private
 */
sap.m.ViewSettingsDialog.prototype._getGroupButton = function() {
	if (this._groupButton === undefined) {
		this._groupButton = new sap.m.Button(this.getId() + "-groupbutton", {
			visible : false, // controlled by update state method
			icon : sap.ui.core.IconPool.getIconURI("group-2"),
			tooltip : this._rb.getText("VIEWSETTINGS_TITLE_GROUP")
		});
	}
	return this._groupButton;
};

/*
 * Lazy initialization of the internal filter button @private
 */
sap.m.ViewSettingsDialog.prototype._getFilterButton = function() {
	if (this._filterButton === undefined) {
		this._filterButton = new sap.m.Button(this.getId() + "-filterbutton", {
			visible : false, // controlled by update state method
			icon : sap.ui.core.IconPool.getIconURI("filter"),
			tooltip : this._rb.getText("VIEWSETTINGS_TITLE_FILTER")
		});
	}
	return this._filterButton;
};

/*
 * Lazy initialization of the internal page1 (sort/group/filter) @private
 */
sap.m.ViewSettingsDialog.prototype._getPage1 = function() {
	if (this._page1 === undefined) {
		this._page1 = new sap.m.Page(this.getId() + '-page1', {
			title : this._rb.getText("VIEWSETTINGS_TITLE"),
			customHeader : this._getHeader()
		});
		this._getNavContainer().addPage(this._page1); // sort, group, filter
	}
	return this._page1;
};

/*
 * Lazy initialization of the internal page2 (detail filters) @private
 */
sap.m.ViewSettingsDialog.prototype._getPage2 = function() {
	var that = this, oDetailHeader, oBackButton, oDetailResetButton;

	if (this._page2 === undefined) {
		// init internal page content
		oBackButton = new sap.m.Button(this.getId() + "-backbutton", {
			icon : sap.ui.core.IconPool.getIconURI("nav-back"),
			press : function() {
				that._updateFilterCounters();
				jQuery.sap.delayedCall(0, that._navContainer, "back");
				that._switchToPage(2);
				that._segmentedButton.setSelectedButton(that._filterButton);
			}
		});
		oDetailResetButton = new sap.m.Button(this.getId()
				+ "-detailresetbutton", {
			icon : sap.ui.core.IconPool.getIconURI("refresh"),
			press : function() {
				that._onClearFilters();
			},
			tooltip : this._rb.getText("VIEWSETTINGS_CLEAR_FILTER_TOOLTIP")
		});
		oDetailHeader = new sap.m.Bar({
			contentLeft : [ oBackButton ],
			contentMiddle : [ this._getDetailTitleLabel() ],
			contentRight : [ oDetailResetButton ]
		}).addStyleClass("sapMVSDBar");

		this._page2 = new sap.m.Page(this.getId() + '-page2', {
			title : this._rb.getText("VIEWSETTINGS_TITLE_FILTERBY"),
			customHeader : oDetailHeader
		});
		this._getNavContainer().addPage(this._page2); // filter details
	}
	return this._page2;
};

/*
 * Create and initialize the sort content controls @private
 */
sap.m.ViewSettingsDialog.prototype._initSortContent = function() {
	var that = this;

	if (this._sortContent) {
		return;
	}
	this._sortOrderList = new sap.m.List(this.getId() + "-sortorderlist", {
		mode : sap.m.ListMode.SingleSelectLeft,
		includeItemInSelection : true,
		selectionChange : function(oEvent) {
			that
					.setSortDescending(oEvent.getParameter("listItem").data(
							"item"));
		}
	}).addStyleClass("sapMVSDUpperList");
	this._sortOrderList.addItem(new sap.m.StandardListItem({
		title : this._rb.getText("VIEWSETTINGS_ASCENDING_ITEM")
	}).data("item", false).setSelected(true));
	this._sortOrderList.addItem(new sap.m.StandardListItem({
		title : this._rb.getText("VIEWSETTINGS_DESCENDING_ITEM")
	}).data("item", true));

	this._sortList = new sap.m.List(this.getId() + "-sortlist",
			{
				mode : sap.m.ListMode.SingleSelectLeft,
				includeItemInSelection : true,
				selectionChange : function(oEvent) {
					var item = oEvent.getParameter("listItem").data("item");
					if (item) {
						item.setSelected(oEvent.getParameter("listItem")
								.getSelected());
					}
					that.setAssociation("selectedSortItem", item, true);
				}
			});

	this._sortContent = [ this._sortOrderList, this._sortList ];
};

/*
 * Create and initialize the group content controls @private
 */
sap.m.ViewSettingsDialog.prototype._initGroupContent = function() {
	var that = this;

	if (this._groupContent) {
		return;
	}
	this._groupOrderList = new sap.m.List(this.getId() + "-grouporderlist", {
		mode : sap.m.ListMode.SingleSelectLeft,
		includeItemInSelection : true,
		selectionChange : function(oEvent) {
			that.setGroupDescending(oEvent.getParameter("listItem")
					.data("item"));
		}
	}).addStyleClass("sapMVSDUpperList");
	this._groupOrderList.addItem(new sap.m.StandardListItem({
		title : this._rb.getText("VIEWSETTINGS_ASCENDING_ITEM")
	}).data("item", false).setSelected(true));
	this._groupOrderList.addItem(new sap.m.StandardListItem({
		title : this._rb.getText("VIEWSETTINGS_DESCENDING_ITEM")
	}).data("item", true));

	this._groupList = new sap.m.List(this.getId() + "-grouplist",
			{
				mode : sap.m.ListMode.SingleSelectLeft,
				includeItemInSelection : true,
				selectionChange : function(oEvent) {
					var item = oEvent.getParameter("listItem").data("item");
					if (item) {
						item.setSelected(oEvent.getParameter("listItem")
								.getSelected());
					}
					that.setAssociation("selectedGroupItem", item, true);
				}
			});

	this._groupContent = [ this._groupOrderList, this._groupList ];
};

/*
 * Create and initialize the filter content controls @private
 */
sap.m.ViewSettingsDialog.prototype._initFilterContent = function() {
	var that = this;

	if (this._filterContent) {
		return;
	}
	this._presetFilterList = new sap.m.List(
			this.getId() + "-predefinedfilterlist",
			{
				mode : sap.m.ListMode.SingleSelectLeft,
				includeItemInSelection : true,
				selectionChange : function(oEvent) {
					var item = oEvent.getParameter("listItem").data("item");
					if (item) {
						item.setSelected(oEvent.getParameter("listItem")
								.getSelected());
					}
					that.setAssociation("selectedPresetFilterItem", item, true);
					that._clearSelectedFilters();
				}
			}).addStyleClass("sapMVSDUpperList");

	this._filterList = new sap.m.List(this.getId() + "-filterlist", {});

	this._filterContent = [ this._presetFilterList, this._filterList ];
};

/*
 * Fill the dialog with the aggregation data @private
 */
sap.m.ViewSettingsDialog.prototype._initDialogContent = function() {
	var bSort = !!this.getSortItems().length, bGroup = !!this.getGroupItems().length, bPredefinedFilter = !!this
			.getPresetFilterItems().length, bFilter = !!this.getFilterItems().length, that = this, oListItem, aSortItems = [], aGroupItems = [], aPresetFilterItems = [], aFilterItems = [];

	// sort
	if (bSort) {
		this._initSortContent();
		this._sortList.removeAllItems();
		aSortItems = this.getSortItems();
		if (aSortItems.length) {
			aSortItems.forEach(function(oItem) {
				oListItem = new sap.m.StandardListItem({
					title : oItem.getText(),
					type : sap.m.ListType.Active,
					selected : oItem.getSelected()
				}).data("item", oItem);
				this._sortList.addItem(oListItem);
			}, this);
		}
	}

	// group
	if (bGroup) {
		this._initGroupContent();
		this._groupList.removeAllItems();
		aGroupItems = this.getGroupItems();
		if (aGroupItems.length) {
			aGroupItems.forEach(function(oItem) {
				oListItem = new sap.m.StandardListItem({
					title : oItem.getText(),
					type : sap.m.ListType.Active,
					selected : oItem.getSelected()
				}).data("item", oItem);
				this._groupList.addItem(oListItem);
			}, this);
		}
		// add none item to group list
		if (aGroupItems.length) {
			oListItem = new sap.m.StandardListItem({
				title : this._rb.getText("VIEWSETTINGS_NONE_ITEM"),
				type : sap.m.ListType.Active,
				selected : !!this.getSelectedGroupItem()
			});
			this._groupList.addItem(oListItem);
		}
	}

	// predefined filters
	if (bPredefinedFilter || bFilter) {
		this._initFilterContent();
		this._presetFilterList.removeAllItems();
		aPresetFilterItems = this.getPresetFilterItems();
		if (aPresetFilterItems.length) {
			aPresetFilterItems.forEach(function(oItem) {
				oListItem = new sap.m.StandardListItem({
					title : oItem.getText(),
					type : sap.m.ListType.Active,
					selected : oItem.getSelected()
				}).data("item", oItem);
				this._presetFilterList.addItem(oListItem);
			}, this);
		}
		// add none item to preset filter list
		if (aPresetFilterItems.length) {
			oListItem = new sap.m.StandardListItem({
				title : this._rb.getText("VIEWSETTINGS_NONE_ITEM"),
				selected : !!this.getSelectedPresetFilterItem()
			});
			this._presetFilterList.addItem(oListItem);
		}

		// filters
		this._filterList.removeAllItems();
		aFilterItems = this.getFilterItems();
		if (aFilterItems.length) {
			aFilterItems.forEach(function(oItem) {
				oListItem = new sap.m.StandardListItem(
						{
							title : oItem.getText(),
							type : sap.m.ListType.Active,
							press : function(oItem) {
								return function(oEvent) {
									// navigate to details page
									if (that._navContainer.getCurrentPage()
											.getId() !== that.getId()
											+ '-page2') {
										that._switchToPage(3, oItem);
										jQuery.sap.delayedCall(0,
												that._navContainer, "to",
												[ that.getId() + '-page2',
														"slide" ]);
									}
								};
							}(oItem)
						}).data("item", oItem);
				this._filterList.addItem(oListItem);
			}, this);
		}
	}

	// hide elements that are not visible and set the active content
	this._updateDialogState();

	// select the items that are reflected in the control's properties
	this._updateListSelections();
};

/*
 * Sets the state of the dialog when it is opened If only Sort or Group or
 * Filter items are defined, then only one tab is displayed If multiple items
 * are defined, a segmented button is displayed and the first page is set
 * @private
 */
sap.m.ViewSettingsDialog.prototype._updateDialogState = function() {
	var bSort = !!this.getSortItems().length, bGroup = !!this.getGroupItems().length, bPredefinedFilter = !!this
			.getPresetFilterItems().length, bFilter = !!this.getFilterItems().length, bNothing = !bSort
			&& !bGroup && !bPredefinedFilter && !bFilter, bInvalidState = false, iActivePages = 0, oSegmentedButton = this
			._getSegmentedButton();

	// reset state
	oSegmentedButton.removeAllButtons();
	if (this._filterContent) {
		this._presetFilterList.setVisible(true);
		this._filterList.setVisible(true);
	}

	// set invalid state if the previous tab is not valid anymore or has never
	// been selected
	if (this._iContentPage === -1 || this._iContentPage === 0 && !bSort
			|| this._iContentPage === 1 && !bGroup || this._iContentPage === 2
			&& !(bPredefinedFilter || bFilter)) {
		bInvalidState = true;
	}

	// count active dialog pages and update segmentedButton
	if (bSort) {
		oSegmentedButton.addButton(this._getSortButton());
		if (this._iContentPage === 0) {
			oSegmentedButton.setSelectedButton(this._getSortButton());
		}
		iActivePages++;
	}
	if (bPredefinedFilter || bFilter) {
		oSegmentedButton.addButton(this._getFilterButton());
		if (this._iContentPage === 2) {
			oSegmentedButton.setSelectedButton(this._getFilterButton());
		}
		if (!bPredefinedFilter) {
			this._presetFilterList.setVisible(false);
			this._presetFilterList.addStyleClass("sapMVSDUpperList");
		}
		if (!bFilter) {
			this._filterList.setVisible(false);
			this._presetFilterList.removeStyleClass("sapMVSDUpperList");
		}
		iActivePages++;
	}
	if (bGroup) {
		oSegmentedButton.addButton(this._getGroupButton());
		if (this._iContentPage === 1) {
			oSegmentedButton.setSelectedButton(this._getGroupButton());
		}
		iActivePages++;
	}

	// show header only when there are multiple tabs active
	this._showSubHeader = (iActivePages > 1 ? true : false);

	if (bInvalidState) {
		if (bSort || bNothing) { // default = sort
			this._switchToPage(0);
		} else if (bPredefinedFilter || bFilter) { // filter
			this._switchToPage(2);
		} else if (bGroup) { // group
			this._switchToPage(1);
		}
	}

	// CSN# 3802530/2013: if filters were modified by API we need to refresh the
	// filter detail page
	if (this._iContentPage === 3) {
		this._iContentPage = -1;
		this._switchToPage(3, this._oContentItem);
	}
};

/*
 * Switches to a dialog page (0 = sort, 1 = group, 2 = filter, 3 = subfilter)
 * @param {int} iWhich the page to be navigated to @param {sap.m.FilterItem}
 * oItem The filter item for the detail page (optional, only used for page 3)
 * @private
 */
sap.m.ViewSettingsDialog.prototype._switchToPage = function(iWhich, oItem) {
	var i = 0, that = this, aSubFilters = [], oTitleLabel = this
			._getTitleLabel(), oResetButton = this._getResetButton(), oHeader = this
			._getHeader(), oSubHeader = this._getSubHeader(), oListItem;

	// nothing to do if we are already on the requested page (except for filter
	// detail page)
	if (this._iContentPage === iWhich && iWhich !== 3) {
		return false;
	}

	// reset controls
	oHeader.removeAllContentRight();
	oSubHeader.removeAllContentRight();
	this._iContentPage = iWhich;
	this._oContentItem = oItem;

	// purge the current content & reset pages
	if (iWhich >= 0 && iWhich < 3) {
		this._getPage1().removeAllAggregation("content", true);
		// set subheader when there are multiple tabs active
		if (this._showSubHeader) {
			if (!this._getPage1().getSubHeader()) {
				this._getPage1().setSubHeader(oSubHeader);
			}
			// show reset button in subheader
			oSubHeader.addContentRight(oResetButton);
		} else {
			if (this._getPage1().getSubHeader()) {
				this._getPage1().setSubHeader();
			}
			// show reset button in header
			oHeader.addContentRight(oResetButton);
		}
	} else if (iWhich === 3) {
		this._getPage2().removeAllAggregation("content", true);
	}

	if (this.getTitle()) { // custom title
		oTitleLabel.setText(this.getTitle());
	} else { // default title
		oTitleLabel.setText(this._rb.getText("VIEWSETTINGS_TITLE"));
	}

	switch (iWhich) {
	case 1: // grouping
		oResetButton.setVisible(false);
		if (!this._showSubHeader && !this.getTitle()) {
			oTitleLabel.setText(this._rb.getText("VIEWSETTINGS_TITLE_GROUP"));
		}
		for (; i < this._groupContent.length; i++) {
			this._getPage1().addContent(this._groupContent[i]);
		}
		break;
	case 2: // filtering
		// only show reset button when there are detail filters available
		oResetButton.setVisible(!!this.getFilterItems().length);
		if (!this._showSubHeader && !this.getTitle()) {
			oTitleLabel.setText(this._rb.getText("VIEWSETTINGS_TITLE_FILTER"));
		}
		// update status (something could have been changed on a detail filter
		// page or by API
		this._updateListSelection(this._presetFilterList, sap.ui.getCore()
				.byId(this.getSelectedPresetFilterItem()));
		this._updateFilterCounters();
		for (; i < this._filterContent.length; i++) {
			this._getPage1().addContent(this._filterContent[i]);
		}
		break;
	case 3: // filtering details
		// display filter title
		this._getDetailTitleLabel().setText(
				this._rb.getText("VIEWSETTINGS_TITLE_FILTERBY") + " "
						+ oItem.getText());
		// fill detail page
		if (oItem instanceof sap.m.ViewSettingsCustomItem
				&& oItem.getCustomControl()) {
			this._clearPresetFilter();
			this._getPage2().addContent(oItem.getCustomControl());
		} else if (oItem instanceof sap.m.ViewSettingsFilterItem
				&& oItem.getItems()) {
			aSubFilters = oItem.getItems();
			if (this._filterDetailList) { // destroy previous list
				this._filterDetailList.destroy();
			}
			this._filterDetailList = new sap.m.List(
					{
						mode : (oItem.getMultiSelect() ? sap.m.ListMode.MultiSelect
								: sap.m.ListMode.SingleSelectLeft),
						includeItemInSelection : true,
						selectionChange : function(oEvent) {
							var oSubItem = oEvent.getParameter("listItem")
									.data("item"), aSubItems, i = 0;
							that._clearPresetFilter();
							// clear selection of all subitems if this is a
							// single select item
							if (!oItem.getMultiSelect()) {
								aSubItems = oItem.getItems();
								for (; i < aSubItems.length; i++) {
									aSubItems[i].setSelected(false);
								}
							}
							oSubItem.setSelected(oEvent
									.getParameter("listItem").getSelected());
						}
					});
			for (i = 0; i < aSubFilters.length; i++) {
				// use name if there is no key defined
				oListItem = new sap.m.StandardListItem({
					title : aSubFilters[i].getText(),
					type : sap.m.ListType.Active,
					selected : aSubFilters[i].getSelected()
				}).data("item", aSubFilters[i]);
				this._filterDetailList.addItem(oListItem);
			}
			this._getPage2().addContent(this._filterDetailList);
		}
		break;
	case 0: // sorting
	default:
		oResetButton.setVisible(false);
		if (!this._getPage1().getSubHeader() && !this.getTitle()) {
			oTitleLabel.setText(this._rb.getText("VIEWSETTINGS_TITLE_SORT"));
		}
		if (this._sortContent) {
			for (; i < this._sortContent.length; i++) {
				this._getPage1().addContent(this._sortContent[i]);
			}
		}
		break;
	}
};

/*
 * Updates the internal lists based on the dialogs state @private
 */
sap.m.ViewSettingsDialog.prototype._updateListSelections = function() {
	this._updateListSelection(this._sortList, sap.ui.getCore().byId(
			this.getSelectedSortItem()));
	this._updateListSelection(this._sortOrderList, this.getSortDescending());
	this._updateListSelection(this._groupList, sap.ui.getCore().byId(
			this.getSelectedGroupItem()));
	this._updateListSelection(this._groupOrderList, this.getGroupDescending());
	this._updateListSelection(this._presetFilterList, sap.ui.getCore().byId(
			this.getSelectedPresetFilterItem()));
	this._updateFilterCounters();
};

/*
 * Sets selected item on single selection lists based on the "item" data
 * @private
 */
sap.m.ViewSettingsDialog.prototype._updateListSelection = function(oList, oItem) {
	var items, i = 0;

	if (!oList) {
		return false;
	}

	items = oList.getItems();

	oList.removeSelections();
	for (; i < items.length; i++) {
		if (items[i].data("item") === oItem || items[i].data("item") === null) { // null
																					// is
																					// "None"
																					// item
			oList.setSelectedItem(items[i], (oItem && oItem.getSelected ? oItem
					.getSelected() : true)); // true or the selected state if
												// it is a ViewSettingsItem
			return true;
		}
	}
	return false;
};

/*
 * Updates the amount of selected filters in the filter list @private
 */
sap.m.ViewSettingsDialog.prototype._updateFilterCounters = function() {
	var aListItems = (this._filterList ? this._filterList.getItems() : []), oItem, aSubItems, iFilterCount = 0, i = 0, j;

	for (; i < aListItems.length; i++) {
		oItem = aListItems[i].data("item");
		iFilterCount = 0;
		if (oItem) {
			if (oItem instanceof sap.m.ViewSettingsCustomItem) {
				// for custom filter oItems the oItem is directly selected
				iFilterCount = oItem.getFilterCount();
			} else if (oItem instanceof sap.m.ViewSettingsFilterItem) {
				// for filter oItems the oItem counter has to be calculated from
				// the sub oItems
				iFilterCount = 0;
				aSubItems = oItem.getItems();

				for (j = 0; j < aSubItems.length; j++) {
					if (aSubItems[j].getSelected()) {
						iFilterCount++;
					}
				}
			}
		}
		aListItems[i].setCounter(iFilterCount);
	}
};

sap.m.ViewSettingsDialog.prototype._clearSelectedFilters = function() {
	var items = this.getFilterItems(), subItems, i = 0, j;

	// reset all items to selected = false
	for (; i < items.length; i++) {
		if (items[i] instanceof sap.m.ViewSettingsFilterItem) {
			subItems = items[i].getItems();
			for (j = 0; j < subItems.length; j++) {
				subItems[j].setSelected(false);
			}
		}
		items[i].setSelected(false);
	}

	// update counters if visible
	if (this._iContentPage === 2 && this._getDialog().isOpen()) {
		this._updateFilterCounters();
	}
};

/*
 * Clears preset filter item @private
 */
sap.m.ViewSettingsDialog.prototype._clearPresetFilter = function() {
	if (this.getSelectedPresetFilterItem()) {
		this.setSelectedPresetFilterItem(null);
	}
};

/* =========================================================== */
/* end: internal methods */
/* =========================================================== */

/* =========================================================== */
/* begin: event handlers */
/* =========================================================== */

/*
 * Internal event handler for the confirm button @private
 */
sap.m.ViewSettingsDialog.prototype._onConfirm = function(oEvent) {
	var that = this, oDialog = this._getDialog(), fnAfterClose = function() {
		// detach this function
		that._dialog.detachAfterClose(fnAfterClose);

		// fire confirm event
		that.fireConfirm({
			sortItem : sap.ui.getCore().byId(that.getSelectedSortItem()),
			sortDescending : that.getSortDescending(),
			groupItem : sap.ui.getCore().byId(that.getSelectedGroupItem()),
			groupDescending : that.getGroupDescending(),
			presetFilterItem : sap.ui.getCore().byId(
					that.getSelectedPresetFilterItem()),
			filterItems : that.getSelectedFilterItems(),
			filterKeys : that.getSelectedFilterKeys(),
			filterString : that.getSelectedFilterString()
		});
	};

	// attach the reset function to afterClose to hide the dialog changes from
	// the end user
	oDialog.attachAfterClose(fnAfterClose);
	oDialog.close();
};

/*
 * Internal event handler for the cancel button @private
 */
sap.m.ViewSettingsDialog.prototype._onCancel = function(oEvent) {
	var that = this, oDialog = this._getDialog(), fnAfterClose = function() {
		// reset the dialog to the previous state
		that.setSelectedSortItem(that._oPreviousState.sortItem);
		that.setSortDescending(that._oPreviousState.sortDescending);
		that.setSelectedGroupItem(that._oPreviousState.groupItem);
		that.setGroupDescending(that._oPreviousState.groupDescending);
		that.setSelectedPresetFilterItem(that._oPreviousState.presetFilterItem);

		// selected filters need to be cleared before
		that._clearSelectedFilters();
		that.setSelectedFilterKeys(that._oPreviousState.filterKeys);

		// navigate to old page if necessary
		if (that._navContainer.getCurrentPage() !== that._oPreviousState.navPage) {
			jQuery.sap.delayedCall(0, that._navContainer, "to", [
					that._oPreviousState.navPage.getId(), "show" ]);
		}

		// navigate to old tab if necessary
		that._switchToPage(that._oPreviousState.contentPage,
				that._oPreviousState.contentItem);

		// detach this function
		that._dialog.detachAfterClose(fnAfterClose);

		// fire cancel event
		that.fireCancel();
	};

	// attach the reset function to afterClose to hide the dialog changes from
	// the end user
	oDialog.attachAfterClose(fnAfterClose);
	oDialog.close();
};

/*
 * Internal event handler for the reset filter button @private
 */
sap.m.ViewSettingsDialog.prototype._onClearFilters = function() {
	// clear data and update selections
	this._clearSelectedFilters();
	this._clearPresetFilter();

	// fire event to allow custom controls to react and reset
	this.fireResetFilters();

	// update counters
	this._updateFilterCounters();

	// page updates
	if (this._iContentPage === 3) { // go to filter overview page if necessary
		jQuery.sap.delayedCall(0, this._getNavContainer(), "back");
		this._switchToPage(2);
		this._getSegmentedButton().setSelectedButton(this._getFilterButton());
	}
	// update preset list selection
	this._updateListSelection(this._presetFilterList, sap.ui.getCore().byId(
			this.getSelectedPresetFilterItem()));
};

/* =========================================================== */
/* end: event handlers */
/* =========================================================== */

}; // end of sap/m/ViewSettingsDialog.js
if ( !jQuery.sap.isDeclared('sap.m.ViewSettingsItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ViewSettingsItem.
jQuery.sap.declare("sap.m.ViewSettingsItem");

jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained



/**
 * Constructor for a new ViewSettingsItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog.
 * @extends sap.ui.core.Item
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.ViewSettingsItem
 */
sap.ui.core.Item.extend("sap.m.ViewSettingsItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"selected" : {type : "boolean", group : "Behavior", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.ViewSettingsItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ViewSettingsItem.extend
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.m.ViewSettingsItem#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.ViewSettingsItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsItem#setSelected
 * @function
 */


// Start of sap\m\ViewSettingsItem.js

}; // end of sap/m/ViewSettingsItem.js
if ( !jQuery.sap.isDeclared('sap.m.routing.RouteMatchedHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.m.routing.RouteMatchedHandler");
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.routing.Router'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained





/**
 * Instantiates a RouteMatchedHandler
 * 
 * @class
 * This class will attach to the Events of a provided router and add the views created by it to a  @link {sap.m.SplitContainer} or a @link {sap.m.NavContainer} Control, if this is the target control of the route.</br>
 * If the targetControl is no @link {sap.m.SplitContainer} or a @link {sap.m.NavContainer}, It will only close the dialogs, according to the property value.</br>
 * </br>
 * When a navigation is triggered, this class will try to determine the transition of the pages based on the history.</br>
 * Eg: if a user presses browser back, it will show a backwards animation.</br>
 * </br>
 * The navigation on the container takes place in the RoutePatternMatched event of the Router. If you register on the RouteMatched event of the Router, the visual navigation did not take place yet.</br>
 * </br>
 * Since it is hard to detect if a user has pressed browser back, this transitions will not be reliable, for example if someone bookmarked a detail page, and wants to navigate to a masterPage.</br>
 * If you want this case to always show a backwards transition, you should specify a "viewLevel" property on your Route.</br>
 * The viewLevel has to be an integer. The Master should have a lower number than the detail.</br>
 * These levels should represent the user process of your application and they do not have to match the container structure of your Routes.</br>
 * If the user navigates between views with the same viewLevel, the history is asked for the direction.</br>
 * </br>
 * You can specify a property "transition" in a route to define which transition will be applied when navigating. If it is not defined, the nav container will take its default transition.
 * </br>
 * You can also specify "transitionParameters" on a Route, to give the transition parameters.</br>
 * </br>
 * If you want to preserve the current view when navigating, but you want to navigate to it when nothing is displayed in the navContainer, you can set preservePageInSplitContainer = true</br>
 * When the route that has this flag directly matches the pattern, the view will still be switched by the splitContainer.
 * </br>
 * @link {sap.m.NavContainer}
 * 
 * @param {sap.ui.core.routing.Router} router - A router that creates views</br>
 * @param {boolean} closeDialogs - the default is true - will close all open dialogs before navigating, if set to true. If set to false it will just navigate without closing dialogs.
 * @public
 * @name sap.m.routing.RouteMatchedHandler
 */
sap.ui.base.Object.extend("sap.m.routing.RouteMatchedHandler", {
	constructor : function (oRouter, bCloseDialogs) {
		//until we reverse the order of events fired by router we need to queue handleRouteMatched
		this._aQueue = [];

		if(bCloseDialogs === undefined) {
			this._bCloseDialogs = true;
		} else {
			this._bCloseDialogs = !!bCloseDialogs;
		}

		// Route matched is thrown for each container in the route hierarchy
		oRouter.attachRouteMatched(this._onHandleRouteMatched, this);
		// Route Pattern Matched is thrown only once for the end point of the current navigation
		oRouter.attachRoutePatternMatched(this._handleRoutePatternMatched, this);

		this._oRouter = oRouter;
	}
});

/* =================================
 * public
 * =================================
*/

/**
 * Removes the routeMatchedHandler from the Router
 *
 * @public
 */
sap.m.routing.RouteMatchedHandler.prototype.destroy = function () {
	this._oRouter.detachRouteMatched(this._onHandleRouteMatched, this);
	this._oRouter.detachRoutePatternMatched(this._handleRoutePatternMatched, this);

	this._oRouter = null;

	return this;
};

/**
 * Sets if a navigation should close dialogs
 *
 * @public
 * @returns {sap.m.routing.RouteMatchedHandler} for chaining
 */
sap.m.routing.RouteMatchedHandler.prototype.setCloseDialogs = function (bCloseDialogs) {
	this._bCloseDialogs = !!bCloseDialogs;
	return this;
};


/**
 * Gets if a navigation should close dialogs
 *
 * @public
 * @returns {boolean} a flag indication if dialogs will be closed
 */
sap.m.routing.RouteMatchedHandler.prototype.getCloseDialogs = function () {
	return this._bCloseDialogs;
};


/* =================================
 * private
 * =================================
*/

/**
 * Handling of navigation event:
 * Order of navigation events is first all RouteMatched events then the single RoutePatternMatched event.
 * We collect all RouteMatched events in a queue (one for each container) as soon as the RoutePatternMatched
 * is reached the direction of the navigation is derived by _handleRoutePatternMatched. This direction is
 * forwarded to the route's view container (done in _handleRouteMatched)
 * @private
 */
sap.m.routing.RouteMatchedHandler.prototype._handleRoutePatternMatched = function(oEvent) {
	var iTargetViewLevel = +oEvent.getParameter("config").viewLevel,
		oHistory = sap.ui.core.routing.History.getInstance(),
		bBack,
		//Only one navigation per NavContainer in the queue, it has to be the last one for the container
		aResultingNavigations = this._createResultingNavigations(oEvent.getParameter("name"));

	this._closeDialogs();

	if (isNaN(iTargetViewLevel) || isNaN(this._iCurrentViewLevel) || iTargetViewLevel === this._iCurrentViewLevel) {
		bBack = oHistory.getDirection() === "Backwards";
	} else {
		bBack = iTargetViewLevel < this._iCurrentViewLevel;
	}

	while (aResultingNavigations.length) {
		this._handleRouteMatched(aResultingNavigations.shift().oParams, bBack);
	}

	this._iCurrentViewLevel = iTargetViewLevel;
};

/**
 * queues up calls
 * @private
 */
sap.m.routing.RouteMatchedHandler.prototype._onHandleRouteMatched = function(oEvent) {
	this._aQueue.push({
		oTargetControl : oEvent.getParameter("targetControl"),
		oArguments : oEvent.getParameter("arguments"),
		oConfig : oEvent.getParameter("config"),
		oView : oEvent.getParameter("view"),
		sRouteName : oEvent.getParameter("name")
	});
};

/**
 * Goes through the queue and adds the last Transition for each container in the queue
 * In case of a navContainer or phone mode, only one transition for the container is allowed.
 * In case of a splitContainer in desktop mode, two transitions are allowed, one for the master and one for the detail.
 * Both transitions will be the same. 
 * @private
 */
sap.m.routing.RouteMatchedHandler.prototype._createResultingNavigations = function(sRouteName) {
	var i,
		bFoundTheCurrentNavigation,
		oCurrentParams,
		oCurrentContainer,
		oCurrentNavigation,
		aResults = [],
		oView,
		bIsSplitContainer,
		bIsNavContainer,
		bPreservePageInSplitContainer,
		oResult;

	while(this._aQueue.length) {
		bFoundTheCurrentNavigation = false;
		oCurrentParams = this._aQueue.shift();
		oCurrentContainer = oCurrentParams.oTargetControl;
		bIsSplitContainer = oCurrentContainer instanceof sap.m.SplitContainer;
		bIsNavContainer = oCurrentContainer instanceof sap.m.NavContainer;
		oView = oCurrentParams.oView;
		oCurrentNavigation = {
					oContainer : oCurrentContainer, 
					oParams : oCurrentParams,
					bIsMasterPage : (bIsSplitContainer && !!oCurrentContainer.getMasterPage(oView.getId()))
				};
		bPreservePageInSplitContainer = bIsSplitContainer &&
										oCurrentParams.oConfig.preservePageInSplitContainer &&
										//only switch the page if the container has a page in this aggregation
										oCurrentContainer.getCurrentPage(oCurrentNavigation.bIsMasterPage)
										&& sRouteName !== oCurrentParams.sRouteName;

		//Skip no nav container controls
		if (!(bIsNavContainer || bIsSplitContainer) || !oView) {
			continue;
		}

		for(i = 0; i < aResults.length; i++) {
			oResult = aResults[i];
			
			//The result targets a different container
			if(oResult.oContainer !== oCurrentContainer) {
				continue;
			}

			//Always override the navigation when its a navContainer, and if its a splitContainer - in the mobile case it behaves like a nav container
			if(bIsNavContainer || sap.ui.Device.system.phone) {
				aResults.splice(i, 1);
				aResults.push(oCurrentNavigation);
				bFoundTheCurrentNavigation = true;
				break;
			}

			//We have a desktop SplitContainer and need to add to transitions if necessary
			//The page is in the same aggregation - overwrite the previous transition
			if(oResult.bIsMasterPage === oCurrentNavigation.bIsMasterPage) {
				if(bPreservePageInSplitContainer) {
					//the view should be preserved, check the next navigation
					break;
				}

				aResults.splice(i, 1);
				aResults.push(oCurrentNavigation);
				bFoundTheCurrentNavigation = true;
				break;
			} else {
				//its not the same aggregation continue trying to find the correct aggregation
				continue;
			}
		}

		if(oCurrentContainer instanceof sap.m.SplitContainer && !sap.ui.Device.system.phone) {
			//We have a desktop SplitContainer and need to add to transitions if necessary
			oCurrentNavigation.bIsMasterPage = !!oCurrentContainer.getMasterPage(oView.getId());
		}

		//A new Nav container was found
		if(!bFoundTheCurrentNavigation) {
			if(!!oCurrentContainer.getCurrentPage(oCurrentNavigation.bIsMasterPage) && bPreservePageInSplitContainer) {
				//the view should be preserved, check the next navigation
				continue;
			}
			aResults.push(oCurrentNavigation);
		}
	}

	return aResults;
};


/**
 * Triggers all navigation on the correct containers with the transition direction.
 *
 * @private
 */
sap.m.routing.RouteMatchedHandler.prototype._handleRouteMatched = function(oParams, bBack) {
	var oTargetControl = oParams.oTargetControl,
		oPreviousPage,
		//Parameters for the nav Container
		oArguments = oParams.oArguments,
		//Nav container does not work well if you pass undefined as transition
		sTransition = oParams.oConfig.transition || "",
		oTransitionParameters = oParams.oConfig.transitionParameters,
		sViewId = oParams.oView.getId(),
		//this is only necessary if the target control is a Split container since the nav container only has a pages aggregation
		bNextPageIsMaster = oTargetControl instanceof sap.m.SplitContainer && !!oTargetControl.getMasterPage(sViewId);

	//It is already the current page, no need to navigate
	if(oTargetControl.getCurrentPage(bNextPageIsMaster).getId() === sViewId) {
		jQuery.sap.log.info("navigation to view with id: " + sViewId + " is skipped since it already is displayed by its targetControl");
		return;
	}

	jQuery.sap.log.info("navigation to view with id: " + sViewId + " the targetControl is " + oTargetControl.getId() + " backwards is " + bBack);

	if (bBack) {
		// insert previous page if not in nav container yet
		oPreviousPage = oTargetControl.getPreviousPage(bNextPageIsMaster);

		if (!oPreviousPage || oPreviousPage.getId() !== sViewId) {
			oTargetControl.insertPreviousPage(sViewId, sTransition , oArguments);
		}

		oTargetControl.backToPage(sViewId, oArguments, oTransitionParameters);

	} else {
		oTargetControl.to(sViewId, sTransition, oArguments, oTransitionParameters);
	}

};


/**
 * Closes all dialogs if the closeDialogs property is set to true.
 *
 * @private
 */
sap.m.routing.RouteMatchedHandler.prototype._closeDialogs = function() {
	if(!this._bCloseDialogs) {
		return;
	}

	// close open popovers
	if (sap.m.InstanceManager.hasOpenPopover()) {
		sap.m.InstanceManager.closeAllPopovers();
	}

	// close open dialogs
	if (sap.m.InstanceManager.hasOpenDialog()) {
		sap.m.InstanceManager.closeAllDialogs();
	}
}


}; // end of sap/m/routing/RouteMatchedHandler.js
if ( !jQuery.sap.isDeclared('sap.m.ActionListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ActionListItem.
jQuery.sap.declare("sap.m.ActionListItem");




/**
 * Constructor for a new ActionListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ActionListItem should be used to fire actions when tapped.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.ActionListItem
 */
sap.m.ListItemBase.extend("sap.m.ActionListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.ActionListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ActionListItem.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text of the action list item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.ActionListItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ActionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionListItem#setText
 * @function
 */


// Start of sap\m\ActionListItem.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.m.ActionListItem.prototype.init = function() {
	this.setType(sap.m.ListType.Active);
	sap.m.ListItemBase.prototype.init.apply(this, arguments);
};
}; // end of sap/m/ActionListItem.js
if ( !jQuery.sap.isDeclared('sap.m.ActionSheet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ActionSheet.
jQuery.sap.declare("sap.m.ActionSheet");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ActionSheet.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Bottom)</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: true)</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getTitle title} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ActionSheet#event:cancelButtonTap cancelButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:cancelButtonPress cancelButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ActionSheet is a special kind of control which contains one or more sap.m.Button(s) and the ActionSheet will be closed when one of the buttons is tapped. It looks similar as a sap.m.Dialog in iPhone and Android while as a sap.m.Popover in iPad.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @name sap.m.ActionSheet
 */
sap.ui.core.Control.extend("sap.m.ActionSheet", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"openBy", "close", "isOpen"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"placement" : {type : "sap.m.PlacementType", group : "Appearance", defaultValue : sap.m.PlacementType.Bottom},
		"showCancelButton" : {type : "boolean", group : "Appearance", defaultValue : true},
		"cancelButtonText" : {type : "string", group : "Appearance", defaultValue : null},
		"title" : {type : "string", group : "Appearance", defaultValue : null}
	},
	aggregations : {
    	"buttons" : {type : "sap.m.Button", multiple : true, singularName : "button"}, 
    	"_cancelButton" : {type : "sap.m.Button", multiple : false, visibility : "hidden"}
	},
	events : {
		"cancelButtonTap" : {}, 
		"beforeOpen" : {}, 
		"afterOpen" : {}, 
		"beforeClose" : {}, 
		"afterClose" : {}, 
		"cancelButtonPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ActionSheet with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ActionSheet.extend
 * @function
 */

sap.m.ActionSheet.M_EVENTS = {'cancelButtonTap':'cancelButtonTap','beforeOpen':'beforeOpen','afterOpen':'afterOpen','beforeClose':'beforeClose','afterClose':'afterClose','cancelButtonPress':'cancelButtonPress'};


/**
 * Getter for property <code>placement</code>.
 * The ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. The default value is sap.m.PlacementType.Bottom.
 *
 * Default value is <code>Bottom</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * @name sap.m.ActionSheet#getPlacement
 * @function
 */

/**
 * Setter for property <code>placement</code>.
 *
 * Default value is <code>Bottom</code> 
 *
 * @param {sap.m.PlacementType} oPlacement  new value for property <code>placement</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#setPlacement
 * @function
 */


/**
 * Getter for property <code>showCancelButton</code>.
 * If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCancelButton</code>
 * @public
 * @name sap.m.ActionSheet#getShowCancelButton
 * @function
 */

/**
 * Setter for property <code>showCancelButton</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCancelButton  new value for property <code>showCancelButton</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#setShowCancelButton
 * @function
 */


/**
 * Getter for property <code>cancelButtonText</code>.
 * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>cancelButtonText</code>
 * @public
 * @name sap.m.ActionSheet#getCancelButtonText
 * @function
 */

/**
 * Setter for property <code>cancelButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCancelButtonText  new value for property <code>cancelButtonText</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#setCancelButtonText
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title will be show in the header area in iPhone and every Android devices. This property will be ignored in iPad.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ActionSheet#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#setTitle
 * @function
 */


/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.
 * 
 * @return {sap.m.Button[]}
 * @public
 * @name sap.m.ActionSheet#getButtons
 * @function
 */


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#insertButton
 * @function
 */

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#addButton
 * @function
 */

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.m.Button} vButton the button to remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @public
 * @name sap.m.ActionSheet#removeButton
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ActionSheet#removeAllButtons
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ActionSheet#indexOfButton
 * @function
 */
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#destroyButtons
 * @function
 */


/**
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside. (This event is deprecated, use the press event instead) 
 *
 * @name sap.m.ActionSheet#cancelButtonTap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside. (This event is deprecated, use the press event instead) 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachCancelButtonTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachCancelButtonTap
 * @function
 */

/**
 * Fire event cancelButtonTap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireCancelButtonTap
 * @function
 */


/**
 * This event will be fired before the ActionSheet is opened. 
 *
 * @name sap.m.ActionSheet#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event will be fired before the ActionSheet is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachBeforeOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachBeforeOpen
 * @function
 */

/**
 * Fire event beforeOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireBeforeOpen
 * @function
 */


/**
 * This event will be fired after the ActionSheet is opened. 
 *
 * @name sap.m.ActionSheet#afterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event will be fired after the ActionSheet is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachAfterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachAfterOpen
 * @function
 */

/**
 * Fire event afterOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireAfterOpen
 * @function
 */


/**
 * This event will be fired before the ActionSheet is closed. 
 *
 * @name sap.m.ActionSheet#beforeClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event will be fired before the ActionSheet is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachBeforeClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachBeforeClose
 * @function
 */

/**
 * Fire event beforeClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireBeforeClose
 * @function
 */


/**
 * This event will be fired after the ActionSheet is closed. 
 *
 * @name sap.m.ActionSheet#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event will be fired after the ActionSheet is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachAfterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachAfterClose
 * @function
 */

/**
 * Fire event afterClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireAfterClose
 * @function
 */


/**
 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside. 
 *
 * @name sap.m.ActionSheet#cancelButtonPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'cancelButtonPress' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachCancelButtonPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'cancelButtonPress' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachCancelButtonPress
 * @function
 */

/**
 * Fire event cancelButtonPress to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireCancelButtonPress
 * @function
 */


/**
 * Calling this method will make the ActionSheet visible on the screen.
 *
 * @name sap.m.ActionSheet.prototype.openBy
 * @function
 * @param {object} 
 *         oControl
 *         The ActionSheet behaves as a sap.m.Popover in iPad and the control parameter is the object to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover. In other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because dialog is aligned to the screen.

 * @type void
 * @public
 */


/**
 * Calling this method will make the ActionSheet disappear from the screen.
 *
 * @name sap.m.ActionSheet.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open (this includes opening and closing animations), otherwise it returns false.
 *
 * @name sap.m.ActionSheet.prototype.isOpen
 * @function

 * @type boolean
 * @public
 */


// Start of sap\m\ActionSheet.js


jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


sap.m.ActionSheet.prototype.init = function() {
	// Delegate keyboard processing to ItemNavigation, see commons.SegmentedButton
	this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
	this._oItemNavigation.setCycling(false);
	this.addDelegate(this._oItemNavigation);
};

sap.m.ActionSheet.prototype.exit = function(){
	if(this._parent){
		this._parent.destroy();
		this._parent = null;
	}
	if(this._oCancelButton){
		this._oCancelButton.destroy();
		this._oCancelButton = null;
	}

	if (this._oItemNavigation) {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		delete this._oItemNavigation;
	}
};

// keyboard navigation
sap.m.ActionSheet.prototype._setItemNavigation = function() {
	var aButtons = this.getButtons(),
		aDomRefs = [],
		oDomRef = this.getDomRef();

	if (oDomRef) {
		this._oItemNavigation.setRootDomRef(oDomRef);
		for(var i = 0; i < aButtons.length; i++){
			if(aButtons[i].getEnabled()){
				aDomRefs.push(aButtons[i].getDomRef());
			}
		}
		if(this._oCancelButton){
			aDomRefs.push(this._oCancelButton.getDomRef());
		}
		this._oItemNavigation.setItemDomRefs(aDomRefs);
		this._oItemNavigation.setSelectedIndex(0);
		this._oItemNavigation.setPageSize(aDomRefs.length);
	}
};
sap.m.ActionSheet.prototype.onAfterRendering = function() {
	this._setItemNavigation();
	this.$().on("keyup.ActionSheet", jQuery.proxy(this.onKeyUp, this));
};
sap.m.ActionSheet.prototype.onBeforeRendering = function() {
	if(this.getDomRef()){
		this.$().off("keyup.ActionSheet");
	}
};
sap.m.ActionSheet.prototype.onKeyUp = function(event) {
	if( event.which == jQuery.sap.KeyCodes.ESCAPE){
		this.close();
		event.stopPropagation();
		event.preventDefault();
	}
};
sap.m.ActionSheet.prototype.sapfocusleave = function() {
	this.close();
};

sap.m.ActionSheet.prototype.openBy = function(oControl){
	var that = this;
	if(!this._parent){
		var oOldParent = this.getParent();

		// ActionSheet may already have a parent for dependent aggregation.
		// This parent must be cleared before adding it to the popup instance, otherwise ActionSheet closes immediately after opening for the first time.
		// TODO: after ManagedObject.prototype._removeChild function is fixed for removing control from dependents aggregation, remove this.
		if(oOldParent){
			this.setParent(null);
		}

		if(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !sap.ui.Device.system.phone)){
		//create a Popover instance for iPad
			this._parent = new sap.m.Popover({
				placement: this.getPlacement(),
				showHeader: false,
				content: [this],
				beforeOpen: function(){
					that.fireBeforeOpen();
				},
				afterOpen: function(){
					that.focus();
					that.fireAfterOpen();
				},
				beforeClose: function(){
					that.fireBeforeClose();
				},
				afterClose: function(){
					if(that.getShowCancelButton()){
						that.fireCancelButtonTap(); // (This event is deprecated, use the "cancelButtonPress" event instead)
						that.fireCancelButtonPress();
					}
					that.fireAfterClose();
				}
			}).addStyleClass("sapMActionSheetPopover");

			if(sap.ui.Device.browser.internet_explorer){
				this._parent._fnSetArrowPosition = jQuery.proxy(function(){
					sap.m.Popover.prototype._setArrowPosition.apply(this);
					
					var $this = this.$(),
						fContentWidth = $this.children(".sapMPopoverCont")[0].getBoundingClientRect().width;
					jQuery.each($this.find(".sapMActionSheet > .sapMBtn"), function(index, oButtonDom){
						var $button = jQuery(oButtonDom),
							fButtonWidth;
						$button.css("width", "");
						fButtonWidth = oButtonDom.getBoundingClientRect().width;
						if(fButtonWidth <= fContentWidth){
							$button.css("width", "100%");
						}
					});
				}, this._parent);
			}
		}else{
			//create a Dialog instance for the rest
			this._parent = new sap.m.Dialog({
				title: this.getTitle(),
				type: sap.m.DialogType.Standard,
				content: [this],
				beforeOpen: function(){
					that.fireBeforeOpen();
				},
				afterOpen: function(){
					that.focus();
					that.fireAfterOpen();
				},
				beforeClose: function(oEvent){
					that.fireBeforeClose({
						origin: oEvent.getParameter("origin")
					});
				},
				afterClose: function(oEvent){
					that.fireAfterClose({
						origin: oEvent.getParameter("origin")
					});
				}
			}).addStyleClass("sapMActionSheetDialog");
			
			if(this.getTitle()){
				this._parent.addStyleClass("sapMActionSheetDialogWithTitle");
			}
			
			if(!(jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && sap.ui.Device.system.phone))){
				this._parent.setBeginButton(this._getCancelButton());
			}
			
			//need to modify some internal methods of Dialog for iPhone, because
			//the actionsheet won't be sized full screen if the content is smaller than the whole screen.
			//Then the transform animation need to be set at runtime with some height calculation. 
			if(jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && sap.ui.Device.system.phone)){
				//remove the transparent property from blocklayer
				this._parent.oPopup.setModal(true);
				this._parent._setDimensions = function(){
					var $this = this.$(),
						$content = this.$("cont");
					//CSS reset
					$this.css({
						"width": "100%",
						"max-height": "100%",
						"left": "0px",
						"right": "",
						"bottom": "",
					});
					$content.css("max-height", "");
				};
				
				//Generate a translate3d string with the given y offset
				function genTransformCSS(y){
					return "translate3d(0px, " + (y > 0 ? y : 0) +"px, 0px)";
				}
				
				this._parent._openAnimation = function($this, iRealDuration, fnOpened){
					var $window = jQuery(window), 
						iWindowHeight = $window.height(),
						sStartTransform = genTransformCSS(iWindowHeight);
					
					//need to set the transform css before its visible, in order to trigger the animation properly.
					$this.css({
						"top": "0px",
						"-webkit-transform": sStartTransform,
						"-moz-transform": sStartTransform,
						"transform": sStartTransform,
						"display": "block"
					});
					
					$this.bind("webkitTransitionEnd transitionend", function(){
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						$this.removeClass("sapMDialogSliding");
						fnOpened();
					});
					
					//need a timeout to trigger the animation
					setTimeout(function(){
						var iTop = iWindowHeight - $this.outerHeight(),
							//calculation for the end point of the animation
							sEndTransform = genTransformCSS(iTop);
						$this.css({
							"-webkit-transform": sEndTransform,
							"-moz-transform": sEndTransform,
							"transform": sEndTransform
						}).addClass("sapMDialogSliding").removeClass("sapMDialogHidden");
					}, 0);
				};
				
				this._parent._closeAnimation = function($this, iRealDuration, fnClosed){
					var $window = jQuery(window), 
						sTransform = genTransformCSS($window.height());
					$this.bind("webkitTransitionEnd transitionend", function(){
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						$this.removeClass("sapMDialogSliding");
						fnClosed();
					});
					$this.css({
						"-webkit-transform": sTransform,
						"-moz-transform": sTransform,
						"transform": sTransform
					}).addClass("sapMDialogSliding");
				};
				
				//set the animation to the interal oPopup instance on Dialog
				this._parent.oPopup.setAnimations(jQuery.proxy(this._parent._openAnimation, this._parent), jQuery.proxy(this._parent._closeAnimation, this._parent));				
				
				
				//also need to change the logic for adjusting scrollable area.
				this._parent._adjustScrollingPane = function(){
					var $this = this.$(),
						iHeight = $this.height(),
						iHeaderHeight = $this.children("header.sapMBar").outerHeight(true),
						$content = this.$("cont");
				
					$content.css("max-height", iHeight - iHeaderHeight);
					this._oScroller.refresh();
				};
				
				//only need to recalculate the transform offset when window resizes, doesn't need to reposition using Popup.js again for iPhone.
				this._parent._fnOrientationChange = jQuery.proxy(function(){
					this._setDimensions();
					
					var $window = jQuery(window), 
						iWindowHeight = $window.height(),
						$this = this.$(),
						iTop = iWindowHeight - $this.outerHeight(),
						sTransform = genTransformCSS(iTop),
						$content = this.$("cont");
					
					$this.css({
						"-webkit-transform": sTransform,
						"-moz-transform": sTransform,
						"transform": sTransform
					});
					
					this._adjustScrollingPane();
				}, this._parent);
			}
		}

		// Check if this control has already a parent. If yes, add the _parent control into the dependents aggregation
		// to enable model propagation and lifecycle management.
		if(oOldParent){
			oOldParent.addDependent(this._parent);
		}
	}
	
	//open the ActionSheet
	if(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !sap.ui.Device.system.phone)){
		this._parent.openBy(oControl);
	}else{
		this._parent.open();
	}
};


sap.m.ActionSheet.prototype.close = function(oControl){
	if(this._parent){
		this._parent.close();
	}
};


sap.m.ActionSheet.prototype.isOpen = function(oControl){
	return !!this._parent && this._parent.isOpen();
};


sap.m.ActionSheet.prototype._createCancelButton = function(){
	if(!this._oCancelButton){
		var sCancelButtonText = (this.getCancelButtonText()) ? this.getCancelButtonText() : sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("ACTIONSHEET_CANCELBUTTON_TEXT"),
			that = this;
//			var sButtonStyle = (sap.ui.Device.os.ios) ? sap.m.ButtonType.Unstyled : sap.m.ButtonType.Default;
		this._oCancelButton = new sap.m.Button(this.getId() + '-cancelBtn', {
			text: sCancelButtonText,
			type: sap.m.ButtonType.Emphasized,
			press : function() {
				if(!(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !sap.ui.Device.system.phone)) && that._parent){
					that._parent._oCloseTrigger = this;
				}
				that.close();
				that.fireCancelButtonTap(); // (This event is deprecated, use the "cancelButtonPress" event instead)
				that.fireCancelButtonPress();
			}
		}).addStyleClass("sapMActionSheetButton sapMActionSheetCancelButton sapMBtnTransparent sapMBtnInverted");
		
		if(jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && sap.ui.Device.system.phone)){
			this.setAggregation("_cancelButton", this._oCancelButton, true);
		}
	}
	return this;
};

sap.m.ActionSheet.prototype._getCancelButton = function(){
	if(!(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !sap.ui.Device.system.phone)) && this.getShowCancelButton()){
		this._createCancelButton();
		return this._oCancelButton;
	}
	return null;
};

sap.m.ActionSheet.prototype.setCancelButtonText = function(sText) {
	this.setProperty("cancelButtonText", sText, true);
	if(this._oCancelButton) {
		this._oCancelButton.setText(sText);
	}
	return this;
};

sap.m.ActionSheet.prototype._preProcessActionButton = function(oButton){
	var sType = oButton.getType();

	if(sap.m.Dialog._bOneDesign){
		if(sType !== sap.m.ButtonType.Accept && sType !== sap.m.ButtonType.Reject){
			oButton.setType(sap.m.ButtonType.Transparent);
		}
	}
	oButton.addStyleClass("sapMBtnInverted"); // dark background
	return this;
};

sap.m.ActionSheet.prototype.setShowCancelButton = function(bValue){
	if(this._parent){
		if(jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && sap.ui.Device.system.phone)){
			//if iPhone, we need to rerender to show or hide the cancel button
			this.setProperty("showCancelButton", bValue, false);
		}else if(!sap.m.Dialog._bOneDesign && !sap.ui.Device.os.ios){
			this.setProperty("showCancelButton", bValue, true);
			this._parent.setBeginButton(this._getCancelButton());
		}
	}else{
		this.setProperty("showCancelButton", bValue, true);
	}
	return this;
};

sap.m.ActionSheet.prototype.setTitle = function(sTitle){
	this.setProperty("title", sTitle, true);
	if(this._parent && !(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !sap.ui.Device.system.phone))){
		this._parent.setTitle(sTitle);
	}
	
	if(this._parent){
		if(sTitle){
			this._parent.addStyleClass("sapMActionSheetDialogWithTitle");
		}else{
			this._parent.removeStyleClass("sapMActionSheetDialogWithTitle");
		}
	}
	return this;
};

sap.m.ActionSheet.prototype.setPlacement = function(sPlacement){
	this.setProperty("placement", sPlacement, true);
	
	if(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !sap.ui.Device.system.phone)){
		if(this._parent){
			this._parent.setPlacement(sPlacement);
		}
	}
	return this;
};

sap.m.ActionSheet.prototype._buttonSelected = function(){
	if(!(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !sap.ui.Device.system.phone)) && this._parent){
		this._parent._oCloseTrigger = this;
	}
	this.close();
};

/* Override API methods */
sap.m.ActionSheet.prototype.addButton = function(oButton) {
	this.addAggregation("buttons",oButton, false);
	this._preProcessActionButton(oButton);
	oButton.attachPress(this._buttonSelected, this);
	return this;
};
sap.m.ActionSheet.prototype.insertButton = function(oButton, iIndex) {
	this.insertAggregation("buttons",oButton, iIndex, false);
	this._preProcessActionButton(oButton);
	oButton.attachPress(this._buttonSelected, this);
	return this;
};
sap.m.ActionSheet.prototype.removeButton = function(oButton) {
	var result = this.removeAggregation("buttons",oButton, false);
	if (result) {
		result.detachPress(this._buttonSelected, this);
	}
	return result;
};
sap.m.ActionSheet.prototype.removeAllButtons = function() {
	var result = this.removeAllAggregation("buttons", false),
		that = this;
	jQuery.each(result, function(i, oButton) {
		oButton.detachPress(that._buttonSelected, that);
	});
	return result;
};
sap.m.ActionSheet.prototype.clone = function() {

	var aButtons = this.getButtons();
	for ( var i = 0; i < aButtons.length; i++) {
		var oButton = aButtons[i];
		oButton.detachPress(this._buttonSelected, this);
	}

	var oClone = sap.ui.core.Control.prototype.clone.apply(this, arguments);

	for ( var i = 0; i < aButtons.length; i++) {
		var oButton = aButtons[i];
		oButton.attachPress(this._buttonSelected, this);
	}

	return oClone;
};

}; // end of sap/m/ActionSheet.js
if ( !jQuery.sap.isDeclared('sap.m.App') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.App.
jQuery.sap.declare("sap.m.App");




/**
 * Constructor for a new App.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.App#event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.NavContainer#constructor sap.m.NavContainer}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides its navigation capabilities.
 * It also adds certain header tags to the HTML page which are considered useful for mobile apps.
 * @extends sap.m.NavContainer
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.App
 */
sap.m.NavContainer.extend("sap.m.App", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"homeIcon" : {type : "any", group : "Misc", defaultValue : null},
		"backgroundColor" : {type : "string", group : "Appearance", defaultValue : null},
		"backgroundImage" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"backgroundRepeat" : {type : "boolean", group : "Appearance", defaultValue : false},
		"backgroundOpacity" : {type : "float", group : "Appearance", defaultValue : 1}
	},
	events : {
		"orientationChange" : {deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.m.App with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.App.extend
 * @function
 */

sap.m.App.M_EVENTS = {'orientationChange':'orientationChange'};


/**
 * Getter for property <code>homeIcon</code>.
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * 
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * 
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>homeIcon</code>
 * @public
 * @name sap.m.App#getHomeIcon
 * @function
 */

/**
 * Setter for property <code>homeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.App#setHomeIcon
 * @function
 */


/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>backgroundColor</code>
 * @public
 * @since 1.11.2
 * @name sap.m.App#getBackgroundColor
 * @function
 */

/**
 * Setter for property <code>backgroundColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.App#setBackgroundColor
 * @function
 */


/**
 * Getter for property <code>backgroundImage</code>.
 * Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @since 1.11.2
 * @name sap.m.App#getBackgroundImage
 * @function
 */

/**
 * Setter for property <code>backgroundImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.App#setBackgroundImage
 * @function
 */


/**
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @public
 * @since 1.11.2
 * @name sap.m.App#getBackgroundRepeat
 * @function
 */

/**
 * Setter for property <code>backgroundRepeat</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bBackgroundRepeat  new value for property <code>backgroundRepeat</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.App#setBackgroundRepeat
 * @function
 */


/**
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @public
 * @since 1.11.2
 * @name sap.m.App#getBackgroundOpacity
 * @function
 */

/**
 * Setter for property <code>backgroundOpacity</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fBackgroundOpacity  new value for property <code>backgroundOpacity</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.App#setBackgroundOpacity
 * @function
 */


/**
 * Fired when the orientation (portrait/landscape) of the device is changed. 
 *
 * @name sap.m.App#orientationChange
 * @event
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.landscape Whether the device is in landscape orientation.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.App</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.App</code>.<br/> itself. 
 *  
 * Fired when the orientation (portrait/landscape) of the device is changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.App</code>.<br/> itself.
 *
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * @name sap.m.App#attachOrientationChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.App</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * @name sap.m.App#detachOrientationChange
 * @function
 */

/**
 * Fire event orientationChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'landscape' of type <code>boolean</code> Whether the device is in landscape orientation.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.20.0. 
 * use sap.ui.Device.orientation.attachHandler(...)
 * @name sap.m.App#fireOrientationChange
 * @function
 */


// Start of sap\m\App.js
sap.m.App.prototype.init = function() {
	sap.m.NavContainer.prototype.init.apply(this, arguments);

	this.addStyleClass("sapMApp");
	jQuery.sap.initMobile({
		viewport: !this._debugZoomAndScroll,
		statusBar: "default",
		hideBrowser: true,
		preventScroll: !this._debugZoomAndScroll,
		rootId: this.getId()
	});
	jQuery(window).bind("resize", jQuery.proxy(this._handleOrientationChange, this));
};


sap.m.App.prototype.onBeforeRendering = function() {
	if(sap.m.NavContainer.prototype.onBeforeRendering){
		sap.m.NavContainer.prototype.onBeforeRendering.apply(this, arguments);
	}
	jQuery.sap.initMobile({
		homeIcon: this.getHomeIcon()
	});
};

sap.m.App.prototype.onAfterRendering = function() {
	if(sap.m.NavContainer.prototype.onAfterRendering){
		sap.m.NavContainer.prototype.onAfterRendering.apply(this, arguments);
	}
	var ref = this.getDomRef().parentNode;
	// set all parent elements to 100% height this *should* be done by the application in CSS, but people tend to forget it...
	if (ref && !ref._sapui5_heightFixed) {
		ref._sapui5_heightFixed = true;
		while (ref && ref !== document.documentElement) {
			var $ref = jQuery(ref);
			if ($ref.attr("data-sap-ui-root-content")) { // Shell as parent does this already
				break;
			}
			if (!ref.style.height) ref.style.height = "100%";
			ref = ref.parentNode;
		}
	}
};


/**
 * Termination of the App control
 * @private
 */
sap.m.App.prototype.exit = function() {
	jQuery(window).unbind("resize", this._handleOrientationChange);
	
	if (this._sInitTimer) {
		jQuery.sap.clearDelayedCall(this._sInitTimer);
	}
};

sap.m.App.prototype._handleOrientationChange = function() {
	var $window = jQuery(window);
	var isLandscape = $window.width() > $window.height();
	if (this._oldIsLandscape !== isLandscape) {
		this.fireOrientationChange({landscape: isLandscape});
		this._oldIsLandscape = isLandscape;
	}
};

// TODO: later, introduce tabs as a kind of separation between histories


// API methods

sap.m.App.prototype.setBackgroundOpacity = function(fOpacity) {
	if (fOpacity > 1 || fOpacity < 0) {
		jQuery.sap.log.warning("Invalid value " + fOpacity + " for App.setBackgroundOpacity() ignored. Valid values are: floats between 0 and 1.");
		return this;
	}
	this.$("BG").css("opacity", fOpacity);
	return this.setProperty("backgroundOpacity", fOpacity, true); // no rerendering - live opacity change looks cooler
};

}; // end of sap/m/App.js
if ( !jQuery.sap.isDeclared('sap.m.ColumnListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ColumnListItem.
jQuery.sap.declare("sap.m.ColumnListItem");




/**
 * Constructor for a new ColumnListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign (default: sap.ui.core.VerticalAlign.Inherit)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ColumnListItem can be used to create columns for Table control.
 * Note: This control should not be used without Column definition in parent control.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.ColumnListItem
 */
sap.m.ListItemBase.extend("sap.m.ColumnListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"vAlign" : {type : "sap.ui.core.VerticalAlign", group : "Appearance", defaultValue : sap.ui.core.VerticalAlign.Inherit}
	},
	defaultAggregation : "cells",
	aggregations : {
    	"clonedHeaders" : {type : "sap.ui.core.Control", multiple : true, singularName : "clonedHeader", visibility : "hidden"}, 
    	"cells" : {type : "sap.ui.core.Control", multiple : true, singularName : "cell", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.m.ColumnListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ColumnListItem.extend
 * @function
 */


/**
 * Getter for property <code>vAlign</code>.
 * Sets the vertical alignment of the all cells in a table row(including selection and navigation). Possible values are "Inherit", "Top", "Middle", "Bottom"
 * Note: Column's "vAlign" property is stronger than this one.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.VerticalAlign} the value of property <code>vAlign</code>
 * @public
 * @since 1.20
 * @name sap.m.ColumnListItem#getVAlign
 * @function
 */

/**
 * Setter for property <code>vAlign</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.VerticalAlign} oVAlign  new value for property <code>vAlign</code>
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.20
 * @name sap.m.ColumnListItem#setVAlign
 * @function
 */


/**
 * Getter for aggregation <code>cells</code>.<br/>
 * Every item inside the cells aggregation defines one column of the row.
 * 
 * <strong>Note</strong>: this is the default aggregation for ColumnListItem.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.ColumnListItem#getCells
 * @function
 */


/**
 * Inserts a cell into the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.core.Control}
 *          oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the cell should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the cell is inserted at 
 *             the last position        
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#insertCell
 * @function
 */

/**
 * Adds some cell <code>oCell</code> 
 * to the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.core.Control}
 *            oCell the cell to add; if empty, nothing is inserted
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#addCell
 * @function
 */

/**
 * Removes an cell from the aggregation named <code>cells</code>.
 *
 * @param {int | string | sap.ui.core.Control} vCell the cell to remove or its index or id
 * @return {sap.ui.core.Control} the removed cell or null
 * @public
 * @name sap.m.ColumnListItem#removeCell
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ColumnListItem#removeAllCells
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>cells</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ColumnListItem#indexOfCell
 * @function
 */
	

/**
 * Destroys all the cells in the aggregation 
 * named <code>cells</code>.
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#destroyCells
 * @function
 */


/**
 * Binder for aggregation <code>cells</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#bindCells
 * @function
 */

/**
 * Unbinder for aggregation <code>cells</code>.
 *
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#unbindCells
 * @function
 */


// Start of sap\m\ColumnListItem.js

// prototype lookup for pop-in id
sap.m.ColumnListItem.prototype._popinId = "";

/**
 * remove pop-in from DOM
 * @protected
 */
sap.m.ColumnListItem.prototype.removePopin = function() {
	if (this.hasPopin()) {
		jQuery.sap.byId(this._popinId).remove();
		this._popinId = "";
	}
	return this;
};

/**
 * Whether has pop-in or not
 * @protected
 */
sap.m.ColumnListItem.prototype.hasPopin = function() {
	return !!(this._popinId);
};

/*
 * remove pop-in from DOM when setVisible false is called
 * @overwite
 */
sap.m.ColumnListItem.prototype.setVisible = function() {
	sap.m.ListItemBase.prototype.setVisible.apply(this, arguments);
	if (!this.getVisible()) {
		this.removePopin();
	}
	return this;
};

// remove pop-in on destroy
sap.m.ColumnListItem.prototype.exit = function() {
	sap.m.ListItemBase.prototype.exit.call(this);
	this.destroyAggregation("clonedHeaders", true);
	return this.removePopin();
};

// active feedback for pop-in
sap.m.ColumnListItem.prototype._activeHandlingInheritor = function() {
	this._toggleActiveClass(true);
};

// inactive feedback for pop-in
sap.m.ColumnListItem.prototype._inactiveHandlingInheritor = function() {
	this._toggleActiveClass(false);
};

/*
 * Common code for the two methods _inactiveHandlingInheritor,_activeHandlingInheritor
 *
 * @param {boolean} bSwitch Determine whether the class should be added or removed.
 */
sap.m.ColumnListItem.prototype._toggleActiveClass = function(bSwitch){
	if (this.hasPopin()) {
		jQuery.sap.byId(this._popinId).toggleClass("sapMLIBActive", bSwitch);
	}
};

/**
 * Handles event delegation for pop-ins
 *
 * @static
 * @protected
 *
 * @param {jQuery.Event} oEvent jQuery event object
 * @param {HTMLElement} oContainerDomRef max parent element to search in DOM to find pop-in
 */
sap.m.ColumnListItem.handleEvents = function(oEvent, oContainerDomRef) {
	// check if event is coming from pop-in
	var $popin = jQuery(oEvent.target).closest(".sapMListTblSubRow", oContainerDomRef);
	if ($popin.length) {
		// get the related Column List Item
		var oColumnLI = sap.ui.getCore().byId($popin.prev().attr("id"));
		if (oColumnLI) {
			// try to find scrControl from event
			oEvent.srcControl = sap.ui.getCore().byId(oEvent.target.id) || oColumnLI;

			// call the related ListItemBase event
			if (oColumnLI["on" + oEvent.type]) {
				oColumnLI["on" + oEvent.type](oEvent);
			}
		}
	}
};

/**
 * Checks whether popin is focused or not
 *
 * @static
 * @protected
 *
 * @param {jQuery.Event} oEvent jQuery event object
 */
sap.m.ColumnListItem.isPopinFocused = function(oEvent) {
	return jQuery(document.activeElement).hasClass("sapMListTblSubRow");
};
}; // end of sap/m/ColumnListItem.js
if ( !jQuery.sap.isDeclared('sap.m.CustomListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.CustomListItem.
jQuery.sap.declare("sap.m.CustomListItem");




/**
 * Constructor for a new CustomListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * sap.m.CustomListItem Control
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.CustomListItem
 */
sap.m.ListItemBase.extend("sap.m.CustomListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.m.CustomListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.CustomListItem.extend
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this list item
 * 
 * <strong>Note</strong>: this is the default aggregation for CustomListItem.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.CustomListItem#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.CustomListItem#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.CustomListItem#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.CustomListItem#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#destroyContent
 * @function
 */


/**
 * Binder for aggregation <code>content</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#bindContent
 * @function
 */

/**
 * Unbinder for aggregation <code>content</code>.
 *
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#unbindContent
 * @function
 */


// Start of sap\m\CustomListItem.js


}; // end of sap/m/CustomListItem.js
if ( !jQuery.sap.isDeclared('sap.m.CustomTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.CustomTile.
jQuery.sap.declare("sap.m.CustomTile");




/**
 * Constructor for a new CustomTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Use the Custom Tile to show a application specific content in the tile.
 * The tile width is 8.5em and height is 10em
 * @extends sap.m.Tile
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.CustomTile
 */
sap.m.Tile.extend("sap.m.CustomTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.CustomTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.CustomTile.extend
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Defines the Content of the CustomTile
 * 
 * <strong>Note</strong>: this is the default aggregation for CustomTile.
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.CustomTile#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.m.CustomTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomTile#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.CustomTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomTile#destroyContent
 * @function
 */


// Start of sap\m\CustomTile.js


}; // end of sap/m/CustomTile.js
if ( !jQuery.sap.isDeclared('sap.m.DateTimeInput') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.DateTimeInput.
jQuery.sap.declare("sap.m.DateTimeInput");




/**
 * Constructor for a new DateTimeInput.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.DateTimeInputType (default: sap.m.DateTimeInputType.Date)</li>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * <li>{@link #getValueFormat valueFormat} : string</li>
 * <li>{@link #getDateValue dateValue} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.DateTimeInput#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Allows end users to interact with date and/or time and select from a date and/or time pad.
 * @extends sap.m.InputBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @name sap.m.DateTimeInput
 */
sap.m.InputBase.extend("sap.m.DateTimeInput", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"type" : {type : "sap.m.DateTimeInputType", group : "Data", defaultValue : sap.m.DateTimeInputType.Date},
		"displayFormat" : {type : "string", group : "Appearance", defaultValue : null},
		"valueFormat" : {type : "string", group : "Data", defaultValue : null},
		"dateValue" : {type : "object", group : "Data", defaultValue : null}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.DateTimeInput with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.DateTimeInput.extend
 * @function
 */

sap.m.DateTimeInput.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>type</code>.
 * Type of DateTimeInput (e.g. Date, Time, DateTime)
 *
 * Default value is <code>Date</code>
 *
 * @return {sap.m.DateTimeInputType} the value of property <code>type</code>
 * @public
 * @name sap.m.DateTimeInput#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Date</code> 
 *
 * @param {sap.m.DateTimeInputType} oType  new value for property <code>type</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#setType
 * @function
 */


/**
 * Getter for property <code>displayFormat</code>.
 * Displays date value in this given format in text field. Default value is taken from locale settings.
 * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or latter wins.
 * If user browser supports native picker then this property is overwritten by browser with locale settings.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>displayFormat</code>
 * @public
 * @name sap.m.DateTimeInput#getDisplayFormat
 * @function
 */

/**
 * Setter for property <code>displayFormat</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDisplayFormat  new value for property <code>displayFormat</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#setDisplayFormat
 * @function
 */


/**
 * Getter for property <code>valueFormat</code>.
 * Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
 * You can only set and get value in this format.
 * If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or latter wins.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueFormat</code>
 * @public
 * @name sap.m.DateTimeInput#getValueFormat
 * @function
 */

/**
 * Setter for property <code>valueFormat</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueFormat  new value for property <code>valueFormat</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#setValueFormat
 * @function
 */


/**
 * Getter for property <code>dateValue</code>.
 * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>dateValue</code>
 * @public
 * @name sap.m.DateTimeInput#getDateValue
 * @function
 */

/**
 * Setter for property <code>dateValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oDateValue  new value for property <code>dateValue</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#setDateValue
 * @function
 */


/**
 * This event gets fired when the selection has finished and the value has changed. 
 *
 * @name sap.m.DateTimeInput#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The string value of the control in given valueFormat(or locale format).
 * @param {object} oControlEvent.getParameters.dateValue The value of control as JavaScript Date Object or null if value is empty.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.DateTimeInput</code>.<br/> itself. 
 *  
 * This event gets fired when the selection has finished and the value has changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.DateTimeInput</code>.<br/> itself.
 *
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The string value of the control in given valueFormat(or locale format).</li>
 * <li>'dateValue' of type <code>object</code> The value of control as JavaScript Date Object or null if value is empty.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.DateTimeInput#fireChange
 * @function
 */


// Start of sap\m\DateTimeInput.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained


!function(oPrototype, $, oDevice) {

	var oi18n = sap.m.getLocaleData();

	$.extend(oPrototype, {
		_origin : "value",
		_super : sap.m.InputBase.prototype,
		_types : {
			Date : {
				valueFormat : oi18n.getDatePattern("short"),
				displayFormat : oi18n.getDatePattern("medium"),
			},
			Time : {
				valueFormat : oi18n.getTimePattern("short"),
				displayFormat : oi18n.getTimePattern("short"),
			},
			DateTime : {
				valueFormat : oi18n.getDateTimePattern("short"),	// does not include pattern but e.g "{1} {0}"
				displayFormat : oi18n.getDateTimePattern("short"),	// does not include pattern but e.g "{1} {0}"
			}
		}
	});

	// am-pm picker is hard-coded in mobiscroll so use 24 hour format for RTL
	if (sap.ui.getCore().getConfiguration().getRTL()) {
		["valueFormat", "displayFormat"].forEach(function(sFormatType) {
			var oTime = oPrototype._types.Time;
			var sFormat = oTime[sFormatType];
			oTime[sFormatType] = sFormat.replace(/a+/i, "").replace(/h+/i, "HH").trim();
		});
	}

	// build DateTime formats from Date And Time values
	["Time", "Date"].forEach(function(sType, nIndex) {
		["valueFormat", "displayFormat"].forEach(function(sFormat) {
			var oTypes = oPrototype._types;
			oTypes.DateTime[sFormat] = oTypes.DateTime[sFormat].replace("{" + nIndex + "}", oTypes[sType][sFormat]);
		});
	});

}(sap.m.DateTimeInput.prototype, jQuery, sap.ui.Device);

/**
 * @overwrite sap.m.InputBase#onBeforeRendering
 */
sap.m.DateTimeInput.prototype.onBeforeRendering = function() {
	this._destroyCustomPicker();
	this._super.onBeforeRendering.call(this);
	if (!this.mProperties.hasOwnProperty("type")) {
		this.setType("Date");
	}
};

/**
 * @overwrite sap.m.InputBase#onAfterRendering
 */
sap.m.DateTimeInput.prototype.onAfterRendering = function() {
	this._super.onAfterRendering.call(this);
	this._$input.scroller(this._getScrollerConfig());
	this._showValue();
};

/**
 * @overwrite sap.m.InputBase#exit
 */
sap.m.DateTimeInput.prototype.exit = function() {
	this._destroyCustomPicker();
	this._super.exit.call(this);
};

/**
 * <pre>
 * Setter for property <code>width</code>
 *
 * Default value is 100%
 * </pre>
 *
 * @public
 * @overwrite sap.m.InputBase#setWidth
 * @param {sap.ui.core.CSSSize} sWidth new value for property <code>width</code>
 * @returns {sap.m.DateTimeInput} this to allow method chaining
 */
sap.m.DateTimeInput.prototype.setWidth = function(sWidth) {
	return this._super.setWidth.call(this, sWidth || "100%");
};

/**
 * <pre>
 * Getter for property <code>width</code>. Defines the width of the DateTimeInput, this value can be provided in %, em, px… and all possible CSS units.
 *
 * Default value is 100%
 * </pre>
 *
 * @public
 * @overwrite sap.m.InputBase#getWidth
 * @returns {sap.ui.core.CSSSize} the value of property width
 */
sap.m.DateTimeInput.prototype.getWidth = function() {
	return this.getProperty("width") || "100%";
};

/**
 * <pre>
 * This function can be used to assign new value and this is relevant with <code>valueFormat</code> property(see valueFormat) but independent from what is going to display on the field(see displayFormat).
 * Another way to assign new value is using dateValue property in JsView(see dateValue).
 * If you use both at the same time, latter wins.
 *
 * Also "Now" literal can be assigned as a parameter to show the current date and/or time.
 * </pre>
 *
 * @public
 * @see sap.m.DateTimeInput#getValueFormat
 * @see sap.m.DateTimeInput#getDisplayFormat
 * @see sap.m.DateTimeInput#getDateValue
 * @param {string} sValue new value for property <code>value</code>
 * @returns {sap.m.DateTimeInput} this to allow method chaining
 */
sap.m.DateTimeInput.prototype.setValue = function(sValue) {
	sValue = this.validateProperty("value", sValue);
	if (sValue.toLowerCase() == "now") {
		return this.setDateValue(new Date());
	}

	this.setProperty("value", sValue);
	this._origin = "value";
	this._getFormatFromBinding();
	return this;
};

// set the dateValue property if oValue parameter is defined
sap.m.DateTimeInput.prototype.setDateValue = function(oValue) {
	if (!oValue) {
		return this;
	}

	this._isDate(oValue);
	this._origin = "dateValue";
	this.setProperty("dateValue", oValue);
	if (!this.getDomRef()) {
		// set the string value property from date object if control is not yet rendered
		this.setProperty("value", sap.ui.core.format.DateFormat.getDateInstance({
			pattern : this.getValueFormat()
		}).format(oValue), true);
	}
	return this;
};

// returns assigned dateValue property or converts value to JS Date Object.
sap.m.DateTimeInput.prototype.getDateValue = function() {
	if (this._origin == "dateValue") {
		return this.getProperty("dateValue");
	}

	var sValue = this.getProperty("value");
	if (!sValue) {
		return null;
	}

	return sap.ui.core.format.DateFormat.getDateInstance({
		pattern : this.getValueFormat()
	}).parse(sValue);
};

sap.m.DateTimeInput.prototype.getDisplayFormat = function() {
	return this.getProperty("displayFormat") || this._types[this.getType()].displayFormat;
};

sap.m.DateTimeInput.prototype.getValueFormat = function() {
	return this.getProperty("valueFormat") || this._types[this.getType()].valueFormat;
};

sap.m.DateTimeInput.prototype.ontap = function(oEvent) {
	// for desktop, we show picker with tap/click
	// for mobile, mobiscroll will handle it
	if (!sap.ui.Device.support.touch) {
		this.onsapshow(oEvent);
	}
};

// Check given is JS Date Object and throw error if not
sap.m.DateTimeInput.prototype._isDate = function(oValue) {
	if (!sap.m.isDate(oValue)) {
		throw new Error("Type Error: Expected JavaScript Date Object for property dateValue of " + this);
	}
	return true;
};

/** *
 * Change event handler of the Input field
 * Also gets called programmatically without parameter to update input value
 *
 * @overwrite sap.m.InputBase#_onChange
 */
sap.m.DateTimeInput.prototype._onChange = function(oEvent) {
	var oDate = null,
		sNewValue = this._$input.val(),
		sOldValue = this.getProperty("value");

	if (sNewValue) {
		oDate = this._$input.scroller("getDate");
		this.getType() == "Date" && oDate.setHours(0, 0, 0, 0);

		// reformat for CLDR
		oEvent && this._reformat && this._$input.val(
			sap.ui.core.format.DateFormat.getDateInstance({
				pattern : this.getDisplayFormat()
			}).format(oDate)
		);

		if (!isNaN(oDate)) {
			sNewValue = sap.ui.core.format.DateFormat.getDateInstance({
				pattern : this.getValueFormat()
			}).format(oDate);
		} else {
			sNewValue = "";
			oDate = null;
		}
	}

	if (sOldValue == sNewValue) {
		return;
	}

	this.setProperty("value", sNewValue, true);
	this.setProperty("dateValue", oDate, true);
	this._setLabelVisibility();

	if (oEvent && oEvent.type != "focus") {
		this.fireChange({
			dateValue: oDate,
			value: sNewValue,

			// backwards compatibility
			newDateValue: oDate,
			newValue: sNewValue
		});
	}
};

/**
 * Destroy custom picker if available
 */
sap.m.DateTimeInput.prototype._destroyCustomPicker = function() {
	if (this._$input) {
		this._$input.scroller("hide");
		this._$input.scroller("destroy");
	}
};

sap.m.DateTimeInput.prototype._setInputValue = function(sValue) {
	this._$input.val(sValue);
	this._onChange();
};

/**
 * Do the required conversion and set input value
 */
sap.m.DateTimeInput.prototype._showValue = function() {
	var date = this.getProperty(this._origin);
	if (!date) {
		return;
	}

	if (this._origin == "value") {
		date = sap.ui.core.format.DateFormat.getDateInstance({
			pattern : this.getValueFormat()
		}).parse(date);

		if (!date) {
			jQuery.sap.log.error( "Format Error: value property " + this.getValue()
								+ " does not match with valueFormat " + this.getValueFormat()
								+ " of " + this );
			this._setInputValue("");
			return;
		}
	} else {
		this._isDate(date);
	}

	this._$input.scroller("setDate", date, false);
	this._setInputValue(
		sap.ui.core.format.DateFormat.getDateInstance({
			pattern : this.getDisplayFormat()
		}).format(date)
	);
};

/**
 * Check data-binding for value property
 * Get according pattern from type settings
 */
sap.m.DateTimeInput.prototype._getFormatFromBinding = function() {
	var oBindingInfo = this.getBindingInfo("value");
	if (!oBindingInfo) {
		return;
	}

	var oBindingType = oBindingInfo.type;
	if (!oBindingType || !(oBindingType instanceof sap.ui.model.type.Date)) {
		return;
	}

	var sFormat = oBindingType.getOutputPattern();
	this.setProperty("valueFormat", sFormat, true);
	this.setProperty("displayFormat", sFormat, true);
	return sFormat;
};

/**
 * Opens scroller via keyboard [F4] or [ALT]+[DOWN]
 */
sap.m.DateTimeInput.prototype.onsapshow = function(oEvent) {
	this._$input.scroller("show");
	oEvent.preventDefault();
	oEvent.setMarked();
};

/**
 * Enables custom date time and adds related methods to prototype
 */
(function($, oDevice) {

	var oDefaults = {},
		oCore = sap.ui.getCore(),
		oLocale = sap.m.getLocale(),
		sLanguage = oLocale.getLanguage(),
		oLocaleData = sap.m.getLocaleData(),
		oResourceBundle = oCore.getLibraryResourceBundle("sap.m"),
		_ = function(sText) {
			return $.sap.encodeHTML(oResourceBundle.getText("MOBISCROLL_" + sText));
		},
		rgxExcludeLiteral = "(?=([^']*'[^']*')*[^']*$)",
		sCssPath = $.sap.getModulePath("sap.ui.thirdparty.mobiscroll", "/css/"),
		oSettings = {
			endYear : new Date().getFullYear() + 10,
			lang : sLanguage
		},
		oi18n = {
			setText : _("SET"),
			cancelText : _("CANCEL"),
			monthText : _("MONTH"),
			dayText : _("DAY"),
			yearText : _("YEAR"),
			hourText : _("HOURS"),
			minuteText : _("MINUTES"),
			secText : _("SECONDS"),
			nowText : _("NOW"),
			dayNames : oLocaleData.getDaysStandAlone("wide").map($.sap.encodeHTML),
			dayNamesShort : oLocaleData.getDaysStandAlone("abbreviated").map($.sap.encodeHTML),
			monthNames : oLocaleData.getMonthsStandAlone("wide").map($.sap.encodeHTML),
			monthNamesShort : oLocaleData.getMonthsStandAlone("abbreviated").map($.sap.encodeHTML)
		},
		oThemeParams = sap.ui.core.theming.Parameters.get();

	// inject resources
	$.sap.includeStyleSheet(sCssPath + "mobiscroll-core.css");

	// do not 'calculate' dependency names or analyzer will ignore them
	jQuery.sap.require('sap.ui.thirdparty.mobiscroll.js.mobiscroll-core'); // unlisted dependency retained

	jQuery.sap.require('sap.ui.thirdparty.mobiscroll.js.mobiscroll-scroller'); // unlisted dependency retained

	jQuery.sap.require('sap.ui.thirdparty.mobiscroll.js.mobiscroll-datetime'); // unlisted dependency retained


	// get default settings
	oDefaults = $("<input>").scroller({}).scroller("getInst").settings;

	var device = ["phone", "tablet", "desktop"].filter(function(d) {
			return oDevice.system[d];
		})[0],
		ucfirst = function(str) {
			if (!str) {
				return "";
			}
			return str.charAt(0).toUpperCase() + str.substr(1);
		},
		setDefaultsByTheme = function(key, type, prefix) {
			var value = oThemeParams["sapUiDTICustom" + ucfirst(prefix) + ucfirst(key)];
			if (value) {
				if (type == "bool") {
					oSettings[key] = (value.toLowerCase() == "true" ? true : false);
				} else if (type == "int") {
					value = parseInt(value, 10);
					!isNaN(value) && (oSettings[key] = value);
				} else {
					oSettings[key] = value;
				}
			}
			if (!prefix && device) {
				setDefaultsByTheme(key, type, device);
			}
		};

	oSettings.mode = "mixed";
	oSettings.display = "modal";
	oSettings.theme = "sapMDTICustom";
	setDefaultsByTheme("mode");
	setDefaultsByTheme("display");
	setDefaultsByTheme("rows", "int");
	setDefaultsByTheme("width", "int");
	setDefaultsByTheme("height", "int");
	setDefaultsByTheme("showLabel", "bool");
	setDefaultsByTheme("headerText", "bool");
	if (oSettings.headerText) {
		// mobiscroll needs text to replace
		oSettings.headerText = "{value}";
	}

	// load custom fonts
	jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

	sap.ui.core.IconPool.insertFontFaceStyle();

	// enable language settings
	$.scroller.i18n[sLanguage] = $.extend({}, oi18n);

	// enable instance management
	

	// Add custom datetime methods to prototype
	$.extend(sap.m.DateTimeInput.prototype, {
		/**
		 * This method gets called from sap.m.InstanceManager,
		 * to close the opened mobiscroll dialog when the back button is clicked
		 */
		close : function() {
			this._$input.scroller("hide");
		},

		/**
		 * Mobiscroll title reformatter to support all cldr formats
		 * We can only get string value onChange/onWheel event
		 */
		_setScrollerHeader : function(sValue) {
			try {
				var oConfig = this._$input.scroller("getInst").settings,
					sFormat = !this.getType().indexOf("Date") ? oConfig.dateFormat : oConfig.timeFormat,
					oDate = $.mobiscroll.parseDate(sFormat, sValue);

				return $.sap.encodeHTML(sap.ui.core.format.DateFormat.getDateInstance({
					pattern : this.getDisplayFormat()
				}).format(oDate));
			} catch (e) {
				return sValue;
			}
		},

		/**
		 * Auto close for bubbles
		 */
		_autoClose : function(oEvent) {
			var oDomRef = this.getDomRef();
			if (oDomRef && oDomRef.contains(oEvent.target)) {
				oEvent.stopPropagation();
				oEvent.preventDefault();
				return;
			}

			var oDialog = document.querySelector(".sapMDTICustom .dwwr");
			if (oDialog && !oDialog.contains(oEvent.target)) {
				this._$input.scroller("hide");
			}
		},

		/**
		 * Restrict max width of the dialog
		 */
		_restrictMaxWidth : function($dialog) {
			//TODO : Find a better way to find out 22 instead of hard coding
			$dialog[0].querySelector(".dwwr").style.maxWidth = (document.documentElement.clientWidth - 22) + "px";
		},

		/**
		 * Handle window resize event
		 */
		_handleResize : function(oEvent) {
			this._restrictMaxWidth(oEvent.data.$dialog);
		},

		/**
		 * Handle key down event for buttons
		 */
		_handleBtnKeyDown : function(oEvent) {
			if (oEvent.which === $.sap.KeyCodes.ENTER) {
				if (oEvent.target && $(oEvent.target.parentElement).hasClass("dwb-c")) {
					// This means that "Return" was pressed with the
					// 'Cancel' button having the focus: 'Cancel' wins.
					this._$input.scroller("cancel");
				} else {
					this._$input.scroller("select");
				}
			} else if (oEvent.which === $.sap.KeyCodes.ESCAPE) {
				this._$input.scroller("cancel");
			}
		},

		/**
		 * Date-time conversion for mobiscroll configuration
		 */
		_getScrollerConfig : function() {
			var that = this,
				sType = this.getType(),
				sFormat = this.getDisplayFormat(),
				fnAutoCloseProxy = $.proxy(this._autoClose, this),
				fnHandleResize = $.proxy(this._handleResize, this),
				fnHandleBtnKeyDown = $.proxy(this._handleBtnKeyDown, this),
				fnFocusInFirst, fnFocusInLast,
				$focusLeft = $("<span class='sapMFirstFE' tabindex='0'/>"),
				$focusRight = $("<span class='sapMLastFE' tabindex='0'/>"),
				fnKeyDown, $dialogToClean,
				oConfig = $.extend({}, oSettings, {
					preset : sType.toLowerCase(),
					showOnFocus : oDevice.support.touch,	// focus should not show dialog for desktop
					showOnTap: oDevice.support.touch,		// we handle tab/click for desktop
					disabled : !that.getEnabled() || !that.getEditable(),
					onShow : function($dialog) {
						// Special treatment for IE: with jQuery < 1.9 focus is fired twice in IE
						// Therefore, mobiscroll may open the scroller again, immediately after it
						// has been closed
						if (oDevice.browser.msie) {
							if (that._popupIsShown) {
								return;
							}
							that._popupIsShown = true;
						}

						sap.m.InstanceManager.addDialogInstance(that);
						$(window).on("resize.sapMDTICustom", {$dialog : $dialog}, fnHandleResize);
						//Fix a bug in mobiscroll-core.js line 805 (mobiscroll 2.7.2): their
						//'keydown.dw' handler always triggers a select, even if return was
						//pressed on the cancel button
						$(window).unbind('keydown.dw');
						$dialog.on('keydown.dw', fnHandleBtnKeyDown);

						if (oSettings.display == "bubble") {
							document.addEventListener(oDevice.support.touch ? "touchstart" : "mousedown", fnAutoCloseProxy, true);
						}
						if (oDevice.system.desktop) {
							// Amend keyboard navigation: see sap.m.Dialog.onfocusin for
							// an analogous procedure
							var $scrollerCont = $dialog.find('.dwcc'),
								$buttonBar = $dialog.find('.dwbc'),
								aFocusables = $scrollerCont.find(":focusable.dwww");

							$focusLeft.insertBefore($scrollerCont);
							fnFocusInLast = $.proxy(that._getFocusInHandler($buttonBar, false), that);
							$focusLeft.focusin(fnFocusInLast);

							$focusRight.insertAfter($buttonBar);
							fnFocusInFirst = $.proxy(that._getFocusInHandler($scrollerCont, true), that);
							$focusRight.focusin(fnFocusInFirst);

							// Make sure, the first scroller column has initial focus
							$.sap.focus($scrollerCont.firstFocusableDomRef());

							// Support other keyboard events as well, e.g. LEFT, RIGHT
							$dialogToClean = $dialog;
							fnKeyDown = $.proxy(that._getKeyDownHandler(aFocusables), that);
							$dialog.keydown(fnKeyDown);
						}
					},
					onClose : function() {
						// Special treatment for IE: with jQuery < 1.9 focus is fired twice in IE
						// Therefore, mobiscroll may open the scroller again, immediately after it
						// has been closed
						if (oDevice.browser.msie) {
							that._popupIsShown = false;
						}
						sap.m.InstanceManager.removeDialogInstance(that);
						$(window).off("resize.sapMDTICustom", fnHandleResize);
						if (oSettings.display == "bubble") {
							document.removeEventListener(oDevice.support.touch ? "touchstart" : "mousedown", fnAutoCloseProxy, true);
						}

						// clean up listeners
						$focusLeft.unbind('focusin', fnFocusInLast);
						$focusRight.unbind('focusin', fnFocusInFirst);
						if ($dialogToClean) {
							$dialogToClean.unbind('keydown', fnKeyDown);
							$dialogToClean.unbind('keydown.dw', fnHandleBtnKeyDown);
						}

						// set focus to input back
						if (!oDevice.support.touch) {
							setTimeout(function() {
								that._$input.is(":focusable") && that._$input.focus();
							}, 0);
						}
					},
					onMarkupReady : function($dialog, inst) {
						that._restrictMaxWidth($dialog);
						$dialog.addClass("sapMDTICustom" + that.getType());
						if (oSettings.headerText !== false) {
							$dialog.addClass("sapMDTICustomHdr");
						}

						// change button order for RTL
						if (sap.ui.getCore().getConfiguration().getRTL()) {
							var $buttonContainer = $dialog.find(".dwbc");
							var $cancelButton = $buttonContainer.find(".dwb-c");
							$cancelButton.prependTo($buttonContainer);
						}
					}
				});

			if (sType == "Date") {
				sFormat = this._convertDatePattern(sFormat);
				$.extend(oConfig, {
					timeWheels : "",
					dateFormat : sFormat,
					dateOrder : this._getLongDatePattern(sFormat.replace(/'.*?'/g, "")).replace(/[^ymd ]/ig, ""),
				});
			} else if (sType == "Time") {
				sFormat = this._convertTimePattern(sFormat);
				$.extend(oConfig, {
					dateOrder : "",
					timeFormat : sFormat,
					timeWheels : sFormat.replace(/'.*?'/g, "").replace(/[^hisa]/ig, "")
				});
			} else if (sType == "DateTime") {
				sFormat = this._convertDatePattern(this._convertTimePattern(sFormat));

				// date-time hack
				$.extend(oConfig, {
					dateFormat : sFormat,
					dateOrder : this._getLongDatePattern(sFormat.replace(/'.*?'/g, "")).replace(/[^ymd ]/ig, ""),
					rows : this._getRowForDateTime(),
					timeWheels : sFormat,
					timeFormat : "",
					separator : ""
				});
			}

			// check given format is not supported by mobiscroll
			if (/[^ymdhisa\W]/i.test(sFormat)) {
				this._reformat = true;
				if (oSettings.headerText !== false) {
					oConfig.headerText = $.proxy(this._setScrollerHeader, this);
				}
			} else {
				this._reformat = false;
			}

			return oConfig;
		},

		/**
		 * Until mobiscroll fixes min height(360px) problem for date time
		 * we just decrease the row count to 3
		 */
		_getRowForDateTime : function() {
			var rows = oSettings.rows || oDefaults.rows;
			if (!rows || rows <= 3) {
				return 3;
			}
			return Math.min(window.innerWidth, window.innerHeight) < 360 ? 3 : rows;
		},

		/**
		 * Returns a handler function to focus first or last focusable component
		 * within a given jQuery element to be used as a handler for
		 * the 'focusin' event.
		 *
		 * @param $parent the element whose children shall be focussed
		 * @param first if true return a function to focus the $parent's first
		 * focusable element, otherwise return a function to focus $parent's last
		 * focusable element.
		 */
		_getFocusInHandler : function($parent, first) {
			return function() {
				var oElementToFocus = first ? $parent.firstFocusableDomRef() : $parent.lastFocusableDomRef();
				$.sap.focus(oElementToFocus);
			};
		},

		/**
		 * Returns a handler function to deal with key events for keyboard
		 * navigation, that are not yet dealt with by the underlying mobiscroll
		 * dialog.
		 *
		 * @param aFocusables array of focusable elements within the mobiscroll dialog
		 */
		_getKeyDownHandler : function(aFocusables) {
			return function(oEvent){
				var iKeyCode = oEvent.which,
				bShift = oEvent.shiftKey,
				bAlt = oEvent.altKey,
				bCtrl = oEvent.ctrlKey;
				if (!bAlt && !bShift && !bCtrl) {
					// No modifiers pressed
					switch (iKeyCode) {
						// RIGHT
						case $.sap.KeyCodes.ARROW_RIGHT:
							// Moves focus one column right to the selected field, e.g. from Hours to Minutes.
							// When focus is on the last column, move focus to the first column.
							var current = aFocusables.index(document.activeElement),
							$next = aFocusables.eq(current+1).length ? aFocusables.eq(current+1) : aFocusables.eq(0);
							$next.focus();
							break;
						case $.sap.KeyCodes.ARROW_LEFT:
							// Moves focus one column left to the selected field, e.g. from Minutes to Hours.
							// When focus is on the first column, move focus to the last column.
							var current = aFocusables.index(document.activeElement),
							$previous = aFocusables.eq(current-1).length ? aFocusables.eq(current-1) : aFocusables.eq(aFocusables.length -1);
							$previous.focus();
							break;
						case $.sap.KeyCodes.HOME:
							// Moves focus to the first column of the same row and same month
							aFocusables[0].focus();
							break;
						case $.sap.KeyCodes.END:
							// Moves focus to the last column of the same row and same month
							aFocusables[aFocusables.length -1].focus();
							break;
						default:
							break;
					}
				} else if (bAlt && !bShift && !bCtrl) {
					// ALT pressed
					switch (iKeyCode) {
						case $.sap.KeyCodes.ARROW_UP:
							// Keeps the current state and closes the dialog. Same as clicking “OK”.
							this._$input.scroller("select");
							break;
						default:
							break;
					}
				}
			};
		},

		/**
		 * cache often used regular expressions
		 */
		_rgxYear : new RegExp("y+" + rgxExcludeLiteral, "ig"),
		_rgxMonth : new RegExp("m+" + rgxExcludeLiteral, "ig"),
		_rgxDay : new RegExp("d+" + rgxExcludeLiteral, "g"),
		_rgxMinute : new RegExp("m" + rgxExcludeLiteral, "g"),
		_rgxAmPm : new RegExp("a" + rgxExcludeLiteral, "g"),
		_rgxDayOfWeekLong : new RegExp("EEEE" + rgxExcludeLiteral, "g"),
		_rgxDayOfWeekShort : new RegExp("E+" + rgxExcludeLiteral, "g"),

		/**
		 * Convert date pattern to long month name, 4 digit year, 2 digit day
		 */
		_getLongDatePattern : function(sPattern) {
			sPattern = (sPattern || this.getDisplayFormat()).replace(this._rgxYear, "YY");
			return sPattern.replace(this._rgxMonth, "MM").replace(this._rgxDay, "dd");
		},

		/**
		 * Converts the time pattern from CLDR to the mobiscroll time picker
		 * m is short month name, i = minute
		 */
		_convertTimePattern : function(sPattern) {
			sPattern = sPattern || this.getDisplayFormat();
			return sPattern.replace(this._rgxMinute, "i").replace(this._rgxAmPm, "A");
		},

		/**
		 * Converts the date pattern from CLDR to the one of the jQuery datePicker
		 * Month is coded in the different way
		 * TODO: Copied from core talk with core team to call method from somewhere else shared
		 * TODO: This implementation ignores the literals usage case, talk also with core team
		 */
		_convertDatePattern : function(sPattern) {
			sPattern = sPattern || this.getDisplayFormat();

			var iIndex1 = sPattern.indexOf("M"),
				iIndex2 = sPattern.lastIndexOf("M"),
				sFormat = sPattern,
				sNewMonth;

			if (iIndex1 == -1) {
				// no month defined with M, maybe using L (standalone)
				iIndex1 = sPattern.indexOf("L");
				iIndex2 = sPattern.lastIndexOf("L");
			}

			if (iIndex1 > -1) {
				switch (iIndex2-iIndex1) {
				case 0:
					sNewMonth = "m";
					break;
				case 1:
					sNewMonth = "mm";
					break;
				case 2:
					sNewMonth = "M";
					break;
				case 5:
					// narrow state not available in jQuery DatePicker -> use shortest one
					sNewMonth = "m";
					break;
				default:
					sNewMonth = "MM";
				break;
				}
				sFormat = sPattern.substring(0, iIndex1) + sNewMonth + sPattern.substring(iIndex2 + 1);
			}

			var sNewYear;
			iIndex1 = sFormat.indexOf("y");
			if (iIndex1 > -1) {
				iIndex2 = sFormat.lastIndexOf("y");
				if (iIndex2-iIndex1 == 1) {
					// two chanrs
					sNewYear = "y";
				} else {
					sNewYear = "yy";
				}
				sFormat = sFormat.substring(0, iIndex1) + sNewYear + sFormat.substring(iIndex2 + 1);
			}

			var sNewYearDay;
			iIndex1 = sFormat.indexOf("D");
			if (iIndex1 > -1) {
				iIndex2 = sFormat.lastIndexOf("D");

				if (iIndex2-iIndex1 == 1) {
					// two chanrs
					sNewYearDay = "o";
				} else {
					sNewYearDay = "oo";
				}
				sFormat = sFormat.substring(0, iIndex1) + sNewYearDay + sFormat.substring(iIndex2 + 1);
			}

			// EEEE = DD = day of week(long)
			// EEE, EE, E = D = day of week(short)
			sFormat = sFormat.replace(this._rgxDayOfWeekLong, "DD").replace(this._rgxDayOfWeekShort, "D");
			return sFormat;
		}
	});

})(jQuery, sap.ui.Device);
}; // end of sap/m/DateTimeInput.js
if ( !jQuery.sap.isDeclared('sap.m.DisplayListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.DisplayListItem.
jQuery.sap.declare("sap.m.DisplayListItem");




/**
 * Constructor for a new DisplayListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValue value} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The display list item consists of a label and a value.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.DisplayListItem
 */
sap.m.ListItemBase.extend("sap.m.DisplayListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"label" : {type : "string", group : "Misc", defaultValue : null},
		"value" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.DisplayListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.DisplayListItem.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * List item label
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.m.DisplayListItem#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DisplayListItem#setLabel
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * List item value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.DisplayListItem#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DisplayListItem#setValue
 * @function
 */


// Start of sap\m\DisplayListItem.js
///**
// * This file defines behavior for the control,
// */
//sap.m.DisplayListItem.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/m/DisplayListItem.js
if ( !jQuery.sap.isDeclared('sap.m.FacetFilter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FacetFilter.
jQuery.sap.declare("sap.m.FacetFilter");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FacetFilter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShowPersonalization showPersonalization} : boolean (default: false)</li>
 * <li>{@link #getType type} : sap.m.FacetFilterType (default: sap.m.FacetFilterType.Simple)</li>
 * <li>{@link #getLiveSearch liveSearch} : boolean (default: true)</li>
 * <li>{@link #getShowSummaryBar showSummaryBar} : boolean (default: false)</li>
 * <li>{@link #getShowReset showReset} : boolean (default: true)</li>
 * <li>{@link #getShowPopoverOKButton showPopoverOKButton} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLists lists} <strong>(default aggregation)</strong> : sap.m.FacetFilterList[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.FacetFilter#event:reset reset} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * FacetFilter is used to provide filtering functionality with multiple parameters.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.FacetFilter
 */
sap.ui.core.Control.extend("sap.m.FacetFilter", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"openFilterDialog"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"showPersonalization" : {type : "boolean", group : "Appearance", defaultValue : false},
		"type" : {type : "sap.m.FacetFilterType", group : "Appearance", defaultValue : sap.m.FacetFilterType.Simple},
		"liveSearch" : {type : "boolean", group : "Behavior", defaultValue : true},
		"showSummaryBar" : {type : "boolean", group : "Behavior", defaultValue : false},
		"showReset" : {type : "boolean", group : "Behavior", defaultValue : true},
		"showPopoverOKButton" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	defaultAggregation : "lists",
	aggregations : {
    	"lists" : {type : "sap.m.FacetFilterList", multiple : true, singularName : "list"}, 
    	"buttons" : {type : "sap.m.Button", multiple : true, singularName : "button", visibility : "hidden"}, 
    	"removeFacetIcons" : {type : "sap.ui.core.Icon", multiple : true, singularName : "removeFacetIcon", visibility : "hidden"}, 
    	"popover" : {type : "sap.m.Popover", multiple : false, visibility : "hidden"}, 
    	"addFacetButton" : {type : "sap.m.Button", multiple : false, visibility : "hidden"}, 
    	"dialog" : {type : "sap.m.Dialog", multiple : false, visibility : "hidden"}, 
    	"summaryBar" : {type : "sap.m.Toolbar", multiple : false, visibility : "hidden"}, 
    	"resetButton" : {type : "sap.m.Button", multiple : false, visibility : "hidden"}, 
    	"arrowLeft" : {type : "sap.ui.core.Icon", multiple : false, visibility : "hidden"}, 
    	"arrowRight" : {type : "sap.ui.core.Icon", multiple : false, visibility : "hidden"}
	},
	events : {
		"reset" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.FacetFilter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FacetFilter.extend
 * @function
 */

sap.m.FacetFilter.M_EVENTS = {'reset':'reset'};


/**
 * Getter for property <code>visible</code>.
 * If true the FacetFilter will not be displayed.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.FacetFilter#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#setVisible
 * @function
 */


/**
 * Getter for property <code>showPersonalization</code>.
 * If true and the FacetFilter type is Simple, then the add facet icon will be displayed and each facet button will also have a facet remove icon displayed beside it allowing the user to deactivate the facet.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showPersonalization</code>
 * @public
 * @name sap.m.FacetFilter#getShowPersonalization
 * @function
 */

/**
 * Setter for property <code>showPersonalization</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowPersonalization  new value for property <code>showPersonalization</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#setShowPersonalization
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * This property defines the default appearance of the FacetFilter on the device.
 *
 * Default value is <code>Simple</code>
 *
 * @return {sap.m.FacetFilterType} the value of property <code>type</code>
 * @public
 * @name sap.m.FacetFilter#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Simple</code> 
 *
 * @param {sap.m.FacetFilterType} oType  new value for property <code>type</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#setType
 * @function
 */


/**
 * Getter for property <code>liveSearch</code>.
 * Enable/disable live search on all search fields except for the facet list search.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>liveSearch</code>
 * @public
 * @name sap.m.FacetFilter#getLiveSearch
 * @function
 */

/**
 * Setter for property <code>liveSearch</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bLiveSearch  new value for property <code>liveSearch</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#setLiveSearch
 * @function
 */


/**
 * Getter for property <code>showSummaryBar</code>.
 * Shows the summary bar instead of the facet filter buttons bar when set to true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showSummaryBar</code>
 * @public
 * @name sap.m.FacetFilter#getShowSummaryBar
 * @function
 */

/**
 * Setter for property <code>showSummaryBar</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowSummaryBar  new value for property <code>showSummaryBar</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#setShowSummaryBar
 * @function
 */


/**
 * Getter for property <code>showReset</code>.
 * Show or hide the filter reset button.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showReset</code>
 * @public
 * @name sap.m.FacetFilter#getShowReset
 * @function
 */

/**
 * Setter for property <code>showReset</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowReset  new value for property <code>showReset</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#setShowReset
 * @function
 */


/**
 * Getter for property <code>showPopoverOKButton</code>.
 * If true an "OK" button is shown for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside the popover.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showPopoverOKButton</code>
 * @public
 * @name sap.m.FacetFilter#getShowPopoverOKButton
 * @function
 */

/**
 * Setter for property <code>showPopoverOKButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowPopoverOKButton  new value for property <code>showPopoverOKButton</code>
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#setShowPopoverOKButton
 * @function
 */


/**
 * Getter for aggregation <code>lists</code>.<br/>
 * Collection of FacetFilterList controls.
 * 
 * <strong>Note</strong>: this is the default aggregation for FacetFilter.
 * @return {sap.m.FacetFilterList[]}
 * @public
 * @name sap.m.FacetFilter#getLists
 * @function
 */


/**
 * Inserts a list into the aggregation named <code>lists</code>.
 *
 * @param {sap.m.FacetFilterList}
 *          oList the list to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the list should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the list is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the list is inserted at 
 *             the last position        
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#insertList
 * @function
 */

/**
 * Adds some list <code>oList</code> 
 * to the aggregation named <code>lists</code>.
 *
 * @param {sap.m.FacetFilterList}
 *            oList the list to add; if empty, nothing is inserted
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#addList
 * @function
 */

/**
 * Removes an list from the aggregation named <code>lists</code>.
 *
 * @param {int | string | sap.m.FacetFilterList} vList the list to remove or its index or id
 * @return {sap.m.FacetFilterList} the removed list or null
 * @public
 * @name sap.m.FacetFilter#removeList
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>lists</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.FacetFilterList[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.FacetFilter#removeAllLists
 * @function
 */

/**
 * Checks for the provided <code>sap.m.FacetFilterList</code> in the aggregation named <code>lists</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.FacetFilterList}
 *            oList the list whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.FacetFilter#indexOfList
 * @function
 */
	

/**
 * Destroys all the lists in the aggregation 
 * named <code>lists</code>.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#destroyLists
 * @function
 */


/**
 * Fired when the reset button is pressed to inform that all facet filter lists need to be reset. 
 *
 * @name sap.m.FacetFilter#reset
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'reset' event of this <code>sap.m.FacetFilter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FacetFilter</code>.<br/> itself. 
 *  
 * Fired when the reset button is pressed to inform that all facet filter lists need to be reset. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilter</code>.<br/> itself.
 *
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#attachReset
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'reset' event of this <code>sap.m.FacetFilter</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilter#detachReset
 * @function
 */

/**
 * Fire event reset to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FacetFilter} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.FacetFilter#fireReset
 * @function
 */


/**
 * Opens the facet filter dialog.
 *
 * @name sap.m.FacetFilter.prototype.openFilterDialog
 * @function

 * @type void
 * @public
 */


// Start of sap\m\FacetFilter.js
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained




// How many pixels to scroll with every overflow arrow click
sap.m.FacetFilter.SCROLL_STEP = 264;

sap.m.FacetFilter.prototype.setType = function(oType) {

	var oSummaryBar = this.getAggregation("summaryBar");

	// Force light type if running on a phone
	if (sap.ui.Device.system.phone) {
		this.setProperty("type", sap.m.FacetFilterType.Light);
		oSummaryBar.setActive(true);
	} else {
		this.setProperty("type", oType);
		oSummaryBar.setActive(oType === sap.m.FacetFilterType.Light);
	}
	
	if(oType === sap.m.FacetFilterType.Light) {
		
		if(this.getShowReset()) {
			
			this._addResetToSummary(oSummaryBar);			
		} else {

			this._removeResetFromSummary(oSummaryBar);
		}
	}
};

sap.m.FacetFilter.prototype.setShowReset = function(bVal) {
	
	this.setProperty("showReset", bVal);
	var oSummaryBar = this.getAggregation("summaryBar");
	
	if(bVal) {

		if(this.getShowSummaryBar() || this.getType() === sap.m.FacetFilterType.Light) {
			
			this._addResetToSummary(oSummaryBar);
		}
	} else {
		
		if(this.getShowSummaryBar() || this.getType() === sap.m.FacetFilterType.Light) {
			
			this._removeResetFromSummary(oSummaryBar);
		}
	}
};


sap.m.FacetFilter.prototype.setShowSummaryBar = function(bVal) {
	
	this.setProperty("showSummaryBar", bVal);
	
	if(bVal) {
		
		var oSummaryBar = this.getAggregation("summaryBar");	
		
		if(this.getShowReset()) {
			
			this._addResetToSummary(oSummaryBar);
		} else {
			
			this._removeResetFromSummary(oSummaryBar);
		}		
		oSummaryBar.setActive(this.getType() === sap.m.FacetFilterType.Light);
	}	
};


sap.m.FacetFilter.prototype.setLiveSearch = function(bVal) {
	
	// Allow app to change live search while the search field is displayed.
	
	this.setProperty("liveSearch", bVal);
	
	if(this._displayedList) {

		var oList = this._displayedList;
		var oSearchField = sap.ui.getCore().byId(oList.getAssociation("search"));
		
		// Always detach the handler at first regardless of bVal, otherwise multiple calls of this method will add
		// a separate change handler to the search field.
		oSearchField.detachLiveChange(oList._handleSearchEvent, oList);
		if (bVal) {
			oSearchField.attachLiveChange(oList._handleSearchEvent, oList);
		}				
	}
	return this;
};

sap.m.FacetFilter.prototype.getLists = function() {
	
	// Override to make sure we also return a list if it it is currently displayed
	// in a display container (like the Popover or Dialog). When a list is displayed it is removed from the lists aggregation
	// and placed into the display container, so it will no longer be part of the lists aggregation.
	var aLists = this.getAggregation("lists");
	if(!aLists) {
		aLists = [];
	}
	if(this._displayedList) {
		aLists.splice(this._listAggrIndex, 0, this._displayedList);
	}
	return aLists;
};


sap.m.FacetFilter.prototype.removeList = function(vObject) {
	
		var oList = sap.ui.base.ManagedObject.prototype.removeAggregation.call(this, "lists", vObject);
		this._removeList(oList);
		return oList;
};

sap.m.FacetFilter.prototype.removeAggregation = function() {
	
	var oList = sap.ui.base.ManagedObject.prototype.removeAggregation.apply(this, arguments);
	if(arguments[0] === "lists") {
		this._removeList(oList);	
	}
	return oList;	
};


// API doc provided in the meta-data
sap.m.FacetFilter.prototype.openFilterDialog = function() {

	var oDialog = this._getFacetDialog();
	var oNavContainer = this._getFacetDialogNavContainer();
	oDialog.addContent(oNavContainer);
	oDialog.open();
	return this;
};

/**
 * Gets the css width of the facet filter. (not the effective width). Even though there is no
 * width property defined for the FacetFilter, this method is needed for proper display in the ToolBar. 
 * 
 * @returns {string} the width as a string
 * @protected
 */
sap.m.FacetFilter.prototype.getWidth = function() {
	return "100%";
};


/**
 * @private
 */
sap.m.FacetFilter.prototype.init = function() {

	this._bundle = sap.ui.getCore().getLibraryResourceBundle("sap.m");
	
	// Button map used to quickly get a button for a given list. This avoids having to iterate through the button aggregation
	// to find a button for a list.
	this._buttons = {}; 
	
	// Remove icon map used to quickly get the remove icon for a given list. This avoids having to iterate through the removeIcon aggregation
	// to find an icon for a list.
	this._removeFacetIcons = {}; 
	
	// The index of a list in the "lists" aggregation, used to restore the list back to the aggregation when it is no longer displayed
	this._listAggrIndex = -1;
	
	// Reference to the currently displayed FacetFilterList. This is set after the list is moved from the lists aggregation
	// to the display container.
	this._displayedList = null; 
	
	// Last state of scrolling - using during rendering
	this._lastScrolling = false;
	
	// Remember the facet button overflow state
	this._bPreviousScrollForward = false; 
	this._bPreviousScrollBack = false;	

	this._getAddFacetButton();
	this._getSummaryBar();
	
	// This is the reset button shown for Simple type (not the same as the button created for the summary bar)
	this.setAggregation("resetButton", this._createResetButton()); 
	
	// Enable touch support for the carousel
	if (jQuery.sap.touchEventMode === "ON" && !sap.ui.Device.system.phone) {
		this._enableTouchSupport();
	}	
	
	if (sap.ui.Device.system.phone) {
		this.setType(sap.m.FacetFilterType.Light);
	}	
};

/**
 * @private
 */
sap.m.FacetFilter.prototype.exit = function() {

	sap.ui.getCore().detachIntervalTimer(this._checkOverflow, this);
};

/**
 * @private
 */
sap.m.FacetFilter.prototype.onBeforeRendering = function() {
	
	if(this.getShowSummaryBar() || this.getType() === sap.m.FacetFilterType.Light) {
		
		var oSummaryBar = this.getAggregation("summaryBar");
		var oText = oSummaryBar.getContent()[0];
		oText.setText(this._getSummaryText());
	}
	
	// Detach the interval timer attached in onAfterRendering
	sap.ui.getCore().detachIntervalTimer(this._checkOverflow, this);	
};

/**
 * Attach a interval timer that periodically checks overflow of the "head" div in the event that the window is resized or the device orientation is changed. This is ultimately to
 * see if carousel arrows should be displayed.
 * 
 * @private
 */
sap.m.FacetFilter.prototype.onAfterRendering = function() {

	if (!sap.ui.Device.system.phone) {
		
		sap.ui.getCore().attachIntervalTimer(this._checkOverflow, this); // proxy() is needed for the additional parameters, not for "this"
	}
};

/**
 * Get the facet popover displayed when the user presses the facet button (Simple type only). The popover is created if it does not exist
 * and is available via the "popover" aggregation. This aggregation is destroyed when the popover is closed.
 * 
 * @returns {sap.m.Popover} Multiple calls return the same popover instance.
 * @private
 */
sap.m.FacetFilter.prototype._getPopover = function() {
	
	var oPopover = this.getAggregation("popover");
	if(!oPopover) {
		
		var that = this;
		
		// Popover allowing the user to view, select, and search filter items	
		oPopover = new sap.m.Popover({ 

			placement: sap.m.PlacementType.Bottom,
			beforeOpen: function(oEvent) {
				
				this.setCustomHeader(that._createFilterItemsSearchFieldBar(that._displayedList));
				var subHeaderBar = this.getSubHeader();
				if (!subHeaderBar) {
					this.setSubHeader(that._createSelectAllCheckboxBar(that._displayedList));
				}
			},
			afterClose: function(oEvent) {
				
				var oList = that._restoreListFromDisplayContainer(this);
				
				// The facet button will not be removed when the remove icon is pressed if we don't delay hiding the icon in ie 9.
				//
				// CSS 0120061532 0004101226 2013 "sap.m.FacetFilterList - getActive inconsistent result"
				// Moved "fireListCloseEvent" into the setTimeout function for IE9
				//
				// TODO: Remove when ie 9 is no longer supported
				if (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10) {
					jQuery.sap.delayedCall(100, that, that._handlePopoverAfterClose, [oList]);
				} else {
					that._handlePopoverAfterClose(oList);
				}
			},
			horizontalScrolling: false
		});
		
		// Suppress invalidate so that FacetFilter is not rerendered when the popover is opened (causing it to immediately close)
		this.setAggregation("popover", oPopover, true);
		
		// Set the minimum width of the popover to insure that it is not too small to display it's content properly.
		// This is not the same as setting Popover.contentWidth, which sets a fixed width size. We want the popover
		// to grow in width if any of its content is wider than the min width.
		oPopover.addStyleClass("sapMFFPop");		
	}
	
	if(this.getShowPopoverOKButton()) {
		
			this._addOKButtonToPopover(oPopover);	
	} else {
		oPopover.destroyAggregation("footer");
	}		
	
	return oPopover;
};

/**
 * 
 * @private
 */
sap.m.FacetFilter.prototype._handlePopoverAfterClose = function(oList) {
	this._displayRemoveIcon(false, oList);
	oList._fireListCloseEvent();
	// Destroy the popover aggregation, otherwise if the list is then moved to the dialog filter items page, it will still think it's DOM element parent
	// is the popover causing facet filter item checkbox selection to not display the check mark when the item is selected.
	this.destroyAggregation("popover");
	if(this._oOpenPopoverDeferred) {
		jQuery.sap.delayedCall(0, this, function () {
			this._oOpenPopoverDeferred.resolve();
			this._oOpenPopoverDeferred = undefined;
		});
	}
};

/**
 * 
 * @param oPopover
 * @param oControl The control the popover will be opened "by"
 */
sap.m.FacetFilter.prototype._openPopover = function(oPopover, oControl) {
	
	// Don't open if already open, otherwise the popover will display empty.	
	if (!oPopover.isOpen()) {
		
		var oList = sap.ui.getCore().byId(oControl.getAssociation("list"));
		jQuery.sap.assert(oList, "The facet filter button should be associated with a list.");
		
		this._moveListToDisplayContainer(oList, oPopover);
						
		oList.fireListOpen({});
		oPopover.openBy(oControl);
		this._displayRemoveIcon(true, oList);
		oList._applySearch();
	}			
	return this;
};

/**
 * 
 * @returns {sap.m.Button}
 * @private
 */
sap.m.FacetFilter.prototype._getAddFacetButton = function() {
	
	var oButton = this.getAggregation("addFacetButton");
	if(!oButton) {
		var that = this;
		
		var oButton = new sap.m.Button(this.getId() + "-add", {
			
			icon: sap.ui.core.IconPool.getIconURI("add-filter"),
			type: sap.m.ButtonType.Transparent,
			press: function(oEvent) {

				that.openFilterDialog();
			}			
		});
		this.setAggregation("addFacetButton", oButton, true);			
	}
	return oButton;
};

/**
 * Get the facet button for the given list (it is created if it does not yet exist). The button text is set with the given list's title.
 * 
 * @param oList The list displayed when the button is pressed
 * @returns {sap.m.Button}
 * @private
 */
sap.m.FacetFilter.prototype._getButtonForList = function(oList) {

	
	if (this._buttons[oList.getId()]) {
		
		this._setButtonText(oList);
		return this._buttons[oList.getId()];
	}

	var that = this;
	var oButton = new sap.m.Button({
	
		type : sap.m.ButtonType.Transparent,
		press : function(oEvent) {
			var oThisButton = this;
			var fnOpenPopover = function() {
				var oPopover = that._getPopover();
				that._openPopover(oPopover, oThisButton);
			};
			
			// TODO: Remove when ie 9 is no longer supported
			if (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10) {
				// Opening popover is delayed so it is called after the previous popover is closed
				jQuery.sap.delayedCall(100, this, fnOpenPopover);
			} else {				
				var oPopover = that._getPopover();
				if (oPopover.isOpen()){
					// create a deferred that will be triggered after the popover is closed
					that._oOpenPopoverDeferred = jQuery.Deferred();
					that._oOpenPopoverDeferred.promise().done(fnOpenPopover);
				} else {
					that._openPopover(oPopover, this);
				}
			}
		}
	});
	
	this._buttons[oList.getId()] = oButton;
	this.addAggregation("buttons", oButton); // Insures that the button text is updated if FacetFilterList.setTitle() is called
	oButton.setAssociation("list", oList.getId(), true);
	this._setButtonText(oList);
	return oButton;
};

/**
 * Update the facet button text based on selections in the given list.
 * 
 * @param oList 
 * @private
 */
sap.m.FacetFilter.prototype._setButtonText = function(oList) {

	var oButton = this._buttons[oList.getId()];
	if(oButton) { // Button may not be created yet if FFL.setTitle() is called before the button is rendered the first time
		
		var sText = "";
		var aSelectedKeyNames = Object.getOwnPropertyNames(oList._oSelectedKeys);
		var iLength = aSelectedKeyNames.length;

		if (iLength > 0) {

			if (iLength === 1) { // Use selected item value for button label if only one selected
				var sSelectedItemText = oList._oSelectedKeys[aSelectedKeyNames[0]];
				sText = this._bundle.getText("FACETFILTER_ITEM_SELECTION", [ oList.getTitle(), sSelectedItemText ]);
			} else {
				sText = this._bundle.getText("FACETFILTER_ITEM_SELECTION", [ oList.getTitle(), iLength ]);
			}
		} else {
			sText = this._bundle.getText("FACETFILTER_ALL_SELECTED", [ oList.getTitle() ]);
		}
		
		oButton.setText(sText);
	}	
};

/**
 * Get the facet list remove icon for the given list (it is created if it does not yet exist). The icon is associated with the list id, which is why we only
 * need to pass the list to retrieve the icon once it has been created.
 * 
 * @private
 */
sap.m.FacetFilter.prototype._getFacetRemoveIcon = function(oList) {

	var oIcon = this._removeFacetIcons[oList.getId()];
	if(!oIcon) {
		oIcon = new sap.ui.core.Icon({

			src : sap.ui.core.IconPool.getIconURI("sys-cancel"),
			press : function(oEvent) {
				var oList = sap.ui.getCore().byId(this.getAssociation("list"));
				oList.removeSelections(true);
				oList.setSelectedKeys();
				oList.setProperty("active", false, true);
			}
		});

		oIcon.setAssociation("list", oList.getId(), true);
		oIcon.addStyleClass("sapMFFLRemoveIcon");
		this._removeFacetIcons[oList.getId()] = oIcon;
		this.addAggregation("removeFacetIcons", oIcon);
		this._displayRemoveIcon(false, oList);		
	}
	return oIcon;
};

/**
 * Show or hide the facet list remove icon for the given list.
 * 
 * @param bDisplay
 * @param oList
 * @private
 */
sap.m.FacetFilter.prototype._displayRemoveIcon = function(bDisplay, oList) {

	if(this.getShowPersonalization()) {
		var oIcon = this._removeFacetIcons[oList.getId()];
		if (bDisplay) {

			oIcon.removeStyleClass("sapMFFLHiddenRemoveIcon");
			oIcon.addStyleClass("sapMFFLVisibleRemoveIcon");
		} else {

			oIcon.removeStyleClass("sapMFFLVisibleRemoveIcon");
			oIcon.addStyleClass("sapMFFLHiddenRemoveIcon");
		}
	}
};


/**
 * Create the navigation container displayed in the facet dialog. The container is created with an initial page for
 * the list of facets and a second page for displaying a list of items associated with the facet selected on the initial page.
 * 
 * @private
 */
sap.m.FacetFilter.prototype._getFacetDialogNavContainer = function() {
	
	var oNavContainer = new sap.m.NavContainer();
	var oFacetPage = this._createFacetPage();	
	oNavContainer.addPage(oFacetPage);	
	oNavContainer.setInitialPage(oFacetPage);
	
	var that = this;
	oNavContainer.attachAfterNavigate(function(oEvent) {
		
		// Clean up transient filter items page controls. This must be done here instead of navFromFacetFilterList
		// so that controls are not removed before the transition to the facet page is completed.  Otherwise you notice
		// a slight visual change in the filter items page just prior to navigation.
		var oToPage = oEvent.getParameters()["to"];
		var oFromPage = oEvent.getParameters()['from'];
		if (oToPage === oFacetPage) {
			// Destroy the search field bar
			oFromPage.destroySubHeader();
			
			jQuery.sap.assert(that._displayedList === null, "Filter items list should have been placed back in the FacetFilter aggregation before page content is destroyed.");
			oFromPage.destroyContent(); // Destroy the select all checkbox bar	
			
			// TODO: Find out why the counter is not updated without forcing rendering of the facet list item
			// App may have set a new allCount from a listClose event handler, so we need to update the counter on the facet list item.
			that._selectedFacetItem.invalidate();
			that._selectedFacetItem = null;
		}		
	});
	
	return oNavContainer;
};

/**
 * Create a page that contains a list of facets and a search field for searching facets. Each facet represents one
 * FacetFilterList.
 * 
 * @returns {sap.m.Page}
 * @private
 */
sap.m.FacetFilter.prototype._createFacetPage = function() {
	
	var oFacetList = this._createFacetList();
	var oFacetsSearchField = new sap.m.SearchField({
		width : "100%",
		liveChange : function(oEvent) {

			var binding = oFacetList.getBinding("items");
			if (binding) {
				var filter = new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, oEvent.getParameters()["newValue"]);
				binding.filter([ filter ]);
			}
		}
	});	
	
	var oPage = new sap.m.Page({
		enableScrolling : true,
		title : this._bundle.getText("FACETFILTER_TITLE"),
		subHeader : new sap.m.Bar({
			contentMiddle : oFacetsSearchField
		}),
		content : [  oFacetList ]
	});		
	return oPage;
};

/**
 * Create a page that contains a FacetFilterList and a search field for searching items.
 * 
 * @returns {sap.m.Page}
 * @private
 */
sap.m.FacetFilter.prototype._createFilterItemsPage = function() {
	
	var that = this;
	var oPage = new sap.m.Page({
		showNavButton : true,
		enableScrolling : true,
		navButtonPress : function(oEvent) {

			var oNavContainer = oEvent.getSource().getParent();
			that._navFromFilterItemsPage(oNavContainer);
		}
	});	
	return oPage;
};

/**
 * Create a new page that contains a FacetFilterList and a search field for searching items.
 * Old page is destroyed.
 * 
 * @returns {sap.m.Page}
 * @private
 */
sap.m.FacetFilter.prototype._getFilterItemsPage = function(oNavCont) {

	var oOldPage = oNavCont.getPages()[1];
	if (oOldPage){
		oNavCont.removePage(oOldPage);
		oOldPage.destroy();
	}
	
	var oPage = this._createFilterItemsPage();
	oNavCont.addPage(oPage);
	
	return oPage;
};

/**
 * @private
 */
sap.m.FacetFilter.prototype._createFilterItemsSearchFieldBar = function(oList) {
	
	var that = this;
	var oSearchField = new sap.m.SearchField({
		value: oList._getSearchValue(), // Seed search field with previous search value for the list
		width : "100%",
		search : function(oEvent) {

			that._displayedList._handleSearchEvent(oEvent);
		}
	});	
	
	if (this.getLiveSearch()) {
		oSearchField.attachLiveChange(oList._handleSearchEvent, oList);
	}	
	
	var oBar = new sap.m.Bar( {
		contentMiddle: oSearchField
	});	
	
	oList.setAssociation("search", oSearchField);
	
	return oBar;
};

/**
 * Get the facet dialog. The dialog is created if it doesn't exist.  The dialog contains a NavContainer having two Pages. The first
 * page contains a list of facets. Navigation proceeds to a second page containing facet filter items for the selected facet.
 * 
 * @private
 */
sap.m.FacetFilter.prototype._getFacetDialog = function() {
	
	var oDialog = this.getAggregation("dialog");
	if(!oDialog) {
		
		var that = this;
		oDialog = new sap.m.Dialog({
			showHeader : false,
			stretch: sap.ui.Device.system.phone ? true : false,
			afterClose : function() {

				// Make sure we restore the FacetFilterList back to the lists aggregation and update its active state
				// if the user dismisses the dialog while on the filter items page.
				var oNavContainer = this.getContent()[0];
				var oFilterItemsPage = oNavContainer.getPages()[1];
				if(oNavContainer.getCurrentPage() === oFilterItemsPage) {
				
					var oList = that._restoreListFromDisplayContainer(oFilterItemsPage);
					oList._updateActiveState();
					oList._fireListCloseEvent();
				}
				
				// Destroy the nav container and all it contains so that the dialog content is initialized new each
				// time it is opened.  This avoids the need to navigate back to the top page if the user previously dismissed
				// the dialog while on the filter items page.
				this.destroyAggregation("content", true);
				
				// Update button or summary bar text with latest selections
				that.invalidate();
			},
			beginButton : new sap.m.Button({
				text : this._bundle.getText("FACETFILTER_ACCEPT"),
				press : function() {

					that._closeDialog();
				}
			}),
			// limit the dialog height on desktop and tablet in case there are many filter items (don't
			// want the dialog height growing according to the number of filter items)
			contentHeight : "500px"
		});

		oDialog.addStyleClass("sapMFFDialog");	
		this.setAggregation("dialog", oDialog, true);				
	}
	return oDialog;
};

/**
 * Close the facet dialog.
 * @private
 */
sap.m.FacetFilter.prototype._closeDialog = function() {

	var oDialog = this.getAggregation("dialog");
	
	if(oDialog && oDialog.isOpen()) {
		oDialog.close();	
	}
};

/**
 * Close the facet popover.  This is used only for unit testing to verify destroy of popover contents.
 * @private
 */
sap.m.FacetFilter.prototype._closePopover = function() {

	var oPopover = this.getAggregation("popover");
	if(oPopover && oPopover.isOpen()) {
		oPopover.close();
	}
};


/**
 * Create the list of facets presented on the facets page in the dialog.
 * 
 * @returns {sap.m.List} A list populated with items, each displaying a title (from the FacetFilterList title) and a counter (from the FacetFilterList allCount)
 * @private
 */
sap.m.FacetFilter.prototype._createFacetList = function() {
	
	var oFacetList =  new sap.m.List({
		mode: sap.m.ListMode.None,
		items: {
			path: "/items",
			template: new sap.m.StandardListItem({
				title: "{text}",
				counter: "{count}",
				type: sap.m.ListType.Navigation,
				customData : [ new sap.ui.core.CustomData({
					key : "index",
					value : "{index}"
				}) ]				
			})
		}
	});	
	
	// Create the facet list from a model binding so that we can implement facet list search using a filter.
	var aFacetFilterLists = [];
	for ( var i = 0; i < this.getLists().length; i++) {
		var oList = this.getLists()[i];

		aFacetFilterLists.push({
			text: oList.getTitle(),
			count: oList.getAllCount(),
			index : i
		});
	}

	var oModel = new sap.ui.model.json.JSONModel({
		items: aFacetFilterLists
	});
	
	// Set up FacetFilterList press handler on each list item
	// every time they are created (such as after facet list filtering).
	var that = this;
	oFacetList.attachUpdateFinished(function() {		
		
		for(var i=0; i < oFacetList.getItems().length; i++) {
			
			var oFacetListItem = this.getItems()[i];
			oFacetListItem.detachPress(that._handleFacetListItemPress, that);
			oFacetListItem.attachPress(that._handleFacetListItemPress, that);
		}		
	});
	
	oFacetList.setModel(oModel);
	return oFacetList;
};

/**
 * Create a bar containing a "select all" checkbox for the given list. The "checkbox" association is created
 * from the list to the checkbox so that the checkbox selected state can be updated
 * by the list when selection changes.
 * 
 * @param oList
 * @returns {sap.m.Bar} Bar, or null if the given list is not multi-select
 * @private
 */
sap.m.FacetFilter.prototype._createSelectAllCheckboxBar = function(oList) {
	
		if(!oList.getMultiSelect()) {
			return null;
		}
		
		var oCheckbox = new sap.m.CheckBox(oList.getId() + "-selectAll", {
			text : this._bundle.getText("FACETFILTER_CHECKBOX_ALL"),
			selected: oList.getActive() && !oList.getSelectedItem() && !Object.getOwnPropertyNames(oList._oSelectedKeys).length, 
			select : function(oEvent) {
				
				fnHandleCheckboxSelection(!oEvent.getParameter("selected"));
			}
		});
		
		// We need to get the checkbox from the list when selection changes so that we can set the state of the
		// checkbox.  See the selection change handler on FacetFilterList.
		oList.setAssociation("allcheckbox", oCheckbox);
		
		var oBar = new sap.m.Bar();
		
		// Bar does not support the tap event, so create a delegate to handle tap and set the state of the select all checkbox.
		oBar.addEventDelegate({
			ontap: function(oEvent) {
				
				if(oEvent.srcControl === this) {
					
					fnHandleCheckboxSelection(oCheckbox.getSelected());
				}				
			}
		}, oBar); 
		oBar.addContentLeft(oCheckbox);
		
		var fnHandleCheckboxSelection = function(bSelected) {
			
			if(oList.getActive()) {
				
				oCheckbox.setSelected(true);
		
			} else {
				
				oCheckbox.setSelected(!bSelected);
			}		
			if(oCheckbox.getSelected()) {
				oList.removeSelections(true);
				oList.setSelectedKeys();
			}			
		};
		oBar.addStyleClass("sapMFFCheckbar");
	return oBar;	
};


/**
 * Navigate to the appropriate filter items page when a facet list item is pressed in the facet page.
 * 
 * @param oEvent
 * @private
 */
sap.m.FacetFilter.prototype._handleFacetListItemPress = function(oEvent) {
	
	this._navToFilterItemsPage(oEvent.getSource());
};

/**
 * Navigate to the facet filter items page associated with the given facet list item. The listOpen event is fired prior to navigation.
 * 
 * @param oFacetListItem The facet item selected on the dialog facet page
 * @private
 */
sap.m.FacetFilter.prototype._navToFilterItemsPage = function(oFacetListItem) {
	
	       this._selectedFacetItem = oFacetListItem;
       
       var oNavCont = this.getAggregation("dialog").getContent()[0];
       var oCustomData = oFacetListItem.getCustomData();
       jQuery.sap.assert(oCustomData.length === 1, "There should be exactly one custom data for the original facet list item index");
       var iIndex = oCustomData[0].getValue();  
       var oFacetFilterList = this.getLists()[iIndex];
       
       this._listIndexAgg = this.indexOfAggregation("lists", oFacetFilterList);

       if (this._listIndexAgg == iIndex)
       {

       
       var oFilterItemsPage = this._getFilterItemsPage(oNavCont);
       
       // This page instance is used to display content for every facet filter list, so remove any prior content, if any. 
       //oFilterItemsPage.destroyAggregation("content", true);
       
       // Add the facet filter list
       this._moveListToDisplayContainer(oFacetFilterList, oFilterItemsPage);
       
       // Add the search field bar. The bar is destroyed from NavContainer.afterNavigate.
       oFilterItemsPage.setSubHeader(this._createFilterItemsSearchFieldBar(oFacetFilterList));
              
       // Add the select all checkbox bar if the list being displayed on the filter items page
       // is a multi select list. The bar is created only if the list is multi select.
       // The bar is destroyed from NavContainer.afterNavigate.
       var oCheckboxBar = this._createSelectAllCheckboxBar(oFacetFilterList);
       if(oCheckboxBar) {
              oFilterItemsPage.insertContent(oCheckboxBar, 0);       
       }

       oFilterItemsPage.setTitle(oFacetFilterList.getTitle());
       
       oFacetFilterList.fireListOpen({});
       oNavCont.to(oFilterItemsPage);
       
       };

};

/**
 * 
 * @param oNavContainer
 * @private
 */
sap.m.FacetFilter.prototype._navFromFilterItemsPage = function(oNavContainer) {
	
	var oFilterItemsPage = oNavContainer.getPages()[1];
	var oList = this._restoreListFromDisplayContainer(oFilterItemsPage);
	
	oList._updateActiveState();
	oList._fireListCloseEvent();
	this._selectedFacetItem.setCounter(oList.getAllCount());
	oNavContainer.backToTop();	
};

/**
 * 
 * @param oList
 * @param oContainer
 * @private
 */
sap.m.FacetFilter.prototype._moveListToDisplayContainer = function(oList, oContainer) {
	
	this._listAggrIndex = this.indexOfAggregation("lists", oList);
	jQuery.sap.assert(this._listAggrIndex > -1, "The lists index should be valid.");		
	// Suppress invalidate when removing the list from the FacetFilter since this will cause the Popover to close
	sap.ui.base.ManagedObject.prototype.removeAggregation.call(this, "lists", oList, true);
	oContainer.addAggregation("content", oList, false);
	
	// Make the FacetFilter available from the list even after it is moved. This is actually no longer
	// needed, however we keep it for compatibility.
	oList.setAssociation("facetFilter", this, true); 
	this._displayedList = oList;
};

/**
 * 	Restore the displayed list back to its original location within the "lists" aggregation
 * @param oContainer
 * @returns The restored list.
 * @private
 */
sap.m.FacetFilter.prototype._restoreListFromDisplayContainer = function(oContainer) {
		
	var oList = oContainer.removeAggregation("content", this._displayedList, true);
	
	//About invalidation on insert: Make sure we rerender if the list has been set inactive so that it is removed from the screen
	this.insertAggregation("lists", oList, this._listAggrIndex, oList.getActive());
	
	this._listAggrIndex = -1;	
	this._displayedList = null;
	return oList;
};

/**
 * Returns an array in ascending according to the sequence value of each FacetFilterList. If
 * a list has sequence <= -1 then its sequence is reset to its index in the "lists" aggregation.
 * 
 * @returns Sorted list of FacetFilterLists.
 * @private
 */
sap.m.FacetFilter.prototype._getSequencedLists = function() {

	var iMaxSequence = -1;
	var aSequencedLists = [];
	var aLists = this.getLists();

	if (aLists.length > 0) {
		for ( var i=0; i < aLists.length; i++) {
			if (aLists[i].getActive()) {
				
				// Make sure we reset sequences that are less than -1 so that they are rendered
				// after lists that have non-negative sequences
				if (aLists[i].getSequence() < -1) {
					aLists[i].setSequence(-1);
				}	
				else if (aLists[i].getSequence() > iMaxSequence) {
					iMaxSequence = aLists[i].getSequence();
				}
				aSequencedLists.push(aLists[i]);
			} else {
				aLists[i].setSequence(-1); // Reset the sequence if the list is inactive so that if it is made active again it is placed at the end
			}
		}
		
		// Every list whose sequence is unspecified should be moved to the end
		for ( var j=0; j < aSequencedLists.length; j++) {
			if (aSequencedLists[j].getSequence() <= -1) {
				iMaxSequence += 1;
				aSequencedLists[j].setSequence(iMaxSequence);
			}
		}		
		
		if (aSequencedLists.length > 1) {
			
			// Sort compares items moving from least to greatest index
			aSequencedLists.sort(function(item1, item2){
					return item1.getSequence() - item2.getSequence();
				});
		}		
	}
	return aSequencedLists;
};


/**
 * @private
 */
sap.m.FacetFilter.prototype._getSummaryBar = function() {
	
	var oSummaryBar = this.getAggregation("summaryBar");
	if(!oSummaryBar) {

		var oText = new sap.m.Text({
			maxLines : 1
		});

		var that = this;
		oSummaryBar = new sap.m.Toolbar({
			content : [ oText ], // Text is set before rendering
			active : this.getType() === sap.m.FacetFilterType.Light ? true : false,
			design : sap.m.ToolbarDesign.Info,
			height: "auto",
			press : function(oEvent) {
				
					that.openFilterDialog();					
			}
		});	
		
		this.setAggregation("summaryBar", oSummaryBar);		
	}
	return oSummaryBar;
};

/**
 * 
 * @returns {sap.m.Button}
 * @private
 */
sap.m.FacetFilter.prototype._createResetButton = function() { 

	var that = this;
	var oButton = new sap.m.Button({
		type: sap.m.ButtonType.Transparent,
		icon : sap.ui.core.IconPool.getIconURI("undo"),
		press : function(oEvent) {

			that.fireReset();			
			
			// Make sure we update selection texts
			that.invalidate();
		}
	});
	return oButton;
};

/**
 * Create an OK button to dismiss the given popover.
 * @param oPopover
 */
sap.m.FacetFilter.prototype._addOKButtonToPopover = function(oPopover) {

	var oButton = oPopover.getFooter();
	if(!oButton) {
		
		var that = this;
		var oButton = new sap.m.Button({
			text : this._bundle.getText("FACETFILTER_ACCEPT"),
			width : "100%",
			press : function() {

				that._closePopover();
			}
		});
		oPopover.setFooter(oButton);
	}	
	return oButton;
};

/**
 * Returns the localized text about selected filters to display on the summary bar.
 * 
 * @private
 */
sap.m.FacetFilter.prototype._getSummaryText = function() {

  var COMMA_AND_SPACE = ", ";
  var SPACE = " ";
  var sFinalSummaryText = "";
  var bFirst = true;

  var aListOfFilters = this.getLists();

	  if (aListOfFilters.length > 0) {

		for (var i = 0; i < aListOfFilters.length; i++) {
			var oFacet = aListOfFilters[i];

			if (oFacet.getActive()) {
				var aListOfItems = this._getSelectedItemsText(oFacet);
				var sText = "";
				for (var j = 0; j < aListOfItems.length; j++) {
					sText = sText + aListOfItems[j] + COMMA_AND_SPACE;
				}

				if (sText) {
					sText = sText.substring(0, sText.lastIndexOf(COMMA_AND_SPACE)).trim();

					if (bFirst) {
						sFinalSummaryText = this._bundle.getText("FACETFILTER_INFOBAR_FILTERED_BY", [oFacet.getTitle(), sText]);
						bFirst = false;
					} else {
						sFinalSummaryText = sFinalSummaryText + SPACE + this._bundle.getText("FACETFILTER_INFOBAR_AND") + SPACE
								+ this._bundle.getText("FACETFILTER_INFOBAR_AFTER_AND", [oFacet.getTitle(), sText]);
					}
				}
			}
		}
	}

	if (!sFinalSummaryText) {
		sFinalSummaryText = this._bundle.getText("FACETFILTER_INFOBAR_NO_FILTERS");
	}

	return sFinalSummaryText;
};

/**
 * Returns texts of selected items, visible and invisible.
 * 
 * @param {sap.m.FacetFilterList}
 *          oList source of selected items
 * @returns {String[]} texts of selected items
 * @private
 */
sap.m.FacetFilter.prototype._getSelectedItemsText = function(oList) {

   var aTexts = oList.getSelectedItems().map(function(value) {
		return value.getText();
	});

	oList._oSelectedKeys && Object.getOwnPropertyNames(oList._oSelectedKeys).forEach(function(value) {
		aTexts.indexOf(oList._oSelectedKeys[value]) === -1 && aTexts.push(oList._oSelectedKeys[value]);
	});
	return aTexts;
};



/**
 * Add the reset button to the given summary bar, positioned to the end of the bar.
 * 
 * @param oSummaryBar
 * @private
 */
sap.m.FacetFilter.prototype._addResetToSummary = function(oSummaryBar) {
	
	if(oSummaryBar.getContent().length === 1) {
		
		oSummaryBar.addContent(new sap.m.ToolbarSpacer({width: ""})); // Push the reset button to the end of the toolbar
		oSummaryBar.addContent(this._createResetButton());
	}	
};

/**
 * Remove the reset button from the given summary bar.
 * 
 * @param oSummaryBar
 * @private
 */
sap.m.FacetFilter.prototype._removeResetFromSummary = function(oSummaryBar) {
	
	if(oSummaryBar.getContent().length === 3) {
		
		// Only remove reset controls if they are not already there (setShowReset called with bVal=false twice)
		var oSpacer = oSummaryBar.removeAggregation("content", 1); // Remove spacer
		oSpacer.destroy();
		
		var oButton = oSummaryBar.removeAggregation("content", 1); // Remove reset button
		oButton.destroy();					
	}		
};


/**
 * Clean up facet buttons and remove facet icons for the given list.
 * 
 * @param oList
 */
sap.m.FacetFilter.prototype._removeList = function(oList) {
	
	if(oList) {

		var oButton = this._buttons[oList.getId()];
		if(oButton) {
			this.removeAggregation("buttons", oButton);
			oButton.destroy();
		}
		
		var oRemoveIcon = this._removeFacetIcons[oList.getId()];
		if(oRemoveIcon) {
			this.removeAggregation("removeIcons", oRemoveIcon);
			oRemoveIcon.destroy();
		}
		delete this._buttons[oList.getId()];
		delete this._removeFacetIcons[oList.getId()];		
	}	
};


// ---------------- Carousel Support ----------------

/**
 * Returns arrows for the carousel
 * 
 * @param sName
 *            direction name "right" or "left"
 * @returns sap.ui.core.Icon
 */
sap.m.FacetFilter.prototype._getScrollingArrow = function(sName) {

	var oArrowIcon = null;
	var mProperties = {			
		src : "sap-icon://navigation-" + sName + "-arrow"
	};
	
	if (sName === "left") {
		oArrowIcon = this.getAggregation("arrowLeft");
		if (!oArrowIcon) {
			mProperties.id = this.getId() + "-arrowScrollLeft";
			oArrowIcon = sap.ui.core.IconPool.createControlByURI(mProperties);
			var aCssClassesToAddLeft = [ "sapMPointer", "sapMFFArrowScroll", "sapMFFArrowScrollLeft" ];
			for(var i=0; i < aCssClassesToAddLeft.length; i++) {
				oArrowIcon.addStyleClass(aCssClassesToAddLeft[i]);
			}
			this.setAggregation("arrowLeft", oArrowIcon);
		}
	}
	else if (sName === "right") {
		oArrowIcon = this.getAggregation("arrowRight");
		if (!oArrowIcon) {
			mProperties.id = this.getId() + "-arrowScrollRight";
			oArrowIcon = sap.ui.core.IconPool.createControlByURI(mProperties);
			var aCssClassesToAddRight = [ "sapMPointer", "sapMFFArrowScroll", "sapMFFArrowScrollRight" ];
			for(var i=0; i < aCssClassesToAddRight.length; i++) {
				oArrowIcon.addStyleClass(aCssClassesToAddRight[i]);
			}
			this.setAggregation("arrowRight", oArrowIcon);
		}
	} else {
		jQuery.sap.log.error("Scrolling arrow name "+ sName + " is not valid");
	}
	return oArrowIcon;
};

/**
 * Display or hide one or both carousel arrows depending on whether there is overflow
 * 
 * @private
 */
sap.m.FacetFilter.prototype._checkOverflow = function() {

	var oBarHead = this.getDomRef("head");
	var $bar = this.$();
	
	var bScrolling = false;

	if (oBarHead) {
		if (oBarHead.scrollWidth > oBarHead.clientWidth) {
			// scrolling possible
			bScrolling = true;
		}
	}

	$bar.toggleClass("sapMFFScrolling", bScrolling);
	$bar.toggleClass("sapMFFNoScrolling", !bScrolling);
	this._lastScrolling = bScrolling;

	if (oBarHead) {
		var iScrollLeft = oBarHead.scrollLeft;

		// check whether scrolling to the left is possible
		var bScrollBack = false;
		var bScrollForward = false;

		var realWidth = oBarHead.scrollWidth;
		var availableWidth = oBarHead.clientWidth;

		if (Math.abs(realWidth - availableWidth) == 1) { // Avoid rounding issues see CSN 1316630 2013
			realWidth = availableWidth;
		}

		if (!this._bRtl) { // normal LTR mode
			if (iScrollLeft > 0) {
				bScrollBack = true;
			}
			if ((realWidth > availableWidth) && (iScrollLeft + availableWidth < realWidth)) {
				bScrollForward = true;
			}

		} else { // RTL mode
			var $List = jQuery(oBarHead);
			if ($List.scrollLeftRTL() > 0) {
				bScrollForward = true;
			}
			if ($List.scrollRightRTL() > 0) {
				bScrollBack = true;
			}
		}

		// only do DOM changes if the state changed to avoid periodic application of identical values
		if ((bScrollForward != this._bPreviousScrollForward) || (bScrollBack != this._bPreviousScrollBack)) {
			this._bPreviousScrollForward = bScrollForward;
			this._bPreviousScrollBack = bScrollBack;
			$bar.toggleClass("sapMFFNoScrollBack", !bScrollBack);
			$bar.toggleClass("sapMFFNoScrollForward", !bScrollForward);
		}
	}
};

/**
 * Handle clicks on the carousel scroll arrows.
 * 
 * @private
 */
sap.m.FacetFilter.prototype.onclick = function(oEvent) {

	var sTargetId = oEvent.target.id;

	if (sTargetId) {
		var sId = this.getId();

		// Prevent IE from firing beforeunload event -> see CSN 4378288 2012
		oEvent.preventDefault();

		if (sTargetId == sId + "-arrowScrollLeft") {
			// scroll back/left button
			this._scroll(-sap.m.FacetFilter.SCROLL_STEP, 500);
		} else if (sTargetId == sId + "-arrowScrollRight") {
			// scroll forward/right button
			this._scroll(sap.m.FacetFilter.SCROLL_STEP, 500);
		}
	}
};

/**
 * Scrolls the items if possible, using an animation.
 * 
 * @param iDelta
 *            how far to scroll
 * @param iDuration
 *            how long to scroll (ms)
 * @private
 */
sap.m.FacetFilter.prototype._scroll = function(iDelta, iDuration) {

	var oDomRef = this.getDomRef("head");
	var iScrollLeft = oDomRef.scrollLeft;
	if (!!!sap.ui.Device.browser.internet_explorer && this._bRtl) {
		iDelta = -iDelta;
	} // RTL lives in the negative space
	var iScrollTarget = iScrollLeft + iDelta;
	jQuery(oDomRef).stop(true, true).animate({
		scrollLeft : iScrollTarget
	}, iDuration);
};

/**
 * Define handlers for touch events on the carousel
 * 
 * @private
 */
sap.m.FacetFilter.prototype._enableTouchSupport = function() {

	var that = this;
	var fnTouchStart = function(evt) {

		evt.preventDefault();

		// stop any inertia scrolling
		if (that._iInertiaIntervalId) {
			window.clearInterval(that._iInertiaIntervalId);
		}

		that.startScrollX = that.getDomRef("head").scrollLeft;
		that.startTouchX = evt.touches[0].pageX;
		that._bTouchNotMoved = true;
		that._lastMoveTime = new Date().getTime();
	};

	var fnTouchMove = function(evt) {

		var dx = evt.touches[0].pageX - that.startTouchX;

		var oListRef = that.getDomRef("head");
		var oldScrollLeft = oListRef.scrollLeft;
		var newScrollLeft = that.startScrollX - dx;
		oListRef.scrollLeft = newScrollLeft;
		that._bTouchNotMoved = false;

		// inertia scrolling: prepare continuation even after touchend by calculating the current velocity
		var dt = new Date().getTime() - that._lastMoveTime;
		that._lastMoveTime = new Date().getTime();
		if (dt > 0) {
			that._velocity = (newScrollLeft - oldScrollLeft) / dt;
		}

		evt.preventDefault();
	};

	var fnTouchEnd = function(evt) {

		if (that._bTouchNotMoved === false) { // swiping ends now
			evt.preventDefault();

			// add some inertia... continue scrolling with decreasing velocity
			var oListRef = that.getDomRef("head");
			var dt = 50;
			var endVelocity = Math.abs(that._velocity / 10); // continue scrolling until the speed has decreased to a fraction (v/10 means 11 iterations with slowing-down factor
			// 0.8)
			that._iInertiaIntervalId = window.setInterval(function() {

				that._velocity = that._velocity * 0.80;
				var dx = that._velocity * dt;
				oListRef.scrollLeft = oListRef.scrollLeft + dx;
				if (Math.abs(that._velocity) < endVelocity) {
					window.clearInterval(that._iInertiaIntervalId);
					that._iInertiaIntervalId = undefined;
				}
			}, dt);

		} else if (that._bTouchNotMoved === true) { // touchstart and touchend without move is a click; trigger it directly to avoid the usual delay
			that.onclick(evt);
			evt.preventDefault();
		} else {
			// touchend without corresponding start
			// do nothing special
		}
		that._bTouchNotMoved = undefined;
		that._lastMoveTime = undefined;
	};

	this.addEventDelegate({
		ontouchstart: fnTouchStart
	}, this);	
	
	this.addEventDelegate({
		ontouchend: fnTouchEnd
	}, this);	
	
	this.addEventDelegate({
		ontouchmove: fnTouchMove
	}, this);		
};

}; // end of sap/m/FacetFilter.js
if ( !jQuery.sap.isDeclared('sap.m.FacetFilterItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FacetFilterItem.
jQuery.sap.declare("sap.m.FacetFilterItem");




/**
 * Constructor for a new FacetFilterItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getCount count} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents a value for the FacetFilterList control.
 * @extends sap.m.ListItemBase
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.FacetFilterItem
 */
sap.m.ListItemBase.extend("sap.m.FacetFilterItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"key" : {type : "string", group : "Data", defaultValue : null},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"count" : {type : "int", group : "Misc", defaultValue : null, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.m.FacetFilterItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FacetFilterItem.extend
 * @function
 */


/**
 * Getter for property <code>key</code>.
 * Can be used as input for subsequent actions.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>key</code>
 * @public
 * @name sap.m.FacetFilterItem#getKey
 * @function
 */

/**
 * Setter for property <code>key</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.m.FacetFilterItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterItem#setKey
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The text to be displayed for the item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.FacetFilterItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.FacetFilterItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterItem#setText
 * @function
 */


/**
 * Getter for property <code>count</code>.
 * Number of objects that match this item in the target data set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>count</code>
 * @public
 * @deprecated Since version 7.20.0. 
 * Use setCounter instead.
 * @name sap.m.FacetFilterItem#getCount
 * @function
 */

/**
 * Setter for property <code>count</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iCount  new value for property <code>count</code>
 * @return {sap.m.FacetFilterItem} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 7.20.0. 
 * Use setCounter instead.
 * @name sap.m.FacetFilterItem#setCount
 * @function
 */


// Start of sap\m\FacetFilterItem.js

sap.m.FacetFilterItem.prototype.setCount = function(iCount) { 
	
	 // App dev can still call setCounter on ListItemBase, so we have redundancy here.
	this.setProperty("count", iCount);
	this.setProperty("counter", iCount);
};

sap.m.FacetFilterItem.prototype.setCounter = function(iCount) {
	
	this.setProperty("count", iCount);
	this.setProperty("counter", iCount);
};

/**
 * @private
 */
sap.m.FacetFilterItem.prototype.init = function() {
	
  sap.m.ListItemBase.prototype.init.apply(this);
  
  // This class must be added to the ListItemBase container element, not the FacetFilterItem container
  this.addStyleClass("sapMFFLI"); 
};


}; // end of sap/m/FacetFilterItem.js
if ( !jQuery.sap.isDeclared('sap.m.FeedListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FeedListItem.
jQuery.sap.declare("sap.m.FeedListItem");




/**
 * Constructor for a new FeedListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getSender sender} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getSenderActive senderActive} : boolean (default: true)</li>
 * <li>{@link #getIconActive iconActive} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.FeedListItem#event:senderPress senderPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.FeedListItem#event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The control provides a set of properties for text, sender information, time stamp
 * 
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.FeedListItem
 */
sap.m.ListItemBase.extend("sap.m.FeedListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"icon" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"sender" : {type : "string", group : "Data", defaultValue : null},
		"text" : {type : "string", group : "Data", defaultValue : null},
		"info" : {type : "string", group : "Data", defaultValue : null},
		"timestamp" : {type : "string", group : "Data", defaultValue : null},
		"senderActive" : {type : "boolean", group : "Behavior", defaultValue : true},
		"iconActive" : {type : "boolean", group : "Behavior", defaultValue : true},
		"iconDensityAware" : {type : "boolean", group : "Appearance", defaultValue : true},
		"showIcon" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	events : {
		"senderPress" : {}, 
		"iconPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.FeedListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FeedListItem.extend
 * @function
 */

sap.m.FeedListItem.M_EVENTS = {'senderPress':'senderPress','iconPress':'iconPress'};


/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.FeedListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * Icon displayed when the list item is active.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.FeedListItem#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>sender</code>.
 * Sender of the chunk
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sender</code>
 * @public
 * @name sap.m.FeedListItem#getSender
 * @function
 */

/**
 * Setter for property <code>sender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSender  new value for property <code>sender</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setSender
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The FeedListItem text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.FeedListItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setText
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * The Info text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.m.FeedListItem#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setInfo
 * @function
 */


/**
 * Getter for property <code>timestamp</code>.
 * This chunks timestamp
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * @name sap.m.FeedListItem#getTimestamp
 * @function
 */

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTimestamp  new value for property <code>timestamp</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setTimestamp
 * @function
 */


/**
 * Getter for property <code>senderActive</code>.
 * If true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>senderActive</code>
 * @public
 * @name sap.m.FeedListItem#getSenderActive
 * @function
 */

/**
 * Setter for property <code>senderActive</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSenderActive  new value for property <code>senderActive</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setSenderActive
 * @function
 */


/**
 * Getter for property <code>iconActive</code>.
 * If true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconActive</code>
 * @public
 * @name sap.m.FeedListItem#getIconActive
 * @function
 */

/**
 * Setter for property <code>iconActive</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconActive  new value for property <code>iconActive</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setIconActive
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.FeedListItem#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setIconDensityAware
 * @function
 */


/**
 * Getter for property <code>showIcon</code>.
 * If set to "true" (default), icons will be displayed, if set to false icons are hidden
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showIcon</code>
 * @public
 * @name sap.m.FeedListItem#getShowIcon
 * @function
 */

/**
 * Setter for property <code>showIcon</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowIcon  new value for property <code>showIcon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setShowIcon
 * @function
 */


/**
 * Event is fired when name of the sender is pressed. 
 *
 * @name sap.m.FeedListItem#senderPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's sender string to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FeedListItem</code>.<br/> itself. 
 *  
 * Event is fired when name of the sender is pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.
 *
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#attachSenderPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#detachSenderPress
 * @function
 */

/**
 * Fire event senderPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the feed item's sender string to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.FeedListItem#fireSenderPress
 * @function
 */


/**
 * Event is fired when the icon is pressed. 
 *
 * @name sap.m.FeedListItem#iconPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's icon to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FeedListItem</code>.<br/> itself. 
 *  
 * Event is fired when the icon is pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.
 *
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#attachIconPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#detachIconPress
 * @function
 */

/**
 * Fire event iconPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the feed item's icon to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.FeedListItem#fireIconPress
 * @function
 */


// Start of sap\m\FeedListItem.js
///**
// * This file defines behavior for the control,
// */

/**
 * Function is called when exiting the control.
 * 
 * @private
 */
sap.m.FeedListItem.prototype.exit = function(oEvent) {
	// destroy link control if initialized
	if (this._oLinkControl) {
		this._oLinkControl.destroy();
	} 
	if (this._oImageControl) {
		this._oImageControl.destroy();
	}
	
	sap.m.ListItemBase.prototype.exit.apply(this);
};

/**
 * Overwrite ListItemBase's ontap. Triggers 'senderPress' if sender was pressed or
 * iconPress if icon was pressed. IN those cases, the tap is not propagated to ListItemBase.
 * Otherwise, ListItemBase's tap is executed which will take care of interaction response.
 * 
 * @private
 */
sap.m.FeedListItem.prototype.ontap = function(oEvent) {
	if (oEvent.srcControl.getId() === this.getId() + "-icon" && this.getIconActive()) {
		//Use figure dom ref because some image content might be cut off
		var sFigureDomRef = this.getDomRef("figure");
		this.fireIconPress({ domRef: sFigureDomRef});
	} else if(!this._oLinkControl || !this.getSenderActive() || oEvent.srcControl.getId() !== this._oLinkControl.getId()) {
		sap.m.ListItemBase.prototype.ontap.apply(this, [oEvent]);
	}
};

/**
 * Lazy load feed icon image.
 *
 * @private
 */
sap.m.FeedListItem.prototype._getImageControl = function() {
	
	var sIconSrc = this.getIcon() ? this.getIcon() : sap.ui.core.IconPool.getIconURI("person-placeholder"),
		sImgId = this.getId() + '-icon',
		mProperties = { 
			src : sIconSrc,
			alt : this.getSender(),
			densityAware : this.getIconDensityAware()
		},
		aCssClasses = ['sapMFeedListItemImage'];
	
	this._oImageControl = sap.m.ImageHelper.getImageControl(sImgId, this._oImageControl, this, mProperties, aCssClasses);
	
	return this._oImageControl;
};



/**
 * Returns a link control with sender text firing a 'senderPress' event. Does
 * not take care of the 'senderActive' flag, though
 * 
 * @returns link control with current sender text which fires a 'senderPress' event.
 * @private
 */
sap.m.FeedListItem.prototype._getLinkControl = function() {
	if(!this._oLinkControl) {
		jQuery.sap.require("sap.m.Link");
		var that = this;
		this._oLinkControl =  new sap.m.Link({
				press : function() {
					var sSenderDomRef = this.getDomRef();
					that.fireSenderPress({ domRef: sSenderDomRef});
				}
			});
		//Necessary so this gets garbage collected
		this._oLinkControl.setParent(this, null, true);
	}
	this._oLinkControl.setProperty("text", this.getSender(), true);
	this._oLinkControl.setProperty("enabled", this.getSenderActive(), true);
		
	return this._oLinkControl;
};

/**
 * Overwrite base method to hook into list item's active handling
 * 
 * @private
 */
sap.m.FeedListItem.prototype._activeHandlingInheritor = function() {
	var sActiveSrc = this.getActiveIcon();

	if(!!this._oImageControl  && !!sActiveSrc) {
		this._oImageControl.setSrc(sActiveSrc);
	}	
};


/**
 * Overwrite base method to hook into list item's inactive handling
 * 
 * @private
 */
sap.m.FeedListItem.prototype._inactiveHandlingInheritor = function() {
	var sSrc = this.getIcon();
	if(!!this._oImageControl) {
		this._oImageControl.setSrc(sSrc);
	}	
};
}; // end of sap/m/FeedListItem.js
if ( !jQuery.sap.isDeclared('sap.m.GroupHeaderListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.GroupHeaderListItem.
jQuery.sap.declare("sap.m.GroupHeaderListItem");




/**
 * Constructor for a new GroupHeaderListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCount count} : string</li>
 * <li>{@link #getUpperCase upperCase} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The group header list item is used to display the title of a group and act as separator between groups in Lists.
 * 
 * There are several API parts inherited from ListItemBase which do not apply here:
 * The properties "type", "unread", "selected" and "counter" are currently ignored.
 * Tap events will not be fired.
 * 
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.GroupHeaderListItem
 */
sap.m.ListItemBase.extend("sap.m.GroupHeaderListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Data", defaultValue : null},
		"count" : {type : "string", group : "Data", defaultValue : null},
		"upperCase" : {type : "boolean", group : "Appearance", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.m.GroupHeaderListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.GroupHeaderListItem.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the group header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.GroupHeaderListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.GroupHeaderListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>count</code>.
 * A text to be displayed in the group header in brackets next to the group title. Usually the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
 * Will not be displayed if not set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>count</code>
 * @public
 * @name sap.m.GroupHeaderListItem#getCount
 * @function
 */

/**
 * Setter for property <code>count</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCount  new value for property <code>count</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.GroupHeaderListItem#setCount
 * @function
 */


/**
 * Getter for property <code>upperCase</code>.
 * Title will be put to capital letters by default, otherwise set this property to 'false'
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>upperCase</code>
 * @public
 * @since 1.13.2
 * @name sap.m.GroupHeaderListItem#getUpperCase
 * @function
 */

/**
 * Setter for property <code>upperCase</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bUpperCase  new value for property <code>upperCase</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * @since 1.13.2
 * @name sap.m.GroupHeaderListItem#setUpperCase
 * @function
 */


// Start of sap\m\GroupHeaderListItem.js

// GroupHeaderListItem is not selectable
sap.m.GroupHeaderListItem.prototype.isSelectable = function() {
	return false;
};

sap.m.GroupHeaderListItem.prototype.shouldClearLastValue = function() {
	return true;
};

sap.m.GroupHeaderListItem.prototype.ontouchstart = function(oEvent) {
	oEvent.setMarked();
};

sap.m.GroupHeaderListItem.prototype.onBeforeRendering = function() {
	var oParent = this.getParent();
	if (oParent && sap.m.Table && oParent instanceof sap.m.Table) {
		// clear column last value to reset cell merging
		oParent.getColumns().forEach(function(oColumn) {
			oColumn.clearLastValue();
		});
	}
};
}; // end of sap/m/GroupHeaderListItem.js
if ( !jQuery.sap.isDeclared('sap.m.InputListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.InputListItem.
jQuery.sap.declare("sap.m.InputListItem");




/**
 * Constructor for a new InputListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * List item should be used for a label and an input field.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.InputListItem
 */
sap.m.ListItemBase.extend("sap.m.InputListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"label" : {type : "string", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.m.InputListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.InputListItem.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * Label of the list item
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.m.InputListItem#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#setLabel
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content controls can be added
 * 
 * <strong>Note</strong>: this is the default aggregation for InputListItem.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.InputListItem#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.InputListItem#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.InputListItem#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.InputListItem#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#destroyContent
 * @function
 */


/**
 * Binder for aggregation <code>content</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#bindContent
 * @function
 */

/**
 * Unbinder for aggregation <code>content</code>.
 *
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#unbindContent
 * @function
 */


// Start of sap\m\InputListItem.js

}; // end of sap/m/InputListItem.js
if ( !jQuery.sap.isDeclared('sap.m.ListBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ListBase.
jQuery.sap.declare("sap.m.ListBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ListBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInset inset} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getHeaderDesign headerDesign} : sap.m.ListHeaderDesign (default: sap.m.ListHeaderDesign.Standard)</li>
 * <li>{@link #getFooterText footerText} : string</li>
 * <li>{@link #getMode mode} : sap.m.ListMode (default: sap.m.ListMode.None)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getIncludeItemInSelection includeItemInSelection} : boolean (default: false)</li>
 * <li>{@link #getShowUnread showUnread} : boolean (default: false)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getShowNoData showNoData} : boolean (default: true)</li>
 * <li>{@link #getEnableBusyIndicator enableBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getModeAnimationOn modeAnimationOn} : boolean (default: true)</li>
 * <li>{@link #getShowSeparators showSeparators} : sap.m.ListSeparators (default: sap.m.ListSeparators.All)</li>
 * <li>{@link #getSwipeDirection swipeDirection} : sap.m.SwipeDirection (default: sap.m.SwipeDirection.Both)</li>
 * <li>{@link #getGrowing growing} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int (default: 20)</li>
 * <li>{@link #getGrowingTriggerText growingTriggerText} : string</li>
 * <li>{@link #getGrowingScrollToLoad growingScrollToLoad} : boolean (default: false)</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.m.ListItemBase[]</li>
 * <li>{@link #getSwipeContent swipeContent} : sap.ui.core.Control</li>
 * <li>{@link #getHeaderToolbar headerToolbar} : sap.m.Toolbar</li>
 * <li>{@link #getInfoToolbar infoToolbar} : sap.m.Toolbar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ListBase#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:delete delete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:swipe swipe} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:growingStarted growingStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:growingFinished growingFinished} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:updateStarted updateStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:updateFinished updateFinished} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListBase#event:itemPress itemPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * sap.m.ListBase Control provides a basic functionality of List and Table. Selection, deletion, unread states and inset style are also maintained here.
 * 
 * Note: The ListBase including all contained items is completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists with many items. As such the usage of a list is not recommended for these use cases.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.ListBase
 */
sap.ui.core.Control.extend("sap.m.ListBase", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getSelectedItem", "setSelectedItem", "getSelectedItems", "setSelectedItemById", "removeSelections", "selectAll", "getSwipedItem", "swipeOut", "getGrowingInfo", "getSelectedContexts"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"inset" : {type : "boolean", group : "Appearance", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"headerText" : {type : "string", group : "Misc", defaultValue : null},
		"headerDesign" : {type : "sap.m.ListHeaderDesign", group : "Appearance", defaultValue : sap.m.ListHeaderDesign.Standard, deprecated: true},
		"footerText" : {type : "string", group : "Misc", defaultValue : null},
		"mode" : {type : "sap.m.ListMode", group : "Behavior", defaultValue : sap.m.ListMode.None},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"includeItemInSelection" : {type : "boolean", group : "Behavior", defaultValue : false},
		"showUnread" : {type : "boolean", group : "Misc", defaultValue : false},
		"noDataText" : {type : "string", group : "Misc", defaultValue : null},
		"showNoData" : {type : "boolean", group : "Misc", defaultValue : true},
		"enableBusyIndicator" : {type : "boolean", group : "Behavior", defaultValue : true},
		"modeAnimationOn" : {type : "boolean", group : "Misc", defaultValue : true},
		"showSeparators" : {type : "sap.m.ListSeparators", group : "Appearance", defaultValue : sap.m.ListSeparators.All},
		"swipeDirection" : {type : "sap.m.SwipeDirection", group : "Misc", defaultValue : sap.m.SwipeDirection.Both},
		"growing" : {type : "boolean", group : "Behavior", defaultValue : false},
		"growingThreshold" : {type : "int", group : "Misc", defaultValue : 20},
		"growingTriggerText" : {type : "string", group : "Appearance", defaultValue : null},
		"growingScrollToLoad" : {type : "boolean", group : "Behavior", defaultValue : false},
		"rememberSelections" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.m.ListItemBase", multiple : true, singularName : "item", bindable : "bindable"}, 
    	"swipeContent" : {type : "sap.ui.core.Control", multiple : false}, 
    	"headerToolbar" : {type : "sap.m.Toolbar", multiple : false}, 
    	"infoToolbar" : {type : "sap.m.Toolbar", multiple : false}
	},
	events : {
		"select" : {deprecated: true}, 
		"selectionChange" : {}, 
		"delete" : {}, 
		"swipe" : {allowPreventDefault : true}, 
		"growingStarted" : {deprecated: true}, 
		"growingFinished" : {deprecated: true}, 
		"updateStarted" : {}, 
		"updateFinished" : {}, 
		"itemPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ListBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ListBase.extend
 * @function
 */

sap.m.ListBase.M_EVENTS = {'select':'select','selectionChange':'selectionChange','delete':'delete','swipe':'swipe','growingStarted':'growingStarted','growingFinished':'growingFinished','updateStarted':'updateStarted','updateFinished':'updateFinished','itemPress':'itemPress'};


/**
 * Getter for property <code>inset</code>.
 * Inset style false/true
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>inset</code>
 * @public
 * @name sap.m.ListBase#getInset
 * @function
 */

/**
 * Setter for property <code>inset</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bInset  new value for property <code>inset</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setInset
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ListBase#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setVisible
 * @function
 */


/**
 * Getter for property <code>headerText</code>.
 * The header text appearing in the list/table header.
 * Note: if "headerToolbar" aggregation is set, then this property is ignored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.m.ListBase#getHeaderText
 * @function
 */

/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setHeaderText
 * @function
 */


/**
 * Getter for property <code>headerDesign</code>.
 * List header style. Possible vales are "Standard" and "Plain"
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.m.ListHeaderDesign} the value of property <code>headerDesign</code>
 * @public
 * @since 1.14
 * @deprecated Since version 1.16. 
 * Has no functionality since 1.16
 * @name sap.m.ListBase#getHeaderDesign
 * @function
 */

/**
 * Setter for property <code>headerDesign</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.m.ListHeaderDesign} oHeaderDesign  new value for property <code>headerDesign</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.14
 * @deprecated Since version 1.16. 
 * Has no functionality since 1.16
 * @name sap.m.ListBase#setHeaderDesign
 * @function
 */


/**
 * Getter for property <code>footerText</code>.
 * Footer Text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>footerText</code>
 * @public
 * @name sap.m.ListBase#getFooterText
 * @function
 */

/**
 * Setter for property <code>footerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFooterText  new value for property <code>footerText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setFooterText
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * Mode of a list (e.g. None, SingleSelect, MultiSelect, Delete, etc.)
 *
 * Default value is <code>None</code>
 *
 * @return {sap.m.ListMode} the value of property <code>mode</code>
 * @public
 * @name sap.m.ListBase#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.m.ListMode} oMode  new value for property <code>mode</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setMode
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Sets the width of the list.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.ListBase#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setWidth
 * @function
 */


/**
 * Getter for property <code>includeItemInSelection</code>.
 * This property decides if the list item interacts with the selection. If it is "true", a tap on the item will set the selection control in front of the list item.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>includeItemInSelection</code>
 * @public
 * @name sap.m.ListBase#getIncludeItemInSelection
 * @function
 */

/**
 * Setter for property <code>includeItemInSelection</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIncludeItemInSelection  new value for property <code>includeItemInSelection</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setIncludeItemInSelection
 * @function
 */


/**
 * Getter for property <code>showUnread</code>.
 * Activates the unread feature for all items.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showUnread</code>
 * @public
 * @name sap.m.ListBase#getShowUnread
 * @function
 */

/**
 * Setter for property <code>showUnread</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowUnread  new value for property <code>showUnread</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setShowUnread
 * @function
 */


/**
 * Getter for property <code>noDataText</code>.
 * This text is displayed when the control has no data.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * @name sap.m.ListBase#getNoDataText
 * @function
 */

/**
 * Setter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setNoDataText
 * @function
 */


/**
 * Getter for property <code>showNoData</code>.
 * Enables an information text(see "noDataText" property) when the control has no data.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showNoData</code>
 * @public
 * @name sap.m.ListBase#getShowNoData
 * @function
 */

/**
 * Setter for property <code>showNoData</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowNoData  new value for property <code>showNoData</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setShowNoData
 * @function
 */


/**
 * Getter for property <code>enableBusyIndicator</code>.
 * When this property is set to "true", the List/Table will automatically display a BusyIndicator when it detects that data is being loaded or filtered. This BusyIndicator blocks the interaction with the items until data loading is finished.
 * For the List/Table controls BusyIndicator will be shown after one second. This behavior can be customized by setting the "busyIndicatorDelay" property.
 * When this property is set to "false", items will stay on the List/Table until data loading is finished.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableBusyIndicator</code>
 * @public
 * @since 1.20.2
 * @name sap.m.ListBase#getEnableBusyIndicator
 * @function
 */

/**
 * Setter for property <code>enableBusyIndicator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableBusyIndicator  new value for property <code>enableBusyIndicator</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.20.2
 * @name sap.m.ListBase#setEnableBusyIndicator
 * @function
 */


/**
 * Getter for property <code>modeAnimationOn</code>.
 * Defines if animations will be shown when activating or deactivating selection modes.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>modeAnimationOn</code>
 * @public
 * @name sap.m.ListBase#getModeAnimationOn
 * @function
 */

/**
 * Setter for property <code>modeAnimationOn</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bModeAnimationOn  new value for property <code>modeAnimationOn</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setModeAnimationOn
 * @function
 */


/**
 * Getter for property <code>showSeparators</code>.
 * Defines which separator style will be used.
 *
 * Default value is <code>All</code>
 *
 * @return {sap.m.ListSeparators} the value of property <code>showSeparators</code>
 * @public
 * @name sap.m.ListBase#getShowSeparators
 * @function
 */

/**
 * Setter for property <code>showSeparators</code>.
 *
 * Default value is <code>All</code> 
 *
 * @param {sap.m.ListSeparators} oShowSeparators  new value for property <code>showSeparators</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setShowSeparators
 * @function
 */


/**
 * Getter for property <code>swipeDirection</code>.
 * Direction of swipe(e.g LeftToRight, RightToLeft, Both) to bring in a control on the right hand side of the list item.
 *
 * Default value is <code>Both</code>
 *
 * @return {sap.m.SwipeDirection} the value of property <code>swipeDirection</code>
 * @public
 * @name sap.m.ListBase#getSwipeDirection
 * @function
 */

/**
 * Setter for property <code>swipeDirection</code>.
 *
 * Default value is <code>Both</code> 
 *
 * @param {sap.m.SwipeDirection} oSwipeDirection  new value for property <code>swipeDirection</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setSwipeDirection
 * @function
 */


/**
 * Getter for property <code>growing</code>.
 * Sets the growing(paging) feature of control.
 * Note: This feature only works with item binding and should not be used with two way binding!
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>growing</code>
 * @public
 * @since 1.16
 * @name sap.m.ListBase#getGrowing
 * @function
 */

/**
 * Setter for property <code>growing</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bGrowing  new value for property <code>growing</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#setGrowing
 * @function
 */


/**
 * Getter for property <code>growingThreshold</code>.
 * Number of items requested from the server. To activate this you should set "growing" property to "true".
 *
 * Default value is <code>20</code>
 *
 * @return {int} the value of property <code>growingThreshold</code>
 * @public
 * @since 1.16
 * @name sap.m.ListBase#getGrowingThreshold
 * @function
 */

/**
 * Setter for property <code>growingThreshold</code>.
 *
 * Default value is <code>20</code> 
 *
 * @param {int} iGrowingThreshold  new value for property <code>growingThreshold</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#setGrowingThreshold
 * @function
 */


/**
 * Getter for property <code>growingTriggerText</code>.
 * This text is displayed on the trigger button which is responsible to load new page at the end of the list. The default is a translated text ("Load More Data") coming from the message bundle.
 * This property can be used only if "growing" property is set "true" and scrollToLoad property is set "false".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>growingTriggerText</code>
 * @public
 * @since 1.16
 * @name sap.m.ListBase#getGrowingTriggerText
 * @function
 */

/**
 * Setter for property <code>growingTriggerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGrowingTriggerText  new value for property <code>growingTriggerText</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#setGrowingTriggerText
 * @function
 */


/**
 * Getter for property <code>growingScrollToLoad</code>.
 * If true, user can scroll end to trigger a new page request. Otherwise a trigger button is displayed at the bottom of the list.
 * This property can be used only if "growing" property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>growingScrollToLoad</code>
 * @public
 * @since 1.16
 * @name sap.m.ListBase#getGrowingScrollToLoad
 * @function
 */

/**
 * Setter for property <code>growingScrollToLoad</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bGrowingScrollToLoad  new value for property <code>growingScrollToLoad</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#setGrowingScrollToLoad
 * @function
 */


/**
 * Getter for property <code>rememberSelections</code>.
 * By default, if you have binding then the control remembers selections after binding update(sorting, filter, refresh). If this is not a desired behavior for your use case, you can switch this off with setting it to "false".
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>rememberSelections</code>
 * @public
 * @since 1.16.6
 * @name sap.m.ListBase#getRememberSelections
 * @function
 */

/**
 * Setter for property <code>rememberSelections</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bRememberSelections  new value for property <code>rememberSelections</code>
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.6
 * @name sap.m.ListBase#setRememberSelections
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items of this list or rows of the table.
 * 
 * <strong>Note</strong>: this is the default aggregation for ListBase.
 * @return {sap.m.ListItemBase[]}
 * @public
 * @name sap.m.ListBase#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.m.ListItemBase}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.m.ListItemBase} vItem the item to remove or its index or id
 * @return {sap.m.ListItemBase} the removed item or null
 * @public
 * @name sap.m.ListBase#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ListItemBase[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ListBase#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ListItemBase}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ListBase#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#destroyItems
 * @function
 */


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#bindItems
 * @function
 */

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#unbindItems
 * @function
 */


/**
 * Getter for aggregation <code>swipeContent</code>.<br/>
 * User can swipe to bring in this control on the right hand side of a list item.
 * Note: This functionality gets disabled for non-touch devices.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.ListBase#getSwipeContent
 * @function
 */


/**
 * Setter for the aggregated <code>swipeContent</code>.
 * @param {sap.ui.core.Control} oSwipeContent
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#setSwipeContent
 * @function
 */
	

/**
 * Destroys the swipeContent in the aggregation 
 * named <code>swipeContent</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#destroySwipeContent
 * @function
 */


/**
 * Getter for aggregation <code>headerToolbar</code>.<br/>
 * Header can be used as a Toolbar to add extra controls for user interactions.
 * Note: This aggregation overwrites "headerText" property.
 * 
 * @return {sap.m.Toolbar}
 * @public
 * @since 1.16
 * @name sap.m.ListBase#getHeaderToolbar
 * @function
 */


/**
 * Setter for the aggregated <code>headerToolbar</code>.
 * @param {sap.m.Toolbar} oHeaderToolbar
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#setHeaderToolbar
 * @function
 */
	

/**
 * Destroys the headerToolbar in the aggregation 
 * named <code>headerToolbar</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#destroyHeaderToolbar
 * @function
 */


/**
 * Getter for aggregation <code>infoToolbar</code>.<br/>
 * InfoBar is placed below the header and can be used to show extra information to the user.
 * 
 * @return {sap.m.Toolbar}
 * @public
 * @since 1.16
 * @name sap.m.ListBase#getInfoToolbar
 * @function
 */


/**
 * Setter for the aggregated <code>infoToolbar</code>.
 * @param {sap.m.Toolbar} oInfoToolbar
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#setInfoToolbar
 * @function
 */
	

/**
 * Destroys the infoToolbar in the aggregation 
 * named <code>infoToolbar</code>.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#destroyInfoToolbar
 * @function
 */


/**
 * Event is fired when selection is changed by user interaction. In "multi-selection" mode, this event is also fired on "deselect" 
 *
 * @name sap.m.ListBase#select
 * @event
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item which fired the select.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 *  
 * Event is fired when selection is changed by user interaction. In "multi-selection" mode, this event is also fired on "deselect" 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * @name sap.m.ListBase#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.ListBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * @name sap.m.ListBase#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The list item which fired the select.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.16. 
 * Instead use "selectionChange" event.
 * @name sap.m.ListBase#fireSelect
 * @function
 */


/**
 * Event is fired when selection is changed via user interaction inside the control. 
 *
 * @name sap.m.ListBase#selectionChange
 * @event
 * @since 1.16
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item whose selection has changed. In "multi-selection" mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.
 * @param {sap.m.ListItemBase[]} oControlEvent.getParameters.listItems This parameter is filled with array of list items whose selection has changed. This parameter can be used for multi-selection mode.
 * @param {boolean} oControlEvent.getParameters.selected This flag indicates whether the "listItem" parameter is selected or not.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectionChange' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 *  
 * Event is fired when selection is changed via user interaction inside the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#attachSelectionChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionChange' event of this <code>sap.m.ListBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.ListBase#detachSelectionChange
 * @function
 */

/**
 * Fire event selectionChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The list item whose selection has changed. In "multi-selection" mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.</li>
 * <li>'listItems' of type <code>sap.m.ListItemBase[]</code> This parameter is filled with array of list items whose selection has changed. This parameter can be used for multi-selection mode.</li>
 * <li>'selected' of type <code>boolean</code> This flag indicates whether the "listItem" parameter is selected or not.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * @name sap.m.ListBase#fireSelectionChange
 * @function
 */


/**
 * Event is fired when delete icon is pressed by user. 
 *
 * @name sap.m.ListBase#delete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item which fired the delete.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 *  
 * Event is fired when delete icon is pressed by user. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#attachDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.ListBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#detachDelete
 * @function
 */

/**
 * Fire event delete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The list item which fired the delete.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListBase#fireDelete
 * @function
 */


/**
 * This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe. 
 *
 * @name sap.m.ListBase#swipe
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The listitem which fired the swipe.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.swipeContent Given swipeContent control to show on the right hand side of a list item.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl Holds which control caused the swipe event in within the Item.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 *  
 * This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#attachSwipe
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListBase#detachSwipe
 * @function
 */

/**
 * Fire event swipe to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the swipe.</li>
 * <li>'swipeContent' of type <code>sap.ui.core.Control</code> Given swipeContent control to show on the right hand side of a list item.</li>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code> Holds which control caused the swipe event in within the Item.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.m.ListBase#fireSwipe
 * @function
 */


/**
 * This event is called when "growing" feature is enabled and before new page loaded. 
 *
 * @name sap.m.ListBase#growingStarted
 * @event
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total Total number of items.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'growingStarted' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 *  
 * This event is called when "growing" feature is enabled and before new page loaded. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * @name sap.m.ListBase#attachGrowingStarted
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'growingStarted' event of this <code>sap.m.ListBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * @name sap.m.ListBase#detachGrowingStarted
 * @function
 */

/**
 * Fire event growingStarted to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'actual' of type <code>int</code> Actual number of items.</li>
 * <li>'total' of type <code>int</code> Total number of items.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateStarted" event.
 * @name sap.m.ListBase#fireGrowingStarted
 * @function
 */


/**
 * This event is called when "growing" feature is enabled and after new page loaded and DOM updated. 
 *
 * @name sap.m.ListBase#growingFinished
 * @event
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total Total number of items.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'growingFinished' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 *  
 * This event is called when "growing" feature is enabled and after new page loaded and DOM updated. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * @name sap.m.ListBase#attachGrowingFinished
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'growingFinished' event of this <code>sap.m.ListBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * @name sap.m.ListBase#detachGrowingFinished
 * @function
 */

/**
 * Fire event growingFinished to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'actual' of type <code>int</code> Actual number of items.</li>
 * <li>'total' of type <code>int</code> Total number of items.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * @deprecated Since version 1.16.3. 
 * Instead, use "updateFinished" event.
 * @name sap.m.ListBase#fireGrowingFinished
 * @function
 */


/**
 * This event is called before binding is updated. 
 *
 * @name sap.m.ListBase#updateStarted
 * @event
 * @since 1.16.3
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.reason The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total The total count of bound items. This parameter can be used if "growing" feature is enabled.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'updateStarted' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 *  
 * This event is called before binding is updated. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * @name sap.m.ListBase#attachUpdateStarted
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'updateStarted' event of this <code>sap.m.ListBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * @name sap.m.ListBase#detachUpdateStarted
 * @function
 */

/**
 * Fire event updateStarted to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'reason' of type <code>string</code> The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"</li>
 * <li>'actual' of type <code>int</code> Actual number of items.</li>
 * <li>'total' of type <code>int</code> The total count of bound items. This parameter can be used if "growing" feature is enabled.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.3
 * @name sap.m.ListBase#fireUpdateStarted
 * @function
 */


/**
 * This event is called after binding and DOM is updated. 
 *
 * @name sap.m.ListBase#updateFinished
 * @event
 * @since 1.16.3
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.reason The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total The total count of bound items. This parameter can be used if "growing" feature is enabled.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'updateFinished' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 *  
 * This event is called after binding and DOM is updated. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * @name sap.m.ListBase#attachUpdateFinished
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'updateFinished' event of this <code>sap.m.ListBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * @name sap.m.ListBase#detachUpdateFinished
 * @function
 */

/**
 * Fire event updateFinished to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'reason' of type <code>string</code> The reason of update. Possible values are "Binding", "Filter", "Sort", "Growing", "Change", "Refresh", "Context"</li>
 * <li>'actual' of type <code>int</code> Actual number of items.</li>
 * <li>'total' of type <code>int</code> The total count of bound items. This parameter can be used if "growing" feature is enabled.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.3
 * @name sap.m.ListBase#fireUpdateFinished
 * @function
 */


/**
 * This event is called when an item is pressed regardless of the selection mode.
 * NOTE: This event is fired for all kind of list items unless the item's type is "Inactive". 
 *
 * @name sap.m.ListBase#itemPress
 * @event
 * @since 1.20
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The list item which fired the pressed event.
NOTE: This event is fired also for "GroupHeaderListItem" which does not have binding context.
					
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl The control which caused the press event within the container.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'itemPress' event of this <code>sap.m.ListBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListBase</code>.<br/> itself. 
 *  
 * This event is called when an item is pressed regardless of the selection mode.
 * NOTE: This event is fired for all kind of list items unless the item's type is "Inactive". 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.
 *
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.20
 * @name sap.m.ListBase#attachItemPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'itemPress' event of this <code>sap.m.ListBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.20
 * @name sap.m.ListBase#detachItemPress
 * @function
 */

/**
 * Fire event itemPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The list item which fired the pressed event.
NOTE: This event is fired also for "GroupHeaderListItem" which does not have binding context.
					</li>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code> The control which caused the press event within the container.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.20
 * @name sap.m.ListBase#fireItemPress
 * @function
 */


/**
 * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled and multiple items are selected, only the up-most selected item is returned.
 *
 * @name sap.m.ListBase.prototype.getSelectedItem
 * @function

 * @type sap.m.ListItemBase
 * @public
 */


/**
 * Selects or deselects the given list item.
 *
 * @name sap.m.ListBase.prototype.setSelectedItem
 * @function
 * @param {sap.m.ListItemBase} 
 *         oListItem
 *         The list item whose selection to be changed. This parameter is mandatory.
 * @param {boolean} 
 *         bSelect
 *         Sets selected status of the list item. Default value is true.

 * @type sap.m.ListBase
 * @public
 */


/**
 * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
 *
 * @name sap.m.ListBase.prototype.getSelectedItems
 * @function

 * @type sap.m.ListItemBase[]
 * @public
 */


/**
 * Sets a list item to be selected by id. In single mode the method removes the previous selection.
 *
 * @name sap.m.ListBase.prototype.setSelectedItemById
 * @function
 * @param {string} 
 *         sId
 *         The id of the list item whose selection to be changed.
 * @param {boolean} 
 *         bSelect
 *         Sets selected status of the list item. Default value is true.

 * @type sap.m.ListBase
 * @public
 */


/**
 * Removes visible selections of the current selection mode.
 *
 * @name sap.m.ListBase.prototype.removeSelections
 * @function
 * @param {boolean} 
 *         bAll

 * @since 1.16.3 *         This control keeps old selections after filter or sorting. Set this parameter "true" to remove all selections.

 * @type sap.m.ListBase
 * @public
 */


/**
 * Select all items in "MultiSelection" mode.
 *
 * @name sap.m.ListBase.prototype.selectAll
 * @function

 * @type sap.m.ListBase
 * @public
 * @since 1.16
 */


/**
 * Returns swiped list item. When no item is swiped, "null" is returned.
 *
 * @name sap.m.ListBase.prototype.getSwipedItem
 * @function

 * @type sap.m.ListItemBase
 * @public
 */


/**
 * After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.
 * Note: If users try to tap inside of the list but outside of the swipeContent then control hides automatically.
 *
 * @name sap.m.ListBase.prototype.swipeOut
 * @function
 * @param {any} 
 *         oCallback
 *         This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.

 * @type sap.m.ListBase
 * @public
 */


/**
 * Returns growing information as object with "actual" and "total" keys.
 * Note: This function returns "null" if "growing" feature is disabled.
 *
 * @name sap.m.ListBase.prototype.getGrowingInfo
 * @function

 * @type object
 * @public
 * @since 1.16
 */


/**
 * Returns the binding contexts of the selected items.
 * Note: This method returns an empty array if no databinding is used.
 *
 * @name sap.m.ListBase.prototype.getSelectedContexts
 * @function
 * @param {boolean} 
 *         bAll
 *         Set true to include even invisible selected items(e.g. the selections from the previous filters).
 * Note: In single selection modes, only the last selected item's binding context is returned in array.

 * @type object[]
 * @public
 * @since 1.18.6
 */


// Start of sap\m\ListBase.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained



sap.m.ListBase.prototype.init = function() {
	this._oGrowingDelegate = null;
	this._bSelectionMode = false;
	this._bReceivingData = false;
	this._oSelectedItem = null;
	this._aSelectedPaths = [];
	this._aNavSections = [];
	this._bUpdating = false;
};

sap.m.ListBase.prototype.onBeforeRendering = function() {
	this._aNavSections.length = 0;
	if (this.hasOwnProperty("_$touchBlocker")) {
		this._removeSwipeContent();	// remove the swipe content from screen immediately
		delete this._$touchBlocker;	// delete touchBlocker to refresh
	}
};

sap.m.ListBase.prototype.onAfterRendering = function() {
	this._startItemNavigation();
	if (!this._oGrowingDelegate && this.isBound("items")) {
		this._updateFinished();
	}
};

sap.m.ListBase.prototype.exit = function () {
	this._oSelectedItem = null;
	this._bReceivingData = false;
	this._aNavSections.length = 0;
	this._aSelectedPaths.length = 0;
	this._destroyGrowingDelegate();
	this._destroyItemNavigation();
};

// this gets called only with oData Model when first load or filter/sort
sap.m.ListBase.prototype.refreshItems = function(sReason) {
	// show loading mask first
	this._showBusyIndicator();

	if (this._oGrowingDelegate) {
		// inform growing delegate to handle
		this._oGrowingDelegate.refreshItems(sReason);
	} else {
		// if data multiple time requested during the ongoing request
		// UI5 cancels the previous requests then we should fire updateStarted once
		if (!this._bReceivingData) {
			// handle update started event
			this._updateStarted(sReason);
			this._bReceivingData = true;
		}

		// for flat list get all data
		this.getBinding("items").getContexts();
	}
};

// this gets called via JSON and oData model when binding is updated
// if there is no data this should get called anyway
// TODO: if there is a network error this will not get called
// but we need to turn back to initial state
sap.m.ListBase.prototype.updateItems = function(sReason) {
	if (this._oGrowingDelegate) {
		// inform growing delegate to handle
		this._oGrowingDelegate.updateItems(sReason);
	} else {
		if (this._bReceivingData) {
			// if we are receiving the data this should be oDataModel
			// updateStarted is already handled before on refreshItems
			// here items binding is updated because data is came from server
			// so we can convert the flag for the next request
			this._bReceivingData = false;
		} else {
			// if data is not requested this should be JSON Model
			// data is already in memory and will not be requested
			// so we do not need to change the flag
			// this._bReceivingData should be always false
			this._updateStarted(sReason);
		}

		// for flat list update items aggregation
		this.updateAggregation("items");
	}
};

sap.m.ListBase.prototype.bindAggregation = function(sName) {
	sName == "items" && this._resetItemsBinding();
	return this._applyAggregation("bind", arguments);
};

sap.m.ListBase.prototype._bindAggregation = function(sName) {
	sName == "items" && this._resetItemsBinding();
	return this._applyAggregation("_bind", arguments);
};

sap.m.ListBase.prototype.addAggregation = function (sAggregationName, oObject) {
	sAggregationName == "items" && this._applySettingsToItem(oObject);
	this._applyAggregation("add", arguments);
	sAggregationName == "items" && this._applySelectionToItem(oObject);
	return this;
};

sap.m.ListBase.prototype.insertAggregation = function(sAggregationName, oObject) {
	sAggregationName == "items" && this._applySettingsToItem(oObject);
	this._applyAggregation("insert", arguments);
	sAggregationName == "items" && this._applySelectionToItem(oObject);
	return this;
};

sap.m.ListBase.prototype.destroyAggregation = function(sAggregationName) {
	sAggregationName == "items" && (this._oSelectedItem = null);
	return this._applyAggregation("destroy", arguments);
};

sap.m.ListBase.prototype.removeAggregation = function(sAggregationName) {
	var oObject = this._applyAggregation("remove", arguments);
	if (sAggregationName == "items" && oObject && oObject === this._oSelectedItem) {
		this._oSelectedItem = null;
	}
	return oObject;
};

sap.m.ListBase.prototype.removeAllAggregation = function(sAggregationName) {
	sAggregationName == "items" && (this._oSelectedItem = null);
	return this._applyAggregation("removeAll", arguments);
};

sap.m.ListBase.prototype.getId = function(sSuffix) {
	var sId = this.sId;
	return sSuffix ? sId + "-" + sSuffix : sId;
};

sap.m.ListBase.prototype.setGrowing = function(bGrowing) {
	bGrowing = !!bGrowing;
	if (this.getGrowing() != bGrowing) {
		this.setProperty("growing", bGrowing, !bGrowing);
		if (bGrowing) {
			jQuery.sap.require("sap.m.GrowingEnablement");
			this._oGrowingDelegate = new sap.m.GrowingEnablement(this);
		} else if (this._oGrowingDelegate) {
			this._oGrowingDelegate.destroy();
			this._oGrowingDelegate = null;
		}
	}
	return this;
};

sap.m.ListBase.prototype.setGrowingThreshold = function(iThreshold) {
	this.setProperty("growingThreshold", iThreshold, true);
	this._oItemNavigation && this._oItemNavigation.setPageSize(this.getGrowingThreshold());
	return this;
};

sap.m.ListBase.prototype.setGrowingTriggerText = function(sText) {
	this.setProperty("growingTriggerText", sText, true);
	if (this._oGrowingDelegate) {
		this._oGrowingDelegate.setTriggerText(this.getGrowingTriggerText());
	}
	return this;
};

sap.m.ListBase.prototype.setEnableBusyIndicator = function(bEnable) {
	return this.setProperty("enableBusyIndicator", bEnable, true);
};

sap.m.ListBase.prototype.setBackgroundDesign = function(sBgDesign) {
	var sBgDesignOld = this.getBackgroundDesign();
	this.setProperty("backgroundDesign", sBgDesign, true);
	this.$().removeClass("sapMListBG" + sBgDesignOld).addClass("sapMListBG" + this.getBackgroundDesign());
	return this;
};

sap.m.ListBase.prototype.setShowSeparators = function(sSeparators) {
	var sSeparatorsOld = this.getShowSeparators();
	this.setProperty("showSeparators", sSeparators, true);
	this.$("listUl").removeClass("sapMListShowSeparators" + sSeparatorsOld).addClass("sapMListShowSeparators" + this.getShowSeparators());
	return this;
};

sap.m.ListBase.prototype.setIncludeItemInSelection = function(bInclude) {
	bInclude = this.validateProperty("includeItemInSelection", bInclude);
	if (bInclude != this.getIncludeItemInSelection()) {
		this.setProperty("includeItemInSelection", bInclude, true);
		this.getItems().forEach(function(oItem) {
			oItem._includeItemInSelection = bInclude;
			oItem.$().toggleClass("sapMLIBCursor", bInclude);
		});
	}
	return this;
};

sap.m.ListBase.prototype.setInset = function(bInset) {
	bInset = this.validateProperty("inset", bInset);
	if (bInset != this.getInset()) {
		this.setProperty("inset", bInset, true);
		if (this.getDomRef()) {
			this.$().toggleClass("sapMListInsetBG", bInset);
			this.$("listUl").toggleClass("sapMListInset", bInset);
			this._setSwipePosition();
		}
	}
	return this;
};

sap.m.ListBase.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth, true);
	this.$().css("width", this.getWidth());
	return this;
};

sap.m.ListBase.prototype.setNoDataText = function(sNoDataText) {
	this.setProperty("noDataText", sNoDataText, true);
	this.$("nodata-text").text(this.getNoDataText());
	return this;
};

sap.m.ListBase.prototype.getNoDataText = function(bCheckBusy) {
	// check busy state
	if (bCheckBusy && this._bBusy) {
		return "";
	}

	// return no data text from resource bundle when there is no custom
	var sNoDataText = this.getProperty("noDataText");
	if (!sNoDataText) {
		var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.m");
		sNoDataText = oRB.getText("LIST_NO_DATA");
	}
	return sNoDataText;
};

sap.m.ListBase.prototype.getSelectedItem = function() {
	var aItems = this.getItems();
	for (var i = 0; i < aItems.length; i++) {
		if (aItems[i].getSelected()) {
			return aItems[i];
		}
	}
	return null;
};

sap.m.ListBase.prototype.setSelectedItem = function(oListItem, bSelect, bFireEvent) {
	if (!oListItem instanceof sap.m.ListItemBase) {
		jQuery.sap.log.warning("setSelectedItem is called without ListItem parameter on " + this);
		return;
	}
	if (this._bSelectionMode) {
		oListItem.setSelected((typeof bSelect == "undefined") ? true : !!bSelect);
		bFireEvent && this._fireSelectionChangeEvent([oListItem]);
	}
};

sap.m.ListBase.prototype.getSelectedItems = function() {
	return this.getItems().filter(function(oItem) {
		return oItem.getSelected();
	});
};

sap.m.ListBase.prototype.setSelectedItemById = function(sId, bSelect) {
	var oListItem = sap.ui.getCore().byId(sId);
	return this.setSelectedItem(oListItem, bSelect);
};

sap.m.ListBase.prototype.getSelectedContexts = function(bAll) {
	var oBindingInfo = this.getBindingInfo("items"),
		sModelName = (oBindingInfo || {}).model,
		oModel = this.getModel(sModelName);

	// only deal with binding case
	if (!oBindingInfo || !oModel) {
		return [];
	}

	// return binding contexts from all selection paths
	if (bAll && this.getRememberSelections()) {
		return this._aSelectedPaths.map(function(sPath) {
			return oModel.getContext(sPath);
		});
	}

	// return binding context of current selected items
	return this.getSelectedItems().map(function(oItem) {
		return oItem.getBindingContext(sModelName);
	});
};

sap.m.ListBase.prototype.removeSelections = function(bAll, bFireEvent) {
	var aChangedListItems = [];
	this._oSelectedItem = null;
	bAll && (this._aSelectedPaths.length = 0);
	this.getItems().forEach(function(oItem) {
		if (oItem.getSelected()) {
			oItem.setSelected(false, true);
			aChangedListItems.push(oItem);
			!bAll && this._updateSelectedPaths(oItem);
		}
	}, this);

	if (bFireEvent && aChangedListItems.length) {
		this._fireSelectionChangeEvent(aChangedListItems);
	}
	return this;
};

sap.m.ListBase.prototype.selectAll = function (bFireEvent) {
	if (this.getMode() != "MultiSelect") {
		return this;
	}

	var aChangedListItems = [];
	this.getItems().forEach(function(oItem) {
		if (!oItem.getSelected()) {
			oItem.setSelected(true, true);
			aChangedListItems.push(oItem);
			this._updateSelectedPaths(oItem);
		}
	}, this);

	if (bFireEvent && aChangedListItems.length) {
		this._fireSelectionChangeEvent(aChangedListItems);
	}
	return this;
};

sap.m.ListBase.prototype.setMode = function(sMode) {
	var sOldMode = this.getMode();
	if (sOldMode != sMode) {
		this.setProperty("mode", sMode);
		var iSelectionLength = this.getSelectedItems().length;
		this._bSelectionMode = this.getMode().indexOf("Select") > -1;

		// remove selection only if needed
		if (iSelectionLength > 1 || !this._bSelectionMode) {
			this.removeSelections(true);
		}
	}
	return this;
};

sap.m.ListBase.prototype.getGrowingInfo = function() {
	if (this._oGrowingDelegate) {
		return this._oGrowingDelegate.getInfo();
	}
	return null;
};

sap.m.ListBase.prototype.setRememberSelections = function(bRemember) {
	this.setProperty("rememberSelections", bRemember, true);
	!this.getRememberSelections() && (this._aSelectedPaths.length = 0);
	return this;
};

/*
 * This function runs when setSelected is called from ListItemBase
 * @protected
 */
sap.m.ListBase.prototype.onItemSetSelected = function(oItem, bSelect) {
	if (this.getMode() == "MultiSelect") {
		this._updateSelectedPaths(oItem, bSelect);
		return;
	}

	if (bSelect) {
		this._aSelectedPaths.length = 0;
		this._oSelectedItem && this._oSelectedItem.setSelected(false, true);
		this._oSelectedItem = oItem;
	} else if (this._oSelectedItem === oItem) {
		this._oSelectedItem = null;
	}

	// update selection path for item
	this._updateSelectedPaths(oItem, bSelect);
};

/*
 * Returns items container DOM reference
 * @protected
 */
sap.m.ListBase.prototype.getItemsContainerDomRef = function() {
	return this.getDomRef("listUl");
};

/*
 * This hook method gets called if growing feature is enabled and before new page loaded
 * @protected
 */
sap.m.ListBase.prototype.onBeforePageLoaded = function(oGrowingInfo, sChangeReason) {
	this._fireUpdateStarted(sChangeReason, oGrowingInfo);
	this.fireGrowingStarted(oGrowingInfo);
};

/*
 * This hook method get called if growing feature is enabled and after new page loaded
 * @protected
 */
sap.m.ListBase.prototype.onAfterPageLoaded = function(oGrowingInfo, sChangeReason) {
	// remove nodata text if we get new data
	if (this.getShowNoData() && oGrowingInfo.total) {
		this.$("nodata").remove();
	}

	// refresh item navigation
	this._startItemNavigation();

	// fire events
	this._fireUpdateFinished(oGrowingInfo);
	this.fireGrowingFinished(oGrowingInfo);
};

/*
 * Adds navigation section that we can be navigate with alt + down/up
 * @protected
 */
sap.m.ListBase.prototype.addNavSection = function(sId) {
	this._aNavSections.push(sId);
	return sId;
};

/*
 * Returns the max items count.
 * If aggregation items is bound the count will be the length of the binding
 * otherwise the length of the list items aggregation will be returned
 * @protected
 */
sap.m.ListBase.prototype.getMaxItemsCount = function() {
	var oBinding = this.getBinding("items");
	if (oBinding) {
		return oBinding.getLength() || 0;
	}
	return this.getItems().length;
};

/*
 * This hook method is called from renderer to determine whether items should render or not
 * @protected
 */
sap.m.ListBase.prototype.shouldRenderItems = function() {
	return true;
};

// call the base aggregation functions according to given parameters
sap.m.ListBase.prototype._applyAggregation = function(sFunction, oParams) {
	return sap.ui.core.Control.prototype[sFunction + "Aggregation"].apply(this, oParams);
};

// when new items binding we should turn back to initial state
sap.m.ListBase.prototype._resetItemsBinding = function() {
	if (this.isBound("items")) {
		this._bUpdating = false;
		this._bReceivingData = false;
		this.removeSelections(true);
		this._hideBusyIndicator();
		this._oGrowingDelegate && this._oGrowingDelegate.reset();
	}
};

// called before update started via sorting/filtering/growing etc.
sap.m.ListBase.prototype._updateStarted = function(sReason) {
	// if data receiving/update is not started or ongoing
	if (!this._bReceivingData && !this._bUpdating) {
		this._bUpdating = true;
		this._fireUpdateStarted(sReason);
	}
};

// fire updateStarted event with update reason and actual/total info
sap.m.ListBase.prototype._fireUpdateStarted = function(sReason, oInfo) {
	this._sUpdateReason = jQuery.sap.charToUpperCase(sReason || "Refresh");
	this.fireUpdateStarted({
		reason : this._sUpdateReason,
		actual : oInfo ? oInfo.actual : this.getItems().length,
		total : oInfo ? oInfo.total : this.getMaxItemsCount()
	});
};

// called on after rendering to finalize item update finished
sap.m.ListBase.prototype._updateFinished = function() {
	// check if data receiving/update is finished
	if (!this._bReceivingData && this._bUpdating) {
		this._fireUpdateFinished();
		this._bUpdating = false;
	}
};

// fire updateFinished event delayed to make sure rendering phase is done
sap.m.ListBase.prototype._fireUpdateFinished = function(oInfo) {
	jQuery.sap.delayedCall(0, this, function() {
		this._hideBusyIndicator();
		this.fireUpdateFinished({
			reason : this._sUpdateReason,
			actual : oInfo ? oInfo.actual : this.getItems().length,
			total : oInfo ? oInfo.total : this.getMaxItemsCount()
		});
	});
};

sap.m.ListBase.prototype._showBusyIndicator = function() {
	if (this.getEnableBusyIndicator() && !this.getBusy() && !this._bBusy) {
		// set the busy state
		this._bBusy = true;

		// TODO: would be great to have an event when busy indicator visually seen
		this._sBusyTimer = jQuery.sap.delayedCall(this.getBusyIndicatorDelay(), this, function() {
			// clean no data text
			this.$("nodata-text").text("");
		});

		// set busy property
		this.setBusy(true, "listUl");
	}
};

sap.m.ListBase.prototype._hideBusyIndicator = function() {
	if (this._bBusy) {
		// revert busy state
		this.setBusy(false);

		// revert no data texts when necessary
		jQuery.sap.clearDelayedCall(this._sBusyTimer);
		this.$("nodata-text").text(this.getNoDataText());
		this._bBusy = false;
	}
};

/*
 * Apply ListBase settings to given list item if selectable
 * TODO: There should be a better way to set these private variables
 */
sap.m.ListBase.prototype._applySettingsToItem = function(oItem, bOnlyProperties) {
	if (!oItem) {
		return oItem;
	}

	oItem._listId = this.getId();
	oItem._showUnread = this.getShowUnread();
	if (!oItem.isSelectable()) {
		return oItem;
	}

	oItem._mode = this.getMode();
	oItem._modeAnimationOn = this.getModeAnimationOn();
	oItem._includeItemInSelection = this.getIncludeItemInSelection();
	if (bOnlyProperties) {
		return oItem;
	}

	// FIXME: very lame to share events
	oItem._select = this._select;
	oItem._delete = this._delete;

	if (!oItem.getParent() && oItem.getSelected()) {
		this.onItemSetSelected(oItem, true);
	}

	return oItem;
};

// select item if it was already selected before and not selected now
sap.m.ListBase.prototype._applySelectionToItem = function(oItem) {
	if (!this.getRememberSelections() || !oItem || !this._bSelectionMode || !this._aSelectedPaths.length || oItem.getSelected()) {
		return;
	}

	var sPath = oItem.getBindingContextPath();
	if (sPath && this._aSelectedPaths.indexOf(sPath) > -1) {
		oItem.setSelected(true);
	}
};

// List fires select event caused by checkbox/radiobutton
sap.m.ListBase.prototype._select = function(oEvent) {
	var oListItem = sap.ui.getCore().byId(this.oParent.getId()),
		oList = sap.ui.getCore().byId(oListItem._listId),
		bSelect = oEvent.getParameter("selected"),
		sMode = oList.getMode();

	oListItem.setSelected(bSelect);

	if (sMode == "MultiSelect") {
		oList._fireSelectionChangeEvent([oListItem]);
	} else if (oList._bSelectionMode && bSelect) {
		oList._fireSelectionChangeEvent([oListItem]);
	}
};

// List fires select event caused by the list item
sap.m.ListBase.prototype._selectTapped = function(oListItem) {
	this._fireSelectionChangeEvent([oListItem]);
};

// Fire selectionChange event and support old select event API
sap.m.ListBase.prototype._fireSelectionChangeEvent = function(aListItems) {
	var oListItem = aListItems && aListItems[0];
	if (!oListItem) {
		return;
	}

	// fire event
	this.fireSelectionChange({
		listItem : oListItem,
		listItems : aListItems,
		selected : oListItem.getSelected()
	});

	// support old API
	this.fireSelect({ listItem : oListItem });
};

// List fires delete event caused by the delete image
sap.m.ListBase.prototype._delete = function(oEvent) {
	var oListItem = sap.ui.getCore().byId(this.oParent.getId());
	var oList = sap.ui.getCore().byId(oListItem._listId);
	oList.fireDelete({
		listItem : oListItem
	});
};

// this will be called from item when it is pressed to fire event
// FIXME: why item does not fire its own events
sap.m.ListBase.prototype._onItemPressed = function(oItem, oEvent) {
	jQuery.sap.delayedCall(0, this, function(){
		this.fireItemPress({
			listItem : oItem,
			srcControl : oEvent.srcControl || oItem
		});
	});
};

// insert or remove given item's path from selection array
sap.m.ListBase.prototype._updateSelectedPaths = function(oItem, bSelect) {
	if (!this.getRememberSelections()) {
		return;
	}

	var sPath = oItem.getBindingContextPath();
	if (!sPath) {
		return;
	}

	bSelect = (typeof bSelect == "undefined") ? oItem.getSelected() : bSelect;
	var iIndex = this._aSelectedPaths.indexOf(sPath);
	if (bSelect) {
		iIndex < 0 && this._aSelectedPaths.push(sPath);
	} else {
		iIndex > -1 && this._aSelectedPaths.splice(iIndex, 1);
	}
};

sap.m.ListBase.prototype._destroyGrowingDelegate = function() {
	if (this._oGrowingDelegate) {
		this._oGrowingDelegate.destroy();
		this._oGrowingDelegate = null;
	}
};

sap.m.ListBase.prototype._destroyItemNavigation = function() {
	if (this._oItemNavigation) {
		this.removeEventDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		this._oItemNavigation = null;
	}
};

/**
 * After swipe content is shown on the right hand side of the list item
 * we will block the touch events and this method defines this touch blocker area.
 * It must be always child/ren of the area because we will listen parent's touch events
 *
 * @private
 */
sap.m.ListBase.prototype._getTouchBlocker = function() {
	return this._$touchBlocker || (this._$touchBlocker = this.$().children());
};

sap.m.ListBase.prototype._getSwipeContainer = function() {
	return this._$swipeContainer || (
		jQuery.sap.require("sap.m.InstanceManager"),
		this._$swipeContainer = jQuery("<div>", {
			"id" : this.getId("swp"),
			"class" : "sapMListSwp"
		})
	);
};

sap.m.ListBase.prototype._setSwipePosition = function() {
	if (this._isSwipeActive) {
		return this._getSwipeContainer().css("top", this._swipedItem.$().position().top);
	}
};

sap.m.ListBase.prototype._renderSwipeContent = function() {
	var $listitem = this._swipedItem.$(),
		$container = this._getSwipeContainer();

	// add swipe container into list if it is not there
	this.$().prepend($container.css({
		top : $listitem.position().top,
		height : $listitem.outerHeight(true)
	}));

	// render swipe content into swipe container if needed
	if (this._bRerenderSwipeContent) {
		this._bRerenderSwipeContent = false;
		var rm = sap.ui.getCore().createRenderManager();
		rm.render(this.getSwipeContent(), $container.empty()[0]);
		rm.destroy();
	}

	// for method chaining
	return this;
};

sap.m.ListBase.prototype._swipeIn = function() {
	var that = this,	// scope
		$blocker = that._getTouchBlocker(),
		$container = that._getSwipeContainer();

	// render swipe content
	that._isSwipeActive = true;
	that._renderSwipeContent();

	// add to instance manager
	sap.m.InstanceManager.addDialogInstance(that);

	// maybe keyboard is opened
	window.document.activeElement.blur();

	// check orientation change and recalculate the position
	jQuery(window).on("resize.swp", function() {
		that._setSwipePosition();
	});

	// block touch events
	$blocker.css("pointer-events", "none").on("touchstart.swp mousedown.swp", function(e){
		if (!$container[0].firstChild.contains(e.target)) {
			e.preventDefault();
			e.stopPropagation();
		}
	});

	// UX: swipeout is not interruptible till animation is finished
	$container.bind("webkitAnimationEnd animationend", function() {
		jQuery(this).unbind("webkitAnimationEnd animationend");
		// disable animation and focus to container
		$container.css("opacity", 1).focus();

		// check parents touchend for auto hide mode
		$blocker.parent().on("touchend.swp touchcancel.swp mouseup.swp", function(e) {
			// checks if event source is coming from swipe container's first child
			if (!$container[0].firstChild.contains(e.target)) {
				that.swipeOut();
			}
		});
	}).removeClass("sapMListSwpOutAnim").addClass("sapMListSwpInAnim");
};

sap.m.ListBase.prototype._onSwipeOut = function(callback) {
	// remove container from DOM and disable animation event
	this._getSwipeContainer().css("opacity", 0).remove();

	// remove windows resize listener
	jQuery(window).off("resize.swp");

	// enable touch events again
	this._getTouchBlocker().css("pointer-events", "auto").off("touchstart.swp mousedown.swp");

	if (typeof callback == "function") {
		callback.call(this, this._swipedItem, this.getSwipeContent());
	}

	this._isSwipeActive = false;

	// remove from instance manager
	sap.m.InstanceManager.removeDialogInstance(this);
};

sap.m.ListBase.prototype.swipeOut = function(callback) {
	if (!this._isSwipeActive) {
		return this;
	}

	var that = this,
		$container = this._getSwipeContainer();

	// stop listening parents touchend event
	this._getTouchBlocker().parent().off("touchend.swp touchend.swp touchcancel.swp mouseup.swp");

	// add swipeout animation and listen this
	$container.bind("webkitAnimationEnd animationend", function() {
		jQuery(this).unbind("webkitAnimationEnd animationend");
		that._onSwipeOut(callback);
	}).removeClass("sapMListSwpInAnim").addClass("sapMListSwpOutAnim");

	return this;
};

/**
 * Close and hide the opened swipe content immediately
 * @private
 */
sap.m.ListBase.prototype._removeSwipeContent = function() {
	if (this._isSwipeActive) {
		this.swipeOut()._onSwipeOut();
	}
};

/**
 * This method is required from sap.m.InstanceManager
 * To remove swipe content when back button is pressed
 */
sap.m.ListBase.prototype.close = sap.m.ListBase.prototype._removeSwipeContent;

// called on swipe event to bring in the swipeContent control
sap.m.ListBase.prototype._onSwipe = function(oEvent) {
	var oContent = this.getSwipeContent(),
		oSrcControl = oEvent.srcControl;

	if (oContent && oSrcControl && !this._isSwipeActive && this !== oSrcControl && !this._eventHandledByControl
			// also enable the swipe feature when runs on Windows 8 device
			&& (sap.ui.Device.support.touch || (sap.ui.Device.os.windows && sap.ui.Device.os.version >= 8))) {
		// source can be anything so, check parents and find the list item
		for (var li = oSrcControl; li && !(li instanceof sap.m.ListItemBase); li = li.oParent);
		if (li instanceof sap.m.ListItemBase) {
			this._swipedItem = li;

			// fire event earlier to let the user change swipeContent according to list item
			// if the event not is canceled then start the animation
			this.fireSwipe({
				listItem : this._swipedItem,
				swipeContent : oContent,
				srcControl : oSrcControl
			}, true) && this._swipeIn();
		}
	}
};

sap.m.ListBase.prototype.ontouchstart = function(oEvent) {
	this._eventHandledByControl = oEvent.isMarked();
};

sap.m.ListBase.prototype.onswipeleft = function(oEvent) {
	var exceptDirection = sap.ui.getCore().getConfiguration().getRTL() ? "RightToLeft" : "LeftToRight";

	if (this.getSwipeDirection() != exceptDirection) {
		this._onSwipe(oEvent);
	}
};

sap.m.ListBase.prototype.onswiperight = function(oEvent) {
	var exceptDirection = sap.ui.getCore().getConfiguration().getRTL() ? "LeftToRight" : "RightToLeft";

	if (this.getSwipeDirection() != exceptDirection) {
		this._onSwipe(oEvent);
	}
};

sap.m.ListBase.prototype.setSwipeDirection = function(sDirection) {
	return this.setProperty("swipeDirection", sDirection, true);
};

sap.m.ListBase.prototype.getSwipedItem = function() {
	return (this._isSwipeActive ? this._swipedItem : null);
};

sap.m.ListBase.prototype.setSwipeContent = function(oControl) {
	this._bRerenderSwipeContent = true;

	this.addStyleClass("sapMListSwipable");

	// prevent list from re-rendering on setSwipeContent
	return this.setAggregation("swipeContent", oControl, true);
};

sap.m.ListBase.prototype.invalidate = function(oOrigin) {
	if (oOrigin && oOrigin === this.getSwipeContent()) {
		this._bRerenderSwipeContent = true;
	}

	sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	return this;
};

sap.m.ListBase.prototype.addItemGroup = function(oGroup, oHeader, bSuppressInvalidate) {
	oHeader = oHeader || new sap.m.GroupHeaderListItem({
		title: oGroup.text || oGroup.key
	});

	this.addAggregation("items", oHeader, bSuppressInvalidate);
	return oHeader;
};

sap.m.ListBase.prototype.removeGroupHeaders = function(bSuppressInvalidate) {
	this.getItems().forEach(function(oItem) {
		if (oItem instanceof sap.m.GroupHeaderListItem) {
			oItem.destroy(bSuppressInvalidate);
		}
	});
};

/* Keyboard Handling */
sap.m.ListBase.prototype._startItemNavigation = function() {
	if (!this.getItems().length) {
		this._destroyItemNavigation();
		return;
	}

	if (!this._oItemNavigation) {
		this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this._oItemNavigation.setCycling(false);
		this.addEventDelegate(this._oItemNavigation);

		// TODO: Maybe we need a real paging algorithm here
		this._oItemNavigation.setPageSize(this.getGrowingThreshold());

		// implicitly setting table mode with one column
		// to disable up/down reaction on events of the cell
		this._oItemNavigation.setTableMode(true, true).setColumns(1);

		// alt + up/down will be used for section navigation
		// notify item navigation not to handle alt key modifiers
		this._oItemNavigation.setDisabledModifiers({
			sapnext : ["alt"],
			sapprevious : ["alt"]
		});
	}

	// set navigation items
	var oItemsContainer = this.getItemsContainerDomRef();
	if (oItemsContainer) {
		this._oItemNavigation.setRootDomRef(oItemsContainer);
		this._oItemNavigation.setItemDomRefs(oItemsContainer.childNodes);
	}
};

/**
 * Returns ItemNavigation for controls uses List
 * @since 1.16.5
 * @protected
 */
sap.m.ListBase.prototype.getItemNavigation = function() {
	return this._oItemNavigation;
};

// navigate to previous or next section according to current focus position
sap.m.ListBase.prototype._navToSection = function(bForward) {
	var $Section;
	var iIndex = 0;
	var iStep = bForward ? 1 : -1;
	var iLength = this._aNavSections.length;

	// find the current section index
	this._aNavSections.some(function(sSectionId, iSectionIndex) {
		var oSectionDomRef = jQuery.sap.domById(sSectionId);
		if (oSectionDomRef && oSectionDomRef.contains(document.activeElement)) {
			iIndex = iSectionIndex;
			return true;
		}
	});

	// find the next focusable section
	this._aNavSections.some(function() {
		iIndex = (iIndex + iStep + iLength) % iLength;	// circle
		$Section = jQuery.sap.byId(this._aNavSections[iIndex]);
		if ($Section.is(":focusable")) {
			$Section.focus();
			return true;
		}
	}, this);

	// return the found section
	return $Section;
};

// move focus to the next/prev tabbable element after or before the list
// TODO: This implementation search parent which means we are out of our sandbox!
sap.m.ListBase.prototype._navToTabChain = function(bAfter) {
	var iStep = bAfter ? 1 : -1;
	var sElement = bAfter ? "after" : "before";
	var $Element = this.$(sElement).attr("tabindex", "0");

	// search all parents to find next/prev tabbable item
	for (var oParent = this; (oParent = oParent.getParent()) && oParent.$;) {
		var $Tabbables = oParent.$().find(":sapTabbable");
		var iLimit = bAfter ? $Tabbables.length - 1 : 0;
		var iIndex = $Tabbables.index($Element);

		// should have more tabbables then dummy before or after element
		// should keep searching if the $Element is the first or last one
		if ($Tabbables.length > 1 && iIndex != iLimit) {
			break;
		}
	}

	// find next/prev tabbable item and reset tabindex
	$Tabbables = $Tabbables || this.$().parent().find(":sapTabbable");
	iIndex = $Tabbables.index($Element) + iStep;
	$Element.attr("tabindex", "-1");

	// focus and return the found tabbable if possible
	return $Tabbables[iIndex] && $Tabbables.eq(iIndex).focus();
};

// Handle F6
sap.m.ListBase.prototype.onsapskipforward = function(oEvent) {
	// do not handle marked events
	if (oEvent.isMarked()) {
		return;
	}

	// focus to the next tabbable element after the control
	if (this._navToTabChain(true)) {
		oEvent.preventDefault();
		oEvent.setMarked();
	}
};

// Handle Shift + F6
sap.m.ListBase.prototype.onsapskipback = function(oEvent) {
	// do not handle marked events
	if (oEvent.isMarked()) {
		return;
	}

	// focus to the previous tabbable element before the control
	if (this._navToTabChain(false)) {
		oEvent.preventDefault();
		oEvent.setMarked();
	}
};

// Handle Alt + Down
sap.m.ListBase.prototype.onsapshow = function(oEvent) {
	// do not handle marked events and ignore F4
	if (oEvent.isMarked() || oEvent.which == jQuery.sap.KeyCodes.F4) {
		return;
	}

	// move focus to the next section
	if (this._navToSection(true)) {
		oEvent.preventDefault();
		oEvent.setMarked();
	}
};

// Handle Alt + Up
sap.m.ListBase.prototype.onsaphide = function(oEvent) {
	// do not handle marked events
	if (oEvent.isMarked()) {
		return;
	}

	// move focus to the previous section
	if (this._navToSection(false)) {
		oEvent.preventDefault();
		oEvent.setMarked();
	}
};

}; // end of sap/m/ListBase.js
if ( !jQuery.sap.isDeclared('sap.m.MessageBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.m.MessageBox
jQuery.sap.declare("sap.m.MessageBox");



jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/**
 * @class Provides easier methods to create sap.m.Dialog with type sap.m.DialogType.Message, such as standard alerts, 
 * confirmation dialogs, or arbitrary message dialogs.
 *
 * As <code>MessageBox</code> is a static class, a <code>jQuery.sap.require("sap.m.MessageBox");</code> statement
 * must be explicitly executed before the class can be used. Example:
 * <pre>
 *   jQuery.sap.require("sap.m.MessageBox");
 *   sap.m.MessageBox.show(
 *       "This message should appear in the message box.",
 *       sap.m.MessageBox.Icon.INFORMATION,
 *       "My message box title",
 *       [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO],
 *       function() { / * do something * / }
 *	 );
 * </pre>
 *
 * @static
 * @public
 * @since 1.9.2
 */
sap.m.MessageBox = {};

sap.m.MessageBox._bOneDesign = (sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== "true");

sap.m.MessageBox._rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

/**
 * @class Enumeration of supported actions in a MessageBox.
 *
 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
 * specifying the set of allowed actions as well as reporting back the user choice.
 * @static
 * @public
 */
sap.m.MessageBox.Action = {

  /**
   * Adds an "Ok" button to the message box.
   * @public
   */
  OK : "OK",

  /**
   * Adds a "Cancel" button to the message box.
   * @public
   */
  CANCEL : "CANCEL",

  /**
   * Adds a "Yes" button to the message box.
   * @public
   */
  YES : "YES",

  /**
   * Adds a "No" button to the message box.
   * @public
   */
  NO : "NO",

  /**
   * Adds an "Abort" button to the message box.
   * @public
   */
  ABORT : "ABORT",

  /**
   * Adds a "Retry" button to the message box.
   * @public
   */
  RETRY : "RETRY",

  /**
   * Adds an "Ignore" button to the message box.
   * @public
   */
  IGNORE : "IGNORE",

  /**
   * Adds a "Close" button to the message box.
   * @public
   */
  CLOSE : "CLOSE",
	  
  /**
   * Adds a "Delete" button to the message box.
   * @public
   */
  DELETE : "DELETE"
};

/**
 * @class Enumeration of the pre-defined icons that can be used in a MessageBox.
 * @static
 * @public
 */
sap.m.MessageBox.Icon = {

  /**
   * Shows no icon in the message box.
   * @public
   */
  NONE : undefined,
  /**
   * Shows the information icon in the message box.
   * @public
   */
  INFORMATION : "INFORMATION",

  /**
   * Shows the warning icon in the message box.
   * @public
   */
  WARNING : "WARNING",

  /**
   * Shows the error icon in the message box.
   * @public
   */
  ERROR : "ERROR",

  /**
   * Shows the success icon in the message box.
   * @public
   */
  SUCCESS : "SUCCESS",

  /**
   * Shows the question icon in the message box.
   * @public
   */
  QUESTION : "QUESTION"
};

(function() {
	var Action = sap.m.MessageBox.Action,
		Icon = sap.m.MessageBox.Icon,
		mClasses = {
				"INFORMATION": "sapMMessageBoxInfo",
				"WARNING": "sapMMessageBoxWarning",
				"ERROR": "sapMMessageBoxError",
				"SUCCESS": "sapMMessageBoxSuccess",
				"QUESTION": "sapMMessageBoxQuestion"
			},
		sURLBase,
		mIcons;
	
		if(sap.m.MessageBox._bOneDesign){
			mIcons = {
				"INFORMATION": sap.ui.core.IconPool.getIconURI("hint"),
				"WARNING": sap.ui.core.IconPool.getIconURI("warning2"),
				"ERROR": sap.ui.core.IconPool.getIconURI("alert"),
				"SUCCESS": sap.ui.core.IconPool.getIconURI("accept"),
				"QUESTION": sap.ui.core.IconPool.getIconURI("incident")
			};
		}else{
			sURLBase = jQuery.sap.getModulePath("sap.m", "/") + "themes/" 
				+ sap.ui.getCore().getConfiguration().getTheme()
				+ "/img/messagebox/";
			mIcons = {
				"INFORMATION": sURLBase + "info.png",
				"WARNING": sURLBase + "warning.png",
				"ERROR": sURLBase + "error.png",
				"SUCCESS": sURLBase + "success.png",
				"QUESTION": sURLBase + "question.png"
			};
		}

	/**
	 * Creates and displays a sap.m.Dialog with type sap.m.DialogType.Message with the given text and buttons, and optionally other parts.
	 * After the user has tapped a button, the <code>callback</code> function is invoked when given.
	 *
	 * The only mandatory parameter is <code>sMessage</code>.
	 *
	 * The created dialog is executed asynchronously. When it has been created and registered for rendering,
	 * this function returns without waiting for a user reaction.
	 *
	 * When applications have to react on the users choice, they have to provide a callback function and
	 * postpone any reaction on the user choice until that callback is triggered.
	 *
	 * The signature of the callback is
	 *
	 *   function (oAction);
	 *
	 * where <code>oAction</code> is the button that the user has tapped. For example, when the user has pressed the close button,
	 * a sap.m.MessageBox.Action.Close is returned.
	 *
	 * @param {string} sMessage The message to be displayed.
	 * @param {sap.m.MessageBox.Icon} [oIcon=None] The icon to be displayed.
	 * @param {string} [sTitle=''] The title of the message box.
	 * @param {sap.m.MessageBox.Action|sap.m.MessageBox.Action[]|string|string[]} [vActions] Either a single action, or an array of two actions.
	 *      If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter. If more than two actions are given,
	 *      only the first two actions are taken. Custom action string(s) can be provided, and then the translation of custom action string(s) needs to be done by the application.
	 * @param {function} [fnCallback] Function to be called when the user has tapped a button or has closed the message box.
	 * @param {string} [sDialogId] ID to be used for the dialog. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.m.MessageBox.show = function(sMessage, oIcon, sTitle, vActions, fnCallback, sDialogId) {
		var oDialog, oResult = null, that = this;
		
		// normalize the vActions array
		if(typeof vActions !== "undefined" && !jQuery.isArray(vActions)) {
			vActions = [vActions];
		}
		if(!vActions || vActions.length === 0) {
			vActions = [Action.OK];
		}
		//only allows maximum two actions
		if(vActions.length > 2) {
			vActions = vActions.slice(0, 2);
		}
		// create a unique ID
		sDialogId = sDialogId || sap.ui.core.ElementMetadata.uid("mbox");

		/** creates a button for the given action */
		function button(sAction) {
			var sKey = "MSGBOX_"+ sAction,
				sText = that._rb.getText(sKey);
			
			//not from defined actions
			if(sKey === sText){
				sText = sAction;
			}
			
			var	oButton = new sap.m.Button({
				id: sap.ui.core.ElementMetadata.uid("mbox-btn-"),
				text: sText || sAction,
				press: function () {
					oResult = sAction;
					oDialog.close();
				}
			});
			return oButton;
		}

		function onclose() {
			if(typeof fnCallback === "function") {
				fnCallback(oResult);
			}
			oDialog.detachAfterClose(onclose);
			oDialog.destroy();
		}
		
		oDialog = new sap.m.Dialog({
			id: sDialogId,
			type: sap.m.DialogType.Message,
			title: sTitle,
			icon: mIcons[oIcon],
			leftButton: button(vActions[0]),
			content: new sap.m.Text({
				text: sMessage
			}).addStyleClass("sapMMsgBoxText"),
			afterClose: onclose
		});
		
		if(mClasses[oIcon]){
			oDialog.addStyleClass(mClasses[oIcon]);
		}
		
		if(vActions[1]){
			oDialog.setRightButton(button(vActions[1]));
		}
		
		oDialog.open();
	};

	/**
	 * Displays an alert dialog with the given message and an OK button (no icons).
	 * If a callback is given, it is called after the alert dialog has been closed
	 * by the user via the OK button. The callback is called with the following signature:
	 *
	 * <pre>
	 *   function (oAction)
	 * </pre>
	 * 
	 * where <code>oAction</code> can be either sap.m.MessageBox.Action.OK when the alert dialog is closed by tapping on the OK button 
	 * 	or null when the alert dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>.
	 *
	 * The alert dialog opened by this method is processed asynchronously.
	 * Applications have to use the <code>fnCallback</code> to continue work after the
	 * user closed the alert dialog.
	 *
	 * @param {string} sMessage Message to be displayed in the alert dialog
	 * @param {function} [fnCallback] callback function to be called when the user closes the dialog
	 * @param {string} [sTitle='Alert'] Title to be displayed in the alert dialog
	 * @param {string} [sDialogId] ID to be used for the alert dialog. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.m.MessageBox.alert = function(sMessage, fnCallback, sTitle, sDialogId) {
		return sap.m.MessageBox.show(sMessage, Icon.NONE, 
				sTitle ? sTitle : this._rb.getText("MSGBOX_TITLE_ALERT"), Action.OK,
				function(oAction) {
					if ( typeof fnCallback === "function" ) {
						fnCallback(oAction);
					}
				}, sDialogId || sap.ui.core.ElementMetadata.uid("alert"));
	};

	
	//TODO: change the documentation after icon is available
	/**
	 * Displays a confirmation dialog with the given message, no icon (will be provided later)
	 * an OK button, and a Cancel button. If a callback is given, it is called after the
	 * alert box has been closed by the user via one of the buttons.
	 * The callback is called with the following signature
	 *
	 * <pre>
	 *   function(oAction)
	 * </pre>
	 *
	 * where oAction is set by one of the following three values:
	 * 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.
	 * 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.
	 * 3. null: Confirm dialog is closed by Calling <code>sap.m.InstanceManager.closeAllDialogs()</code>
	 *
	 * The confirmation dialog opened by this method is processed asynchronously.
	 * Applications have to use the <code>fnCallback</code> to continue work after the
	 * user closed the confirmation dialog
	 *
	 * @param {string} sMessage Message to display in the confirmation dialog
	 * @param {function} [fnCallback] Callback to be called when the user closes the dialog
	 * @param {string} [sTitle='Confirmation'] Title to display in the confirmation dialog
	 * @param {string} [sDialogId] ID to be used for the confirmation dialog. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.m.MessageBox.confirm = function(sMessage, fnCallback, sTitle, sDialogId) {
		return sap.m.MessageBox.show(sMessage, Icon.QUESTION,
				sTitle ? sTitle : this._rb.getText("MSGBOX_TITLE_CONFIRM"), [Action.OK, Action.CANCEL],
				function(oAction) {
					if ( typeof fnCallback === "function" ) {
						fnCallback(oAction);
					}
				}, sDialogId || sap.ui.core.ElementMetadata.uid("confirm"));
	};

}());
}; // end of sap/m/MessageBox.js
if ( !jQuery.sap.isDeclared('sap.m.SplitApp') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SplitApp.
jQuery.sap.declare("sap.m.SplitApp");




/**
 * Constructor for a new SplitApp.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SplitApp#event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.SplitContainer#constructor sap.m.SplitContainer}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * SplitApp is another root element of a UI5 mobile application besides App control. It maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitApp.
 * @extends sap.m.SplitContainer
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.SplitApp
 */
sap.m.SplitContainer.extend("sap.m.SplitApp", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"homeIcon" : {type : "any", group : "Misc", defaultValue : null}
	},
	events : {
		"orientationChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SplitApp with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SplitApp.extend
 * @function
 */

sap.m.SplitApp.M_EVENTS = {'orientationChange':'orientationChange'};


/**
 * Getter for property <code>homeIcon</code>.
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * 
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * 
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>homeIcon</code>
 * @public
 * @name sap.m.SplitApp#getHomeIcon
 * @function
 */

/**
 * Setter for property <code>homeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#setHomeIcon
 * @function
 */


/**
 * This event will be fired when orientation (portrait/landscape) is changed. 
 *
 * @name sap.m.SplitApp#orientationChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.landscape Returns true if the device is in landscape.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * This event will be fired when orientation (portrait/landscape) is changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachOrientationChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachOrientationChange
 * @function
 */

/**
 * Fire event orientationChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'landscape' of type <code>boolean</code> Returns true if the device is in landscape.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireOrientationChange
 * @function
 */


// Start of sap\m\SplitApp.js


/**************************************************************
* START - Life Cycle Methods
**************************************************************/
sap.m.SplitApp.prototype.init = function() {
	sap.m.SplitContainer.prototype.init.apply(this, arguments);
	this.addStyleClass("sapMSplitApp");
	jQuery.sap.initMobile({
		viewport: !this._debugZoomAndScroll,
		statusBar: "default",
		hideBrowser: true,
		preventScroll: !this._debugZoomAndScroll,
		rootId: this.getId()
	});
};

sap.m.SplitApp.prototype.onBeforeRendering = function() {
	sap.m.SplitContainer.prototype.onBeforeRendering.apply(this, arguments);
	jQuery(window).unbind("resize", this._fireOrientationChange);
	jQuery.sap.initMobile({
		homeIcon: this.getHomeIcon()
	});
};

sap.m.SplitApp.prototype.onAfterRendering = function(){
	sap.m.SplitContainer.prototype.onAfterRendering.apply(this, arguments);

    var ref = this.getDomRef().parentNode;
    // set all parent elements to 100% height this *should* be done by the application in CSS, but people tend to forget it...
    if (ref && !ref._sapui5_heightFixed) {
        ref._sapui5_heightFixed = true;
        while (ref && ref !== document.documentElement) {
            var $ref = jQuery(ref);
            if ($ref.attr("data-sap-ui-root-content")) { // Shell as parent does this already
                break;
            }
            if (!ref.style.height) ref.style.height = "100%";
            ref = ref.parentNode;
        }
    }

    jQuery(window).bind("resize", jQuery.proxy(this._fireOrientationChange, this));
};

sap.m.SplitApp.prototype.exit = function() {
	sap.m.SplitContainer.prototype.exit.apply(this, arguments);
	jQuery(window).unbind("resize", this._fireOrientationChange);
};
/**************************************************************
* END - Life Cycle Methods
**************************************************************/

sap.m.SplitApp.prototype._fireOrientationChange = function() {
	var isLandscape = sap.ui.Device.orientation.landscape;
	if (this._oldIsLandscape !== isLandscape) {
		this.fireOrientationChange({landscape: isLandscape});
	}
};
}; // end of sap/m/SplitApp.js
if ( !jQuery.sap.isDeclared('sap.m.StandardTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.StandardTile.
jQuery.sap.declare("sap.m.StandardTile");




/**
 * Constructor for a new StandardTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getType type} : sap.m.StandardTileType (default: sap.m.StandardTileType.None)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The StandardTile
 * @extends sap.m.Tile
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.12
 * @name sap.m.StandardTile
 */
sap.m.Tile.extend("sap.m.StandardTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"info" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"number" : {type : "string", group : "Misc", defaultValue : null},
		"numberUnit" : {type : "string", group : "Misc", defaultValue : null},
		"infoState" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None},
		"type" : {type : "sap.m.StandardTileType", group : "Misc", defaultValue : sap.m.StandardTileType.None},
		"iconDensityAware" : {type : "boolean", group : "Appearance", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.m.StandardTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.StandardTile.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Tile title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.StandardTile#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setTitle
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * Tile description
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.m.StandardTile#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setInfo
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Tile icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.StandardTile#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setIcon
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * Tile active icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.StandardTile#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Number field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>number</code>
 * @public
 * @name sap.m.StandardTile#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setNumber
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.m.StandardTile#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>infoState</code>.
 * Info state defines the color of the info text. E.g. Error, Warning, Success...
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * @name sap.m.StandardTile#getInfoState
 * @function
 */

/**
 * Setter for property <code>infoState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oInfoState  new value for property <code>infoState</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setInfoState
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Tile type.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.m.StandardTileType} the value of property <code>type</code>
 * @public
 * @name sap.m.StandardTile#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.m.StandardTileType} oType  new value for property <code>type</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setType
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.StandardTile#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setIconDensityAware
 * @function
 */


// Start of sap\m\StandardTile.js
///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained



/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.m.StandardTile.prototype.exit = function() {
	if(this._oImageControl) {
		this._oImageControl.destroy();
		this._oImageControl = null;
	}	
};

/**
 * Overrides the icon property of the Tile Control
 */
sap.m.StandardTile.prototype.getIcon = function() {
	if(!this.getProperty("icon") && this.getType() === "Create") {
		return sap.ui.core.IconPool.getIconURI("add");
	} else {
		return this.getProperty("icon");
	}
};


/**
 * Lazy load tile icon image.
 * @private
 */
sap.m.StandardTile.prototype._getImage = function() {
	
	var sImgId = this.getId() + "-img";
	var sSize = sap.ui.Device.system.phone ? "1.3rem": "2rem";
	
	var mProperties = { 
		src : this.getIcon(),
		height : sSize,
		width : sSize,
		size: sSize,
		densityAware : this.getIconDensityAware()
	};
	
	this._oImageControl = sap.m.ImageHelper.getImageControl(sImgId, this._oImageControl, this, mProperties);
	
	return this._oImageControl;
};

}; // end of sap/m/StandardTile.js
if ( !jQuery.sap.isDeclared('sap.m.Table') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Table.
jQuery.sap.declare("sap.m.Table");




/**
 * Constructor for a new Table.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: sap.m.BackgroundDesign.Translucent)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Table control provides a set of sophisticated and convenience functions for responsive table design.
 * For mobile devices, the recommended limit of table rows is 100(based on 4 columns) to assure proper performance. To improve initial rendering on large tables, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information
 * @extends sap.m.ListBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.Table
 */
sap.m.ListBase.extend("sap.m.Table", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"backgroundDesign" : {type : "sap.m.BackgroundDesign", group : "Appearance", defaultValue : sap.m.BackgroundDesign.Translucent}
	},
	aggregations : {
    	"columns" : {type : "sap.m.Column", multiple : true, singularName : "column"}
	}
}});


/**
 * Creates a new subclass of class sap.m.Table with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Table.extend
 * @function
 */


/**
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of the table. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
 *
 * Default value is <code>Translucent</code>
 *
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * @name sap.m.Table#getBackgroundDesign
 * @function
 */

/**
 * Setter for property <code>backgroundDesign</code>.
 *
 * Default value is <code>Translucent</code> 
 *
 * @param {sap.m.BackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Table#setBackgroundDesign
 * @function
 */


/**
 * Getter for aggregation <code>columns</code>.<br/>
 * Columns of the Table
 * 
 * @return {sap.m.Column[]}
 * @public
 * @name sap.m.Table#getColumns
 * @function
 */


/**
 * Inserts a column into the aggregation named <code>columns</code>.
 *
 * @param {sap.m.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Table#insertColumn
 * @function
 */

/**
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 *
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Table#addColumn
 * @function
 */

/**
 * Removes an column from the aggregation named <code>columns</code>.
 *
 * @param {int | string | sap.m.Column} vColumn the column to remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @public
 * @name sap.m.Table#removeColumn
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Table#removeAllColumns
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Table#indexOfColumn
 * @function
 */
	

/**
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.m.Table} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Table#destroyColumns
 * @function
 */


// Start of sap\m\Table.js
sap.m.Table.prototype.init = function() {
	this._hasPopin = false;
	this._selectAllCheckBox = null;
	sap.m.ListBase.prototype.init.call(this);
};

sap.m.Table.prototype.onBeforeRendering = function() {
	this.getDomRef() && this._notifyColumns("ItemsRemoved");
	sap.m.ListBase.prototype.onBeforeRendering.call(this);
	this._navRenderedBy = "";
};

sap.m.Table.prototype.onAfterRendering = function() {
	sap.m.ListBase.prototype.onAfterRendering.call(this);

	// table root
	var $table = jQuery(this.getTableDomRef());

	// if any item has navigation, add required class
	this._navRenderedBy && $table.addClass("sapMListTblHasNav");

	// notify columns after rendering
	this._notifyColumns("ColumnRendered", $table);

	// update select-all
	this.updateSelectAllCheckbox();
};

sap.m.Table.prototype.exit = function () {
	sap.m.ListBase.prototype.exit.call(this);
	if (this._selectAllCheckBox) {
		this._selectAllCheckBox.destroy();
		this._selectAllCheckBox = null;
	}
};

sap.m.Table.prototype.destroyAggregation = function(sAggregationName) {
	sAggregationName == "items" && this._notifyColumns("ItemsRemoved");
	return sap.m.ListBase.prototype.destroyAggregation.apply(this, arguments);
};

sap.m.Table.prototype.removeAllAggregation = function(sAggregationName) {
	sAggregationName == "items" && this._notifyColumns("ItemsRemoved");
	return sap.m.ListBase.prototype.removeAllAggregation.apply(this, arguments);
};

sap.m.Table.prototype.removeSelections = function() {
	sap.m.ListBase.prototype.removeSelections.apply(this, arguments);
	this.updateSelectAllCheckbox();
	return this;
};

sap.m.Table.prototype.selectAll = function () {
	sap.m.ListBase.prototype.selectAll.apply(this, arguments);
	this.updateSelectAllCheckbox();
	return this;
};

/**
 * Getter for aggregation columns.
 *
 * @param {Boolean} [bSort] set true to get the columns in an order that respects personalization settings
 * @returns {sap.m.Column[]} columns of the Table
 * @public
 */
sap.m.Table.prototype.getColumns = function(bSort) {
	var aColumns = this.getAggregation("columns", []);
	if (bSort) {
		aColumns.sort(function(c1, c2) {
			return c1.getOrder() - c2.getOrder();
		});
	}
	return aColumns;
};

/*
 * This hook method is called if growing feature is enabled and after new page loaded
 * @overwrite
 */
sap.m.Table.prototype.onAfterPageLoaded = function() {
	this.updateSelectAllCheckbox();
	this._navRenderedBy && jQuery(this.getTableDomRef()).addClass("sapMListTblHasNav");
	sap.m.ListBase.prototype.onAfterPageLoaded.apply(this, arguments);
};

/*
 * This hook method is called from renderer to determine whether items should render or not
 * @overwrite
 */
sap.m.Table.prototype.shouldRenderItems = function() {
	return this.getColumns().some(function(oColumn) {
		return oColumn.getVisible();
	});
};

/*
 * This function runs when setSelected is called from ListItemBase
 * @overwrite
 */
sap.m.Table.prototype.onItemSetSelected = function(oItem, bSelect) {
	sap.m.ListBase.prototype.onItemSetSelected.apply(this, arguments);
	jQuery.sap.delayedCall(0, this, function() {
		this.updateSelectAllCheckbox();
	});
};

// Handle pop-in touch start events for active feedback
sap.m.Table.prototype.ontouchstart = function(oEvent) {
	sap.m.ListBase.prototype.ontouchstart.call(this, oEvent);
	this._handlePopinEvent(oEvent);
};

// Handle pop-in touch end events for active feedback
sap.m.Table.prototype.ontouchend = function(oEvent) {
	this._handlePopinEvent(oEvent);
};

// Android cancels touch events by native scrolling, deactivate popin
sap.m.Table.prototype.ontouchcancel = sap.m.Table.prototype.ontouchend;

// Handle pop-in touch move events for active feedback
sap.m.Table.prototype.ontouchmove = function(oEvent) {
	this._handlePopinEvent(oEvent);
};

// Handle pop-in tap events for active feedback
sap.m.Table.prototype.ontap = function(oEvent) {
	this._handlePopinEvent(oEvent);
};

/*
 * Returns the <table> DOM reference
 * @protected
 */
sap.m.Table.prototype.getTableDomRef = function() {
	return this.getDomRef("listUl");
};

/*
 * Returns items container DOM reference
 * @protected
 */
sap.m.Table.prototype.getItemsContainerDomRef = function() {
	return this.getDomRef("tblBody");
};

/*
 * This method is called asynchronously if resize event comes from column
 * @protected
 */
sap.m.Table.prototype.onColumnResize = function(oColumn) {
	// if list did not have pop-in and will not have pop-in
	// then we do not need re-render, we can just change display of column
	if (!this.hasPopin() && !this._mutex) {
		var hasPopin = this.getColumns().some(function(col) {
			return col.isPopin();
		});

		if (!hasPopin) {
			oColumn.setDisplayViaMedia(this.getTableDomRef());
			return;
		}
	}

	this._dirty = window.innerWidth;
	if (!this._mutex) {
		var clean = window.innerWidth;
		this._mutex = true;
		this.rerender();

		// do not re-render if resize event comes so frequently
		jQuery.sap.delayedCall(200, this, function() {
			// but check if any event come during the wait-time
			if (Math.abs(this._dirty - clean) > 10) {
				this._dirty = 0;
				this.rerender();
			}
			this._mutex = false;
		});
	}
};

/*
 * This method is called from Column control when column visibility is changed via CSS media query
 *
 * @param bColVisible {boolean} whether column is now visible or not
 * @protected
 */
sap.m.Table.prototype.setTableHeaderVisibility = function(bColVisible) {
	if (!this.getDomRef()) {
		return;
	}

	// find first visible column
	var $table = jQuery(this.getTableDomRef()),
		$headRow = $table.find("thead > tr"),
		bHeaderVisible = !$headRow.hasClass("sapMListTblHeaderNone"),
		aVisibleColumns = $headRow.find(".sapMListTblCell").filter(":visible"),
		$firstVisibleCol = aVisibleColumns.eq(0);

	// check if only one column is visible
	if (aVisibleColumns.length == 1) {
		$firstVisibleCol.width("");	// cover the space
	} else {
		$firstVisibleCol.width($firstVisibleCol.attr("data-sap-orig-width"));
	}

	// remove or show column header row(thead) according to column visibility value
	if (!bColVisible && bHeaderVisible) {
		$headRow[0].className = "sapMListTblRow sapMListTblHeader";
	} else if (bColVisible && !bHeaderVisible && !aVisibleColumns.length) {
		$headRow[0].className = "sapMListTblHeaderNone";
	}
};

// notify all columns with given action and param
sap.m.Table.prototype._notifyColumns = function(action, param) {
	this.getColumns().forEach(function(oColumn) {
		oColumn["on" + action](param);
	});
};

// pass pop-in events to ColumnListItem
sap.m.Table.prototype._handlePopinEvent = function(oEvent, bRowOnly) {
	if (oEvent.isMarked()) {
		return;
	}

	if (bRowOnly && !sap.m.ColumnListItem.isPopinFocused()) {
		return;
	}

	if (this.hasPopin()) {
		sap.m.ColumnListItem.handleEvents(oEvent, this.getItemsContainerDomRef());
	}
};

/**
 * This method takes care of the select all checkbox for table lists. It
 * will automatically be created on demand and returned when needed
 *
 * @private
 * @return {sap.m.CheckBox} reference to the internal select all checkbox
 */
sap.m.Table.prototype._getSelectAllCheckbox = function() {
	return this._selectAllCheckBox || (this._selectAllCheckBox = new sap.m.CheckBox(this.getId("sa"), {
		activeHandling : false,
	}).setParent(this, null, true).attachSelect(function () {
		if (this._selectAllCheckBox.getSelected()) {
			this.selectAll(true);
		} else {
			this.removeSelections(false, true);
		}
	}, this).setTabIndex(-1));
};

/*
 * Internal public function to update the selectAll checkbox
 * according to the current selection on the list items.
 *
 * @protected
 */
sap.m.Table.prototype.updateSelectAllCheckbox = function () {
	// checks if the list is in multi select mode and has selectAll checkbox
	if (this._selectAllCheckBox && this.getMode() === "MultiSelect") {
		var aItems = this.getItems(),
			iSelectedItemCount = this.getSelectedItems().length,
			iSelectableItemCount = aItems.filter(function(oItem) {
				return oItem.isSelectable();
			}).length;

		// set state of the checkbox by comparing item length and selected item length
		this._selectAllCheckBox.setSelected(aItems.length > 0 && iSelectedItemCount == iSelectableItemCount);
	}
};

/*
 * Returns colspan for all columns except navigation
 * Because we render navigation always even it is empty
 *
 * @protected
 */
sap.m.Table.prototype.getColSpan = function() {
	return (this._colCount || 1 ) - 1;
};

/*
 * Returns the number of total columns
 *
 * @protected
 */
sap.m.Table.prototype.getColCount = function() {
	return (this._colCount || 0);
};

/*
 * Returns whether or not the table is in pop-in mode
 *
 * @protected
 */
sap.m.Table.prototype.hasPopin = function() {
	return !!this._hasPopin;
};

// keyboard handling
sap.m.Table.prototype.onsapspace = function(oEvent) {
	if (oEvent.isMarked()) {
		return;
	}

	// toggle select all header checkbox and fire its event
	if (oEvent.target === this.getDomRef("tblHeader") && this._selectAllCheckBox) {
		this._selectAllCheckBox.setSelected(!this._selectAllCheckBox.getSelected()).fireSelect();
		oEvent.preventDefault();
		oEvent.setMarked();
	}

	// handle space event for pop-in
	this._handlePopinEvent(oEvent, true);
};

// Handle enter event for pop-in
sap.m.Table.prototype.onsapenter = function(oEvent) {
	this._handlePopinEvent(oEvent, true);
};

// Handle delete event for pop-in
sap.m.Table.prototype.onsapdelete = function(oEvent) {
	this._handlePopinEvent(oEvent, true);
};

}; // end of sap/m/Table.js
if ( !jQuery.sap.isDeclared('sap.m.TableSelectDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.TableSelectDialog.
jQuery.sap.declare("sap.m.TableSelectDialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TableSelectDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.m.ColumnListItem[]</li>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.TableSelectDialog#event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TableSelectDialog#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TableSelectDialog#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TableSelectDialog#event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A TableSelectDialog provides you a easier way to create a dialog that contains a list with grouping and search functionality.
 * The Table used in a SelectDialog is a Table with Columns. After selecting an item, the dialog will be closed and a callback function will return the item being selected.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.TableSelectDialog
 */
sap.ui.core.Control.extend("sap.m.TableSelectDialog", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"open"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"noDataText" : {type : "string", group : "Appearance", defaultValue : null},
		"multiSelect" : {type : "boolean", group : "Dimension", defaultValue : false},
		"growingThreshold" : {type : "int", group : "Misc", defaultValue : null},
		"contentWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"rememberSelections" : {type : "boolean", group : "Behavior", defaultValue : false}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.m.ColumnListItem", multiple : true, singularName : "item", bindable : "bindable"}, 
    	"_dialog" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"columns" : {type : "sap.m.Column", multiple : true, singularName : "column", bindable : "bindable"}
	},
	events : {
		"confirm" : {}, 
		"search" : {}, 
		"liveChange" : {}, 
		"cancel" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.TableSelectDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.TableSelectDialog.extend
 * @function
 */

sap.m.TableSelectDialog.M_EVENTS = {'confirm':'confirm','search':'search','liveChange':'liveChange','cancel':'cancel'};


/**
 * Getter for property <code>title</code>.
 * The title text appears in the dialog header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.TableSelectDialog#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#setTitle
 * @function
 */


/**
 * Getter for property <code>noDataText</code>.
 * This is the text shown when the table has no data.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * @name sap.m.TableSelectDialog#getNoDataText
 * @function
 */

/**
 * Setter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#setNoDataText
 * @function
 */


/**
 * Getter for property <code>multiSelect</code>.
 * If on, the user can select several options from the table.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * @name sap.m.TableSelectDialog#getMultiSelect
 * @function
 */

/**
 * Setter for property <code>multiSelect</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bMultiSelect  new value for property <code>multiSelect</code>
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#setMultiSelect
 * @function
 */


/**
 * Getter for property <code>growingThreshold</code>.
 * Number of items initially displayed in the table
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>growingThreshold</code>
 * @public
 * @name sap.m.TableSelectDialog#getGrowingThreshold
 * @function
 */

/**
 * Setter for property <code>growingThreshold</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iGrowingThreshold  new value for property <code>growingThreshold</code>
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#setGrowingThreshold
 * @function
 */


/**
 * Getter for property <code>contentWidth</code>.
 * The content width of the inner dialog. See dialog documentation for more details.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * @since 1.18
 * @name sap.m.TableSelectDialog#getContentWidth
 * @function
 */

/**
 * Setter for property <code>contentWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentWidth  new value for property <code>contentWidth</code>
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.18
 * @name sap.m.TableSelectDialog#setContentWidth
 * @function
 */


/**
 * Getter for property <code>rememberSelections</code>.
 * This flag controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
 * Note: This property must be set before the dialog is opened to have an effect.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>rememberSelections</code>
 * @public
 * @since 1.18
 * @name sap.m.TableSelectDialog#getRememberSelections
 * @function
 */

/**
 * Setter for property <code>rememberSelections</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRememberSelections  new value for property <code>rememberSelections</code>
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.18
 * @name sap.m.TableSelectDialog#setRememberSelections
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items of the table.
 * 
 * <strong>Note</strong>: this is the default aggregation for TableSelectDialog.
 * @return {sap.m.ColumnListItem[]}
 * @public
 * @name sap.m.TableSelectDialog#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.m.ColumnListItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.m.ColumnListItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.m.ColumnListItem} vItem the item to remove or its index or id
 * @return {sap.m.ColumnListItem} the removed item or null
 * @public
 * @name sap.m.TableSelectDialog#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ColumnListItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.TableSelectDialog#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ColumnListItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.TableSelectDialog#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#destroyItems
 * @function
 */


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#bindItems
 * @function
 */

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#unbindItems
 * @function
 */


/**
 * Getter for aggregation <code>columns</code>.<br/>
 * The columns bindings.
 * 
 * @return {sap.m.Column[]}
 * @public
 * @name sap.m.TableSelectDialog#getColumns
 * @function
 */


/**
 * Inserts a column into the aggregation named <code>columns</code>.
 *
 * @param {sap.m.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#insertColumn
 * @function
 */

/**
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 *
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#addColumn
 * @function
 */

/**
 * Removes an column from the aggregation named <code>columns</code>.
 *
 * @param {int | string | sap.m.Column} vColumn the column to remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @public
 * @name sap.m.TableSelectDialog#removeColumn
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.TableSelectDialog#removeAllColumns
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.TableSelectDialog#indexOfColumn
 * @function
 */
	

/**
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#destroyColumns
 * @function
 */


/**
 * Binder for aggregation <code>columns</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#bindColumns
 * @function
 */

/**
 * Unbinder for aggregation <code>columns</code>.
 *
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#unbindColumns
 * @function
 */


/**
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters. 
 *
 * @name sap.m.TableSelectDialog#confirm
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.StandardListItem} oControlEvent.getParameters.selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} oControlEvent.getParameters.selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} oControlEvent.getParameters.selectedContexts Returns the binding contexts of the selected items including the non-visible items. 
Note: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.TableSelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br/> itself. 
 *  
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 *
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#attachConfirm
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#detachConfirm
 * @function
 */

/**
 * Fire event confirm to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.m.StandardListItem</code> Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.</li>
 * <li>'selectedItems' of type <code>sap.m.StandardListItem[]</code> Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.</li>
 * <li>'selectedContexts' of type <code>string</code> Returns the binding contexts of the selected items including the non-visible items. 
Note: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TableSelectDialog#fireConfirm
 * @function
 */


/**
 * Fired when the search button has been clicked on dialog. 
 *
 * @name sap.m.TableSelectDialog#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The value entered in the search field.
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.TableSelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br/> itself. 
 *  
 * Fired when the search button has been clicked on dialog. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 *
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value entered in the search field.</li>
 * <li>'itemsBinding' of type <code>any</code> The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TableSelectDialog#fireSearch
 * @function
 */


/**
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 *
 * @name sap.m.TableSelectDialog#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The value entered in the search field.
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.TableSelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br/> itself. 
 *  
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 *
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value entered in the search field.</li>
 * <li>'itemsBinding' of type <code>any</code> The Items binding of the Table Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TableSelectDialog#fireLiveChange
 * @function
 */


/**
 * This event will be fired when the cancel button is clicked 
 *
 * @name sap.m.TableSelectDialog#cancel
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.TableSelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TableSelectDialog</code>.<br/> itself. 
 *  
 * This event will be fired when the cancel button is clicked 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code>.<br/> itself.
 *
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#attachCancel
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.TableSelectDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TableSelectDialog#detachCancel
 * @function
 */

/**
 * Fire event cancel to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TableSelectDialog#fireCancel
 * @function
 */


/**
 * Opens the table select dialog.
 *
 * @name sap.m.TableSelectDialog.prototype.open
 * @function
 * @param {string} 
 *         sSearchValue
 *         Value for the search. The table will be automatically trigger the search event if value if this parameter is set.

 * @type sap.m.TableSelectDialog
 * @public
 */


// Start of sap\m\TableSelectDialog.js
/*!
 * @copyright@
 */






/* =========================================================== */
/*           begin: API methods                                */
/* =========================================================== */

/**
 * Initializes the control
 * @private
 */
sap.m.TableSelectDialog.prototype.init = function () {
	var that = this,
		iLiveChangeTimer = 0,
		fnResetAfterClose = null;

	fnResetAfterClose = function () {
		that._oSelectedItem = that._oTable.getSelectedItem();
		that._aSelectedItems = that._oTable.getSelectedItems();

		that._oDialog.detachAfterClose(fnResetAfterClose);
		that._fireConfirmAndUpdateSelection();
	};

	this._bAppendedToUIArea = false;
	this._bInitBusy = false;
	this._bFirstRender = true;
	this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

	// store a reference to the table for binding management
	this._oTable = new sap.m.Table(this.getId() + "-table", {
		growing: true,
		growingScrollToLoad: true,
		mode: sap.m.ListMode.SingleSelectMaster,
		infoToolbar: new sap.m.Toolbar({
			visible: false,
			active: false,
			content: [
				new sap.m.Label({
					text: this._oRb.getText("TABLESELECTDIALOG_SELECTEDITEMS", [0])
				})
			]
		}),
		selectionChange: function (oEvent) {
			if (that._oDialog) {
				if (!that.getMultiSelect()) { 
					// attach the reset function to afterClose to hide the dialog changes from the end user 
					that._oDialog.attachAfterClose(fnResetAfterClose);
					that._oDialog.close();
				} else {
					// update the selection label
					that._updateSelectionIndicator();
				}
			}
		}
	});
	this._table = this._oTable; // for downward compatibility

	// store a reference to the busyIndicator to display when data is currently loaded by a service
	this._oBusyIndicator = new sap.m.BusyIndicator(this.getId() + "-busyIndicator").addStyleClass("sapMTableSelectDialogBusyIndicator", true);

	// store a reference to the searchField for filtering
	this._oSearchField = new sap.m.SearchField(this.getId() + "-searchField", {
		width: "100%",
		liveChange: function (oEvent) {
			var sValue = oEvent.getSource().getValue(),
			iDelay = (sValue ? 300 : 0); // no delay if value is empty

			// execute search after user stopped typing for 300ms
			clearTimeout(iLiveChangeTimer);
			if (iDelay) {
				iLiveChangeTimer = setTimeout(function () {
					that._executeSearch(sValue, "liveChange");
				}, iDelay);
			} else {
				that._executeSearch(sValue, "liveChange");
			}
		},
		search: function (oEvent) {
			that._executeSearch(oEvent.getSource().getValue(), "search");
		}
	});
	this._searchField = this._oSearchField; // for downward compatibility

	// store a reference to the subheader for hiding it when data loads
	this._oSubHeader = new sap.m.Bar(this.getId() + "-subHeader", {
		contentMiddle: [
			this._searchField
		]
	});

	// store a reference to the internal dialog 
	this._oDialog = new sap.m.Dialog(this.getId() + "-dialog", {
		stretch: sap.ui.Device.system.phone,
		contentHeight: "2000px",
		subHeader: this._oSubHeader,
		content: [this._oBusyIndicator, this._oTable],
		leftButton: this._getCancelButton()
	});
	this._dialog = this._oDialog; // for downward compatibility

	//CSN# 3863876/2013: ESC key should also cancel dialog, not only close it
	var fnDialogEscape = this._oDialog.onsapescape;
	this._oDialog.onsapescape = function(oEvent) {
		// call original escape function of the dialog
		if(fnDialogEscape) {
			fnDialogEscape.call(that._oDialog, oEvent);
		}
		// execute cancel action
		that._onCancel();
	};

	// internally set top and bottom margin of the dialog to 8rem respectively
	this._oDialog._iVMargin = 8 * parseInt(sap.ui.core.theming.Parameters.get("sapUiFontSize") || 16, 10); //128

	// helper variables for search update behaviour
	this._sSearchFieldValue = "";

	// flags to control the busy indicator behaviour because the growing table will always show the no data text when updating
	this._bFirstRequest = true; // to only show the busy indicator for the first request when the dialog has been openend
	this._iTableUpdateRequested = 0; // to only show the busy indicator when we initiated the change
};

/**
 * Destroys the control
 * @private
 */
sap.m.TableSelectDialog.prototype.exit = function () {
	// internal variables
	this._oTable = null;
	this._oSearchField = null;
	this._oSubHeader = null;
	this._oBusyIndicator = null;
	this._sSearchFieldValue = null;
	this._iTableUpdateRequested = null;
	this._bFirstRequest = false;
	this._bInitBusy = false;
	this._bFirstRender = false;

	if (this._oDialog) {
		this._oDialog.destroy();
		this._oDialog = null;
	}

	if (this._oOkButton) { 
		this._oOkButton.destroy();
		this._oOkButton = null;
	}

	// selections
	this._oSelectedItem = null;
	this._aSelectedItems = null;
	this._aInitiallySelectedItems = null;

	// compatibility
	this._table = null; 
	this._searchField = null;
	this._dialog = null;
};

/*
* Is called after renderer is finished to show the busy state
* @overwrite
* @protected
* @returns {this} this pointer for chaining
*/
sap.m.TableSelectDialog.prototype.onAfterRendering = function () {
	if (this._bInitBusy && this._bFirstRender) {
		this._setBusy(true);
		this._bInitBusy = false;
		this._bFirstRender = false;
	}

	return this;
};

/*
* Invalidates the dialog instead of this control (we don't have a renderer)
* @overwrite
* @protected
* @returns {this} this pointer for chaining
*/
sap.m.TableSelectDialog.prototype.invalidate = function () {
	// CSN #80686/2014: only invalidate inner dialog if call does not come from inside
	if (this._oDialog && (!arguments[0] || arguments[0] && arguments[0].getId() !== this.getId() + "-dialog")) {
		this._oDialog.invalidate(arguments);
	} else {
		sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	}

	return this;
};

/**
* Opens the internal dialog with a searchfield and a table.
* @public
* @param {string} sValue Value for the table search.
* @returns {this} <code>this</code> to allow method chaining
*/
sap.m.TableSelectDialog.prototype.open = function (sSearchValue) {
	if (!this.getParent() && !this._bAppendedToUIArea) {
		var oStatic = sap.ui.getCore().getStaticAreaRef();
		oStatic = sap.ui.getCore().getUIArea(oStatic);
		oStatic.addContent(this, true);
		this._bAppendedToUIArea = true;
	}

	// reset internal variables
	this._bFirstRequest = true;

	// set search field value
	this._oSearchField.setValue(sSearchValue);

	// open the dialog
	this._oDialog.open();

	// open dialog with busy state if a list update is still in progress
	if (this._bInitBusy) {
		this._setBusy(true);
	}

	// store the current selection for the cancel event
	this._aInitiallySelectedItems = this._oTable.getSelectedItems();

	// refresh the selection indicator to be in sync with the model
	this._updateSelectionIndicator();

	//now return the control for chaining
	return this;
};

/**
* Sets the growing threshold to the internal table
* @public
* @param {int} iValue Value for the table's growing threshold.
* @returns {this} this pointer for chaining
*/
sap.m.TableSelectDialog.prototype.setGrowingThreshold = function (iValue) {
	this._oTable.setGrowingThreshold(iValue);
	this.setProperty("growingThreshold", iValue, true);

	return this;
};

/**
 * Enable/Disable multi selection mode.
 * @overwrite
 * @public
 * @param {boole} bMulti flag for multi selection mode
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype.setMultiSelect = function (bMulti) {
	this.setProperty("multiSelect", bMulti, true);
	if (bMulti) {
		this._oTable.setMode(sap.m.ListMode.MultiSelect); 
		this._oTable.setIncludeItemInSelection(true);
		this._oDialog.setRightButton(this._getCancelButton());
		this._oDialog.setLeftButton(this._getOkButton());
	} else {
		this._oTable.setMode(sap.m.ListMode.SingleSelectMaster); 
		this._oDialog.setLeftButton(this._getCancelButton());
	}

	return this;
};

/**
 * Set the title of the internal dialog
 * @overwrite
 * @public
 * @param {string} sTitle the title text for the dialog
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype.setTitle = function (sTitle) {
	this.setProperty("title", sTitle, true);
	this._oDialog.setTitle(sTitle);

	return this;
};

/**
 * Set the no data text of the internal table
 * @overwrite
 * @public
 * @param {string} sNoDataText the no data text for the table
 */
sap.m.TableSelectDialog.prototype.setNoDataText = function (sNoDataText) {
	this._oTable.setNoDataText(sNoDataText);

	return this;
};

/**
 * Reflector for the internal List's no data text property
 * @overwrite
 * @public
 * @returns {string} the current no data text
 */
sap.m.TableSelectDialog.prototype.getNoDataText = function () {
	return this._oTable.getNoDataText();
};

/**
 * Reflector for the internal Dialog's contentWidth property
 * @overwrite
 * @public
 * @returns {sap.ui.core.CSSSize} sWidth the content width of the internal dialog
 */
sap.m.TableSelectDialog.prototype.getContentWidth = function () {
	return this._oDialog.getContentWidth();
};

/**
 * Reflector for the internal Dialog's contentWidth property
 * @param {sap.ui.core.CSSSize} sWidth the new content width value for the dialog
 * @public
 * @overwrite
* @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype.setContentWidth = function (sWidth) {
	this._oDialog.setContentWidth(sWidth);

	return this;
};

/* =========================================================== */
/*           begin: forward aggregation  methods to table      */
/* =========================================================== */

/*
 * Set the model for the internal table AND the current control so that 
 * both controls can be used with data binding
 * @overwrite
 * @public
 * @param {sap.ui.Model} oModel the model that holds the data for the table
 * @param {string} sName the optional model name
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype._setModel = sap.m.TableSelectDialog.prototype.setModel;
sap.m.TableSelectDialog.prototype.setModel = function (oModel, sModelName) {
	var aArgs = Array.prototype.slice.call(arguments);

	// reset busy mode if model was changed
	this._setBusy(false);
	this._bInitBusy = false;

	// we made a request in this control, so we update the counter
	this._iTableUpdateRequested += 1;

	// attach events to listen to model updates and show/hide a busy indicator
	this._oTable.attachUpdateStarted(this._updateStarted, this);
	this._oTable.attachUpdateFinished(this._updateFinished, this);

	// pass the model to the table and also to the local control to allow binding of own properties
	this._oTable.setModel(oModel, sModelName);
	sap.m.TableSelectDialog.prototype._setModel.apply(this, aArgs);

	// reset the selection label when setting the model
	this._updateSelectionIndicator();

	return this;
};

/*
 * Forwards a function call to a managed object based on the aggregation name.
 * If the name is items, it will be forwarded to the table, otherwise called locally
 * @private
 * @param {string} sFunctionName the name of the function to be called
 * @param {string} sAggregationName the name of the aggregation asociated
 * @returns {mixed} the return type of the called function
 */
sap.m.TableSelectDialog.prototype._callMethodInManagedObject = function (sFunctionName, sAggregationName) {
	var aArgs = Array.prototype.slice.call(arguments);

	if (sAggregationName === "items") {
		// apply to the internal table
		return this._oTable[sFunctionName].apply(this._oTable, aArgs.slice(1));
	} else if (sAggregationName === "columns") {
		// apply to the internal table
		return this._oTable[sFunctionName].apply(this._oTable, aArgs.slice(1));
	} else {
		// apply to this control
		return sap.ui.base.ManagedObject.prototype[sFunctionName].apply(this, aArgs.slice(1));
	}
};

/**
 * Forwards aggregations with the name of items or columns to the internal table.
 * @overwrite
 * @public
 * @param {string} sAggregationName the name for the binding
 * @param {object} oBindingInfo the configuration parameters for the binding
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype.bindAggregation = function () {
	var args = Array.prototype.slice.call(arguments);

	// propagate the bind aggregation function to list
	this._callMethodInManagedObject.apply(this, ["bindAggregation"].concat(args));
	return this;
};

sap.m.TableSelectDialog.prototype.validateAggregation = function (sAggregationName, oObject, bMultiple) {
	return this._callMethodInManagedObject("validateAggregation", sAggregationName, oObject, bMultiple);
};

sap.m.TableSelectDialog.prototype.setAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {
	this._callMethodInManagedObject("setAggregation", sAggregationName, oObject, bSuppressInvalidate);
	return this;
};

sap.m.TableSelectDialog.prototype.getAggregation = function (sAggregationName, oDefaultForCreation) {
	return this._callMethodInManagedObject("getAggregation", sAggregationName, oDefaultForCreation);
};

sap.m.TableSelectDialog.prototype.indexOfAggregation = function (sAggregationName, oObject) {
	return this._callMethodInManagedObject("indexOfAggregation", sAggregationName, oObject);
};

sap.m.TableSelectDialog.prototype.insertAggregation = function (sAggregationName, oObject, iIndex, bSuppressInvalidate) {
	this._callMethodInManagedObject("insertAggregation", sAggregationName, oObject, iIndex, bSuppressInvalidate);
	return this;
};

sap.m.TableSelectDialog.prototype.addAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {
	this._callMethodInManagedObject("addAggregation", sAggregationName, oObject, bSuppressInvalidate);
	return this;
};

sap.m.TableSelectDialog.prototype.removeAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {
	this._callMethodInManagedObject("removeAggregation", sAggregationName, oObject, bSuppressInvalidate);
	return this;
};

sap.m.TableSelectDialog.prototype.removeAllAggregation = function (sAggregationName, bSuppressInvalidate) {
	return this._callMethodInManagedObject("removeAllAggregation", sAggregationName, bSuppressInvalidate);
};

sap.m.TableSelectDialog.prototype.destroyAggregation = function (sAggregationName, bSuppressInvalidate) {
	this._callMethodInManagedObject("destroyAggregation", sAggregationName, bSuppressInvalidate);
	return this;
};

sap.m.TableSelectDialog.prototype.getBinding = function (sAggregationName) {
	return this._callMethodInManagedObject("getBinding", sAggregationName);
};

sap.m.TableSelectDialog.prototype.getBindingInfo = function (sAggregationName) {
	return this._callMethodInManagedObject("getBindingInfo", sAggregationName);
};

sap.m.TableSelectDialog.prototype.getBindingPath = function (sAggregationName) {
	return this._callMethodInManagedObject("getBindingPath", sAggregationName);
};

sap.m.TableSelectDialog.prototype.getBindingContext = function (sModelName) {
	return this._oTable.getBindingContext(sModelName);
};

/*
 * Set the binding context for the internal table AND the current control so that 
 * both controls can be used with the context
 * @overwrite
 * @public
 * @param {sap.ui.model.Context} oContext the new context 
 * @param {string} sModelName the optional model name
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype._setBindingContext = sap.m.TableSelectDialog.prototype.setBindingContext;
sap.m.TableSelectDialog.prototype.setBindingContext = function (oContext, sModelName) {
	var args = Array.prototype.slice.call(arguments);

	// pass the model to the list and also to the local control to allow binding of own properties
	this._oTable.setBindingContext(oContext, sModelName);
	sap.m.TableSelectDialog.prototype._setBindingContext.apply(this, args);

	return this;
};

/* =========================================================== */
/*           end: forward aggregation  methods to table       */
/* =========================================================== */

/* =========================================================== */
/*           begin: internal methods and properties            */
/* =========================================================== */

/*
 * Fires the search event on the internal when dialog is opened. 
 * This function is also called whenever a search event on the searchfield is triggered 
 * @private
 * @param {string} sValue the new Search value or undefined if called by management functions
 * @param {string} sEventType the search field event type that has been called (liveChange / search)
 * @returns {this} this pointer for chaining
 */
sap.m.TableSelectDialog.prototype._executeSearch = function (sValue, sEventType) {
	var oTable = this._oTable,
		oBinding = (oTable ? oTable.getBinding("items") : undefined),
		bSearchValueDifferent = (this._sSearchFieldValue !== sValue); // to prevent unwanted duplicate requests

	// fire either the Search event or the liveChange event when dialog is opened.
	// 1) when the clear icon is called then both liveChange and search events are fired but we only want to process the first one
	// 2) when a livechange has been triggered by typing we don't want the next search event to be processed (typing + enter or typing + search button)
	if (this._oDialog.isOpen() && ((bSearchValueDifferent && sEventType === "liveChange") || sEventType === "search")) {
		// set the internal value to the passed value to check if the same value has already been filtered (happens when clear is called, it fires liveChange and change events)
		this._sSearchFieldValue = sValue;

		// only set when the binding has already been executed
		if (oBinding) {
			// we made another request in this control, so we update the counter
			this._iTableUpdateRequested += 1;
			if (sEventType === "search") {
				// fire the search so the data can be updated externally
				this.fireSearch({value: sValue, itemsBinding: oBinding});
			} else if (sEventType === "liveChange") {
				// fire the liveChange so the data can be updated externally						  
				this.fireLiveChange({value: sValue, itemsBinding: oBinding});
			}
		} else {
			// no binding, just fire the event for manual filtering
			if (sEventType === "search") {
				// fire the search so the data can be updated externally
				this.fireSearch({value: sValue});
			} else if (sEventType === "liveChange") {
				// fire the liveChange so the data can be updated externally						  
				this.fireLiveChange({value: sValue});
			}
		}
	}

	return this;
};

/*
 * Internal function that shows/hides a local busy indicator and hides/shows the list
 * based on the parameter flag. For the first request, the search field is also hidden.
 * @private
 * @param {boolean} bBusy flag (true = show, false = hide)
 */
sap.m.TableSelectDialog.prototype._setBusy = function (bBusy) {
	if (this._iTableUpdateRequested) { // check if the event was caused by our control
		if (bBusy) {
			if (this._bFirstRequest) { // also hide the header bar for the first request
				this._oSubHeader.$().css('display', 'none');
			}
			this._oTable.addStyleClass('sapMSelectDialogListHide');
			this._oBusyIndicator.$().css('display', 'inline-block');
		} else {
			if (this._bFirstRequest) { // also show the header bar again for the first request
				this._oSubHeader.$().css('display', 'block');
				this._bFirstRequest = false;
			}
			this._oTable.removeStyleClass('sapMSelectDialogListHide');
			this._oBusyIndicator.$().css('display', 'none');
		}
	}
};

/*
 * Event function that is called when the model sent a request to update the data.
 * It shows a busy indicator and hides searchField and list in the dialog. 
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.TableSelectDialog.prototype._updateStarted = function (oEvent) {
	if (this.getModel() && this.getModel() instanceof sap.ui.model.odata.ODataModel) {
		if (this._oDialog.isOpen() && this._iTableUpdateRequested) {
			// only set busy mode when we have an oData model
			this._setBusy(true);
		} else {
			this._bInitBusy = true;
		}
	}
};

/*
 * Event function that is called when the model request is finished.
 * It hides the busy indicator and shows searchField and list in the dialog. 
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.TableSelectDialog.prototype._updateFinished = function (oEvent) {
	this._updateSelectionIndicator();
	// only reset busy mode when we have an oData model
	if (this.getModel() && this.getModel() instanceof sap.ui.model.odata.ODataModel) {
		this._setBusy(false);
		this._bInitBusy = false;
	}

	// we received a request (from this or from another control) so set the counter to 0
	this._iTableUpdateRequested = 0;
};

/*
 * Lazy load the ok button if needed for MultiSelect mode
 * @private
 * @return {sap.m.Button} the button
 */
sap.m.TableSelectDialog.prototype._getOkButton = function () {
	var that = this,
		fnOKAfterClose = null;

	fnOKAfterClose = function () {
			that._oSelectedItem = that._oTable.getSelectedItem();
			that._aSelectedItems = that._oTable.getSelectedItems();

			that._oDialog.detachAfterClose(fnOKAfterClose);
			that._fireConfirmAndUpdateSelection();
		};

	if (!this._oOkButton) {
		this._oOkButton = new sap.m.Button(this.getId() + "-ok", {
			text: this._oRb.getText("MSGBOX_OK"),
			press: function () {
				// attach the reset function to afterClose to hide the dialog changes from the end user 
				that._oDialog.attachAfterClose(fnOKAfterClose);
				that._oDialog.close();
			}
		});
	}	
	return this._oOkButton;
};

/*
 * Lazy load the cancel button
 * @private
 * @return {sap.m.Button} the button
 */
sap.m.TableSelectDialog.prototype._getCancelButton = function () {
	var that = this;

	if (!this._oCancelButton) {
		this._oCancelButton = new sap.m.Button(this.getId() + "-cancel", {
			text: this._oRb.getText("MSGBOX_CANCEL"),
			press: function () {
				that._onCancel();
			}
		});
	}	
	return this._oCancelButton;
};

/*
 * Internal event handler for the cancel button and ESC key
 * @private
 */
sap.m.TableSelectDialog.prototype._onCancel = function (oEvent) {
	var that = this,
		fnAfterClose = null;

	fnAfterClose = function () {
		// reset internal selection values
		that._oSelectedItem = null;
		that._aSelectedItems = [];
		that._sSearchFieldValue = null;

		// detach this function
		that._oDialog.detachAfterClose(fnAfterClose);

		// fire cancel event
		that.fireCancel();

		// reset selection
		that._resetSelection();
	};

	// attach the reset function to afterClose to hide the dialog changes from the end user 
	this._oDialog.attachAfterClose(fnAfterClose);
	this._oDialog.close();
};

/*
 * Internal function to update the selection indicator bar
 * @private
 */
sap.m.TableSelectDialog.prototype._updateSelectionIndicator = function () {
	var iSelectedContexts = this._oTable.getSelectedContexts(true).length,
		oInfoBar = this._oTable.getInfoToolbar();

	// update the selection label
	oInfoBar.setVisible(!!iSelectedContexts);
	oInfoBar.getContent()[0].setText(this._oRb.getText("TABLESELECTDIALOG_SELECTEDITEMS", [iSelectedContexts]));
};

/*
 * Internal function to fire the confirm event and to update the selection of the table.
 * The function is called on pressing ok and on close in single select mode 
 * @private
 */
sap.m.TableSelectDialog.prototype._fireConfirmAndUpdateSelection = function () {
	// fire confirm event with current selection
	this.fireConfirm({
		selectedItem: this._oSelectedItem,
		selectedItems: this._aSelectedItems,
		selectedContexts: this._oTable.getSelectedContexts(true)
	});
	this._updateSelection();
};

/*
 * Internal function to remove/keep the table selection based on property "rememberSelection"
 * @private
 */
sap.m.TableSelectDialog.prototype._updateSelection = function () {
	// cleanup old selection on close to allow reuse of dialog
	// due to the delayed call (dialog onAfterClose) the control could be already destroyed
	if (!this.getRememberSelections() && !this.bIsDestroyed) {
		this._oTable.removeSelections(true);
		delete this._oSelectedItem;
		delete this._aSelectedItems;
	}
};

/*
 * Internal function to reset the selection to the items that were selected when the dialog was opened
 * @private
 */
sap.m.TableSelectDialog.prototype._resetSelection = function () {
	var i = 0;

	// due to the delayed call (dialog onAfterClose) the control could be already destroyed
	if (!this.bIsDestroyed) {
		this._oTable.removeSelections();
		for(; i < this._aInitiallySelectedItems.length; i++) {
			this._oTable.setSelectedItem(this._aInitiallySelectedItems[i]);		
		}
	}
};

/* =========================================================== */
/*           end: internal methods                             */
/* =========================================================== */

}; // end of sap/m/TableSelectDialog.js
if ( !jQuery.sap.isDeclared('sap.m.Toolbar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Toolbar.
jQuery.sap.declare("sap.m.Toolbar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Toolbar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getActive active} : boolean (default: false)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getDesign design} : sap.m.ToolbarDesign (default: sap.m.ToolbarDesign.Auto)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Toolbar#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Toolbar control is a horizontal items container that can be used to get an input from user or just to display output.
 * 
 * Note: By default, when Toolbar overflows, it provides shrinking for text controls(e.g. Text, Label) and the control that have percent width.(e.g. Input, Slider). This behaviour can be overwritten by providing sap.m.ToolbarLayoutData for your items.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.Toolbar
 */
sap.ui.core.Control.extend("sap.m.Toolbar", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"active" : {type : "boolean", group : "Behavior", defaultValue : false},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : ''},
		"design" : {type : "sap.m.ToolbarDesign", group : "Appearance", defaultValue : sap.m.ToolbarDesign.Auto}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Toolbar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Toolbar.extend
 * @function
 */

sap.m.Toolbar.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>visible</code>.
 * Sets the visibility of the control.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Toolbar#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the control.
 * By default the Toolbar is block element, if the the width is not explicitly set, control will simply have its own natural size.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Toolbar#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#setWidth
 * @function
 */


/**
 * Getter for property <code>active</code>.
 * Indicates that the whole toolbar is clickable. Press event of this control is fired only if this property is set "true"
 * Note: This property should be used when there is no interactive control inside the toolbar but to make the toolbar itself interactive.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>active</code>
 * @public
 * @name sap.m.Toolbar#getActive
 * @function
 */

/**
 * Setter for property <code>active</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bActive  new value for property <code>active</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#setActive
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Sets the enabled property of all controls defined in the content aggregation. Note: This property is not for the toolbar itself. See also the "active" property.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Toolbar#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#setEnabled
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Defines the height of the control.
 * Note: By default, the height property depends on the theme and the design property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.Toolbar#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#setHeight
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Defines the toolbar design. Design settings are theme-dependent and can also define the default height of the toolbar.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.m.ToolbarDesign} the value of property <code>design</code>
 * @public
 * @since 1.16.8
 * @name sap.m.Toolbar#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.m.ToolbarDesign} oDesign  new value for property <code>design</code>
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.8
 * @name sap.m.Toolbar#setDesign
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the toolbar.
 * 
 * <strong>Note</strong>: this is the default aggregation for Toolbar.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Toolbar#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Toolbar#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Toolbar#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Toolbar#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#destroyContent
 * @function
 */


/**
 * If "active" property is set "true" then "press" event is fired when user clicks on the toolbar. 
 *
 * @name sap.m.Toolbar#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl The control which caused the press event within the toolbar.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Toolbar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Toolbar</code>.<br/> itself. 
 *  
 * If "active" property is set "true" then "press" event is fired when user clicks on the toolbar. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Toolbar</code>.<br/> itself.
 *
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Toolbar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Toolbar#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code> The control which caused the press event within the toolbar.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Toolbar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Toolbar#firePress
 * @function
 */


// Start of sap\m\Toolbar.js

jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.call(sap.m.Toolbar.prototype);

// shrinkable class name
sap.m.Toolbar.shrinkClass = "sapMTBShrinkItem";

/*
 * Checks whether the given width is relative or not
 *
 * @static
 * @protected
 * @param {String} sWidth
 * @return {boolean}
 */
sap.m.Toolbar.isRelativeWidth = function(sWidth) {
	return /^([-+]?\d+%|auto|inherit|)$/i.test(sWidth);
};

/*
 * This sets inner controls to the initial width and
 * checks the given element horizontally overflows
 *
 * @static
 * @protected
 * @param {jQuery} $Element jQuery Object
 * @return {boolean} whether overflow or not
 */
sap.m.Toolbar.checkOverflow = function($Element) {
	if (!$Element || !$Element.length) {
		return false;
	}

	$Element.children().each(function() {
		this.style.width = sap.m.Toolbar.getOrigWidth(this.id);
	});

	return $Element[0].scrollWidth > $Element[0].clientWidth;

};

/*
 * Returns the original width(currently only control's width) via Control ID
 * TODO: This function is not smart enough to detect DOM width changes
 * But tracking width changes is also expensive
 * (last and original width values must be keep in DOM and need update)
 * For now we assume app developers call setWidth from the control
 * And controls return correct width values even default value applied with CSS
 *
 * @static
 * @protected
 * @param {String} sId Control ID
 * @return {String} width
 */
sap.m.Toolbar.getOrigWidth = function(sId) {
	var oControl = sap.ui.getCore().byId(sId);
	if (!oControl || !oControl.getWidth) {
		return "auto";
	}

	return oControl.getWidth();
};

/*
 * Checks given control whether shrinkable or not and marks according to second param
 * Percent widths and text nodes(without fixed width) are shrinkable
 * ToolbarSpacer is already shrinkable if it does not have fixed width
 *
 * @static
 * @protected
 * @param {sap.ui.core.Control} oControl UI5 Control
 * @param {String} [sShrinkClass] shrink item class name
 * @returns {true|false|undefined|Object}
 */
sap.m.Toolbar.checkShrinkable = function(oControl, sShrinkClass) {
	if (oControl instanceof sap.m.ToolbarSpacer) {
		return this.isRelativeWidth(oControl.getWidth());
	}

	// remove old class
	sShrinkClass = sShrinkClass || this.shrinkClass;
	oControl.removeStyleClass(sShrinkClass);

	// ignore the controls has fixed width
	var sWidth = this.getOrigWidth(oControl.getId());
	if (!this.isRelativeWidth(sWidth)) {
		return;
	}

	// check shrinkable via layout data
	var oLayout = oControl.getLayoutData();
	if (oLayout instanceof sap.m.ToolbarLayoutData) {
		return oLayout.getShrinkable() && oControl.addStyleClass(sShrinkClass);
	}

	// is percent item?
	if (sWidth.indexOf("%") > 0) {
		return oControl.addStyleClass(sShrinkClass);
	}

	// is text element?
	var oDomRef = oControl.getDomRef();
	if (oDomRef && (oDomRef.firstChild || {}).nodeType == 3) {
		return oControl.addStyleClass(sShrinkClass);
	}
};

/*
 * Grow-Shrink flexbox polyfill for Toolbar
 *
 * @static
 * @protected
 * @param {jQuery} $Element The container of flex items
 * @param {String} [sFlexClass] flexable item class
 * @param {String} [sShrinkClass] shrinkable item class
 */
sap.m.Toolbar.flexie = function($Element, sFlexClass, sShrinkClass) {

	// check element exists and has width to calculate
	if (!$Element || !$Element.length || !$Element.width()) {
		return;
	}

	// set default values
	sShrinkClass = sShrinkClass || this.shrinkClass;
	sFlexClass = sFlexClass || sap.m.ToolbarSpacer.flexClass;

	// initial values
	var iTotalPercent = 0,
		aFlexibleItems = [],
		aShrinkableItems = [],
		iTotalUnShrinkableWidth = 0,
		iInnerWidth = $Element.width(),
		$Children = $Element.children(),
		bOverflow = this.checkOverflow($Element),
		isAutoWidth = function(sWidth) {
			return !sWidth || sWidth == "auto" || sWidth == "inherit";
		},
		calcUnShrinkableItem = function($Item) {
			// add too unshrinkable width calculation with margins
			iTotalUnShrinkableWidth += $Item.outerWidth(true);
		},
		pushShrinkableItem = function($Item) {
			// if calculated width and the min-width is same then item cannot shrink
			var fBoxWidth = parseFloat($Item.css("width")) || 0;
			var fMinWidth = parseFloat($Item.css("min-width")) || 0;
			if (fBoxWidth == fMinWidth) {
				calcUnShrinkableItem($Item);
				return;
			}

			// calculate related percentage according to inner width
			var iBoxSizing = 0;
			var fWidth = $Item.width();
			var fPercent = (fWidth * 100) / iInnerWidth;
			iTotalPercent += fPercent;

			// margins + paddings + borders are not shrinkable
			iTotalUnShrinkableWidth += $Item.outerWidth(true) - fWidth;
			if ($Item.css("box-sizing") == "border-box") {
				iBoxSizing = $Item.outerWidth() - fWidth;
			}

			// should also take account of max width
			// browsers does not respect computed max width when it has %
			// https://code.google.com/p/chromium/issues/detail?id=228938
			var sMaxWidth = $Item.css("max-width");
			var fMaxWidth = parseFloat(sMaxWidth);
			if (sMaxWidth.indexOf("%") > 0) {
				fMaxWidth = Math.ceil((fMaxWidth * $Element.outerWidth()) / 100);
			}

			// push item
			aShrinkableItems.push({
				boxSizing : iBoxSizing,
				maxWidth : fMaxWidth,
				minWidth : fMinWidth,
				percent : fPercent,
				el : $Item[0]
			});
		},
		setWidths = function(iTotalWidth) {
			var iSumOfWidth = 0;

			// check for max and min width and remove items if they cannot not shrink or grow anymore
			aShrinkableItems.forEach(function(oItem, iIndex) {
				var fRelativePercent = Math.min(100, (oItem.percent * 100) / iTotalPercent);
				var iContentWidth = Math.floor((iTotalWidth * fRelativePercent) / 100);
				var iCalcWidth = oItem.boxSizing + iContentWidth;

				// if we cannot set calculated shrink width because of the minimum width restriction
				// then we should shrink the other items because current item cannot shrink more
				if (iCalcWidth < oItem.minWidth) {
					oItem.el.style.width = oItem.minWidth + "px";
					iTotalWidth -= (oItem.minWidth - oItem.boxSizing);

					// ignore this element cannot shrink more
					iTotalPercent -= oItem.percent;
					delete aShrinkableItems[iIndex];
				}

				// if there is a max width restriction and calculated grow width is more than max width
				// then we should share this extra grow gap for the other items
				if (oItem.maxWidth && oItem.maxWidth > oItem.minWidth && iCalcWidth > oItem.maxWidth) {
					oItem.el.style.width = oItem.maxWidth + "px";
					iTotalWidth += (iCalcWidth - oItem.maxWidth);

					// ignore this element cannot grow more
					iTotalPercent -= oItem.percent;
					delete aShrinkableItems[iIndex];
				}
			});

			// share the width to the items (can grow or shrink)
			aShrinkableItems.forEach(function(oItem) {
				var fRelativePercent = Math.min(100, (oItem.percent * 100) / iTotalPercent);
				var fContentWidth = (iTotalWidth * fRelativePercent) / 100;
				var fCalcWidth = oItem.boxSizing + fContentWidth;
				oItem.el.style.width = fCalcWidth + "px";
				iSumOfWidth += fCalcWidth;
			});

			// calculate remain width
			iTotalWidth -= iSumOfWidth;
			if (iTotalWidth > 1) {
				// share the remaining width to spacers
				aFlexibleItems.forEach(function(oFlexibleItem) {
					var fWidth = iTotalWidth / aFlexibleItems.length;
					oFlexibleItem.style.width = fWidth + "px";
				});
			}
		};

	// start calculation
	// here items are in their initial width
	$Children.each(function() {
		var $Child = jQuery(this);
		var bAutoWidth = isAutoWidth(this.style.width);
		if (bAutoWidth && $Child.hasClass(sFlexClass)) {
			// flexible item
			aFlexibleItems.push(this);
			this.style.width = "0px";
		} else if ($Child.is(":hidden")) {
			// invisible item
			return;
		} else if (bOverflow && $Child.hasClass(sShrinkClass)) {
			// shrinkable marked item when toolbar overflows
			pushShrinkableItem($Child);
		} else {
			// unshrinkable item
			calcUnShrinkableItem($Child);
		}
	});

	// check if there is still place for flex or do the shrink
	var iRemainWidth = iInnerWidth - iTotalUnShrinkableWidth;
	setWidths(Math.max(iRemainWidth, 0));
};

// determines whether toolbar has flexbox support or not
sap.m.Toolbar.hasFlexBoxSupport = jQuery.support.hasFlexBoxSupport;

// determines whether toolbar has new flexbox (shrink) support
sap.m.Toolbar.hasNewFlexBoxSupport = (function() {
	var oStyle = document.documentElement.style;
	return (oStyle.flex !== undefined ||
			oStyle.msFlex !== undefined ||
			oStyle.webkitFlexShrink !== undefined);
}());

sap.m.Toolbar.prototype.onBeforeRendering = function() {
	this._cleanup();
};

sap.m.Toolbar.prototype.onAfterRendering = function() {
	// do nothing for invisible
	if (this._isInvisible()) {
		return;
	}

	// if there is no shrinkable item, layout is not needed
	if (!this._checkContents()) {
		return;
	}

	// let the new flexbox do the job
	if (sap.m.Toolbar.hasNewFlexBoxSupport) {
		return;
	}

	// cache jQuery object
	this._$this = this.$();

	// define behaviour according to flex support
	if (sap.m.Toolbar.hasFlexBoxSupport) {
		this._resetOverflow();
	} else {
		this._reflexie();
	}
};

sap.m.Toolbar.prototype.exit = function() {
	this._cleanup();
};

sap.m.Toolbar.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	this._attachContentPropertyChange(oContent);
	return this;
};

sap.m.Toolbar.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	this._attachContentPropertyChange(oContent);
	return this;
};

sap.m.Toolbar.prototype.removeContent = function(vContent) {
	vContent = this.removeAggregation("content", vContent);
	this._detachContentPropertyChange(vContent);
	return vContent;
};

sap.m.Toolbar.prototype.removeAllContent = function() {
	var aContents = this.removeAllAggregation("content") || [];
	aContents.forEach(function(oContent) {
		this._detachContentPropertyChange(oContent);
	}, this);
	return aContents;
};

// handle tap for active toolbar, do nothing if already handled
sap.m.Toolbar.prototype.ontap = function(oEvent) {
	if (this.getActive() && !oEvent.isMarked()) {
		oEvent.setMarked();
		this.firePress({
			srcControl : oEvent.srcControl
		});
	}
};

// fire press event when enter is hit on the active toolbar
sap.m.Toolbar.prototype.onsapenter = function(oEvent) {
	if (this.getActive() && oEvent.srcControl === this && !oEvent.isMarked()) {
		oEvent.setMarked();
		this.firePress({
			srcControl : this
		});
	}
};

// keyboard space handling mimic the enter event
sap.m.Toolbar.prototype.onsapspace = sap.m.Toolbar.prototype.onsapenter;

// mark to inform active handling is done by toolbar
sap.m.Toolbar.prototype.ontouchstart = function(oEvent) {
	this.getActive() && oEvent.setMarked();
};

// determines whether toolbar is visible or not
sap.m.Toolbar.prototype._isInvisible = function() {
	if (!this.getVisible() || !this.getContent().length) {
		return true;
	}
};

// mark shrinkable contents and render layout data
// returns shrinkable and flexible content count
sap.m.Toolbar.prototype._checkContents = function() {
	var iShrinkableItemCount = 0;
	this.getContent().forEach(function(oControl) {
		if (sap.m.Toolbar.checkShrinkable(oControl)) {
			iShrinkableItemCount++;
		}

		var oLayout = oControl.getLayoutData();
		if (oLayout instanceof sap.m.ToolbarLayoutData) {
			oLayout.applyProperties();
		}
	});

	return iShrinkableItemCount;
};

// Reset overflow and mark with classname if overflows
sap.m.Toolbar.prototype._resetOverflow = function() {
	this._deregisterResize();
	var $this = this._$this;
	var oDomRef = $this[0] || {};
	$this.removeClass("sapMTBOverflow");
	var bOverflow = oDomRef.scrollWidth > oDomRef.clientWidth;
	bOverflow && $this.addClass("sapMTBOverflow");
	this._endPoint = this._getEndPoint();
	this._registerResize();
};

// recalculate flexbox layout
sap.m.Toolbar.prototype._reflexie = function() {
	this._deregisterResize();
	sap.m.Toolbar.flexie(this._$this);
	this._endPoint = this._getEndPoint();
	this._registerResize();
};

// called when a content property is changed
sap.m.Toolbar.prototype._onContentPropertyChanged = function(oEvent) {
	if (oEvent.getParameter("name") != "width") {
		return;
	}

	// check and mark percent widths
	var oControl = oEvent.getSource();
	var bPercent = oControl.getWidth().indexOf("%") > 0;
	oControl.toggleStyleClass(sap.m.Toolbar.shrinkClass, bPercent);
};

// attach property change handler for the given control
sap.m.Toolbar.prototype._attachContentPropertyChange = function(oControl) {
	oControl.attachEvent("_change", this._onContentPropertyChanged, this);
};

// detach property change handler from given control
sap.m.Toolbar.prototype._detachContentPropertyChange = function(oControl) {
	oControl.detachEvent("_change", this._onContentPropertyChanged, this);
};

// register interval timer to detect inner content size is changed
sap.m.Toolbar.prototype._registerContentResize = function() {
	sap.ui.getCore().attachIntervalTimer(this._handleContentResize, this);
};

// deregister interval timer for inner content
sap.m.Toolbar.prototype._deregisterContentResize = function() {
	sap.ui.getCore().detachIntervalTimer(this._handleContentResize, this);
};

// register toolbar resize handler
sap.m.Toolbar.prototype._registerToolbarResize = function() {
	// register resize handler only if toolbar has relative width
	if (sap.m.Toolbar.isRelativeWidth(this.getWidth())) {
		var fnResizeProxy = jQuery.proxy(this._handleToolbarResize, this);
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this._$this[0], fnResizeProxy);
	}
};

// deregister toolbar resize handlers
sap.m.Toolbar.prototype._deregisterToolbarResize = function() {
	sap.ui.getCore().detachIntervalTimer(this._handleContentResize, this);
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = "";
	}
};

// register resize handlers
sap.m.Toolbar.prototype._registerResize = function() {
	this._registerToolbarResize();
	this._registerContentResize();
};

// deregister resize handlers
sap.m.Toolbar.prototype._deregisterResize = function() {
	this._deregisterToolbarResize();
	this._deregisterContentResize();
};

// remove jquery cache and resize handlers
sap.m.Toolbar.prototype._cleanup = function() {
	this._deregisterResize();
	this._$this = [];
};

// get the end position of last content
sap.m.Toolbar.prototype._getEndPoint = function() {
	var oLastChild = (this._$this[0] || this.getDomRef() || {}).lastElementChild;
	if (oLastChild) {
		var iEndPoint = oLastChild.offsetLeft;
		if (!sap.ui.getCore().getConfiguration().getRTL()) {
			iEndPoint += oLastChild.offsetWidth;
		}
	}
	return iEndPoint || 0;
};

// handle toolbar resize
sap.m.Toolbar.prototype._handleToolbarResize = function() {
	this._handleResize(false);
};

// handle inner content resize
sap.m.Toolbar.prototype._handleContentResize = function() {
	this._handleResize(true);
};

// generic resize handler
sap.m.Toolbar.prototype._handleResize = function(bCheckEndPoint) {
	// check whether end point is changed or not
	if (bCheckEndPoint && this._endPoint == this._getEndPoint()) {
		return;
	}

	// decide the behaviour
	if (!sap.m.Toolbar.hasFlexBoxSupport) {
		this._reflexie();
	} else if (!sap.m.Toolbar.hasNewFlexBoxSupport) {
		this._resetOverflow();
	}
};

/*
 * Augment design property setter.
 * 2nd parameter can be used to define auto design context.
 * Note: When the second parameter is used, Toolbar does not rerender. This should be done by the setter.
 *
 * @param {sap.m.ToolbarDesign} sDesign The design for the Toolbar.
 * @param {boolean} [bSetAutoDesign] Determines auto design context
 * @returns {sap.m.Toolbar}
 */
sap.m.Toolbar.prototype.setDesign = function(sDesign, bSetAutoDesign) {
	if (!bSetAutoDesign) {
		return this.setProperty("design", sDesign);
	}

	this._sAutoDesign = this.validateProperty("design", sDesign);
	return this;
};

/**
 * Returns the currently applied design property of the Toolbar.
 *
 * @returns {sap.m.ToolbarDesign}
 * @protected
 */
sap.m.Toolbar.prototype.getActiveDesign = function() {
	var sDesign = this.getDesign();
	if (sDesign != sap.m.ToolbarDesign.Auto) {
		return sDesign;
	}

	return this._sAutoDesign || sDesign;
};

}; // end of sap/m/Toolbar.js
if ( !jQuery.sap.isDeclared('sap.m.ViewSettingsCustomItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ViewSettingsCustomItem.
jQuery.sap.declare("sap.m.ViewSettingsCustomItem");




/**
 * Constructor for a new ViewSettingsCustomItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFilterCount filterCount} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomControl customControl} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ViewSettingsCustomItem is used for modelling custom filters in the ViewSettingsDialog.
 * @extends sap.m.ViewSettingsItem
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.ViewSettingsCustomItem
 */
sap.m.ViewSettingsItem.extend("sap.m.ViewSettingsCustomItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"filterCount" : {type : "int", group : "Behavior", defaultValue : 0}
	},
	aggregations : {
    	"customControl" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.ViewSettingsCustomItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ViewSettingsCustomItem.extend
 * @function
 */


/**
 * Getter for property <code>filterCount</code>.
 * The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>filterCount</code>
 * @public
 * @name sap.m.ViewSettingsCustomItem#getFilterCount
 * @function
 */

/**
 * Setter for property <code>filterCount</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iFilterCount  new value for property <code>filterCount</code>
 * @return {sap.m.ViewSettingsCustomItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsCustomItem#setFilterCount
 * @function
 */


/**
 * Getter for aggregation <code>customControl</code>.<br/>
 * A custom control for the filter field. It can be used for complex filtering mechanisms.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.ViewSettingsCustomItem#getCustomControl
 * @function
 */


/**
 * Setter for the aggregated <code>customControl</code>.
 * @param {sap.ui.core.Control} oCustomControl
 * @return {sap.m.ViewSettingsCustomItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsCustomItem#setCustomControl
 * @function
 */
	

/**
 * Destroys the customControl in the aggregation 
 * named <code>customControl</code>.
 * @return {sap.m.ViewSettingsCustomItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsCustomItem#destroyCustomControl
 * @function
 */


// Start of sap\m\ViewSettingsCustomItem.js
/**
 * Destroys the control
 * @private
 */
sap.m.ViewSettingsCustomItem.prototype.exit = function () {
	if(this._control && !this._control.getParent()) {
		// control is not aggregated, so we have to destroy it
		this._control.destroy();
		delete this._control;
	}
};

/*
 * Internally the control is handled as a managed object instead of an aggregation 
 * because this control is sometimes aggregated in other controls like a popover or a dialog
 * @overwrite
 * @public
 * @param {sap.ui.core.Control} oControl a control used for filtering purposes
 * @return {sap.m.ViewSettingsCustomItem} this pointer for chaining 
 */
sap.m.ViewSettingsCustomItem.prototype.setCustomControl = function (oControl) {
	this._control = oControl;
	return this;
};

/*
 * Internally the control is handled as a managed object instead of an aggregation 
 * because this control is sometimes aggregated in other controls like a popover or a dialog
 * @overwrite
 * @public
 * @return {sap.ui.core.Control} oControl a control used for filtering purposes
 */
sap.m.ViewSettingsCustomItem.prototype.getCustomControl = function () {
	return this._control;
};
}; // end of sap/m/ViewSettingsCustomItem.js
if ( !jQuery.sap.isDeclared('sap.m.ViewSettingsFilterItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ViewSettingsFilterItem.
jQuery.sap.declare("sap.m.ViewSettingsFilterItem");




/**
 * Constructor for a new ViewSettingsFilterItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ViewSettingsItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A ViewSettingsFilterItem is used for modelling filter behaviour in the ViewSettingsDialog.
 * @extends sap.m.ViewSettingsItem
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.ViewSettingsFilterItem
 */
sap.m.ViewSettingsItem.extend("sap.m.ViewSettingsFilterItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"multiSelect" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	aggregations : {
    	"items" : {type : "sap.m.ViewSettingsItem", multiple : true, singularName : "item"}
	}
}});


/**
 * Creates a new subclass of class sap.m.ViewSettingsFilterItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ViewSettingsFilterItem.extend
 * @function
 */


/**
 * Getter for property <code>multiSelect</code>.
 * If set to (true), multi selection will be allowed for the items aggregation.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * @name sap.m.ViewSettingsFilterItem#getMultiSelect
 * @function
 */

/**
 * Setter for property <code>multiSelect</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bMultiSelect  new value for property <code>multiSelect</code>
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsFilterItem#setMultiSelect
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Items that are logically grouped under this filter item. They are used to display filter details in the ViewSettingsDialog.
 * 
 * @return {sap.m.ViewSettingsItem[]}
 * @public
 * @name sap.m.ViewSettingsFilterItem#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsFilterItem#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsFilterItem#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.m.ViewSettingsItem} vItem the item to remove or its index or id
 * @return {sap.m.ViewSettingsItem} the removed item or null
 * @public
 * @name sap.m.ViewSettingsFilterItem#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ViewSettingsItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ViewSettingsFilterItem#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ViewSettingsFilterItem#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.ViewSettingsFilterItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ViewSettingsFilterItem#destroyItems
 * @function
 */


// Start of sap\m\ViewSettingsFilterItem.js

}; // end of sap/m/ViewSettingsFilterItem.js
if ( !jQuery.sap.isDeclared('sap.m.List') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.List.
jQuery.sap.declare("sap.m.List");




/**
 * Constructor for a new List.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: sap.m.BackgroundDesign.Solid)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The List control provides a container for all types of list items.
 * For mobile devices, the recommended limit of list items is 100 to assure proper performance. To improve initial rendering of large lists, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information..
 * @extends sap.m.ListBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.List
 */
sap.m.ListBase.extend("sap.m.List", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"backgroundDesign" : {type : "sap.m.BackgroundDesign", group : "Appearance", defaultValue : sap.m.BackgroundDesign.Solid}
	},
	aggregations : {
    	"columns" : {type : "sap.m.Column", multiple : true, singularName : "column", deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.m.List with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.List.extend
 * @function
 */


/**
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of the list. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
 *
 * Default value is <code>Solid</code>
 *
 * @return {sap.m.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * @since 1.14
 * @name sap.m.List#getBackgroundDesign
 * @function
 */

/**
 * Setter for property <code>backgroundDesign</code>.
 *
 * Default value is <code>Solid</code> 
 *
 * @param {sap.m.BackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @since 1.14
 * @name sap.m.List#setBackgroundDesign
 * @function
 */


/**
 * Getter for aggregation <code>columns</code>.<br/>
 * Columns
 * 
 * @return {sap.m.Column[]}
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @name sap.m.List#getColumns
 * @function
 */


/**
 * Inserts a column into the aggregation named <code>columns</code>.
 *
 * @param {sap.m.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @name sap.m.List#insertColumn
 * @function
 */

/**
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 *
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @name sap.m.List#addColumn
 * @function
 */

/**
 * Removes an column from the aggregation named <code>columns</code>.
 *
 * @param {int | string | sap.m.Column} vColumn the column to remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @name sap.m.List#removeColumn
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @name sap.m.List#removeAllColumns
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @name sap.m.List#indexOfColumn
 * @function
 */
	

/**
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.16. 
 * Use Table control instead.
 * @name sap.m.List#destroyColumns
 * @function
 */


// Start of sap\m\List.js
sap.m.List.prototype.onBeforeRendering = function() {
	if (sap.m.ListBase.prototype.onBeforeRendering) {
		sap.m.ListBase.prototype.onBeforeRendering.call(this);
	}
	
	// if "columns" aggregation is not in use or incompatible then ignore
	if (!this.getColumns().length || this._isColumnsIncompatible()) {
		return;
	}
	
	/**
	 * FIXME: Here to support old API if columns are set
	 * We are trying to extend renderer to render list as table
	 * This is so ugly and we need to get rid of it ASAP
	 */
	jQuery.sap.require("sap.m.Table");
	var proto = sap.m.Table.prototype;
	Object.keys(proto).forEach(function(key) {
		this[key] = proto[key];
	}, this);

	/**
	 * FIXME: Handle different default backgroundDesign value for Table
	 */
	if (!this.mProperties.hasOwnProperty("backgroundDesign")) {
		this.setBackgroundDesign("Translucent");
	}
	
};

// checks if "columns" usage is not compatible anymore
sap.m.List.prototype._isColumnsIncompatible = function() {
	return sap.ui.getCore().getConfiguration().getCompatibilityVersion("sapMListAsTable").compareTo("1.16") >= 0;
};
}; // end of sap/m/List.js
if ( !jQuery.sap.isDeclared('sap.m.SelectDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SelectDialog.
jQuery.sap.declare("sap.m.SelectDialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SelectDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.m.ListItemBase[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SelectDialog#event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SelectDialog#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SelectDialog#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SelectDialog#event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A SelectDialog is a dialog containing a list and search functionality to filter the list and confirmation/cancel buttons. The control can be used when the user should select one or multiple items out of many.
 * 
 * The list used in the SelectDialog is a growing list and can be filled with a any kind of list item. The search field triggers the events "search" and "liveChange" where a filter function can be applied to the list binding.
 * 
 * After selecting an item in single selection mode or after confirming in multi selection mode, the dialog will be closed and the event "confirm" is fired with the items that have been selected. By default, the selection will also be reset to allow for a new selection when opening the dialog again.
 * 
 * When cancelling the selection, the event "change" will be fired and the selection is restored to the state when the dialog was opened.
 * 
 * NOTE: The growing functionality of the list does not support Two Way Binding, so if you use this control with a JSON model make sure the binding mode is set to "OneWay" and that you update the selection model manually with the items passed in the "confirm" event.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.SelectDialog
 */
sap.ui.core.Control.extend("sap.m.SelectDialog", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"open"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"noDataText" : {type : "string", group : "Appearance", defaultValue : null},
		"multiSelect" : {type : "boolean", group : "Dimension", defaultValue : false},
		"growingThreshold" : {type : "int", group : "Misc", defaultValue : null},
		"contentWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"rememberSelections" : {type : "boolean", group : "Behavior", defaultValue : false}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.m.ListItemBase", multiple : true, singularName : "item"}, 
    	"_dialog" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	events : {
		"confirm" : {}, 
		"search" : {}, 
		"liveChange" : {}, 
		"cancel" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SelectDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SelectDialog.extend
 * @function
 */

sap.m.SelectDialog.M_EVENTS = {'confirm':'confirm','search':'search','liveChange':'liveChange','cancel':'cancel'};


/**
 * Getter for property <code>title</code>.
 * The title text that appears in the dialog header
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.SelectDialog#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#setTitle
 * @function
 */


/**
 * Getter for property <code>noDataText</code>.
 * This is the text shown when the list has no data
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * @name sap.m.SelectDialog#getNoDataText
 * @function
 */

/**
 * Setter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#setNoDataText
 * @function
 */


/**
 * Getter for property <code>multiSelect</code>.
 * If on, the user can select several options from the list
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * @name sap.m.SelectDialog#getMultiSelect
 * @function
 */

/**
 * Setter for property <code>multiSelect</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bMultiSelect  new value for property <code>multiSelect</code>
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#setMultiSelect
 * @function
 */


/**
 * Getter for property <code>growingThreshold</code>.
 * Number of items initially displayed in the list
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>growingThreshold</code>
 * @public
 * @name sap.m.SelectDialog#getGrowingThreshold
 * @function
 */

/**
 * Setter for property <code>growingThreshold</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iGrowingThreshold  new value for property <code>growingThreshold</code>
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#setGrowingThreshold
 * @function
 */


/**
 * Getter for property <code>contentWidth</code>.
 * The content width of the inner dialog. See dialog documentation for more details.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * @since 1.18
 * @name sap.m.SelectDialog#getContentWidth
 * @function
 */

/**
 * Setter for property <code>contentWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentWidth  new value for property <code>contentWidth</code>
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.18
 * @name sap.m.SelectDialog#setContentWidth
 * @function
 */


/**
 * Getter for property <code>rememberSelections</code>.
 * This flag controls whether the dialog clears the selection or not after the confirm event has been fired. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false".
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>rememberSelections</code>
 * @public
 * @since 1.18
 * @name sap.m.SelectDialog#getRememberSelections
 * @function
 */

/**
 * Setter for property <code>rememberSelections</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRememberSelections  new value for property <code>rememberSelections</code>
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.18
 * @name sap.m.SelectDialog#setRememberSelections
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the dialog but other combinations are also possible.
 * 
 * <strong>Note</strong>: this is the default aggregation for SelectDialog.
 * @return {sap.m.ListItemBase[]}
 * @public
 * @name sap.m.SelectDialog#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.m.ListItemBase}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.m.ListItemBase} vItem the item to remove or its index or id
 * @return {sap.m.ListItemBase} the removed item or null
 * @public
 * @name sap.m.SelectDialog#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ListItemBase[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.SelectDialog#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ListItemBase}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.SelectDialog#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#destroyItems
 * @function
 */


/**
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters. 
 *
 * @name sap.m.SelectDialog#confirm
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.StandardListItem} oControlEvent.getParameters.selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} oControlEvent.getParameters.selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} oControlEvent.getParameters.selectedContexts Returns the binding contexts of the selected items including the non-visible items. 
NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.
NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog the contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'confirm' event of this <code>sap.m.SelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br/> itself. 
 *  
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 *
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#attachConfirm
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'confirm' event of this <code>sap.m.SelectDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#detachConfirm
 * @function
 */

/**
 * Fire event confirm to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.m.StandardListItem</code> Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.</li>
 * <li>'selectedItems' of type <code>sap.m.StandardListItem[]</code> Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.</li>
 * <li>'selectedContexts' of type <code>string</code> Returns the binding contexts of the selected items including the non-visible items. 
NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no Databinding is used.
NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog the contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SelectDialog#fireConfirm
 * @function
 */


/**
 * This event will be fired when the search button has been clicked on the searchfield on the visual control 
 *
 * @name sap.m.SelectDialog#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The value entered in the search
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.SelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br/> itself. 
 *  
 * This event will be fired when the search button has been clicked on the searchfield on the visual control 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 *
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.SelectDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value entered in the search</li>
 * <li>'itemsBinding' of type <code>any</code> The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SelectDialog#fireSearch
 * @function
 */


/**
 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press 
 *
 * @name sap.m.SelectDialog#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The value to search on, which can change at any keypress
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.SelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br/> itself. 
 *  
 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 *
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.SelectDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value to search on, which can change at any keypress</li>
 * <li>'itemsBinding' of type <code>any</code> The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SelectDialog#fireLiveChange
 * @function
 */


/**
 * This event will be fired when the cancel button is clicked 
 *
 * @name sap.m.SelectDialog#cancel
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'cancel' event of this <code>sap.m.SelectDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SelectDialog</code>.<br/> itself. 
 *  
 * This event will be fired when the cancel button is clicked 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.
 *
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#attachCancel
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'cancel' event of this <code>sap.m.SelectDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SelectDialog#detachCancel
 * @function
 */

/**
 * Fire event cancel to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SelectDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SelectDialog#fireCancel
 * @function
 */


/**
 * Opens the select dialog
 *
 * @name sap.m.SelectDialog.prototype.open
 * @function
 * @param {string} 
 *         sSearchValue
 *         A value for the search can be passed to match with the filter applied to the list binding.

 * @type sap.m.SelectDialog
 * @public
 */


// Start of sap\m\SelectDialog.js
/*!
 * @copyright@
 */






/* =========================================================== */
/*           begin: API methods                                */
/* =========================================================== */

/**
 * Initializes the control
 * @private
 */
sap.m.SelectDialog.prototype.init = function () {
	var that = this,
		iLiveChangeTimer = 0,
		fnResetAfterClose = null,
		fnDialogEscape = null;

	fnResetAfterClose = function () {
		that._oSelectedItem = that._oList.getSelectedItem();
		that._aSelectedItems = that._oList.getSelectedItems();

		that._oDialog.detachAfterClose(fnResetAfterClose);
		that._fireConfirmAndUpdateSelection();
	};

	this._bAppendedToUIArea = false;
	this._bInitBusy = false;
	this._bFirstRender = true;
	this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

	// store a reference to the list for binding management
	this._oList = new sap.m.List(this.getId() + "-list", {
		growing: true,
		growingScrollToLoad: true,
		mode: sap.m.ListMode.SingleSelectMaster,
		infoToolbar: new sap.m.Toolbar({
			visible: false,
			active: false,
			content: [
				new sap.m.Label({
					text: this._oRb.getText("TABLESELECTDIALOG_SELECTEDITEMS", [0])
				})
			]
		}),
		selectionChange: function (oEvent) {
			if (that._oDialog) {
				if (!that.getMultiSelect()) { 
					// attach the reset function to afterClose to hide the dialog changes from the end user 
					that._oDialog.attachAfterClose(fnResetAfterClose);
					that._oDialog.close();
				} else {
					that._updateSelectionIndicator();
				}
			}
		}
	});
	this._list = this._oList; // for downward compatibility

	// attach events to listen to model updates and show/hide a busy indicator
	this._oList.attachUpdateStarted(this._updateStarted, this);
	this._oList.attachUpdateFinished(this._updateFinished, this);

	// store a reference to the busyIndicator to display when data is currently loaded by a service
	this._oBusyIndicator = new sap.m.BusyIndicator(this.getId() + "-busyIndicator").addStyleClass("sapMSelectDialogBusyIndicator", true);

	// store a reference to the searchField for filtering
	this._oSearchField = new sap.m.SearchField(this.getId() + "-searchField", {
		width: "100%",
		liveChange: function (oEvent) {
			var sValue = oEvent.getSource().getValue(),
				iDelay = (sValue ? 300 : 0); // no delay if value is empty

			// execute search after user stops typing for 300ms
			clearTimeout(iLiveChangeTimer);
			if (iDelay) {
				iLiveChangeTimer = setTimeout(function () {
					that._executeSearch(sValue, "liveChange");
				}, iDelay);
			} else {
				that._executeSearch(sValue, "liveChange");
			}
		},
		// execute the standard search
		search: function (oEvent) {
			that._executeSearch(oEvent.getSource().getValue(), "search");
		}
	});
	this._searchField = this._oSearchField; // for downward compatibility

	// store a reference to the subheader for hiding it when data loads
	this._oSubHeader = new sap.m.Bar(this.getId() + "-subHeader", {
		contentMiddle: [
			this._oSearchField
		]
	});

	// store a reference to the internal dialog 
	this._oDialog = new sap.m.Dialog(this.getId() + "-dialog", {
		title: this.getTitle(),
		stretch: sap.ui.Device.system.phone,
		contentHeight: "2000px",
		subHeader: this._oSubHeader,
		content: [this._oBusyIndicator, this._oList],
		leftButton: this._getCancelButton()
	}).addStyleClass("sapMSelectDialog", true);
	// for downward compatibility reasons
	this._dialog = this._oDialog;
	this.setAggregation("_dialog", this._oDialog);

	//CSN# 3863876/2013: ESC key should also cancel dialog, not only close it
	fnDialogEscape = this._oDialog.onsapescape;
	this._oDialog.onsapescape = function (oEvent) {
		// call original escape function of the dialog
		if (fnDialogEscape) {
			fnDialogEscape.call(that._oDialog, oEvent);
		}
		// execute cancel action
		that._onCancel();
	};

	// internally set top and bottom margin of the dialog to 4rem respectively
	this._oDialog._iVMargin = 8 * parseInt(sap.ui.core.theming.Parameters.get("sapUiFontSize") || 16, 10); //128

	// helper variables for search update behaviour
	this._sSearchFieldValue = "";

	// flags to control the busy indicator behaviour because the growing list will always show the no data text when updating
	this._bFirstRequest = true; // to only show the busy indicator for the first request when the dialog has been openend
	this._iListUpdateRequested = 0; // to only show the busy indicator when we initiated the change
};

/**
 * Destroys the control
 * @private
 */
sap.m.SelectDialog.prototype.exit = function () {
	// internal variables
	this._oList = null;
	this._oSearchField = null;
	this._oSubHeader = null;
	this._oBusyIndicator = null;
	this._sSearchFieldValue = null;
	this._iListUpdateRequested = 0;
	this._bFirstRequest = false;
	this._bInitBusy = false;
	this._bFirstRender = false;

	// controls not managed in aggregations
	if (this._oDialog) {
		this._oDialog.destroy();
		this._oDialog = null;
	}
	if (this._oOkButton) {
		this._oOkButton.destroy();
		this._oOkButton = null;
	}

	// selections
	this._oSelectedItem = null;
	this._aSelectedItems = null;
	this._aInitiallySelectedItems = null;
	
	// compatibility
	this._list = null; 
	this._searchField = null;
	this._dialog = null;
};

/*
* Is called after renderer is finished to show the busy state
* @overwrite
* @protected
* @returns {this} this pointer for chaining
*/
sap.m.SelectDialog.prototype.onAfterRendering = function () {
	if (this._bInitBusy && this._bFirstRender) {
		this._setBusy(true);
		this._bInitBusy = false;
		this._firstRender = false;
	}

	return this;
};

/*
* Invalidates the dialog instead of this control (we don't have a renderer)
* @overwrite
* @protected
* @returns {this} this pointer for chaining
*/
sap.m.SelectDialog.prototype.invalidate = function () {
	// CSN #80686/2014: only invalidate inner dialog if call does not come from inside
	if (this._oDialog && (!arguments[0] || arguments[0] && arguments[0].getId() !== this.getId() + "-dialog")) {
		this._oDialog.invalidate(arguments);
	} else {
		sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	}

	return this;
};

/**
* Opens the internal dialog with a searchfield and a list.
* @public
* @param {string} sValue Value for the list search.
* @returns {this} this pointer for chaining
*/
sap.m.SelectDialog.prototype.open = function (sSearchValue) {
	// CSN #80686/2014: only invalidate inner dialog if call does not come from inside
	// Important: do not rely on the ui area fix, it will be removed with a later version of UI5
	// use fragments instead or take care of proper parent-child dependencies
	if ((!this.getParent() || !this.getUIArea()) && !this._bAppendedToUIArea) {
		var oStatic = sap.ui.getCore().getStaticAreaRef();
		oStatic = sap.ui.getCore().getUIArea(oStatic);
		oStatic.addContent(this, true);
		this._bAppendedToUIArea = true;
	}

	// reset internal variables
	this._bFirstRequest = true;

	// set the search value
	this._oSearchField.setValue(sSearchValue);

	// open the dialog
	this._oDialog.open();

	// open dialog with busy state if a list update is still in progress
	if (this._bInitBusy) {
		this._setBusy(true);
	}

	// refresh the selection indicator to be in sync with the model
	this._updateSelectionIndicator();

	// store the current selection for the cancel event
	this._aInitiallySelectedItems = this._oList.getSelectedItems();

	// return Dialog for chaining purposes
	return this;
};

/**
* Sets the growing threshold to the internal list
* @public
* @param {int} iValue Value for the list's growing threshold.
* @returns {this} this pointer for chaining
*/
sap.m.SelectDialog.prototype.setGrowingThreshold = function (iValue) {
	this._oList.setGrowingThreshold(iValue);
	this.setProperty("growingThreshold", iValue, true);

	return this;
};

/**
 * Enable/Disable multi selection mode.
 * @overwrite
 * @public
 * @param {boole} bMulti flag for multi selection mode
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.setMultiSelect = function (bMulti) {
	this.setProperty("multiSelect", bMulti, true);
	if (bMulti) {
		this._oList.setMode(sap.m.ListMode.MultiSelect); 
		this._oList.setIncludeItemInSelection(true);
		this._oDialog.setEndButton(this._getCancelButton());
		this._oDialog.setBeginButton(this._getOkButton());
	} else {
		this._oList.setMode(sap.m.ListMode.SingleSelectMaster); 
		this._oDialog.setBeginButton(this._getCancelButton());
	}

	return this;
};

/**
 * Set the title of the internal dialog
 * @overwrite
 * @public
 * @param {string} sTitle the title text for the dialog
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.setTitle = function (sTitle) {
	this._oDialog.setTitle(sTitle);
	this.setProperty("title", sTitle, true);

	return this;
};

/**
 * Reflector for the internal List's no data text property
 * @overwrite
 * @public
 * @param {string} sNoDataText the no data text for the list
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.setNoDataText = function (sNoDataText) {
	this._oList.setNoDataText(sNoDataText);

	return this;
};

/**
 * Reflector for the internal List's no data text property
 * @overwrite
 * @public
 * @returns {string} the current no data text
 */
sap.m.SelectDialog.prototype.getNoDataText = function () {
	return this._oList.getNoDataText();
};

/**
 * Reflector for the internal Dialog's contentWidth property
 * @overwrite
 * @public
 * @returns {sap.ui.core.CSSSize} sWidth the content width of the internal dialog
 */
sap.m.SelectDialog.prototype.getContentWidth = function () {
	return this._oDialog.getContentWidth();
};

/**
 * Reflector for the internal Dialog's contentWidth property
 * @param {sap.ui.core.CSSSize} sWidth the new content width value for the dialog
 * @public
 * @overwrite
 * 
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.setContentWidth = function (sWidth) {
	this._oDialog.setContentWidth(sWidth);

	return this;
};

/* =========================================================== */
/*           begin: forward aggregation  methods to List       */
/* =========================================================== */

/*
 * Set the model for the internal list AND the current control so that 
 * both controls can be used with data binding
 * @overwrite
 * @public
 * @param {sap.ui.Model} oModel the model that holds the data for the list
 * @param {string} sModelName the optional model name
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype._setModel = sap.m.SelectDialog.prototype.setModel;
sap.m.SelectDialog.prototype.setModel = function (oModel, sModelName) {
	var aArgs = Array.prototype.slice.call(arguments);

	// reset busy mode if model was changed
	this._setBusy(false);
	this._bInitBusy = false;

	// we made a request in this control, so we update the counter
	this._iListUpdateRequested += 1;

	// pass the model to the list and also to the local control to allow binding of own properties
	this._oList.setModel(oModel, sModelName);
	sap.m.SelectDialog.prototype._setModel.apply(this, aArgs);

	// reset the selection label when setting the model
	this._updateSelectionIndicator();

	return this;
};

/*
 * Forwards a function call to a managed object based on the aggregation name.
 * If the name is items, it will be forwarded to the list, otherwise called locally
 * @private
 * @param {string} sFunctionName the name of the function to be called
 * @param {string} sAggregationName the name of the aggregation asociated
 * @returns {mixed} the return type of the called function
 */
sap.m.SelectDialog.prototype._callMethodInManagedObject = function (sFunctionName, sAggregationName) {
	var aArgs = Array.prototype.slice.call(arguments);

	if (sAggregationName === "items") {
		// apply to the internal list
		return this._oList[sFunctionName].apply(this._oList, aArgs.slice(1));
	} else {
		// apply to this control
		return sap.ui.base.ManagedObject.prototype[sFunctionName].apply(this, aArgs.slice(1));
	}
};

/**
 * Forwards aggregations with the name of items to the internal list.
 * @overwrite
 * @public
 * @param {string} sAggregationName the name for the binding
 * @param {object} oBindingInfo the configuration parameters for the binding
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype.bindAggregation = function () {
	var args = Array.prototype.slice.call(arguments);

	// propagate the bind aggregation function to list
	this._callMethodInManagedObject.apply(this, ["bindAggregation"].concat(args));
	return this;
};

sap.m.SelectDialog.prototype.validateAggregation = function (sAggregationName, oObject, bMultiple) {
	return this._callMethodInManagedObject("validateAggregation", sAggregationName, oObject, bMultiple);
};

sap.m.SelectDialog.prototype.setAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {
	this._callMethodInManagedObject("setAggregation", sAggregationName, oObject, bSuppressInvalidate);
	return this;
};

sap.m.SelectDialog.prototype.getAggregation = function (sAggregationName, oDefaultForCreation) {
	return this._callMethodInManagedObject("getAggregation", sAggregationName, oDefaultForCreation);
};

sap.m.SelectDialog.prototype.indexOfAggregation = function (sAggregationName, oObject) {
	return this._callMethodInManagedObject("indexOfAggregation", sAggregationName, oObject);
};

sap.m.SelectDialog.prototype.insertAggregation = function (sAggregationName, oObject, iIndex, bSuppressInvalidate) {
	this._callMethodInManagedObject("insertAggregation", sAggregationName, oObject, iIndex, bSuppressInvalidate);
	return this;
};

sap.m.SelectDialog.prototype.addAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {
	this._callMethodInManagedObject("addAggregation", sAggregationName, oObject, bSuppressInvalidate);
	return this;
};

sap.m.SelectDialog.prototype.removeAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {
	return this._callMethodInManagedObject("removeAggregation", sAggregationName, oObject, bSuppressInvalidate);
};

sap.m.SelectDialog.prototype.removeAllAggregation = function (sAggregationName, bSuppressInvalidate) {
	return this._callMethodInManagedObject("removeAllAggregation", sAggregationName, bSuppressInvalidate);
};

sap.m.SelectDialog.prototype.destroyAggregation = function (sAggregationName, bSuppressInvalidate) {
	this._callMethodInManagedObject("destroyAggregation", sAggregationName, bSuppressInvalidate);
	return this;
};

sap.m.SelectDialog.prototype.getBinding = function (sAggregationName) {
	return this._callMethodInManagedObject("getBinding", sAggregationName);
};


sap.m.SelectDialog.prototype.getBindingInfo = function (sAggregationName) {
	return this._callMethodInManagedObject("getBindingInfo", sAggregationName);
};

sap.m.SelectDialog.prototype.getBindingPath = function (sAggregationName) {
	return this._callMethodInManagedObject("getBindingPath", sAggregationName);
};

sap.m.SelectDialog.prototype.getBindingContext = function (sModelName) {
	return this._oList.getBindingContext(sModelName);
};

/*
 * Set the binding context for the internal list AND the current control so that 
 * both controls can be used with the context
 * @overwrite
 * @public
 * @param {sap.ui.model.Context} oContext the new context 
 * @param {string} sModelName the optional model name
 * @returns {this} this pointer for chaining
 */

sap.m.SelectDialog.prototype._setBindingContext = sap.m.SelectDialog.prototype.setBindingContext;
sap.m.SelectDialog.prototype.setBindingContext = function (oContext, sModelName) {
	var args = Array.prototype.slice.call(arguments);

	// pass the model to the list and also to the local control to allow binding of own properties
	this._oList.setBindingContext(oContext, sModelName);
	sap.m.SelectDialog.prototype._setBindingContext.apply(this, args);

	return this;
};

/* =========================================================== */
/*           end: forward aggregation  methods to List       */
/* =========================================================== */

/* =========================================================== */
/*           begin: internal methods and properties            */
/* =========================================================== */

/*
 * Fires the search event. This function is called whenever a search related parameter or the value in the search field is changed 
 * @private
 * @param {string} sValue the new filter value or undefined if called by management functions
 * @param {string} sEventType the search field event type that has been called (liveChange / search)
 * @returns {this} this pointer for chaining
 */
sap.m.SelectDialog.prototype._executeSearch = function (sValue, sEventType) {
	var oList = this._oList,
		oBinding = (oList ? oList.getBinding("items") : undefined),
		bSearchValueDifferent = (this._sSearchFieldValue !== sValue); // to prevent unwanted duplicate requests

	// fire either the Search event or the liveChange event when dialog is opened.
	// 1) when the clear icon is called then both liveChange and search events are fired but we only want to process the first one
	// 2) when a livechange has been triggered by typing we don't want the next search event to be processed (typing + enter or typing + search button)
	if (this._oDialog.isOpen() && ((bSearchValueDifferent && sEventType === "liveChange") || sEventType === "search")) {
		// set the internal value to the passed value to check if the same value has already been filtered (happens when clear is called, it fires liveChange and change events)
		this._sSearchFieldValue = sValue;

		// only set when the binding has already been executed
		if (oBinding) {
			// we made another request in this control, so we update the counter
			this._iListUpdateRequested += 1;
			if (sEventType === "search") {
				// fire the search so the data can be updated externally
				this.fireSearch({value: sValue, itemsBinding: oBinding});
			} else if (sEventType === "liveChange") {
				// fire the liveChange so the data can be updated externally						  
				this.fireLiveChange({value: sValue, itemsBinding: oBinding});
			}
		} else {
			// no binding, just fire the event for manual filtering
			if (sEventType === "search") {
				// fire the search so the data can be updated externally
				this.fireSearch({value: sValue});
			} else if (sEventType === "liveChange") {
				// fire the liveChange so the data can be updated externally						  
				this.fireLiveChange({value: sValue});
			}
		}
	}

	return this;
};

/*
 * Internal function that shows/hides a local busy indicator and hides/shows the list
 * based on the parameter flag. For the first request, the search field is also hidden.
 * @private
 * @param {boolean} bBusy flag (true = show, false = hide)
 */
sap.m.SelectDialog.prototype._setBusy = function (bBusy) {
	if (this._iListUpdateRequested) { // check if the event was caused by our control
		if (bBusy) {
			if (this._bFirstRequest) { // also hide the header bar for the first request
				this._oSubHeader.$().css('display', 'none');
			}
			this._oList.addStyleClass('sapMSelectDialogListHide');
			this._oBusyIndicator.$().css('display', 'inline-block');
		} else {
			if (this._bFirstRequest) { // also show the header bar again for the first request
				this._oSubHeader.$().css('display', 'block');
				this._bFirstRequest = false;
			}
			this._oList.removeStyleClass('sapMSelectDialogListHide');
			this._oBusyIndicator.$().css('display', 'none');
		}
	}
};

/*
 * Event function that is called when the model sent a request to update the data.
 * It shows a busy indicator and hides searchField and list in the dialog. 
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.SelectDialog.prototype._updateStarted = function (oEvent) {
	if (this.getModel() && this.getModel() instanceof sap.ui.model.odata.ODataModel) {
		if (this._oDialog.isOpen() && this._iListUpdateRequested) {
			// only set busy mode when we have an oData model
			this._setBusy(true);
		} else {
			this._bInitBusy = true;
		}
	}
};

/*
 * Event function that is called when the model request is finished.
 * It hides the busy indicator and shows searchField and list in the dialog. 
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.SelectDialog.prototype._updateFinished = function (oEvent) {
	// only reset busy mode when we have an oData model
	this._updateSelectionIndicator();
	if (this.getModel() && this.getModel() instanceof sap.ui.model.odata.ODataModel) {
		this._setBusy(false);
		this._bInitBusy = false;
	}

	// we received a request (from this or from another control) so set the counter to 0
	this._iListUpdateRequested = 0;
};

/*
 * Lazy load the ok button if needed for MultiSelect mode
 * @private
 * @returns {sap.m.Button} the button
 */
sap.m.SelectDialog.prototype._getOkButton = function () {
	var that = this,
		fnOKAfterClose = null;

	fnOKAfterClose = function () {
		that._oSelectedItem = that._oList.getSelectedItem();
		that._aSelectedItems = that._oList.getSelectedItems();

		that._oDialog.detachAfterClose(fnOKAfterClose);
		that._fireConfirmAndUpdateSelection();
	};

	if (!this._oOkButton) {
		this._oOkButton = new sap.m.Button(this.getId() + "-ok", {
			text: this._oRb.getText("MSGBOX_OK"),
			press: function () {
				// attach the reset function to afterClose to hide the dialog changes from the end user 
				that._oDialog.attachAfterClose(fnOKAfterClose);
				that._oDialog.close();
			}
		});
	}	
	return this._oOkButton;
};

/*
 * Lazy load the cancel button
 * @private
 * @returns {sap.m.Button} the button
 */
sap.m.SelectDialog.prototype._getCancelButton = function () {
	var that = this;

	if (!this._oCancelButton) {
		this._oCancelButton = new sap.m.Button(this.getId() + "-cancel", {
			text: this._oRb.getText("MSGBOX_CANCEL"),
			press: function (oEvent) {
				that._onCancel();
			}
		});
	}	
	return this._oCancelButton;
};

/*
 * Internal event handler for the cancel button and ESC key
 * @private
 */
sap.m.SelectDialog.prototype._onCancel = function (oEvent) {
	var that = this,
		fnAfterClose = null;

	fnAfterClose = function () {
			// reset internal selection values
			that._oSelectedItem = null;
			that._aSelectedItems = [];
			that._sSearchFieldValue = null;

			// detach this function
			that._oDialog.detachAfterClose(fnAfterClose);

			// fire cancel event
			that.fireCancel();

			// reset selection
			that._resetSelection();
		};

	// attach the reset function to afterClose to hide the dialog changes from the end user 
	this._oDialog.attachAfterClose(fnAfterClose);
	this._oDialog.close();
};

/*
 * Internal function to update the selection indicator bar
 * @private
 */
sap.m.SelectDialog.prototype._updateSelectionIndicator = function () {
	var iSelectedContexts = this._oList.getSelectedContexts(true).length,
		oInfoBar = this._oList.getInfoToolbar();

	// update the selection label
	oInfoBar.setVisible(!!iSelectedContexts);
	oInfoBar.getContent()[0].setText(this._oRb.getText("TABLESELECTDIALOG_SELECTEDITEMS", [iSelectedContexts]));
};

/*
 * Internal function to fire the confirm event and to update the selection of the list.
 * The function is called on pressing ok and on close in single select mode 
 * @private
 */
sap.m.SelectDialog.prototype._fireConfirmAndUpdateSelection = function () {
	// fire confirm event with current selection
	this.fireConfirm({
		selectedItem: this._oSelectedItem,
		selectedItems: this._aSelectedItems,
		selectedContexts: this._oList.getSelectedContexts(true)
	});
	this._updateSelection();
};

/*
 * Internal function to remove/keep the list selection based on property "rememberSelection"
 * @private
 */
sap.m.SelectDialog.prototype._updateSelection = function () {
	// cleanup old selection on close to allow reuse of dialog
	// due to the delayed call (dialog onAfterClose) the control could be already destroyed
	if (!this.getRememberSelections() && !this.bIsDestroyed) {
		this._oList.removeSelections(true);
		delete this._oSelectedItem;
		delete this._aSelectedItems;
	}
};

/*
 * Internal function to reset the selection to the items that were selected when the dialog was opened
 * @private
 */
sap.m.SelectDialog.prototype._resetSelection = function () {
	var i = 0;

	// due to the delayed call (dialog onAfterClose) the control could be already destroyed
	if (!this.bIsDestroyed) {
		this._oList.removeSelections();
		for(; i < this._aInitiallySelectedItems.length; i++) {
			this._oList.setSelectedItem(this._aInitiallySelectedItems[i]);		
		}
	}
};



/* =========================================================== */
/*           end: internal methods                             */
/* =========================================================== */

}; // end of sap/m/SelectDialog.js
if ( !jQuery.sap.isDeclared('sap.m.TablePersoDialog') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides TablePersoDialog
jQuery.sap.declare("sap.m.TablePersoDialog");
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained



jQuery.sap.require('sap.m.SwitchType'); // unlisted dependency retained







/**
 * The TablePersoDialog can be used to display and allow modification of personalization settings relating to a Table. It displays the columns of the table that it refers to by using
 * <ul><li>The result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers a non-null value for a column</li>
 * <li>the column header control's 'text' property if no caption property is available</li>
 * <li>the column header control's 'title' property if neither 'text' nor 'caption' property are available</li>
 * <li>the column id is displayed as last fallback, if none of the above is at hand. In that case, a warning is logged. </li></ul>
 *
 * @param {string}
 *			[sId] optional id for the new control; generated automatically if
 *			no non-empty id is given Note: this can be omitted, no matter
 *			whether <code>mSettings</code> will be given or not!
 * @param {object}
 *			[mSettings] optional map/JSON-object with initial settings for the
 *			new component instance
 * @public
 *
 * @class Table Personalization Dialog
 * @extends sap.ui.base.ManagedObject
 * @author SAP
 * @version 1.20.7
 * @name sap.m.TablePersoDialog
 */
sap.ui.base.ManagedObject.extend("sap.m.TablePersoDialog", /** @lends sap.m.TablePersoDialog */

{
	constructor : function(sId, mSettings) {

		sap.ui.base.ManagedObject.apply(this, arguments);

	},

	metadata : {
		properties: {
			"contentWidth": {type: "sap.ui.core.CSSSize"},
			"persoMap": {type: "object"},
			"columnInfo": {type: "object"}
		},
		aggregations: {
			"persoService": {
				type: "Object",
				multiple: false
			}
		},
		associations: {
			"persoDialogFor": sap.m.Table
		},
		events: {
			confirm: {},
			cancel: {}
		},
		library: "sap.m"
	}

});


/**
 * Initializes the TablePersoDialog instance after creation.
 *
 * @function
 * @name sap.m.TablePeroDialog.prototype.init
 * @protected
 */
sap.m.TablePersoDialog.prototype.init = function() {
	var that = this;

	// Resource bundle, for texts
	this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

	// To store the column settings
	this._oP13nModel = new sap.ui.model.json.JSONModel();

	// Template for list inside the dialog - 1 item per column
	this._columnItemTemplate = new sap.m.InputListItem({
		label: "{Personalization>text}",
		content: new sap.m.Switch({
			state: "{Personalization>visible}",
			customTextOn: " ",
			customTextOff: " "
		})
	}).addStyleClass("sapMPersoDialogLI");

	//Button definition for sorting of the table content(up/down)
	this._oButtonUp = new sap.m.Button({
					icon: "sap-icon://arrow-top",
					enabled: false,
					press: function(oEvent) {
						that._moveItem(-1);
						},
	});
	
	this._oButtonDown = new sap.m.Button({
					  icon: "sap-icon://arrow-bottom",
					  enabled: false,
					  press: function(oEvent) {
						  that._moveItem(1);
					  	}
	});
	
	this._fnUpdateArrowButtons = function() {
		var oList = that._oDialog.getContent()[0],
			length = oList.getItems().length;
		//Initialisation of the enabled property 
		var bButtonDownEnabled = true,
		    bButtonUpEnabled = true;
		if (length == 0) {
			//No data -> both buttons(arrow-up/-down have to be disabled!)
			bButtonUpEnabled = false;
			bButtonDownEnabled = false;
			
		} else {
			//data available (1 or more items)
			if (oList.getItems()[0].getSelected()) {
				//first item selected: disable button "arrow top"
				bButtonUpEnabled = false;
			};
			if (oList.getItems()[length-1].getSelected()){
				//last item selected: disable button "arrow bottom"
				bButtonDownEnabled = false;
			};
		};
		that._oButtonUp.setEnabled(bButtonUpEnabled);
		that._oButtonDown.setEnabled(bButtonDownEnabled);
	};
	
	
	this._oDialog = new sap.m.Dialog({
		title : this._oRb.getText("PERSODIALOG_COLUMNS_TITLE"),
		stretch: sap.ui.Device.system.phone,
		horizontalScrolling: false,
		content : new sap.m.List({
			includeItemInSelection: true,
			mode: sap.m.ListMode.SingleSelectMaster,
			select: this._fnUpdateArrowButtons,
		}),
		subHeader : new sap.m.Bar({
			contentLeft: [ this._oButtonUp, this._oButtonDown],
			contentRight: new sap.m.Button({
				icon: "sap-icon://refresh",
				press : function () {
					that._resetAll();
				}
			})
		}),
		leftButton : new sap.m.Button({
			text : this._oRb.getText("PERSODIALOG_OK"),
			press : function () {
				this.getParent().close();
				that._oButtonUp.setEnabled(false);
				that._oButtonDown.setEnabled(false);				
				that.fireConfirm();
			}
		}),
		rightButton : new sap.m.Button({
			text: this._oRb.getText("PERSODIALOG_CANCEL"),
			press: function () {
				that._readCurrentSettingsFromTable();
				this.getParent().close();
				that._oButtonUp.setEnabled(false);
				that._oButtonDown.setEnabled(false);				
				that.fireCancel();
			}
		})
	}).addStyleClass("sapMPersoDialog");

};

/**
 * Returns the personalizations made. Currently supports
 * a 'columns' property which holds an array of settings,
 * one element per column in the associated table. The element
 * contains column-specific information as follows: id: column id;
 * order: new order; text: the column's header text that was displayed
 * in the dialog; visible: visibility (true or false).
 *
 * @return object personalizationData
 * @public
 */
sap.m.TablePersoDialog.prototype.retrievePersonalizations = function () {
	return this._oP13nModel.getData();
};

/**
 * Sets the content of the dialog, being list items representing
 * the associated table's column settings, and opens the dialog
 * @public
 */
sap.m.TablePersoDialog.prototype.open = function () {

	// The only control in the Dialog's content aggregation is a List
	var oList = this._oDialog.getContent()[0];

	// Get the associated Table's column info and set it into the Personalization model
	this._readCurrentSettingsFromTable();

	// Also save initial state in model in case of Reset All
	this._oInitialState = JSON.stringify(this._oP13nModel.getData().aColumns);

	this._oDialog.setModel(this._oP13nModel, "Personalization");
	oList.bindAggregation("items", "Personalization>/aColumns", this._columnItemTemplate);

	// Now show the dialog
	this._oDialog.open();
};

/**
 * Reflectors for the internal Dialog's contentWidth property
 * @public
 */
sap.m.TablePersoDialog.prototype.getContentWidth = function() {
	return this._oDialog.getContentWidth();
};

sap.m.TablePersoDialog.prototype.setContentWidth = function(sWidth) {
	this._oDialog.setContentWidth(sWidth);
	return this;
};

/**
 * Destroys the control
 * @private
 */
sap.m.TablePersoDialog.prototype.exit = function () {
	this._oRb = null;
	this._oP13nModel = null;
	this._oInitialState = null;

	if (this._columnItemTemplate) {
		this._columnItemTemplate.destroy();
		this._columnItemTemplate = null;
	}

	if (this._oDialog) {
		this._oDialog.destroy();
		this._oDialog = null;
	}
	
	if(this._oButtonDown){
		this._oButtonDown.destroy();
		this._oButtonDown = null;
	}
	if(this._oButtonUp){
		this._oButtonUp.destroy();
		this._oButtonUp = null;
	}
};

/* =========================================================== */
/*           begin: internal methods                           */
/* =========================================================== */

/**
* Turn column visibility and order back to initial state
* when dialog was opened
* @private
*/
sap.m.TablePersoDialog.prototype._resetAll = function () {

	var oData = this._oP13nModel.getData();
	oData.aColumns = JSON.parse(this._oInitialState);
	this._oP13nModel.setData(oData);

};


/**
 * Returns table column settings (header text, order, visibility) for a table
 * @private
 * @param {object} oTable the table for which column settings should be returned
 */
sap.m.TablePersoDialog.prototype._tableColumnInfo = function (oTable) {
	//Check if persoMap has been passed into the dialog.
	//Otherwise, personalization is not possible.
	if(!!this.getPersoMap()) {
		var aColumns = oTable.getColumns(),
			that = this,
			aColumnInfo = [];
		aColumns.forEach(function(oColumn){
			var sCaption = null;
			if(that.getPersoService().getCaption) {
				sCaption = that.getPersoService().getCaption(oColumn);
			}
			
			if (!sCaption) {
				var oColHeader = oColumn.getHeader();
				//Check if header control has either text or 'title' property
				if(oColHeader.getText && oColHeader.getText()) {
					sCaption = oColHeader.getText();
				} else if(oColHeader.getTitle && oColHeader.getTitle()) {
					sCaption = oColHeader.getTitle();
				}
			}
				
			if (!sCaption){
				//Fallback: use column id and issue warning to let app developer know to add captions to columns
				sCaption = oColumn.getId();
				jQuery.sap.log.warning("Please 'getCaption' callback implentation in your TablePersoProvider for column " + oColumn + ". Table personalization uses column id as fallback value.");
			}
			
			//In this case, oColumn is one of our controls. Therefore, sap.ui.core.Element.toString() 
			//is called which delivers something like 'Element sap.m.Column#<sId>' where sId is the column's sId property
			aColumnInfo.push({
				text : sCaption,
				order : oColumn.getOrder(),
				visible : oColumn.getVisible(),
				id: that.getPersoMap()[oColumn]
			});
		});

		// Sort to make sure they're presented in the right order
		aColumnInfo.sort(function(a, b) { return a.order - b.order; });

		return aColumnInfo;
	}
	return null;
};

/**
 * Moves an item up or down, swapping it with the neighbour.
 * Does this in the bound model.
 * @private
 * @param {int} iDirection the move direction (-1 up, 1 down)
 */
sap.m.TablePersoDialog.prototype._moveItem = function (iDirection) {

	var oList = this._oDialog.getContent()[0];
	var oModel = this._oP13nModel;

	// Abort if nothing selected
	var oSelectedItem = oList.getSelectedItem();
	if (! oSelectedItem) return;

	// The items themselves
	var data = oModel.getData();

	// Get array index of selected item
	var item = oSelectedItem.getBindingContext("Personalization").getPath().split("/").pop() * 1;

	// Get array index of item to swap with
	var swap = item + iDirection;

	// Abort if out of bounds
	if ( swap < 0 || swap >= data.aColumns.length ) return;

	// Do the swap
	var temp = data.aColumns[swap];
	data.aColumns[swap] = data.aColumns[item];
	//Make sure the order member is adapted as well!
	data.aColumns[swap].order = swap;
	data.aColumns[item] = temp;
	//Make sure the order member is adapted as well!
	data.aColumns[item].order = item;

	// Remove selection before binding
	oList.removeSelections(true);

	// Swap in the visible list
	this._swapListItemContent(oList, item, swap);

	// Switch the selected item
	oList.setSelectedItem(oList.getItems()[swap], true);

	this._fnUpdateArrowButtons.call(this);
};

/**
* Exchanges the label property text and the Switch inside the Dialog's List
* for the two items being swapped, using DOM manipulation (to save re-rendering)
* @private
*/
sap.m.TablePersoDialog.prototype._swapListItemContent = function(oList, iItem, iSwap) {

	var aListItems = oList.getItems();

	// Labels
	var sLabelItemId = "#" + aListItems[iItem].getId() + " label",
	sLabelSwapId = "#" + aListItems[iSwap].getId() + " label";
	var sLabelTemp = jQuery(sLabelSwapId).html();

	// Switches
	var sSwitchItemId = "#" + aListItems[iItem].getContent()[0].getId();
	var sSwitchSwapId = "#" + aListItems[iSwap].getContent()[0].getId();
	var sSwitchTemp = jQuery(sSwitchSwapId).html();

	// Do the swap
	jQuery(sLabelSwapId).html(jQuery(sLabelItemId).html());
	jQuery(sLabelItemId).html(sLabelTemp);
	jQuery(sSwitchSwapId).html(jQuery(sSwitchItemId).html());
	jQuery(sSwitchItemId).html(sSwitchTemp);

};

/**
 * Reads current column settings from the table and stores in the model
 * @private
 */
sap.m.TablePersoDialog.prototype._readCurrentSettingsFromTable = function() {
	var oTable = sap.ui.getCore().byId(this.getPersoDialogFor());
	this._oP13nModel.setData({ aColumns : this._tableColumnInfo(oTable) });
};


}; // end of sap/m/TablePersoDialog.js
if ( !jQuery.sap.isDeclared('sap.m.FacetFilterList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FacetFilterList.
jQuery.sap.declare("sap.m.FacetFilterList");




/**
 * Constructor for a new FacetFilterList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: true)</li>
 * <li>{@link #getActive active} : boolean (default: true)</li>
 * <li>{@link #getAllCount allCount} : int</li>
 * <li>{@link #getSequence sequence} : int (default: -1)</li>
 * <li>{@link #getKey key} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.FacetFilterList#event:listOpen listOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.FacetFilterList#event:listClose listClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * FacetFilterList represents a list of values for the FacetFilter control.
 * @extends sap.m.List
 *
 * @author  
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.FacetFilterList
 */
sap.m.List.extend("sap.m.FacetFilterList", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getSelectedKeys", "setSelectedKeys", "removeSelectedKey", "removeSelectedKeys"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"multiSelect" : {type : "boolean", group : "Behavior", defaultValue : true, deprecated: true},
		"active" : {type : "boolean", group : "Behavior", defaultValue : true},
		"allCount" : {type : "int", group : "Appearance", defaultValue : null},
		"sequence" : {type : "int", group : "Behavior", defaultValue : -1},
		"key" : {type : "string", group : "Identification", defaultValue : null}
	},
	events : {
		"listOpen" : {}, 
		"listClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.FacetFilterList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FacetFilterList.extend
 * @function
 */

sap.m.FacetFilterList.M_EVENTS = {'listOpen':'listOpen','listClose':'listClose'};


/**
 * Getter for property <code>title</code>.
 * The title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to Simple. It is also displayed as a list item in the facet page of the dialog.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.FacetFilterList#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterList#setTitle
 * @function
 */


/**
 * Getter for property <code>multiSelect</code>.
 * Specifies whether multiple or single selection is used.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>multiSelect</code>
 * @public
 * @deprecated Since version 1.20.0. 
 * This property is no longer supported. Use the setMode method instead. FacetFilterList overrides the setMode method to restrict the possible modes to MultiSelect and SingleSelectMaster. All other modes are ignored and will not be set.
 * @name sap.m.FacetFilterList#getMultiSelect
 * @function
 */

/**
 * Setter for property <code>multiSelect</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bMultiSelect  new value for property <code>multiSelect</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20.0. 
 * This property is no longer supported. Use the setMode method instead. FacetFilterList overrides the setMode method to restrict the possible modes to MultiSelect and SingleSelectMaster. All other modes are ignored and will not be set.
 * @name sap.m.FacetFilterList#setMultiSelect
 * @function
 */


/**
 * Getter for property <code>active</code>.
 * Indicates that the list is displayed as a button when the FacetFilter type is set to Simple.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>active</code>
 * @public
 * @name sap.m.FacetFilterList#getActive
 * @function
 */

/**
 * Setter for property <code>active</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bActive  new value for property <code>active</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterList#setActive
 * @function
 */


/**
 * Getter for property <code>allCount</code>.
 * Number of objects that match this item in the target data set when all filter items are selected.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>allCount</code>
 * @public
 * @name sap.m.FacetFilterList#getAllCount
 * @function
 */

/**
 * Setter for property <code>allCount</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iAllCount  new value for property <code>allCount</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterList#setAllCount
 * @function
 */


/**
 * Getter for property <code>sequence</code>.
 * Sequence that determines the order in which facet list is shown on the facet filter. Lists are rendered by ascending order of sequence.
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>sequence</code>
 * @public
 * @name sap.m.FacetFilterList#getSequence
 * @function
 */

/**
 * Setter for property <code>sequence</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iSequence  new value for property <code>sequence</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterList#setSequence
 * @function
 */


/**
 * Getter for property <code>key</code>.
 * Unique identifier for this filter list.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>key</code>
 * @public
 * @name sap.m.FacetFilterList#getKey
 * @function
 */

/**
 * Setter for property <code>key</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterList#setKey
 * @function
 */


/**
 * Fired before the filter list is opened. 
 *
 * @name sap.m.FacetFilterList#listOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'listOpen' event of this <code>sap.m.FacetFilterList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FacetFilterList</code>.<br/> itself. 
 *  
 * Fired before the filter list is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code>.<br/> itself.
 *
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterList#attachListOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'listOpen' event of this <code>sap.m.FacetFilterList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterList#detachListOpen
 * @function
 */

/**
 * Fire event listOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.FacetFilterList#fireListOpen
 * @function
 */


/**
 * Triggered after the list of items is closed. 
 *
 * @name sap.m.FacetFilterList#listClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.FacetFilterItem[]} oControlEvent.getParameters.selectedItems Array of selected items.  Items returned are only copies and therefore can only be used to read properties, not set them.
 * @param {boolean} oControlEvent.getParameters.allSelected True if the select All checkbox is selected.  This will be false if all items are actually selected (every FacetFilterItem.selected == true).  In that case selectedItems will contain all selected items.
 * @param {object} oControlEvent.getParameters.selectedKeys Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves.  Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'listClose' event of this <code>sap.m.FacetFilterList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FacetFilterList</code>.<br/> itself. 
 *  
 * Triggered after the list of items is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code>.<br/> itself.
 *
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterList#attachListClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'listClose' event of this <code>sap.m.FacetFilterList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FacetFilterList#detachListClose
 * @function
 */

/**
 * Fire event listClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItems' of type <code>sap.m.FacetFilterItem[]</code> Array of selected items.  Items returned are only copies and therefore can only be used to read properties, not set them.</li>
 * <li>'allSelected' of type <code>boolean</code> True if the select All checkbox is selected.  This will be false if all items are actually selected (every FacetFilterItem.selected == true).  In that case selectedItems will contain all selected items.</li>
 * <li>'selectedKeys' of type <code>object</code> Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves.  Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FacetFilterList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.FacetFilterList#fireListClose
 * @function
 */


/**
 * Returns the keys of the selected elements as an associative array. An empty object is returned if no items are selected.
 *
 * @name sap.m.FacetFilterList.prototype.getSelectedKeys
 * @function

 * @type object
 * @public
 * @since 1.20.3
 */


/**
 * Use this method to pre-select FacetFilterItems, such as when restoring FacetFilterList selections from a variant. Keys are cached separately from the actual FacetFilterItems so that they remain even when the physical items are removed by filtering or sorting. If aKeys is undefined, null, or {} (empty object) then all keys are deleted. After this method completes only those items with matching keys will be selected. All other items in the list will be deselected.
 *
 * @name sap.m.FacetFilterList.prototype.setSelectedKeys
 * @function
 * @param {object} 
 *         oAKeys
 *         Associative array indicating which FacetFilterItems should be selected in the list. Each property must be set to the value of a FacetFilterItem.key property. Each property value should be set to the FacetFilterItem.text property value. The text value is used to display the FacetFilterItem text when the FacetFilterList button or FacetFilter summary bar is displayed. If no property value is set then the property key is used for the text.

 * @type void
 * @public
 * @since 1.20.3
 */


/**
 * Remove the specified key from the selected keys cache and deselect the item.
 *
 * @name sap.m.FacetFilterList.prototype.removeSelectedKey
 * @function
 * @param {string} 
 *         sKey
 *         The key of the selected item to be removed from the cache. If null then the text parameter will be used as the key.
 * @param {string} 
 *         sText
 *         The text of the selected item to be removed from the cache. If the key parameter is null then text will be used as the key.

 * @type void
 * @public
 * @since 1.20.4
 */


/**
 * Remove all selected keys from the selected keys cache and deselect all items.
 *
 * @name sap.m.FacetFilterList.prototype.removeSelectedKeys
 * @function

 * @type void
 * @public
 * @since 1.20.4
 */


// Start of sap\m\FacetFilterList.js
sap.m.FacetFilterList.prototype.setTitle = function(sTitle) {
       
       this.setProperty("title", sTitle, true);
       if(this.getParent() && this.getParent()._setButtonText) {
              this.getParent()._setButtonText(this);
       }
       return this;
};


sap.m.FacetFilterList.prototype.setMultiSelect = function(bVal) {
       
       this.setProperty("multiSelect", bVal, true);
       var mode = bVal ? sap.m.ListMode.MultiSelect : sap.m.ListMode.SingleSelectMaster;
       this.setMode(mode);
       return this;
};

/**
* Override to allow only MultiSelect and SingleSelectMaster list modes. If an invalid mode is given
* then the mode will not be changed.
* @param mode {sap.m.ListMode} The list mode
* @public
*/
sap.m.FacetFilterList.prototype.setMode = function(mode) {
       
       if(mode === sap.m.ListMode.MultiSelect || mode === sap.m.ListMode.SingleSelectMaster) {
              
              sap.m.List.prototype.setMode.call(this, mode);
              this.setProperty("multiSelect", mode === sap.m.ListMode.MultiSelect ? true : false, true);
       }
       return this;
};


sap.m.FacetFilterList.prototype.getSelectedItems = function() {
       
       var aSelectedItems = [];
       // Track which items are added from the aggregation so that we don't add them again when adding the remaining selected key items
       var oCurrentSelectedItemsMap = {};  
       var aCurrentSelectedItems = sap.m.ListBase.prototype.getSelectedItems.apply(this, arguments);
       
       // First add items according to what is selected in the 'items' aggregation. This maintains indexes of currently selected items in the returned array.
       aCurrentSelectedItems.forEach(function(oItem) {
              
              aSelectedItems.push(new sap.m.FacetFilterItem({
                     text: oItem.getText(),
                     key: oItem.getKey(),
                     selected: true
              }));
              oCurrentSelectedItemsMap[oItem.getKey()] = true;
       });    

       var oSelectedKeys = this.getSelectedKeys();
       var aSelectedKeys = Object.getOwnPropertyNames(oSelectedKeys);
       
       // Now add items that are not present in the aggregation. These have no index since they are not in the aggregation,
       // so just add them to the end in non-deterministic order.
       if(aCurrentSelectedItems.length < aSelectedKeys.length) {
                     
              aSelectedKeys.forEach(function(sKey) {
                     
                     if(!oCurrentSelectedItemsMap[sKey]) {
                           aSelectedItems.push(new sap.m.FacetFilterItem({
                                  text: oSelectedKeys[sKey],
                                  key: sKey,
                                  selected: true
                           }));
                     }
              });
       }
       return aSelectedItems;
};

sap.m.FacetFilterList.prototype.getSelectedItem = function() {
       
       var oItem = sap.m.ListBase.prototype.getSelectedItem.apply(this, arguments);
       var aSelectedKeys = Object.getOwnPropertyNames(this.getSelectedKeys());
       if(!oItem && aSelectedKeys.length > 0) {
              oItem = new sap.m.FacetFilterItem({
                     text: this.getSelectedKeys()[aSelectedKeys[0]],
                     key: aSelectedKeys[0],
                     selected: true
              });
       }
       return oItem;
};

sap.m.FacetFilterList.prototype.removeSelections = function(bAll) {
       
       // See _resetItemsBinding to understand why we override the ListBase method
       if(this._allowRemoveSelections) {
              
              bAll ? this.setSelectedKeys() : sap.m.ListBase.prototype.removeSelections.call(this, bAll);
       }             
       return this;
};

sap.m.FacetFilterList.prototype.getSelectedKeys = function() {
       var oResult = {};
       var oKeys = this._oSelectedKeys;
       Object.getOwnPropertyNames(oKeys).forEach(function(key) {oResult[key] = oKeys[key];});
       return oResult;
};

sap.m.FacetFilterList.prototype.setSelectedKeys = function(oKeys) {
       
       this._oSelectedKeys = {};
       var bKeyAdded = false;
       oKeys && Object.getOwnPropertyNames(oKeys).forEach(function(key){
              this._addSelectedKey(key, oKeys[key]);
              bKeyAdded = true;
       }, this);
       if (bKeyAdded) {
              this.setActive(true);
              this._selectItemsByKeys();
       } else {
              sap.m.ListBase.prototype.removeSelections.call(this);
       }
};

sap.m.FacetFilterList.prototype.removeSelectedKey = function(sKey, sText) {
       
       if(this._removeSelectedKey(sKey, sText)){
         this.getItems().forEach(function(oItem) {
              var sItemKey = oItem.getKey() || oItem.getText();
              sKey === sItemKey && oItem.setSelected(false);
         });         
       }
};

sap.m.FacetFilterList.prototype.removeSelectedKeys = function() {
       this._oSelectedKeys = {};
       sap.m.ListBase.prototype.removeSelections.call(this, true);
};

sap.m.FacetFilterList.prototype.removeItem = function(vItem) {
       
              // Update the selected keys cache if an item is removed
    var oItem = sap.m.ListBase.prototype.removeItem.apply(this, arguments);   
    if(!this._filtering){
    oItem && oItem.getSelected() && this.removeSelectedKey(oItem.getKey(), oItem.getText());
    return oItem;
    }

};


/**
*
* @private
*/
sap.m.FacetFilterList.prototype.init = function(){

    this._firstTime = true;
    this._saveBindInfo;

      
       // The internal associative array of keys for selected items.
       // Items that were selected but currently are not in the model are included as well. 
       this._oSelectedKeys = {};
       
       sap.m.List.prototype.init.call(this);
       this.setMode(sap.m.ListMode.MultiSelect);
       this.setIncludeItemInSelection(true);
       this.setGrowing(true);
       this.setRememberSelections(false);
       
       // Remember the search value so that it can be seeded into the search field
       this._searchValue = null;
       
       // Select items set from a variant when the growing list is updated 
       this.attachUpdateFinished(function(oEvent) {
              
              // Make sure we don't call _selectItemsByKeys twice in the case when the
              // list is being filtered. The process of selecting items gets more and more
              // expensive as the number of items increases.
              // 
              // If the list is being filtered then items are already selected in updateItems.
              var sUpdateReason = oEvent.getParameter("reason");
              if(sUpdateReason) {
                     sUpdateReason = sUpdateReason.toLowerCase();
                     if(sUpdateReason !== sap.ui.model.ChangeReason.Filter.toLowerCase()) {
                           this._selectItemsByKeys();                      
                     }
              } else {
                     this._selectItemsByKeys();
              }
       });
       
       this._allowRemoveSelections = true;
};

/**
* ListBase method override needed to prevent selected keys from being removed by removeSelections when
* the 'items' binding is reset.
* 
 * ListBase._resetItemsBinding calls removeSelections(), which is also overridden
* by FacetFilterList so that selected keys (i.e. cached selected items) are removed if bAll is true. If this
* method was not overridden then selected keys will be removed when 'items' is bound or when the model is set.
* This presents a dilemma for applications that want to load items from a listOpen event handler by setting the model. In
* that scenario it would be impossible to restore selections from a variant since selected keys must be set outside
* of the listOpen handler (otherwise the facet button or summary bar would not display pre-selected items until after
* the list was opened and then closed).
* 
 * @private
*/
sap.m.FacetFilterList.prototype._resetItemsBinding = function() {

       if(this.isBound("items")) {
              
              this._searchValue = null; // Clear the search value since items are being reinitialized
              this._allowRemoveSelections = false;
              sap.m.ListBase.prototype._resetItemsBinding.apply(this, arguments);
              this._allowRemoveSelections = true;             
       }
};

/**
* @private
*/
sap.m.FacetFilterList.prototype._fireListCloseEvent = function() {

              var aSelectedItems = this.getSelectedItems();
       var oSelectedKeys = this.getSelectedKeys();
       
       var bAllSelected = aSelectedItems.length === 0;

       
       this._firstTime = true; 
       
       this.fireListClose({
              selectedItems : aSelectedItems,
              selectedKeys : oSelectedKeys,
              allSelected : bAllSelected
       });

};

/**
* Set this list active if at least one list item is selected, or the all checkbox is selected
* 
 * @private
*/
sap.m.FacetFilterList.prototype._updateActiveState = function() {
       
       var oCheckbox = sap.ui.getCore().byId(this.getAssociation("allcheckbox"));
       if(Object.getOwnPropertyNames(this._oSelectedKeys).length > 0 || (oCheckbox && oCheckbox.getSelected())) {
              this.setActive(true);
       }
};


/**
* Handle both liveChange and search events.
* 
 * @private
*/
sap.m.FacetFilterList.prototype._handleSearchEvent = function(oEvent) {

       var sSearchVal = oEvent.getParameters()["query"];
       if (sSearchVal === undefined) {
              sSearchVal = oEvent.getParameters()["newValue"];
       }
       this._search(sSearchVal, true);
       
       // If search was cleared and a selected item is made visible, make sure to set the
       // checkbox accordingly.
       this._updateSelectAllCheckBox();  
};

/**
* Filter list items with the given search value. If an item's text value does not contain the search
* value then it is filtered out of the list. 
 * 
 * No search is done if the list is not bound to a model.
* 
 * @private
*/
sap.m.FacetFilterList.prototype._search = function(sSearchVal, force) {
	
    var bindingInfoaFilters;
    var numberOfsPath = 0;  
    
    if(force || (sSearchVal !== this._searchValue)) {                    
              this._searchValue = sSearchVal;
              var oBinding = this.getBinding("items");
              var oBindingInfo = this.getBindingInfo("items");
              if (oBindingInfo && oBindingInfo.binding){
                  bindingInfoaFilters = oBindingInfo.binding.aFilters;                               
                  if (bindingInfoaFilters.length > 0) {
                      numberOfsPath = bindingInfoaFilters[0].aFilters.length;
                     if (this._firstTime) {
                        this._saveBindInfo = bindingInfoaFilters[0].aFilters[0];
                        this._firstTime = false;                         
                     }
                  }                  
              };     
                
              

          if (oBinding) { // There will be no binding if the items aggregation has not been bound to a model, so search is not possible
                  if (sSearchVal ||  numberOfsPath > 0) {
                        var path = this.getBindingInfo("items").template.getBindingInfo("text").parts[0].path;                     
                        if (path) {
                               var oUserFilter = new sap.ui.model.Filter(path, sap.ui.model.FilterOperator.Contains, sSearchVal);
                               if ( numberOfsPath > 1) {
                                      var oFinalFilter = new sap.ui.model.Filter([oUserFilter, this._saveBindInfo], true);                        
                               }
                               else
                               {
                                      if (this._saveBindInfo > "" && oUserFilter.sPath != this._saveBindInfo.sPath) {
                                           var oFinalFilter = new sap.ui.model.Filter([oUserFilter,this._saveBindInfo], true);   
                                      }
                                      else 
                                      {
                                       	  if  (sSearchVal == "") {
                                       		  var oFinalFilter = [];
                                   		  }
                                   		  else
                                   		  {
                                        	  var oFinalFilter = new sap.ui.model.Filter([oUserFilter], true);
                                   		  }
                                      }
                               }
                               oBinding.filter(oFinalFilter, sap.ui.model.FilterType.Control);
                        }
                  } else {
                        oBinding.filter([], sap.ui.model.FilterType.Control);
                  }
           } else {
                  jQuery.sap.log.warning("No filtering performed", "The list must be defined with a binding for search to work", this);
           }
    }
         
       
};



/**
* 
 * @returns The last searched value
*/
sap.m.FacetFilterList.prototype._getSearchValue = function() {
       
       return this._searchValue;
};

/**
* Update the select all checkbox according to the state of selections in the list and the list active state.
* This has no effect for lists not in MultiSelect mode.
* 
 * @param bItemSelected The selection state of the item currently being selected or deselected.  
 * @private
*/
sap.m.FacetFilterList.prototype._updateSelectAllCheckBox = function(bItemSelected) {
       
       if(this.getMultiSelect()) { 
              var oCheckbox = sap.ui.getCore().byId(this.getAssociation("allcheckbox"));
              
              if(bItemSelected) {
                     oCheckbox && oCheckbox.setSelected(false);
              } else {
                     
                     // Checkbox may not be defined if an item is selected and the list is not displayed 
                     oCheckbox && oCheckbox.setSelected(Object.getOwnPropertyNames(this._oSelectedKeys).length === 0 && this.getActive());                           
              }                    
       }
};

/**
* Add a key to the selected keys cache.
* 
 * @param sKey
* @param sText
*/
sap.m.FacetFilterList.prototype._addSelectedKey = function(sKey, sText){
       
       if(!sKey && !sText) {
              jQuery.sap.log.error("Both sKey and sText are not defined. At least one must be defined.");
              return;
       }
  if(this.getMode() === sap.m.ListMode.SingleSelectMaster){
    this.removeSelectedKeys();
  }    
  if(!sKey) {
       sKey = sText;
  }
       this._oSelectedKeys[sKey] = sText || sKey;
};

/**
* Remove the given key from the selected keys cache. This does not deselect the associated item and therefore does
* not cause onItemSetSelected to be called.
* 
 * @param sKey The key to remove. If null, then the value of sText will be used as the key.
* @param sText If key is null then this parameter will be used as the key.
* @returns {Boolean} true if the key was removed
*/
sap.m.FacetFilterList.prototype._removeSelectedKey = function(sKey, sText) {
       
       if(!sKey && !sText) {
              jQuery.sap.log.error("Both sKey and sText are not defined. At least one must be defined.");
              return false;
       }      
       
       // Since it is common for applications to use text as the key (and not set key), set the key to the text value if no key is given
  if(!sKey) { 
       sKey = sText;
  }    
       delete this._oSelectedKeys[sKey];
       return true;
};

/**
* Determine the selected state of the given item. The item's text value will
* be used as the lookup key if the item does not have a key set. This is done
* for convenience to allow applications to only set the item text and have it
* used also as the key.
* 
 * @param oItem
* @returns true if the item is selected, false otherwise
* @private
*/
sap.m.FacetFilterList.prototype._isItemSelected = function(oItem){
       return !!(this._oSelectedKeys[oItem && (oItem.getKey() || oItem.getText())]);
};

/**
* For each item key in the selected keys cache, select the matching FacetFilterItem
* present in the 'items' aggregation.
* 
 * @private
*/
sap.m.FacetFilterList.prototype._selectItemsByKeys = function(){
       this.getItems().forEach(function (oItem){
              oItem.setSelected(this._isItemSelected(oItem));
       }, this);
};


sap.m.FacetFilterList.prototype._applySearch = function(){
	var searchVal = this._getSearchValue();
	if ( searchVal!= null) { 
		this._search(searchVal, true);
                                
    }

	
};


sap.m.FacetFilterList.prototype.onItemSetSelected = function(oItem, bSelect) {
       
       // This method override runs when setSelected is called from ListItemBase. Here we update
       // the selected keys cache based on whether the item is being selected or not. We also
       // update the select all checkbox state and list active state based on the selected
       // state of all items taken as a whole.
       if (bSelect){
              this._addSelectedKey(oItem.getKey(), oItem.getText());
       } else {
              this._removeSelectedKey(oItem.getKey(), oItem.getText());
       }
       sap.m.ListBase.prototype.onItemSetSelected.apply(this, arguments);
       
       this._updateSelectAllCheckBox(bSelect);
       this.setActive(this.getActive() || bSelect);
       !this.getDomRef() && this.getParent() && this.getParent().getDomRef() && this.getParent().invalidate();
};


sap.m.FacetFilterList.prototype.updateItems = function(sReason) {    
       
              // This method override runs when the list updates its items. The reason
       // for the update is given by sReason, which for example can be when the
       // list is filtered or when it grows.

  this._filtering = sReason === sap.ui.model.ChangeReason.Filter;
  sap.m.ListBase.prototype.updateItems.apply(this,arguments);   
  this._filtering=false;
  
  // If this list is not set to growing or it has been filtered then we must make sure that selections are
  // applied to items matching keys contained in the selected keys cache.  Selections
  // in a growing list are handled by the updateFinished handler. 
  if(!this.getGrowing() || sReason === sap.ui.model.ChangeReason.Filter) {
       this._selectItemsByKeys();
  }

};


}; // end of sap/m/FacetFilterList.js
if ( !jQuery.sap.isDeclared('sap.m.GrowingList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.GrowingList.
jQuery.sap.declare("sap.m.GrowingList");




/**
 * Constructor for a new GrowingList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getThreshold threshold} : int (default: 20)</li>
 * <li>{@link #getTriggerText triggerText} : string</li>
 * <li>{@link #getScrollToLoad scrollToLoad} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * sap.m.GrowingList control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.
 * @extends sap.m.List
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.16. 
 * Instead use "List" or "Table" control with setting "growing" property to "true"
 * @name sap.m.GrowingList
 */
sap.m.List.extend("sap.m.GrowingList", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"threshold" : {type : "int", group : "Misc", defaultValue : 20},
		"triggerText" : {type : "string", group : "Appearance", defaultValue : null},
		"scrollToLoad" : {type : "boolean", group : "Behavior", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.GrowingList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.GrowingList.extend
 * @function
 */


/**
 * Getter for property <code>threshold</code>.
 * Number of items requested from the server. To activate this you should set growing property to "true"
 *
 * Default value is <code>20</code>
 *
 * @return {int} the value of property <code>threshold</code>
 * @public
 * @since 1.16
 * @name sap.m.GrowingList#getThreshold
 * @function
 */

/**
 * Setter for property <code>threshold</code>.
 *
 * Default value is <code>20</code> 
 *
 * @param {int} iThreshold  new value for property <code>threshold</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.GrowingList#setThreshold
 * @function
 */


/**
 * Getter for property <code>triggerText</code>.
 * Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties.
 * This property can be used only if growing property is set "true" and scrollToLoad property is set "false".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>triggerText</code>
 * @public
 * @since 1.16
 * @name sap.m.GrowingList#getTriggerText
 * @function
 */

/**
 * Setter for property <code>triggerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTriggerText  new value for property <code>triggerText</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.GrowingList#setTriggerText
 * @function
 */


/**
 * Getter for property <code>scrollToLoad</code>.
 * If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.
 * NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>scrollToLoad</code>
 * @public
 * @since 1.16
 * @name sap.m.GrowingList#getScrollToLoad
 * @function
 */

/**
 * Setter for property <code>scrollToLoad</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bScrollToLoad  new value for property <code>scrollToLoad</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.GrowingList#setScrollToLoad
 * @function
 */


// Start of sap\m\GrowingList.js

// checks if control is not compatible anymore
sap.m.GrowingList.prototype._isIncompatible = function() {
	return sap.ui.getCore().getConfiguration().getCompatibilityVersion("sapMGrowingList").compareTo("1.16") >= 0;
};

//sets growing property to true on init
sap.m.GrowingList.prototype.init = function() {
	sap.m.ListBase.prototype.init.call(this);
	if (!this._isIncompatible()) {
		this.setGrowing();
	}
};

// sets growing feature always to true
sap.m.GrowingList.prototype.setGrowing = function() {
	return sap.m.ListBase.prototype.setGrowing.call(this, true);
};

// not to break add getters and setters for old properties
!function(oGL, oLB) {
	["Threshold", "TriggerText", "ScrollToLoad"].forEach(function(property) {
		oGL["set" + property] = oLB["setGrowing" + property];
		oGL["get" + property] = oLB["getGrowing" + property];
	});
}(sap.m.GrowingList.prototype, sap.m.ListBase.prototype);
}; // end of sap/m/GrowingList.js
if ( !jQuery.sap.isDeclared('sap.m.Input') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Input.
jQuery.sap.declare("sap.m.Input");




/**
 * Constructor for a new Input.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.InputType (default: sap.m.InputType.Text)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getValueStateText valueStateText} : string</li>
 * <li>{@link #getShowValueStateMessage showValueStateMessage} : boolean (default: true)</li>
 * <li>{@link #getDateFormat dateFormat} : string (default: 'YYYY-MM-dd')</li>
 * <li>{@link #getShowValueHelp showValueHelp} : boolean (default: false)</li>
 * <li>{@link #getShowSuggestion showSuggestion} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSuggestionItems suggestionItems} : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Input#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Input#event:valueHelpRequest valueHelpRequest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Input#event:suggest suggest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Input#event:suggestionItemSelected suggestionItemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to input data.
 * @extends sap.m.InputBase
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Input
 */
sap.m.InputBase.extend("sap.m.Input", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setFilterFunction"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"type" : {type : "sap.m.InputType", group : "Data", defaultValue : sap.m.InputType.Text},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"valueStateText" : {type : "string", group : "Misc", defaultValue : null},
		"showValueStateMessage" : {type : "boolean", group : "Misc", defaultValue : true},
		"dateFormat" : {type : "string", group : "Misc", defaultValue : 'YYYY-MM-dd', deprecated: true},
		"showValueHelp" : {type : "boolean", group : "Behavior", defaultValue : false},
		"showSuggestion" : {type : "boolean", group : "Behavior", defaultValue : false}
	},
	aggregations : {
    	"suggestionItems" : {type : "sap.ui.core.Item", multiple : true, singularName : "suggestionItem"}
	},
	events : {
		"liveChange" : {}, 
		"valueHelpRequest" : {}, 
		"suggest" : {}, 
		"suggestionItemSelected" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Input with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Input.extend
 * @function
 */

sap.m.Input.M_EVENTS = {'liveChange':'liveChange','valueHelpRequest':'valueHelpRequest','suggest':'suggest','suggestionItemSelected':'suggestionItemSelected'};


/**
 * Getter for property <code>type</code>.
 * Type of input (e.g. Text, Number, Email, Phone)
 *
 * Default value is <code>Text</code>
 *
 * @return {sap.m.InputType} the value of property <code>type</code>
 * @public
 * @name sap.m.Input#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Text</code> 
 *
 * @param {sap.m.InputType} oType  new value for property <code>type</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setType
 * @function
 */


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.m.Input#getMaxLength
 * @function
 */

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setMaxLength
 * @function
 */


/**
 * Getter for property <code>valueStateText</code>.
 * The text which is shown in the value state message popup. If not specfied a default text is shown.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueStateText</code>
 * @public
 * @name sap.m.Input#getValueStateText
 * @function
 */

/**
 * Setter for property <code>valueStateText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueStateText  new value for property <code>valueStateText</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setValueStateText
 * @function
 */


/**
 * Getter for property <code>showValueStateMessage</code>.
 * Whether the value state message should be shown.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showValueStateMessage</code>
 * @public
 * @name sap.m.Input#getShowValueStateMessage
 * @function
 */

/**
 * Setter for property <code>showValueStateMessage</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowValueStateMessage  new value for property <code>showValueStateMessage</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setShowValueStateMessage
 * @function
 */


/**
 * Getter for property <code>dateFormat</code>.
 * Only used if type=date and no datepicker is available.
 * The data is displayed and the user input is parsed according to this format.
 * NOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).
 *
 * Default value is <code>YYYY-MM-dd</code>
 *
 * @return {string} the value of property <code>dateFormat</code>
 * @public
 * @deprecated Since version 1.9.1. 
 * sap.m.DateTimeInput should be used for date/time inputs and formating.
 * @name sap.m.Input#getDateFormat
 * @function
 */

/**
 * Setter for property <code>dateFormat</code>.
 *
 * Default value is <code>YYYY-MM-dd</code> 
 *
 * @param {string} sDateFormat  new value for property <code>dateFormat</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.9.1. 
 * sap.m.DateTimeInput should be used for date/time inputs and formating.
 * @name sap.m.Input#setDateFormat
 * @function
 */


/**
 * Getter for property <code>showValueHelp</code>.
 * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showValueHelp</code>
 * @public
 * @since 1.16
 * @name sap.m.Input#getShowValueHelp
 * @function
 */

/**
 * Setter for property <code>showValueHelp</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowValueHelp  new value for property <code>showValueHelp</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Input#setShowValueHelp
 * @function
 */


/**
 * Getter for property <code>showSuggestion</code>.
 * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showSuggestion</code>
 * @public
 * @since 1.16.1
 * @name sap.m.Input#getShowSuggestion
 * @function
 */

/**
 * Setter for property <code>showSuggestion</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowSuggestion  new value for property <code>showSuggestion</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * @name sap.m.Input#setShowSuggestion
 * @function
 */


/**
 * Getter for aggregation <code>suggestionItems</code>.<br/>
 * SuggestItems are the items which will be shown in the suggestion popup. Changing this aggregation (by calling addSuggestionItem, insertSuggestionItem, removeSuggestionItem, removeAllSuggestionItems, destroySuggestionItems) after input is rendered will open/close the suggestion popup.
 * 
 * @return {sap.ui.core.Item[]}
 * @public
 * @since 1.16.1
 * @name sap.m.Input#getSuggestionItems
 * @function
 */


/**
 * Inserts a suggestionItem into the aggregation named <code>suggestionItems</code>.
 *
 * @param {sap.ui.core.Item}
 *          oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the suggestionItem is inserted at 
 *             the last position        
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * @name sap.m.Input#insertSuggestionItem
 * @function
 */

/**
 * Adds some suggestionItem <code>oSuggestionItem</code> 
 * to the aggregation named <code>suggestionItems</code>.
 *
 * @param {sap.ui.core.Item}
 *            oSuggestionItem the suggestionItem to add; if empty, nothing is inserted
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * @name sap.m.Input#addSuggestionItem
 * @function
 */

/**
 * Removes an suggestionItem from the aggregation named <code>suggestionItems</code>.
 *
 * @param {int | string | sap.ui.core.Item} vSuggestionItem the suggestionItem to remove or its index or id
 * @return {sap.ui.core.Item} the removed suggestionItem or null
 * @public
 * @since 1.16.1
 * @name sap.m.Input#removeSuggestionItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>suggestionItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @since 1.16.1
 * @name sap.m.Input#removeAllSuggestionItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>suggestionItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oSuggestionItem the suggestionItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @since 1.16.1
 * @name sap.m.Input#indexOfSuggestionItem
 * @function
 */
	

/**
 * Destroys all the suggestionItems in the aggregation 
 * named <code>suggestionItems</code>.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * @name sap.m.Input#destroySuggestionItems
 * @function
 */


/**
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @name sap.m.Input#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new value of the input.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 *  
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 *
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Input</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new value of the input.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Input#fireLiveChange
 * @function
 */


/**
 * When the value help indicator is clicked, this event will be fired. 
 *
 * @name sap.m.Input#valueHelpRequest
 * @event
 * @since 1.16
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'valueHelpRequest' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 *  
 * When the value help indicator is clicked, this event will be fired. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 *
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Input#attachValueHelpRequest
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'valueHelpRequest' event of this <code>sap.m.Input</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Input#detachValueHelpRequest
 * @function
 */

/**
 * Fire event valueHelpRequest to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16
 * @name sap.m.Input#fireValueHelpRequest
 * @function
 */


/**
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup. 
 *
 * @name sap.m.Input#suggest
 * @event
 * @since 1.16.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.suggestValue The current value which has been typed in the input.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'suggest' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 *  
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 *
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * @name sap.m.Input#attachSuggest
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'suggest' event of this <code>sap.m.Input</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.1
 * @name sap.m.Input#detachSuggest
 * @function
 */

/**
 * Fire event suggest to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'suggestValue' of type <code>string</code> The current value which has been typed in the input.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.1
 * @name sap.m.Input#fireSuggest
 * @function
 */


/**
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup. 
 *
 * @name sap.m.Input#suggestionItemSelected
 * @event
 * @since 1.16.3
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem This is the item selected in the suggestion popup.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'suggestionItemSelected' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 *  
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 *
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * @name sap.m.Input#attachSuggestionItemSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'suggestionItemSelected' event of this <code>sap.m.Input</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.3
 * @name sap.m.Input#detachSuggestionItemSelected
 * @function
 */

/**
 * Fire event suggestionItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> This is the item selected in the suggestion popup.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.3
 * @name sap.m.Input#fireSuggestionItemSelected
 * @function
 */


/**
 * Sets a custom filter function for suggestionItems. Default is to check whether the item text begins with the typed value. This fitler function is called with two paramters: the first one is the string that is currently typed in the input and the second one is the item that is being filtered. Returning true will add this item to the popup.
 *
 * @name sap.m.Input.prototype.setFilterFunction
 * @function

 * @type boolean
 * @public
 * @since 1.16.1
 */


// Start of sap\m\Input.js
jQuery.sap.require('jquery.sap.strings'); // unlisted dependency retained






jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();

sap.m.Input._DEFAULTFILTER = function(sValue, oItem){
	return jQuery.sap.startsWithIgnoreCase(oItem.getText(), sValue);
};

sap.m.Input.prototype.init = function() {
	sap.m.InputBase.prototype.init.call(this);
	this._inputProxy = jQuery.proxy(this._onInput, this);
	this._fnFilter = sap.m.Input._DEFAULTFILTER;
};

/**
 * Destroys the control
 * @private
 */
sap.m.Input.prototype.exit = function() {
	this._deregisterEvents();

	if(this._oSuggestionPopup){
		this._oSuggestionPopup.destroy();
		this._oSuggestionPopup = null;
	}

	if (this._oValueHelpIcon) {
		this._oValueHelpIcon.destroy();
		this._oValueHelpIcon = null;
	}
};

sap.m.Input.prototype.onBeforeRendering = function(){
	sap.m.InputBase.prototype.onBeforeRendering.call(this);
	this._deregisterEvents();
};

sap.m.Input.prototype.onAfterRendering = function() {
	var that = this;
	sap.m.InputBase.prototype.onAfterRendering.call(this);
	this._bindToInputEvent(this._inputProxy);

	if(this._oList && !sap.ui.Device.system.phone){
		this._oList.setWidth(this.$().outerWidth() + "px");
		this._sPopupResizeHandler = sap.ui.core.ResizeHandler.register(this.getDomRef(),  function(){
			that._oList.setWidth(that.$().outerWidth() + "px");
		});
	}

	if(sap.ui.Device.system.phone && this._oSuggestionPopup){
		//click event has to be used in order to focus on the input in dialog
		this.$().on("click", jQuery.proxy(function(){
			if(this.getShowSuggestion() && this._oSuggestionPopup){
				this._oSuggestionPopup.open();
				this._oPopupInput._$input.focus();
			}
		}, this));
	}
};

/**
 * Returns/Instantiates the value help icon control when needed
 * @private
 */
sap.m.Input.prototype._getValueHelpIcon = function () {
	var that = this;

	if (!this._oValueHelpIcon) {
		var sURI = sap.ui.core.IconPool.getIconURI("value-help");
		this._oValueHelpIcon = sap.ui.core.IconPool.createControlByURI({
			id: this.getId() + "__vhi",
			src: sURI
		});
		this._oValueHelpIcon.addStyleClass("sapMInputValHelpInner");
		this._oValueHelpIcon.attachPress(function (evt) {
			that.fireValueHelpRequest();
		});
	}
	return this._oValueHelpIcon;
};

/**
 * Defines the width of the input. Default value is 100%
 *
 * @public
 * @param {string} sWidth
 */
sap.m.Input.prototype.setWidth = function(sWidth) {
	return sap.m.InputBase.prototype.setWidth.call(this, sWidth || "100%");
};

sap.m.Input.prototype.getWidth = function(sWidth) {
	return this.getProperty("width") || "100%";
};

sap.m.Input.prototype.setFilterFunction = function(fnFilter){
	this._fnFilter = fnFilter;
};

/**
 * Selects the text of the InputDomRef in the given range
 * @param {int} [iStart=0] start position of the text selection
 * @param {int} [iEnd=<length of text>] end position of the text selection
 * @return {sap.m.Input} this Input instance
 * @private
 */
sap.m.Input.prototype._doSelect = function(iStart, iEnd){
	if(sap.ui.Device.support.touch){
		return;
	}
	var oDomRef = this._$input[0];
	if (oDomRef) {
		//if no Dom-Ref - no selection (Maybe popup closed)
		var $Ref = this._$input;
		oDomRef.focus();
		$Ref.selectText(iStart?iStart:0, iEnd?iEnd:$Ref.val().length);
	}
	return this;
};

sap.m.Input.prototype._scrollToItem = function(iIndex, sDir){
	var oPopup = this._oSuggestionPopup,
		oList = this._oList;

	if(!(oPopup instanceof sap.m.Popover) || !oList){
		return;
	}

	var oListItem = oList.getItems()[iIndex],
		oListItemDom = oListItem && oListItem.$()[0];

	if(oListItemDom){
		oListItemDom.scrollIntoView(sDir === "up");
	}
};

sap.m.Input.prototype._onsaparrowkey = function(oEvent, sDir){
	if(sDir !== "up" && sDir !== "down"){
		return;
	}

	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	if(!this._oSuggestionPopup || !this._oSuggestionPopup.isOpen()){
		return;
	}

	var oList = this._oList,
		aListItems = oList.getItems(),
		sValue = this._$input.val(),
		iSelectedIndex = this._iPopupListSelectedIndex,
		sNewValue;

	if(iSelectedIndex === -1){
		iSelectedIndex = 0;
	}else{
		if(sDir === "down"){
			if(iSelectedIndex < aListItems.length - 1){
				aListItems[iSelectedIndex].$().removeClass("sapMLIBSelected");
				iSelectedIndex = iSelectedIndex + 1;
			}
		}else{
			if(iSelectedIndex > 0){
				aListItems[iSelectedIndex].$().removeClass("sapMLIBSelected");
				iSelectedIndex = iSelectedIndex - 1;
			}
		}
	}
	aListItems[iSelectedIndex].$().addClass("sapMLIBSelected");

	if(sap.ui.Device.system.desktop){
		this._scrollToItem(iSelectedIndex, sDir);
	}

	// make sure the value doesn't exceed the maxLength
	sNewValue = this._getInputValue(aListItems[iSelectedIndex].getTitle());
	// setValue isn't used because here is too early to modify the lastValue of input
	this._$input.val(sNewValue);

	// memorize the value set by calling jQuery.val, because browser doesn't fire a change event
	// when the value is set programmatically.
	this._sSelectedSuggViaKeyboard = sNewValue;

	this._doSelect();

	this._iPopupListSelectedIndex = iSelectedIndex;

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

sap.m.Input.prototype.onsapup = function(oEvent) {
	this._onsaparrowkey(oEvent, "up");
};

sap.m.Input.prototype.onsapdown = function(oEvent) {
	this._onsaparrowkey(oEvent, "down");
};

sap.m.Input.prototype.onsapescape = function(oEvent) {
	if(this._oSuggestionPopup && this._oSuggestionPopup.isOpen()){
		// mark the event as already handled
		oEvent.originalEvent._sapui_handledByControl = true;
		this._oSuggestionPopup.close();

		// if popup is open, simply returns from here to prevent from setting the input to the last known value.
		return;
	}

	if(sap.m.InputBase.prototype.onsapescape){
		sap.m.InputBase.prototype.onsapescape.apply(this, arguments);
	}
};

sap.m.Input.prototype.onsapenter = function(oEvent) {
	if (sap.m.InputBase.prototype.onsapenter) {
		sap.m.InputBase.prototype.onsapenter.apply(this, arguments);
	}

	if(this._oSuggestionPopup && this._oSuggestionPopup.isOpen() && this._iPopupListSelectedIndex >= 0){
		var oSelectedListItem = this._oList.getItems()[this._iPopupListSelectedIndex];
		this._changeProxy(oEvent);
		this._oSuggestionPopup.close();
		this._doSelect();
		if(oSelectedListItem){
			this.fireSuggestionItemSelected({selectedItem: oSelectedListItem._oItem});
		}
		this._iPopupListSelectedIndex = -1;
	}
};

sap.m.Input.prototype.onsapfocusleave = function(oEvent){
	var oPopup = this._oSuggestionPopup;

	if(!(oPopup instanceof sap.m.Popover)){
		return;
	}

	if(oEvent.relatedControlId
			&& jQuery.sap.containsOrEquals(oPopup.getFocusDomRef(), sap.ui.getCore().byId(oEvent.relatedControlId).getFocusDomRef())){
		// force the focus to stay in input
		this.focus();
	}else{
		// when the input still has the value of the last jQuery.val call, a change event has to be
		// fired manually because browser doesn't fire an input event in this case.
		if(this._$input.val() === this._sSelectedSuggViaKeyboard) {
			this._sSelectedSuggViaKeyboard = null;
			this._$input.change();
		}
	}
};

sap.m.Input.prototype.onmousedown = function(oEvent){
	var oPopup = this._oSuggestionPopup;

	if((oPopup instanceof sap.m.Popover) && oPopup.isOpen()){
		oEvent.stopPropagation();
	}
};

sap.m.Input.prototype._deregisterEvents = function(){
	if(this._sPopupResizeHandler){
		sap.ui.core.ResizeHandler.deregister(this._sPopupResizeHandler);
		this._sPopupResizeHandler = null;
	}

	if(sap.ui.Device.system.phone && this._oSuggestionPopup){
		this.$().off("click");
	}
};

(function(){
	sap.m.Input.prototype.setShowSuggestion = function(bValue){
		this.setProperty("showSuggestion", bValue);
		this._iPopupListSelectedIndex = -1;
		if(bValue){
			if(this._oSuggestionPopup){
				return this;
			}
			createSuggestionPopup(this);
		}else{
			destroySuggestionPopup(this);
		}
	};

	sap.m.Input.prototype._onInput = function(oEvent) {
		var value = this._$input.val();

		// add maxlength support for all types
		// TODO: type number add min and max properties
		if (this.getMaxLength() > 0 && value.length > this.getMaxLength()) {
			value = value.substring(0, this.getMaxLength());
			this._$input.val(value);
		}

		if (value !== this.getProperty("value")) {
			this.setProperty("value", value, true);
			this._curpos = this._$input.cursorPos();
			this._setLabelVisibility();
			this.fireLiveChange({
				newValue : value
			});

			// No need to fire suggest event when suggestion feature isn't enabled or runs on the phone.
			// Because suggest event should only be fired by the input in dialog when runs on the phone.
			if(!this.getShowSuggestion() || sap.ui.Device.system.phone){
				return;
			}

			if(value){
				this.fireSuggest({
					suggestValue: value
				});
				refreshListItems(this);
			}else{
				if(this._oSuggestionPopup && this._oSuggestionPopup.isOpen()){
					this._oSuggestionPopup.close();
				}
			}
		}
	};

	sap.m.Input.prototype.addSuggestionItem = function(oItem){
		this.addAggregation("suggestionItems", oItem, true);
		refreshListItems(this);
		return this;
	};

	sap.m.Input.prototype.insertSuggestionItem = function(oItem, iIndex){
		this.insertAggregation("suggestionItems", iIndex, oItem, true);
		refreshListItems(this);
		return this;
	};

	sap.m.Input.prototype.removeSuggestionItem = function(oItem){
		var res = this.removeAggregation("suggestionItems", oItem, true);
		refreshListItems(this);
		return res;
	};

	sap.m.Input.prototype.removeAllSuggestionItems = function(){
		var res = this.removeAllAggregation("suggestionItems", true);
		refreshListItems(this);
		return res;
	};

	sap.m.Input.prototype.destroySuggestionItems = function(){
		this.destroyAggregation("suggestionItems", true);
		refreshListItems(this);
		return this;
	};

	function createSuggestionPopup(oInput){
		var oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.m");

		if(sap.ui.Device.system.phone){
			oInput._oPopupInput = new sap.m.Input(oInput.getId() + "-popup-input", {
				width: "100%",
				liveChange: function(oEvent){
					var sValue = oEvent.getParameter("newValue");
					oInput.setValue(sValue);

					oInput.fireSuggest({
						suggestValue: sValue
					});
					refreshListItems(oInput);

					// make sure the live change handler on the original input is also called
					oInput.fireLiveChange({
						newValue: sValue
					});
				},

			}).addStyleClass("sapMInputSuggInDialog");
		}

		oInput._oSuggestionPopup = !sap.ui.Device.system.phone ?
			(new sap.m.Popover(oInput.getId() + "-popup", {
				showHeader: false,
				placement: sap.m.PlacementType.Vertical,
				initialFocus: oInput
			}).attachAfterClose(function(){
				oInput._iPopupListSelectedIndex = -1;
				oInput._oList.destroyItems();
			}))
		:
			(new sap.m.Dialog(oInput.getId() + "-popup", {
				beginButton: new sap.m.Button(oInput.getId() + "-popup-closeButton", {
					text: oMessageBundle.getText("MSGBOX_CLOSE"),
					press: function(){
						oInput._oSuggestionPopup.close();
					}
				}),
				stretch: true,
				customHeader: new sap.m.Bar(oInput.getId() + "-popup-header", {
					contentMiddle: oInput._oPopupInput
				}),
				horizontalScrolling: false,
				initialFocus: oInput._oPopupInput
			}).attachBeforeOpen(function(){
				// set the same placeholder and maxLength as the original input
				oInput._oPopupInput.setPlaceholder(oInput.getPlaceholder());
				oInput._oPopupInput.setMaxLength(oInput.getMaxLength());
			}).attachAfterClose(function(){
				// call _getInputValue to apply the maxLength to the typed value
				oInput._$input.val(oInput._getInputValue(oInput._oPopupInput.getValue()));
				oInput._changeProxy();
				oInput._oList.destroyItems();
			}).attachAfterOpen(function(){
				var sValue = oInput.getValue();

				oInput._oPopupInput.setValue(sValue);
				oInput.fireSuggest({
					suggestValue: sValue
				});
				refreshListItems(oInput);
			}));

		oInput._oSuggestionPopup.addStyleClass("sapMInputSuggestionPopup");

		if(!sap.ui.Device.system.phone){
			overwritePopover(oInput._oSuggestionPopup, oInput);
		}

		oInput._oList = new sap.m.List(oInput.getId() + "-popup-list", {
			width: "100%",
			showNoData: false
		});

		oInput._oSuggestionPopup.addContent(oInput._oList);
	}

	function destroySuggestionPopup(oInput){
		if(oInput._oSuggestionPopup){
			oInput._oSuggestionPopup.destroy();
			oInput._oSuggestionPopup = null;
		}
	}

	function overwritePopover(oPopover, oInput){
		//overwrite the internal properties to not to show the arrow in popover.
		oPopover._marginTop = 0;
		oPopover._marginLeft = 0;
		oPopover._marginRight = 0;
		oPopover._marginBottom = 0;
		oPopover._arrowOffset = 0;
		oPopover._offsets = ["0 0", "0 0", "0 0", "0 0"];
		oPopover._myPositions = ["begin bottom", "begin center", "begin top", "end center"];
		oPopover._atPositions = ["begin top", "end center", "begin bottom", "begin center"];

		oPopover.open = function(){
			this.openBy(oInput, false, true);
		};

		//remove animation from popover
		oPopover.oPopup.setAnimations(function($Ref, iRealDuration, fnOpened){
			fnOpened();
		}, function($Ref, iRealDuration, fnClosed){
			fnClosed();
		});
	}

	function refreshListItems(oInput){
		var bShowSuggestion = oInput.getShowSuggestion();
		this._iPopupListSelectedIndex = -1;
		if(!(bShowSuggestion
				&& oInput.getDomRef()
				&& (sap.ui.Device.system.phone || oInput.$().hasClass("sapMInputFocused"))
			)
		){
			return false;
		}

		var oItem,
			aItems = oInput.getSuggestionItems(),
			sTypedChars = oInput._$input.val(),
			oList = oInput._oList,
			bFilter = sTypedChars && sTypedChars.length > 0,
			aHitItems = [],
			oPopup = oInput._oSuggestionPopup,
			oListItemDelegate = {
				ontouchstart: function(oEvent){
					(oEvent.originalEvent || oEvent)._sapui_cancelAutoClose = true;
				}
			},
			oStandardListItem;

		oList.destroyItems();

		if(!bFilter){
			// when the input has no value, close the Popup when not runs on the phone.
			// because the opened dialog on phone shouldn't be closed.
			if(!sap.ui.Device.system.phone){
				oPopup.close();
			}
			return false;
		}

		for(var i=0; i<aItems.length; i++){
			oItem = aItems[i];
			if(!bFilter || oInput._fnFilter(sTypedChars, oItem)){
				oStandardListItem = new sap.m.StandardListItem(oItem.getId() + "-sli", {
					title: oItem.getText(),
					type: oItem.getEnabled() ? sap.m.ListType.Active : sap.m.ListType.Inactive,
					press: function(){
						if(sap.ui.Device.system.phone){
							oInput._oPopupInput.setValue(this.getTitle());
							oInput._oPopupInput._doSelect();
						}else{
							// call _getInputValue to apply the maxLength to the typed value
							oInput._$input.val(oInput._getInputValue(this.getTitle()));
							oInput._changeProxy();
						}
						oPopup.close();
						if(!sap.ui.Device.support.touch){
							oInput._doSelect();
						}
						oInput.fireSuggestionItemSelected({selectedItem: this._oItem});
					}
				});
				oStandardListItem._oItem = oItem;
				oStandardListItem.addEventDelegate(oListItemDelegate);
				aHitItems.push(oStandardListItem);
			}
		}

		var iItemsLength = aHitItems.length;

		if(iItemsLength > 0){
			for(var i=0; i<iItemsLength; i++){
				oList.addItem(aHitItems[i]);
			}

			if(!sap.ui.Device.system.phone){
				if(oInput._sCloseTimer){
					clearTimeout(oInput._sCloseTimer);
					oInput._sCloseTimer = null;
				}

				if(!oPopup.isOpen() && !oInput._sOpenTimer){
					oInput._sOpenTimer = setTimeout(function(){
						oPopup.open();
						oInput._sOpenTimer = null;
					}, 0);
				}
			}
		}else{
			if(!sap.ui.Device.system.phone && oPopup.isOpen()){
				oInput._sCloseTimer = setTimeout(function(){
					oPopup.close();
				}, 0);
			}
		}
	}
})();

(function(){

	function closeMessage(oInput){
		if(oInput._popup){
			oInput._popup.close();
		}
	};

	function openMessage(oInput){
		var oState = oInput.getValueState();

		if (oInput.getShowValueStateMessage() && oState && ((oState === sap.ui.core.ValueState.Warning)
				|| (oState === sap.ui.core.ValueState.Error)) && oInput.getEnabled() && oInput.getEditable()) {
			var sText = oInput.getValueStateText();
			if(!sText){
				sText = sap.ui.core.ValueStateSupport.getAdditionalText(oInput);
			}
			if(!sText){
				return;
			}

			var messageId = oInput.getId()+"-message";
			if(!oInput._popup){
				jQuery.sap.require("sap.ui.core.Popup");
				jQuery.sap.require("jquery.sap.encoder");
				oInput._popup = new sap.ui.core.Popup(jQuery("<span></span>")[0] /*Just some dummy*/, false, false, false);
				oInput._popup.attachClosed(function(){
					jQuery.sap.byId(messageId).remove();
				});
			}

			var $Input = jQuery(oInput.getFocusDomRef());
			var dock = sap.ui.core.Popup.Dock;
			var bIsRightAligned = $Input.css("text-align") === "right";

			var sClass = "sapMInputMessage " + ((oState === sap.ui.core.ValueState.Warning) ? "sapMInputMessageWarning" : "sapMInputMessageError");

			oInput._popup.setContent(jQuery("<div style=\"max-width:"+$Input.outerWidth()+"px;\" class=\""+sClass+"\" id=\""+messageId+"\"><span id=\""+messageId+"-text\">"+jQuery.sap.encodeHTML(sText)+"</span></div>"));

			oInput._popup.close(0);
			oInput._popup.open(
					200,
					bIsRightAligned ? dock.EndTop : dock.BeginTop,
					bIsRightAligned ? dock.EndBottom : dock.BeginBottom,
					oInput.getFocusDomRef(),
					null,
					null,
					function(){
						oInput._popup.close();
					}
			);
		}
	};

	sap.m.Input.prototype.setValueState = function(sValueState) {
		var sOldValueState = this.getValueState();

		sap.m.InputBase.prototype.setValueState.apply(this, arguments);

		var sNewValueState = this.getValueState();

		if(this.getDomRef() && sNewValueState != sOldValueState && this.getFocusDomRef() === document.activeElement){
			switch(sNewValueState){
				case sap.ui.core.ValueState.Error:
				case sap.ui.core.ValueState.Warning:
					openMessage(this);
					break;
				default:
					closeMessage(this);
			}

		}

		return this;
	};

	sap.m.Input.prototype.setValueStateText = function(sText) {
		this.$("message-text").text(sText);
		return this.setProperty("valueStateText", sText, true);
	};

	sap.m.Input.prototype.onfocusin = function(oEvent) {
		this.$().addClass("sapMInputFocused");
		openMessage(this);
	};


	/**
	 * Register F4 to trigger the valueHelpRequest event
	 * @private
	 */
	sap.m.Input.prototype.onsapshow = function(oEvent) {

		if (!this.getEnabled() || !this.getShowValueHelp()) {
			return;
		}

		this.fireValueHelpRequest();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	};

	sap.m.Input.prototype.onkeydown = function(oEvent) {
		closeMessage(this);
	};

	sap.m.Input.prototype.onfocusout = function(oEvent) {
		this.$().removeClass("sapMInputFocused");
		closeMessage(this);
		sap.m.InputBase.prototype.onfocusout.apply(this, arguments);
	};

})();

}; // end of sap/m/Input.js
if ( !jQuery.sap.isDeclared('sap.m.Select') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Select.
jQuery.sap.declare("sap.m.Select");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Select.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getType type} : sap.m.SelectType (default: sap.m.SelectType.Default)</li>
 * <li>{@link #getAutoAdjustWidth autoAdjustWidth} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : string | sap.ui.core.Item</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Select#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The select control provides a menu of predefined items that allows end users to choose options.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @name sap.m.Select
 */
sap.ui.core.Control.extend("sap.m.Select", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"isOpen", "open", "close", "getItemByKey", "getFirstItem", "getLastItem", "getItemAt"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"maxWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"selectedKey" : {type : "string", group : "Data", defaultValue : null},
		"selectedItemId" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"type" : {type : "sap.m.SelectType", group : "Appearance", defaultValue : sap.m.SelectType.Default},
		"autoAdjustWidth" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.core.Item", multiple : true, singularName : "item", bindable : "bindable"}
	},
	associations : {
		"selectedItem" : {type : "sap.ui.core.Item", multiple : false}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Select with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Select.extend
 * @function
 */

sap.m.Select.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Select#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setName
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Determines whether the control is visible or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Select#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the selected value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Select#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setEnabled
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the select input. The default width of a select control depends on the width of the widest option/item in the list. This value can be provided in %, em, px… and all possible CSS measures.
 * Note: The width will be ignored if the "autoAdjustWidth" property is set to true.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Select#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setWidth
 * @function
 */


/**
 * Getter for property <code>maxWidth</code>.
 * Defines the maximum width of the select input. This value can be provided in %, em, px… and all valid CSS measures.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * @name sap.m.Select#getMaxWidth
 * @function
 */

/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setMaxWidth
 * @function
 */


/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item. If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exists the first item matching the key is used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * @since 1.11
 * @name sap.m.Select#getSelectedKey
 * @function
 */

/**
 * Setter for property <code>selectedKey</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedKey  new value for property <code>selectedKey</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.11
 * @name sap.m.Select#setSelectedKey
 * @function
 */


/**
 * Getter for property <code>selectedItemId</code>.
 * Id of the selected item. If the id has no corresponding aggregated item, no changes will apply.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedItemId</code>
 * @public
 * @since 1.12
 * @name sap.m.Select#getSelectedItemId
 * @function
 */

/**
 * Setter for property <code>selectedItemId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedItemId  new value for property <code>selectedItemId</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @name sap.m.Select#setSelectedItemId
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The URI to the icon that will be displayed only when using the “IconOnly” type.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @since 1.16
 * @name sap.m.Select#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Select#setIcon
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type of a select. Possibles values "Default", "IconOnly".
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.m.SelectType} the value of property <code>type</code>
 * @public
 * @since 1.16
 * @name sap.m.Select#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.m.SelectType} oType  new value for property <code>type</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Select#setType
 * @function
 */


/**
 * Getter for property <code>autoAdjustWidth</code>.
 * If set to true, the width of the select input is determined by the selected item’s content.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>autoAdjustWidth</code>
 * @public
 * @since 1.16
 * @name sap.m.Select#getAutoAdjustWidth
 * @function
 */

/**
 * Setter for property <code>autoAdjustWidth</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAutoAdjustWidth  new value for property <code>autoAdjustWidth</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.m.Select#setAutoAdjustWidth
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Items of the Item control.
 * 
 * <strong>Note</strong>: this is the default aggregation for Select.
 * @return {sap.ui.core.Item[]}
 * @public
 * @name sap.m.Select#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id
 * @return {sap.ui.core.Item} the removed item or null
 * @public
 * @name sap.m.Select#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Select#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Select#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#destroyItems
 * @function
 */


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#bindItems
 * @function
 */

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#unbindItems
 * @function
 */


/**
 * Retrieves the selected item from the aggregation named <code>items</code>.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedItem</code> association, or null
 * @public
 * @name sap.m.Select#getSelectedItem
 * @function
 */

/**
 * Retrieves the selected item from the aggregation named <code>items</code>.
 *
 * @param {string | sap.ui.core.Item} vSelectedItem 
 *    Id of an element which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setSelectedItem
 * @function
 */


	
/**
 * This event will be triggered when the user changes the selected item. 
 *
 * @name sap.m.Select#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Select</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Select</code>.<br/> itself. 
 *  
 * This event will be triggered when the user changes the selected item. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Select</code>.<br/> itself.
 *
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Select</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> The selected item.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Select#fireChange
 * @function
 */


/**
 * Checks if the select is open. It returns true when the select is currently open, this includes opening and closing animations, otherwise it returns false.
 *
 * @name sap.m.Select.prototype.isOpen
 * @function

 * @type boolean
 * @public
 * @since 1.16
 */


/**
 * Open the select.
 *
 * @name sap.m.Select.prototype.open
 * @function

 * @type sap.m.Select
 * @public
 * @since 1.16
 */


/**
 * Closes the select.
 *
 * @name sap.m.Select.prototype.close
 * @function

 * @type sap.m.Select
 * @public
 * @since 1.16
 */


/**
 * Retrieves the first item object from the aggregation named <code>items</code>, based on it's key.
 *
 * @name sap.m.Select.prototype.getItemByKey
 * @function
 * @param {string} 
 *         sSKey
 *         An item key that identifies the item to retrieve.

 * @type sap.ui.core.Item
 * @public
 * @since 1.16
 */


/**
 * Retrieves the first item from the aggregation named <code>items</code>.
 *
 * @name sap.m.Select.prototype.getFirstItem
 * @function

 * @type sap.ui.core.Item
 * @public
 * @since 1.16
 */


/**
 * Retrieves the last item from the aggregation named <code>items</code>.
 *
 * @name sap.m.Select.prototype.getLastItem
 * @function

 * @type sap.ui.core.Item
 * @public
 * @since 1.16
 */


/**
 * Retrieves the item from the aggregation named <code>items</code> at the given 0-based index.
 *
 * @name sap.m.Select.prototype.getItemAt
 * @function
 * @param {int} 
 *         iIIndex
 *         iIndex Index of the item to return

 * @type sap.ui.core.Item
 * @public
 * @since 1.16
 */


// Start of sap\m\Select.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained






jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();
sap.ui.core.EnabledPropagator.apply(sap.m.Select.prototype, [true]);

/* =========================================================== */
/* Private methods and properties                              */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* Private methods                                             */
/* ----------------------------------------------------------- */

/**
 * Cache DOM references.
 *
 * @private
 */
sap.m.Select.prototype._cacheDomRefs = function() {

	// jQuery DOM reference to the Select element
	this._$Select = this.$();

	// jQuery DOM reference to the label used to show the text of the current selected item
	this._$Label = this._$Select.children("." + sap.m.SelectRenderer.CSS_CLASS + "Label");
};

sap.m.Select.prototype._getParentPopup = function() {
	return (this._$Select && this._$Select.closest("[data-sap-ui-popup]")) || null;
};

/**
 * Synchronize selected item and key.
 *
 * @param {sap.ui.core.Item} oItem
 * @param {string} sKey
 * @param {array} [aItems]
 * @private
 */
sap.m.Select.prototype._synchronizeSelectedItemAndKey = function(oItem, sKey, aItems) {

	/*
	 *	functional dependencies:
	 *
	 *	selectedKey  -> selectedItem, selectedItemId
	 *	selectedItem -> selectedItemId, selectedKey
	 *
	 *	items        -> selectedItem, selectedItemId, selectedKey
	 */

	// no items
	if (!aItems.length) {

		// Update "selectedItem" association, "selectedItemId"
		// and "selectedKey" properties by setting its defaults values.
		this._setSelectedItem({
			item: null,
			id: "",
			key: "",
			suppressInvalidate: true
		});

		jQuery.sap.log.info("Info: _synchronizeSelectedItemAndKey() the select control does not contain any item on ", this);

		return;
	}

	// the "selectedKey" property is not synchronized
	if (sKey !== (oItem && oItem.getKey())) {

		oItem = this.getItemByKey("" + sKey);

		// if the "selectedKey" has no corresponding aggregated item, no changes will apply
		if (oItem) {

			// Update and synchronize "selectedItem" association and
			// "selectedKey" property.
			this.setAssociation("selectedItem", oItem, true);	// suppress re-rendering
			this.setProperty("selectedItemId", oItem.getId(), true);	// suppress re-rendering

			return;
		}

		// if "selectedKey" does not have the default value
		if (sKey !== "" && oItem) {

			jQuery.sap.log.warning('Warning: _synchronizeSelectedItemAndKey() the key "' + sKey + '" has no corresponding aggregated item on ', this);
		} else {	// the "sKey" have the default value
			oItem = this._findFirstEnabledItem();

			if (oItem) {

				this._setSelectedItem({
					item: oItem,
					id: oItem.getId(),
					key: oItem.getKey(),
					suppressInvalidate: true
				});
			}
		}

	} else if (aItems.indexOf(oItem) === -1) {	// validate if the selected item is aggregated
		jQuery.sap.log.warning('Warning: _synchronizeSelectedItemAndKey() the sap.ui.core.Item instance or sap.ui.core.Item id is not a valid aggregation on', this);
	}
};

/**
 * Retrieves the first enabled item from the aggregation named <code>items</code>.
 *
 * @param {array} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @private
 */
sap.m.Select.prototype._findFirstEnabledItem = function(aItems) {
	var aItems = aItems || this.getItems();

	for (var i = 0; i < aItems.length; i++) {
		if (aItems[i].getEnabled()) {
			return aItems[i];
		}
	}

	return null;
};

/**
 * Retrieves the last enabled item from the aggregation named <code>items</code>.
 *
 * @param {array} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @private
 */
sap.m.Select.prototype._findLastEnabledItem = function(aItems) {
	var aItems = aItems || this.getItems();

	return this._findFirstEnabledItem(aItems.reverse());
};

/**
 * Update and synchronize "selectedItem" association, "selectedItemId", "selectedKey" properties and
 * the "selectedItem" in the List.
 *
 * @param {sap.ui.core.Item | string | null} mOptions.item
 * @param {string} mOptions.id
 * @param {string} mOptions.key
 * @param {boolean} [mOptions.suppressInvalidate]
 * @param {boolean} [mOptions.listItemUpdated]
 * @param {boolean} [mOptions.fireChangeEvent]
 * @private
 */
sap.m.Select.prototype._setSelectedItem = function(mOptions) {
	var oItem = this.getSelectedItem();

	if (mOptions.item === oItem) {
		return;
	}

	this.setAssociation("selectedItem", mOptions.item, mOptions.suppressInvalidate);
	this.setProperty("selectedItemId", mOptions.id, mOptions.suppressInvalidate);
	this.setProperty("selectedKey", mOptions.key, mOptions.suppressInvalidate);

	oItem = this.getSelectedItem();
	this._setValue(oItem ? oItem.getText() : ((oItem = this._findFirstEnabledItem()) ? oItem.getText() : ""));

	if (mOptions.fireChangeEvent) {

		// fire the change event
		this.fireChange({ selectedItem: oItem });
	}

	if (!mOptions.listItemUpdated) {

		// set the selected item in the List
		this._setSelectedListItem(this._getSelectedListItem());
	}
};

/**
 * Sets the selected item in the List.
 *
 * note: if no list item is provided, the first item is selected.
 *
 * @param {sap.m.StandardListItem | null} oSelectedListItem
 * @private
 */
sap.m.Select.prototype._setSelectedListItem = function(oSelectedListItem) {

	if (!this._oList) {
		return;
	}

	oSelectedListItem = oSelectedListItem || this._oList.getItems()[0];

	if (oSelectedListItem) {

		// sets the selected item
		this._oList.setSelectedItem(oSelectedListItem, true);
	}
};

/**
 * Sets the selected item by its index.
 *
 * @param {int} iIndex
 * @private
 */
sap.m.Select.prototype._setSelectedItemByIndex = function(iIndex) {
	var aItems = this.getItems(),
		oItem;

	// constrain the new index
	iIndex = (iIndex > aItems.length - 1) ? aItems.length - 1 : Math.max(0, iIndex);

	oItem = aItems[iIndex];

	if (oItem) {

		this._setSelectedItem({
			item: oItem,
			id: oItem.getId(),
			key: oItem.getKey(),
			fireChangeEvent: true,
			suppressInvalidate: true
		});

		this._focusItem(this._getSelectedListItem());
	}
};

/**
 * Get the selected item in the List.
 *
 * @returns {sap.m.StandardListItem}
 * @private
 */
sap.m.Select.prototype._getSelectedListItem = function() {
	var oItem = this.getSelectedItem();
	return (oItem && oItem._oListItem) ? oItem._oListItem : null;
};

/**
 *
 *
 * @param {object} $DomRef
 * @private
 */
sap.m.Select.prototype._addFocusableParentPopup = function($DomRef) {
	sap.m.Select._publishEventToPopup({
		action: "add",
		child: this.getPopup(),
		parent: $DomRef
	});
};

/**
 *
 *
 * @param {object} $DomRef
 * @private
 */
sap.m.Select.prototype._removeFocusableParentPopup = function($DomRef) {
	sap.m.Select._publishEventToPopup({
		action: "remove",
		child: this.getPopup(),
		parent: $DomRef
	});
};

/**
 * Notify a focusable HTMLElement to <code>sap.ui.core.Popup</code>.
 *
 * @param {object} mOptions
 * @private
 */
sap.m.Select._publishEventToPopup = function(mOptions) {
	var sParentId, sEventId;

	if (!mOptions.parent || !mOptions.child) {
		return;
	}

	sParentId = mOptions.parent.attr("data-sap-ui-popup");
	sEventId = "sap.ui.core.Popup." + mOptions.action + "FocusableContent" + "-" + sParentId;

	sap.ui.getCore().getEventBus().publish("sap.ui", sEventId, {
		id : mOptions.child.getId()
	});
};

/**
 * Scrolls an item into the visual viewport.
 *
 * @private
 */
sap.m.Select.prototype._focusItem = function(oListItem) {

	if (!oListItem) {
		return;
	}

	// scrolls to the menu to the selected item
	oListItem.focus();

	// restore the focus to the select
	jQuery.sap.delayedCall(0, this, "focus");
};

/**
 * Sets the text value of the Select field.
 *
 * @param {string} sValue
 * @private
 */
sap.m.Select.prototype._setValue = function(sValue) {

	// change the label text
	if (this._$Label && this._$Label.length) {
		this._$Label.text(sValue);
	}
};

/**
 * Map an item type of sap.ui.core.Item to an item type of sap.m.StandardListItem.
 *
 * @param {sap.ui.core.Item} oItem
 * @returns {sap.m.StandardListItem}
 * @private
 */
sap.m.Select.prototype._mapItemToListItem = function(oItem) {
	var oListItem = new sap.m.StandardListItem();
	oListItem.setTitle(oItem.getText());
	oListItem.setType(oItem.getEnabled() ? sap.m.ListType.Active : sap.m.ListType.Inactive);
	oListItem.setTooltip(oItem.getTooltip());
	oItem._oListItem = oListItem;
	return oListItem;
};

/**
 * Given a item type of sap.m.StandardListItem, find the corresponding item type of sap.ui.core.Item.
 *
 * @param {sap.m.StandardListItem} oListItem
 * @param {array} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @private
 */
sap.m.Select.prototype._findMappedItem = function(oListItem, aItems) {
	for (var i = 0, aItems = aItems || this.getItems(), aItemsLength = aItems.length; i < aItemsLength; i++) {
		if (aItems[i]._oListItem === oListItem) {
			return aItems[i];
		}
	}

	return null;
};

/**
 * Update and synchronize "selectedItem" association "setSelectedItemId"
 * and "selectedKey" properties.
 *
 * @param {sap.ui.core.Item} oNewSelectedItem
 * @private
 */
sap.m.Select.prototype._updateSelectedItem = function(oNewSelectedItem) {

	this._setSelectedItem({
		item: oNewSelectedItem,
		id: oNewSelectedItem.getId(),
		key: oNewSelectedItem.getKey(),
		fireChangeEvent: true,
		suppressInvalidate: true,
		listItemUpdated: true
	});
};

/**
 * Fill the list of items.
 *
 * @param {array} aItems An array with items type of sap.ui.core.Item.
 * @private
 */
sap.m.Select.prototype._fillList = function(aItems) {
	if (!aItems) {
		return;
	}

	for (var i = 0, oListItem, oSelectedItem = this.getSelectedItem(), aItemsLength = aItems.length; i < aItemsLength; i++) {

		// add a private property to the added item containing a reference
		// to the corresponding mapped item
		oListItem = this._mapItemToListItem(aItems[i]);

		// add the mapped item type of sap.m.StandardListItem to the list
		this._oList.addAggregation("items", oListItem, true);	// note: suppress re-rendering

		// add active state to the selected item
		if (aItems[i] === oSelectedItem) {
			this._oList.setSelectedItem(oListItem);
		}
	}
};

/**
 * Destroy the items in the List.
 *
 * @private
 */
sap.m.Select.prototype._clearList = function() {
	this._oList && this._oList.destroyAggregation("items", true);	// note: suppress re-rendering
};

/**
 * Popup Factory singleton.
 *
 * @param {string} sPopupType
 * @returns {sap.m.Popover|sap.m.Dialog}
 * @private
 * @function
 */
sap.m.Select.prototype._createPopupFactory = function(sPopupType) {
	if (!this.hasOwnProperty("_o" + sPopupType)) {
		return this["_create" + sPopupType]();
	}

	return this.getPopup();
};

/**
 * Whether the native HTML Select Element is required.
 *
 * @returns {boolean}
 * @private
 */
sap.m.Select.prototype._isRequiredSelectElement = function() {
	if (this.getAutoAdjustWidth()) {
		return false;
	} else if (this.getWidth() === "auto") {
		return true;
	}
};

/**
 * Add the active state.
 *
 * @private
 */
sap.m.Select.prototype._addActiveState = function() {
	this.addStyleClass(sap.m.SelectRenderer.CSS_CLASS + "Pressed");
};

/**
 * Remove the active state.
 *
 * @private
 */
sap.m.Select.prototype._removeActiveState = function() {
	this.removeStyleClass(sap.m.SelectRenderer.CSS_CLASS + "Pressed");
};

/**
 * Retrieves the first item from the aggregation named <code>items</code> whose first character match with the given <code>sChar</code>.
 *
 * @param {string} sChar
 * @returns {sap.ui.core.Item | undefined}
 * @private
 */
sap.m.Select.prototype._findItemByFirstCharacter = function(sChar) {
	for (var i = 0, aItems = this.getItems(); i < aItems.length; i++) {
		if (aItems[i].getText().charAt(0).toUpperCase() === sChar.toUpperCase()) {
			return aItems[i];
		}
	}
};

/* ----------------------------------------------------------- */
/* List                                                        */
/* ----------------------------------------------------------- */

/**
 * Create an instance type of <code>sap.m.List</code>.
 *
 * @returns {sap.m.List}
 * @private
 */
sap.m.Select.prototype._createList = function() {

	// list to use inside the pop-up
	this._oList = new sap.m.List({
		width: "100%",
		mode: sap.m.ListMode.SingleSelectMaster,
		rememberSelections: false	// select handles selection in itself, so list should not remember selection
	}).attachBrowserEvent("tap", function() {
		this.close();
	}, this);

	this._oList.attachSelectionChange(this._handleSelectionChangeEvent, this);
};

/* ----------------------------------------------------------- */
/* Popup                                                       */
/* ----------------------------------------------------------- */

/**
 * Popup initialization.
 *
 * @private
 */
sap.m.Select.prototype._initPopup = function() {
	var oPopup = this.getPopup();

	// initialize the pop-up (Popover or Dialog) lazily
	this._setPopup(this._createPopupFactory(this._getPopupType()));

	if (oPopup === this.getPopup()) {
		return;
	}

	this.getPopup().setHorizontalScrolling(false)
					.addStyleClass(sap.m.SelectRenderer.CSS_CLASS + "Popup")
					.attachBeforeOpen(this.onBeforeOpen, this)
					.attachAfterOpen(this.onAfterOpen, this)
					.attachBeforeClose(this.onBeforeClose, this)
					.attachAfterClose(this.onAfterClose, this)
					.addEventDelegate({
						onBeforeRendering: this.onBeforeRenderingPopup,
						onAfterRendering: this.onAfterRenderingPopup
					}, this);
};

/**
 * This event handler will be called before the Select Popup is opened.
 *
 * @private
 */
sap.m.Select.prototype.onBeforeOpen = function() {
	var oPopup = this.getPopup(),
		fnPopupTypeBeforeOpen = this["_onBeforeOpen" + this._getPopupType()];

	// add the active state to the Select HTMLDIVElement container
	this._addActiveState();

	oPopup.addContent(this._oList);

	this.addContent();

	fnPopupTypeBeforeOpen && fnPopupTypeBeforeOpen.call(this);
};

/**
 * This event handler will be called after the Select Popup is opened.
 *
 * @private
 */
sap.m.Select.prototype.onAfterOpen = function() {};

/**
 * This event handler will be called before the Popup is closed.
 *
 * @private
 */
sap.m.Select.prototype.onBeforeClose = function() {};

/**
 * This event handler will be called after the Popup is closed.
 *
 * @private
 */
sap.m.Select.prototype.onAfterClose = function() {

	// remove the active state of the Select HTMLDIVElement container
	this._removeActiveState();
};

/**
 * Setter for the pop-up.
 *
 * @param {sap.m.Dialog | sap.m.Popover} oPopup
 * @private
 */
sap.m.Select.prototype._setPopup = function(oPopup) {
	this._oPopup = oPopup;
};

/**
 * Setter for property <code>_sPopupType</code>.
 *
 * @private
 */
sap.m.Select.prototype._setPopupType = function(sPopupType) {
	this._sPopupType = sPopupType;
};

/**
 * Getter for property <code>_sPopupType</code>
 *
 * @returns {string}
 * @private
 */
sap.m.Select.prototype._getPopupType = function() {
	return this._sPopupType;
};

/* ----------------------------------------------------------- */
/* Popover                                                     */
/* ----------------------------------------------------------- */

/**
 * Creates an instance type of <code>sap.m.Popover</code>.
 *
 * @returns {sap.m.Popover}
 * @private
 */
sap.m.Select.prototype._createPopover = function() {

	// initialize Popover
	this._oPopover = new sap.m.Popover({
		showHeader: false,
		placement: sap.m.PlacementType.Vertical,
		offsetX: 0,
		offsetY: 0,
		initialFocus: this,
		bounce: false
	});

	this._decoratePopover(this._oPopover);

	return this._oPopover;
};

/**
 * Decorate a Popover instance by adding some private methods.
 *
 * @param {sap.m.Popover}
 * @private
 */
sap.m.Select.prototype._decoratePopover = function(oPopover) {
	var self = this;

	// adding additional capabilities to the Popover
	oPopover._removeArrow = function() {
		this._marginTop = 0;
		this._marginLeft = 0;
		this._marginRight = 0;
		this._marginBottom = 0;
		this._arrowOffset = 0;
		this._offsets = ["0 0", "0 0", "0 0", "0 0"];
	};

	oPopover._setPosition = function() {
		this._myPositions = ["begin bottom", "begin center", "begin top", "end center"];
		this._atPositions = ["begin top", "end center", "begin bottom", "begin center"];
	};

	oPopover._setArrowPosition = function() {};

	oPopover._setMinWidth = function(sWidth) {
		this.getDomRef().style.minWidth = sWidth;
	};

	oPopover._setWidth = function(sWidth) {
		var bAutoAdjustWidth = self.getAutoAdjustWidth(),
			bIconOnly = self.getType() === "IconOnly",
			oPopupContentDomRef;

		// set the width of the content
		if (sap.ui.Device.system.desktop || sap.ui.Device.system.tablet) {

			oPopupContentDomRef = this.getContent()[0];

			if (bAutoAdjustWidth) {
				oPopupContentDomRef.setWidth("auto");
				oPopupContentDomRef.getDomRef().style.minWidth = sWidth;
			} else {
				oPopupContentDomRef.setWidth(sWidth);
			}
		}

		if (!bIconOnly) {

			// set the width of the popover
			this.getDomRef().style.minWidth = sWidth;
		}
	};

	oPopover.open = function() {
		return this.openBy(self);
	};
};

/**
 * Required adaptations after rendering of the Popover.
 *
 * @private
 */
sap.m.Select.prototype._onAfterRenderingPopover = function() {
	var oPopover = this.getPopup(),
		sWidth = (this._$Select.outerWidth() / parseFloat(sap.m.BaseFontSize)) + "rem";

	// remove the Popover arrow
	oPopover._removeArrow();

	// position adaptations
	oPopover._setPosition();

	//
	if (sap.ui.Device.system.phone) {
		oPopover._setMinWidth("100%");
	} else {
		oPopover._setWidth(sWidth);
	}

	//
	if (!this._bHasParentBar && !this._bHasParentList) {
		oPopover.addStyleClass(sap.m.SelectRenderer.CSS_CLASS + "PopupStandalone");
	}
};

/* ----------------------------------------------------------- */
/* Dialog                                                      */
/* ----------------------------------------------------------- */

/**
 * Creates an instance type of <code>sap.m.Dialog</code>.
 *
 * @returns {sap.m.Dialog}
 * @private
 */
sap.m.Select.prototype._createDialog = function() {

	// initialize Dialog
	this._oDialog = new sap.m.Dialog({
		stretchOnPhone: true,
		customHeader: new sap.m.Bar({
			contentLeft: new sap.m.Input({
				value: this.getSelectedItem().getText(),
				width: "100%",
				editable: false
			})
		})
	});

	this._oDialog.getAggregation("customHeader").attachBrowserEvent("tap", function() {
		this._oDialog.close();
	}, this);

	return this._oDialog;
};

/**
 * Called before the Dialog is opened.
 *
 * @private
 */
sap.m.Select.prototype._onBeforeOpenDialog = function() {
	var oHeader = this.getPopup().getCustomHeader();

	oHeader.getContentLeft()[0].setValue(this.getSelectedItem().getText());
};

/* =========================================================== */
/* Lifecycle methods                                           */
/* =========================================================== */

/**
 * Initialization hook for the Select.
 *
 * @private
 */
sap.m.Select.prototype.init = function() {

	// initialize list
	this._createList();
};

/**
 * Required adaptations before rendering.
 *
 * @private
 */
sap.m.Select.prototype.onBeforeRendering = function() {
	var aItems = this.getItems(),
		oItem = this.getSelectedItem(),
		sKey = this.getSelectedKey();

	this._synchronizeSelectedItemAndKey(oItem, sKey, aItems);
	this._clearList();
	this._fillList(aItems);
};

/**
 * Required adaptations after rendering.
 *
 * @private
 */
sap.m.Select.prototype.onAfterRendering = function() {
	var $ParentBar,
		oPopup;

	this._cacheDomRefs();

	// whether the Select has a Bar or a List as a parent
	$ParentBar = this._$Select.closest(".sapMBar-CTX");

	// whether the Select has a Bar as parent
	this._bHasParentBar = !!$ParentBar.length;

	// whether the Select has a List as parent
	this._bHasParentList = !!this._$Select.closest(".sapMLIB-CTX").length;

	//
	this._sParentCTX = sap.m.SelectRenderer.CSS_CLASS + "Popup" + ($ParentBar.hasClass("sapMHeader-CTX") ? "Header-CTX" : "Footer-CTX");

	//
	this._setPopupType(sap.ui.Device.system.phone && !this._bHasParentBar ? "Dialog" : "Popover");

	oPopup = this.getPopup();

	// before re-render the pop-up, ensure that the DOM location could be determined
	if (oPopup && oPopup.getDomRef()) {

		if (this.isOpen()) {
			if (!this.hasContent()) {
				this.close();
			} else {

				// trigger an async re-rendering of the pop-up after the Select is rendered
				jQuery.sap.delayedCall(0, oPopup, "rerender");
			}
		}
	}
};

/**
 * Cleans up before destruction.
 *
 * @private
 */
sap.m.Select.prototype.exit = function() {
	var oPopup = this.getPopup();

	this._removeFocusableParentPopup(this._getParentPopup());

	this._$Select = null;
	this._$Label = null;

	if (this._oList) {
		this._oList.destroy();
		this._oList = null;
	}

	if (oPopup) {
		oPopup.destroy();
		this._oPopover = null;
		this._oDialog = null;
		this._oPopup = null;
	}
};

/* =========================================================== */
/* Event handlers                                              */
/* =========================================================== */

/**
 * Handle the touch start event on the Select.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Select.prototype.ontouchstart = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	// add the active state to the Select HTMLDIVElement container
	this._addActiveState();

	if (!this.hasContent() || !this.getEnabled()) {
		return;
	}

	// initialize the pop-up lazily
	this._initPopup();
};

/**
 * Handle the touch end event on the Select.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Select.prototype.ontouchend = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	if (!this.getEnabled()) {
		return;
	}

	if (!this.isOpen() || !this.hasContent()) {

		// remove the active state of the Select HTMLDIVElement container
		this._removeActiveState();
	}
};

/**
 * Handle the tap event on the Select.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 */
sap.m.Select.prototype.ontap = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	var oPopup = this.getPopup();

	if (!oPopup || !this.getEnabled()) {
		return;
	}

	if (this.isOpen()) {
		this.close();
		this._removeActiveState();
		return;
	}

	if (this.hasContent()) {
		this.open(true);
	}

	if (this.isOpen()) {

		// add the active state to the Select HTMLDIVElement container
		this._addActiveState();
	}
};

/**
 * Handle the selection change event on the List.
 *
 * @param {sap.ui.base.Event} oControlEvent
 * @private
 */
sap.m.Select.prototype._handleSelectionChangeEvent = function(oControlEvent) {
	var oListItem = oControlEvent.getParameter("listItem"),
		oNewSelectedItem = this._findMappedItem(oListItem);

	if (oListItem.getType() === "Inactive") {	// workaround: this is needed because the List fires the "selectionChange" event on inactive items
		return;
	}

	// pre-assertion
	jQuery.sap.assert(oNewSelectedItem, "The corresponding mapped item was not found on " + this);

	this.close();

	if (!oNewSelectedItem) {
		return;
	}

	// update the selected item
	this._updateSelectedItem(oNewSelectedItem);
};

/* ----------------------------------------------------------- */
/* Keyboard handling                                           */
/* ----------------------------------------------------------- */

/**
 * Handle the keypress event.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onkeypress = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	if (!this.getEnabled()) {
		return;
	}

	var oItem = this._findItemByFirstCharacter(String.fromCharCode(oEvent.which));	// jQuery oEvent.which normalizes oEvent.keyCode and oEvent.charCode

	if (oItem) {

		this._setSelectedItem({
			item: oItem,
			id: oItem.getId(),
			key: oItem.getKey(),
			fireChangeEvent: true,
			suppressInvalidate: true
		});

		this._focusItem(oItem._oListItem);
	}
};

/**
 * Handle when F4 or Alt + DOWN arrow are pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsapshow = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	// note: prevent browser address bar to be open in ie9, when F4 is pressed
	if (oEvent.keyCode === jQuery.sap.KeyCodes.F4) {
		oEvent.preventDefault();
	}

	if (this.isOpen()) {
		this.close();
		return;
	}

	if (this.hasContent()) {
		this.open(true);
	}
};

/**
 * Handle when Alt + UP arrow are pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsaphide = sap.m.Select.prototype.onsapshow;

/**
 * Handle when escape is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsapescape = function(oEvent) {

	if (this.isOpen()) {

		// mark the event for components that needs to know if the event was handled by the Select
		oEvent.setMarked();

		this.close();
	}
};

/**
 * Handle when enter is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsapenter = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	this.close();
};

/**
 * Handle when keyboard DOWN arrow is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsapdown = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	// note: prevent document scrolling when arrow keys are pressed
	oEvent.preventDefault();

	var oItem,
		iIndexOfSelectedItem = this.indexOfItem(this.getSelectedItem());

	// if the current selected item it the last one, do nothing
	if (iIndexOfSelectedItem === this.indexOfItem(this._findLastEnabledItem())) {
		return;
	}

	oItem = this._findFirstEnabledItem(this.getItems().splice(iIndexOfSelectedItem + 1));

	if (oItem) {

		this._setSelectedItem({
			item: oItem,
			id: oItem.getId(),
			key: oItem.getKey(),
			fireChangeEvent: true,
			suppressInvalidate: true
		});

		this._focusItem(oItem._oListItem);
	}
};

/**
 * Handle when keyboard UP arrow is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsapup = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	// note: prevent document scrolling when arrow keys are pressed
	oEvent.preventDefault();

	var oItem,
		iIndexOfSelectedItem = this.indexOfItem(this.getSelectedItem()),
		oFirstItem = this._findFirstEnabledItem();

	// if the current selected item it the first one, do nothing
	if (iIndexOfSelectedItem === this.indexOfItem(oFirstItem)) {
		return;
	}

	oItem = this._findLastEnabledItem(this.getItems().splice(0, iIndexOfSelectedItem));

	if (oItem) {

		this._setSelectedItem({
			item: oItem,
			id: oItem.getId(),
			key: oItem.getKey(),
			fireChangeEvent: true,
			suppressInvalidate: true
		});

		this._focusItem(this._getSelectedListItem());
	}
};

/**
 * Handle Home key pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsaphome = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	// note: prevent document scrolling when Home key is pressed
	oEvent.preventDefault();

	var oItem = this._findFirstEnabledItem();

	if (oItem) {

		this._setSelectedItem({
			item: oItem,
			id: oItem.getId(),
			key: oItem.getKey(),
			fireChangeEvent: true,
			suppressInvalidate: true
		});

		this._focusItem(this._getSelectedListItem());
	}
};

/**
 * Handle End key pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsapend = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	// note: prevent document scrolling when End key is pressed
	oEvent.preventDefault();

	var oItem = this._findLastEnabledItem(this.getItems());

	if (oItem) {

		this._setSelectedItem({
			item: oItem,
			id: oItem.getId(),
			key: oItem.getKey(),
			fireChangeEvent: true,
			suppressInvalidate: true
		});

		this._focusItem(this._getSelectedListItem());
	}
};

/**
 * Handle when page down key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsappagedown = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	// note: prevent document scrolling when page down key is pressed
	oEvent.preventDefault();

	this._setSelectedItemByIndex(this.indexOfItem(this.getSelectedItem()) + 20);
};

/**
 * Handle when page up key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Select.prototype.onsappageup = function(oEvent) {

	// mark the event for components that needs to know if the event was handled by the Select
	oEvent.setMarked();

	// note: prevent document scrolling when page up key is pressed
	oEvent.preventDefault();

	this._setSelectedItemByIndex(this.indexOfItem(this.getSelectedItem()) - 20);
};

/* =========================================================== */
/* API methods                                                 */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* protected methods                                           */
/* ----------------------------------------------------------- */

/**
 * This hook method can be used to add additional content.
 *
 * @param {sap.m.Dialog | sap.m.Popover} [oPopup]
 * @protected
 * @name sap.m.Select#addContent
 */
sap.m.Select.prototype.addContent = function(oPopup) {};

/**
 * Getter for the Select Popup.
 *
 * @returns {sap.m.Dialog | sap.m.Popover | null}
 * @protected
 */
sap.m.Select.prototype.getPopup = function() {
	return this._oPopup || null;
};

/**
 * Determines whether the Select has content or not.
 *
 * @returns {boolean}
 * @protected
 */
sap.m.Select.prototype.hasContent = function() {
	return !!this.getItems().length;
};

/**
 * This hook method is called before the Select Popup is rendered.
 *
 * @protected
 * @name sap.m.Select#onBeforeRenderingPopup
 */
sap.m.Select.prototype.onBeforeRenderingPopup = function() {
	var fnOnBeforeRenderingPopupType = this["_onBeforeRendering" + this._getPopupType()];

	this._removeFocusableParentPopup(this._getParentPopup());

	fnOnBeforeRenderingPopupType && fnOnBeforeRenderingPopupType.call(this);
};

/**
 * This hook method is called after the Select Popup is rendered.
 *
 * @protected
 * @name sap.m.Select#onAfterRenderingPopup
 */
sap.m.Select.prototype.onAfterRenderingPopup = function() {
	var fnOnAfterRenderingPopupType = this["_onAfterRendering" + this._getPopupType()];

	this._addFocusableParentPopup(this._getParentPopup());

	fnOnAfterRenderingPopupType && fnOnAfterRenderingPopupType.call(this);
};

/**
 * Open the Select.
 *
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.16
 * @name sap.m.Select#open
 * @function
 */
sap.m.Select.prototype.open = function(/* only for internal uses */ bSuppressScrollIntoView) {

	this.focus();

	// initialize the pop-up lazily
	this._initPopup();

	this.getPopup().open();

	return this;
};

/* ----------------------------------------------------------- */
/* public methods                                              */
/* ----------------------------------------------------------- */

/**
 * Setter for association <code>selectedItem</code>.
 *
 * @param {string | sap.ui.core.Item | null} vItem new value for association <code>selectedItem</code>
 *    Id of an sap.ui.core.Item which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an sap.ui.core.Item instance may be given or null.
 *    If the value of null is provided the first enabled item will be selected (if any).
 *
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @name sap.m.Select#setSelectedItem
 * @function
 */
sap.m.Select.prototype.setSelectedItem = function(vItem) {

	if (typeof vItem === "string") {
		vItem = sap.ui.getCore().byId(vItem);
	}

	if (!(vItem instanceof sap.ui.core.Item) && vItem !== null) {
		jQuery.sap.log.warning('Warning: setSelectedItem() "vItem" has to be an instance of sap.ui.core.Item, a valid sap.ui.core.Item id, or null on', this);
		return this;
	}

	if (!vItem) {
		vItem = this._findFirstEnabledItem();
	}

	// Update and synchronize "selectedItem" association,
	// "selectedKey" and "selectedItemId" properties.
	this._setSelectedItem({
		item: vItem || null,
		id: vItem ? vItem.getId() : "",
		key: vItem ? vItem.getKey() : "",
		suppressInvalidate: true
	});

	return this;
};

/**
 * Setter for property <code>selectedItemId</code>.
 *
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * If the provided <code>vItem</code> has a default value,
 * the first enabled item will be selected (if any).
 *
 * @param {string | undefined} vItem new value for property <code>selectedItemId</code>.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.12
 * @name sap.m.Select#setSelectedItemId
 * @function
 */
sap.m.Select.prototype.setSelectedItemId = function(vItem) {
	var oItem = sap.ui.getCore().byId(vItem);

	if (!(oItem instanceof sap.ui.core.Item) && vItem !== "" && vItem !== undefined) {
		jQuery.sap.log.warning('Warning: setSelectedItemId() "sItem" has to be a string id of an sap.ui.core.Item instance, an empty string or undefined on', this);
		return this;
	}

	if (!oItem) {
		oItem = this._findFirstEnabledItem();
	}

	// Update and synchronize "selectedItem" association,
	// "selectedKey" and "selectedItemId" properties.
	this._setSelectedItem({
		item: oItem || null,
		id: oItem ? oItem.getId() : "",
		key: oItem ? oItem.getKey() : "",
		suppressInvalidate: true
	});

	return this;
};

/**
 * Setter for property <code>selectedKey</code>.
 *
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 *
 * If the provided <code>sKey</code> has a default value,
 * the first enabled item will be selected (if any).
 * In the case that an item has the default key value, it will be selected instead.
 *
 * @param {string} sKey new value for property <code>selectedKey</code>.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.11
 * @name sap.m.Select#setSelectedKey
 * @function
 */
sap.m.Select.prototype.setSelectedKey = function(sKey) {
	var sKey = this.validateProperty("selectedKey", sKey),
		oItem = this.getItemByKey(sKey);

	if (oItem || (sKey === "")) {

		// If the "sKey" value is an empty string "" or undefined,
		// the first enabled item will be selected (if any).
		// In the case that an item has a default key value, it will be selected instead.
		if (!oItem && sKey === "") {
			oItem = this._findFirstEnabledItem();
		}

		// Update and synchronize "selectedItem" association,
		// "selectedKey" and "selectedItemId" properties.
		this._setSelectedItem({
			item: oItem || null,
			id: oItem ? oItem.getId() : "",
			key: oItem ? oItem.getKey() : "",
			suppressInvalidate: true
		});

		return this;
	}

	// note: setSelectedKey() method sometimes is called
	// before the items are added, in this case the "selectedItem" association
	// and "selectedItemId" property need to be updated in onBeforeRendering()
	return this.setProperty("selectedKey", sKey);	// update "selectedKey" property, re-rendering is needed
};

/**
 * Retrieves the item from the aggregation named <code>items</code> at the given 0-based index.
 *
 * @param {int} iIndex Index of the item to return.
 * @returns {sap.ui.core.Item | null} Item at the given index, or null if none.
 * @public
 * @since 1.16
 * @name sap.m.Select#getItemAt
 * @function
 */
sap.m.Select.prototype.getItemAt = function(iIndex) {
	return this.getItems()[+iIndex] || null;
};

/**
 * Retrieves the selected item object from the aggregation named <code>items</code>.
 *
 * @returns {sap.ui.core.Item | null} The current target of the <code>selectedItem</code> association, or null.
 * @public
 * @name sap.m.Select#getSelectedItem
 * @function
 */
sap.m.Select.prototype.getSelectedItem = function() {
	var vSelectedItem = this.getAssociation("selectedItem");

	return (vSelectedItem === null) ? null : sap.ui.getCore().byId(vSelectedItem) || null;
};

/**
 * Retrieves the first item from the aggregation named <code>items</code>.
 *
 * @returns {sap.ui.core.Item | null} The first item, or null if there are no items.
 * @public
 * @since 1.16
 * @name sap.m.Select#getFirstItem
 * @function
 */
sap.m.Select.prototype.getFirstItem = function() {
	return this.getItems()[0] || null;
};

/**
 * Retrieves the last item from the aggregation named <code>items</code>.
 *
 * @returns {sap.ui.core.Item | null} The last item, or null if there are no items.
 * @public
 * @since 1.16
 * @name sap.m.Select#getLastItem
 * @function
 */
sap.m.Select.prototype.getLastItem = function() {
	var aItems = this.getItems();

	return aItems[aItems.length - 1] || null;
};

/**
 * Retrieves the first item object from the aggregation named <code>items</code>,
 * based on the item key value supplied.
 *
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item | null}
 * @public
 * @since 1.16
 * @name sap.m.Select#getItemByKey
 * @function
 */
sap.m.Select.prototype.getItemByKey = function(sKey) {
	for (var i = 0, aItems = this.getItems(); i < aItems.length; i++) {
		if (aItems[i].getKey() === sKey) {
			return aItems[i];
		}
	}

	return null;
};

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id.
 * @returns {sap.ui.core.Item} the removed item or null.
 * @public
 * @name sap.m.Select#removeItem
 * @function
 */
sap.m.Select.prototype.removeItem = function(vItem) {
	var oItem;

	// remove the item
	vItem = this.removeAggregation("items", vItem);

	// if the removed item is selected
	if (vItem && vItem.getId() === this.getAssociation("selectedItem")) {

		oItem = this._findFirstEnabledItem();

		if (oItem) {

			this._setSelectedItem({
				item: oItem,
				id: oItem.getId(),
				key: oItem.getKey()
			});
		}
	}

	return vItem;
};

/**
 * Checks if the Select is open. It returns true when the Select is currently open,
 * this includes opening and closing animations, otherwise it returns false.
 *
 * @returns {boolean} Determines whether the Select is currently open (this includes opening and closing animations).
 * @public
 * @since 1.16
 * @name sap.m.Select#isOpen
 * @function
 */
sap.m.Select.prototype.isOpen = function() {
	var oPopup = this.getPopup();

	return !!(oPopup && oPopup.isOpen());
};

/**
 * Closes the Select.
 *
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.16
 * @name sap.m.Select#close
 * @function
 */
sap.m.Select.prototype.close = function() {
	var oPopup = this.getPopup();

	oPopup && oPopup.close();

	return this;
};
}; // end of sap/m/Select.js
if ( !jQuery.sap.isDeclared('sap.m.TablePersoController') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides TablePersoController
jQuery.sap.declare("sap.m.TablePersoController");
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained




/**
 * The TablePersoController can be used to connect a table that you want to provide
 * a personalization dialog for, with a persistence service such as one provided by
 * the unified shell.
 *
 * @param {string}
 *			[sId] optional id for the new control; generated automatically if
 *			no non-empty id is given Note: this can be omitted, no matter
 *			whether <code>mSettings</code> will be given or not!
 * @param {object}
 *			[mSettings] optional map/JSON-object with initial settings for the
 *			new component instance
 * @public
 *
 * @class Table Personalization Controller
 * @extends sap.ui.base.ManagedObject
 * @author SAP
 * @version 1.20.7
 * @name sap.m.TablePersoController
 */
sap.ui.base.ManagedObject.extend("sap.m.TablePersoController", /** @lends sap.m.TablePersoController */

{
	constructor: function(sId, mSettings) {

		sap.ui.base.ManagedObject.apply(this, arguments);

	},

	metadata: {
		properties: {
			"contentWidth": {type: "sap.ui.core.CSSSize"},
			"componentName": {type: "string", since: "1.20.2"}
		},
		aggregations: {
			"_tablePersoDialog": {
				type: "sap.m.TablePersoDialog",
				multiple: false,
				visibility: "hidden"
			},
			"persoService": {
				type: "Object",
				multiple: false
			}
		},
		associations: {
			"table": {
				type: "sap.m.Table",
				multiple: false
			},
			"tables": {
				type: "sap.m.Table",
				multiple: true
			}
		},
		events: {
			personalizationsDone: {}
		},
		library: "sap.m"
	}

});


/**
 * Initializes the TablePersoController instance after creation.
 *
 * @function
 * @name sap.m.TablePersoController.prototype.init
 * @protected
 */
sap.m.TablePersoController.prototype.init = function() {

	// Table Personalization schema
	this._schemaProperty = "_persoSchemaVersion";
	this._schemaVersion = "1.0";

	// To store the intermediate personalization data
	this._oPersonalizations = null;
	//Initialize delegate map
	this._mDelegateMap = {};
	//Initialize table personalization map
	this._mTablePersMap = {};
	//Internal flag which may be checked by clients which
	//have workaround for missing event in place
	this._triggersPersDoneEvent = true;

};

/**
 * Do some clean up: remove event delegates, etc
 *
 * @function
 * @name sap.m.TablePersoController.prototype.exit
 * @protected
 */
sap.m.TablePersoController.prototype.exit = function() {

	// Clean up onBeforRendering delegates
	this._callFunctionForAllTables(jQuery.proxy(function(oTable){
		oTable.removeDelegate(this._mDelegateMap[oTable]);
	}, this));
	
	
	delete this._oPersService;
	delete this._mDelegateMap;
	delete this._mTablePersMap;
};

/**
 * Activates the controller, i.e. tries to retrieve existing persisted
 * personalizations, creates a TablePersoDialog for the associated
 * table and attaches a close handler to apply the personalizations to
 * the table and persist them.
 * @public
 */
sap.m.TablePersoController.prototype.activate = function() {

	// Instantiate persistence service
	this._oPersService = this.getPersoService();
	// Add 'onBeforeRendering' delegates to all tables
	this._callFunctionForAllTables(this._createAndAddDelegateForTable);
	
	return this;
};

/**
 * Returns a  _tablePersoDialog instance if available. It can be NULL if
 * the controller has not been activated yet.
 *
 * @public
 */
sap.m.TablePersoController.prototype.getTablePersoDialog = function() {
	return this.getAggregation("_tablePersoDialog");
};


/**
 * Applies the personalizations by getting the existing personalizations
 * and adjusting to the table.
 *
 * @public
 */
sap.m.TablePersoController.prototype.applyPersonalizations = function(oTable) {
	var oReadPromise = this._oPersService.getPersData();
	var that = this;
	oReadPromise.done(function(oPersData) {
		that._adjustTable(oPersData, oTable);
	});
	oReadPromise.fail(function() {
		jQuery.sap.log.error("Problem reading persisted personalization data.");
	});
};

/**
 * Creates 'onBeforeRendering' delegate for geiven table and adds it to the controller'
 * '_mDelegateMap'
 *
 * @private
 */
sap.m.TablePersoController.prototype._createAndAddDelegateForTable = function(oTable) {
	if(!this._mDelegateMap[oTable]) {
		//Use 'jQuery.proxy' to conveniently use 'this' within the
		//delegate function
		var fnTableOnBeforeRenderingDel = jQuery.proxy(function () {
			// Try to retrieve existing persisted personalizations
			// and adjust the table
			this.applyPersonalizations(oTable);
			// This function will be called whenever its table is rendered or
			// re-rendered. The TablePersoDialog only needs to be created once, though!
			if(!this.getAggregation("_tablePersoDialog")) {
				// Create a new TablePersoDialog control for the associated table
				var oTablePersoDialog = new sap.m.TablePersoDialog({
					persoDialogFor: oTable,
					persoMap : this._getPersoColumnMap(oTable),
					persoService: this._oPersService,
					contentWidth : this.getContentWidth(),
				});

				// Link to this new TablePersoDialog via the aggregation
				this.setAggregation("_tablePersoDialog", oTablePersoDialog);

				// When the TablePersoDialog closes, we want to retrieve the personalizations
				// made, amend the table, and also persist them
				oTablePersoDialog.attachConfirm(jQuery.proxy(function() {
					this._oPersonalizations = oTablePersoDialog.retrievePersonalizations();
					this._callFunctionForAllTables(this._personalizeTable);
					this.savePersonalizations();
					this.firePersonalizationsDone();
				}, this));
			}
		}, this);
		//By adding our function as a delegate to the table's 'beforeRendering' event,
		//this._fnTableOnBeforeRenderingDel will be executed whenever the table is
		//rendered or re-rendered
		oTable.addDelegate({onBeforeRendering : fnTableOnBeforeRenderingDel});
		//Finally add delegate to map to enable proper housekeeping, i.e. cleaning
		//up delegate when TablePersoController instance is destroyed
		this._mDelegateMap[oTable] = fnTableOnBeforeRenderingDel;
	}
};






/**
 * Adjusts the table by getting the existing personalizations
 * and applying them to the table.
 *
 * @private
 */
sap.m.TablePersoController.prototype._adjustTable = function(oData, oTable) {
	if (oData && oData.hasOwnProperty(this._schemaProperty) && oData[this._schemaProperty] === this._schemaVersion) {
		this._oPersonalizations = oData;
		if(!!oTable) {
			this._personalizeTable(oTable);
		} else {
			this._callFunctionForAllTables(this._personalizeTable);
		}
		
	}
};


/**
 * Personalizes the table, i.e. sets column order and visibility
 * according to the stored personalization settings
 * 
 *
 * @private
 */
sap.m.TablePersoController.prototype._personalizeTable = function(oTable) {
	var mPersoMap = this._getPersoColumnMap(oTable);
	
	//mPersoMap may be null if oTable's id is not static 
	//or if any of the column ids is not static
	if(!!mPersoMap) {
		var bDoSaveMigration = false;
		// Set order and visibility
		for ( var c = 0, cl = this._oPersonalizations.aColumns.length; c < cl; c++) {
			var oNewSetting = this._oPersonalizations.aColumns[c];
			var oTableColumn = mPersoMap[oNewSetting.id];
			if (!oTableColumn) {
				//Fallback for deprecated personalization procedure
				oTableColumn = sap.ui.getCore().byId(oNewSetting.id);
				if(!!oTableColumn) {
					//migrate old persistence id
					jQuery.sap.log.info("Migrating personalization persistence id of column " + oNewSetting.id );
					oNewSetting.id = mPersoMap[oTableColumn];
					bDoSaveMigration = true;
				}
			}
			
			if (oTableColumn) {
				oTableColumn.setVisible(oNewSetting.visible);
				oTableColumn.setOrder(oNewSetting.order);
			} else {
				jQuery.sap.log.warning("Perso could not be applied to column " + oNewSetting.id + " - not found!");
			}
		}
		
		if(bDoSaveMigration) {
			this.savePersonalizations();
		}

		// Force re-rendering of Table for column reorder
		oTable.invalidate();
	}
};


/**
 * Persist the personalizations
 *
 * @public
 */
sap.m.TablePersoController.prototype.savePersonalizations = function() {

	var oBundle = this._oPersonalizations;

	// Add schema version to bundle
	oBundle[this._schemaProperty] = this._schemaVersion;

	// Commit to backend service
	var oWritePromise = this._oPersService.setPersData(oBundle);
	oWritePromise.done(function() {
		// all OK
	});
	oWritePromise.fail(function() {
		jQuery.sap.log.error("Problem persisting personalization data.");
	});

};


/**
 * Opens the TablePersoDialog, stores the personalized settings on close,
 * modifies the table columns, and sends them to the persistence service
 *
 * @public
 */
sap.m.TablePersoController.prototype.openDialog = function() {
	var oTablePersoDialog = this.getAggregation("_tablePersoDialog");
	if(!!oTablePersoDialog) {
		oTablePersoDialog.open();
	} else {
		jQuery.sap.log.warning("sap.m.TablePersoController: trying to open TablePersoDialog before TablePersoService has been activated.");
	}
};

/**
 * Reflector for the TablePersoDialog's Dialog's contentWidth property.
 * @public
 */
sap.m.TablePersoController.prototype.getContentWidth = function(sWidth) {
	var sResult = this.getProperty("contentWidth");
	var oTablePersoDialog = this.getAggregation("_tablePersoDialog");
	if(!!oTablePersoDialog) {
		sResult = oTablePersoDialog.getContentWidth();
	}
	return sResult;
};

sap.m.TablePersoController.prototype.setContentWidth = function(sWidth) {
	this.setProperty("contentWidth", sWidth, true);
	var oTablePersoDialog = this.getAggregation("_tablePersoDialog");
	if(!!oTablePersoDialog) {
		oTablePersoDialog.setContentWidth(sWidth);
	}
	return this;
};

/**
 * Using this method, the first part of tablePerso persistence ids can be
 * provided, in case the table's app does not provide that part itself.
 * 
 * If a component name is set using this method, it will be used, regardless of
 * whether the table's app has a different component name or not.
 * 
 * @public
 */
sap.m.TablePersoController.prototype.setComponentName = function(sCompName) {
	this.setProperty("componentName", sCompName, true);
	return this;
};

/**
 * Returns the controller's component name set via 'setComponentName' if present, otherwise it
 * delivers the given oControl's component name by recursive asking its
 * parents for their component name. If none of oControl's ancestors has a component
 * name, the function returns 'empty_component'.
 * 
 * @private
 */
sap.m.TablePersoController.prototype._getMyComponentName = function(oControl) {
	if(this.getComponentName()) {
		return this.getComponentName();
	}
	
	if (null === oControl) return "empty_component";
	var oMetadata = oControl.getMetadata();
	if ("component" === oControl.getMetadata().getStereotype()) return oMetadata._sComponentName;
	return this._getMyComponentName(oControl.getParent());
};

/**
 * Checks if a table is specified for the singular association 'table'.
 * Otherwise, the first table of the multiple association 'tables' will be returned.
 * This function returns controls, not ids!
 * 
 * @private
 */
sap.m.TablePersoController.prototype._getFirstTable = function() {
	var oTable = sap.ui.getCore().byId(this.getAssociation("table"));
	var aTables = this.getAssociation("tables");
	if(!oTable && aTables && aTables.length > 0) {
		oTable = sap.ui.getCore().byId(aTables[0]);
	}
	return oTable;
};

/**
 * Takes a function and calls it for all table, specified in the controller's
 * 'table' or 'tables' association. The passed in function must take
 * a table as first parameter!
 * 
 * @private
 */
sap.m.TablePersoController.prototype._callFunctionForAllTables = function(fnToCall) {
	var oTable = sap.ui.getCore().byId(this.getAssociation("table"));
	if(!!oTable) {
		fnToCall.call(this, oTable);
	}
	var aTables = this.getAssociation("tables");
	if(aTables) {
		for ( var i = 0, iLength = this.getAssociation("tables").length; i < iLength; i++) {
			oTable = sap.ui.getCore().byId(this.getAssociation("tables")[i]);
			fnToCall.call(this, oTable);
		}
	}
};

/**
* Simple heuristic to determine if an ID is generated or static
* @private
*/
sap.m.TablePersoController.prototype._isStatic = function (sId) {
	var sUidPrefix = sap.ui.getCore().getConfiguration().getUIDPrefix();
	var rGeneratedPrefix = new RegExp("^" + sUidPrefix);
	return ! rGeneratedPrefix.test(sId);
};


/**
 * Lazy instantiation of private member _mPersMap 
 * This is a map containg key value pairs of the following kind:
 * 		- key: a table column object
 * 		- value: column personalization identifier of the form 
 * 		  <componentName>-<tableIdSuffix>-<columnIDSuffix> 
 * and vice versa! This map is created once, before the corresponding 
 * table is rendered for the first time.
 * @param oTable the table for whose columns shall be the resulting map's keys.
 * @private
 */
sap.m.TablePersoController.prototype._getPersoColumnMap = function(oTable) {
	var mResult = this._mTablePersMap[oTable];
	if(!mResult){
		mResult = {};
		//convenience function to extract last part of an id
		//need this for columns and table
		var fnExtractIdSuffix = function(sId) {
			var iLastDashIndex = sId.lastIndexOf("-");
			//if no dash was found 'substring' will still work:
			//it returns the entire string, which should not happen
			//but would be ok in that case
			return sId.substring(iLastDashIndex + 1);
		};
		
		var sTableIdSuffix = fnExtractIdSuffix.call(this, oTable.getId());
		
		//Check table id. Must be static
		if(!this._isStatic(sTableIdSuffix)) {
			jQuery.sap.log.error("Table " + oTable.getId() + " must have a static id suffix. Otherwise personalization can not be persisted.");
			//Invalidate persoMap
			mResult = null;
			return null;
		}
		var sNextPersoColumnIdentifier;
		var sComponentName = this._getMyComponentName(oTable);
		
		
		var that = this;
		
		oTable.getColumns().forEach(function(oNextColumn) {
			//Check if result has been invalidated by a previous iteration
			if(!!mResult) {
				//'this' refers to the current table column
				var sNextColumnId = oNextColumn.getId();
				var sNextColumnIdSuffix = fnExtractIdSuffix.call(that, sNextColumnId);
				// columns must have static IDs for personalization to be stable
				if (!that._isStatic(sNextColumnIdSuffix)) {
					jQuery.sap.log.error("Suffix " + sNextColumnIdSuffix + " of table column " + sNextColumnId + " must be static. Otherwise personalization can not be persisted for its table.");
					//Invalidate persoMap
					mResult = null;
					return null;
				}
				//concatenate the parts
				sNextPersoColumnIdentifier = sComponentName + "-" + sTableIdSuffix + "-" + sNextColumnIdSuffix;
				//add column as key and identifier as value
				mResult[oNextColumn] = sNextPersoColumnIdentifier;
				//add vice versa as well
				mResult[sNextPersoColumnIdentifier] = oNextColumn;
			}
		});
		this._mTablePersMap[oTable] = mResult;
	}
	return mResult;
};


}; // end of sap/m/TablePersoController.js
if ( !jQuery.sap.isDeclared('sap.m.ActionSelect') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ActionSelect.
jQuery.sap.declare("sap.m.ActionSelect");




/**
 * Constructor for a new ActionSelect.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getButtons buttons} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Select#constructor sap.m.Select}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The ActionSelect control provides a list of predefined items that allows end users to choose options and additionally trigger some actions.
 * @extends sap.m.Select
 *
 * @author SAP AG 
 * @version 1.20.7
 *
 * @constructor   
 * @public
 * @since 1.16
 * @name sap.m.ActionSelect
 */
sap.m.Select.extend("sap.m.ActionSelect", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	associations : {
		"buttons" : {type : "sap.m.Button", multiple : true, singularName : "button"}
	}
}});


/**
 * Creates a new subclass of class sap.m.ActionSelect with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ActionSelect.extend
 * @function
 */


/**
 * Buttons to be added to the ActionSelect content.
 * 
 * @return {string[]}
 * @public
 * @name sap.m.ActionSelect#getButtons
 * @function
 */

	
/**
 *
 * @param {string | sap.m.Button} vButton
 *    Id of a button which becomes an additional target of this <code>buttons</code> association.
 *    Alternatively, a button instance may be given. 
 * @return {sap.m.ActionSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSelect#addButton
 * @function
 */

/**
 * @param {int | string | sap.m.Button} vButton the button to remove or its index or id
 * @return {string} the id of the removed button or null
 * @public
 * @name sap.m.ActionSelect#removeButton
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.m.ActionSelect#removeAllButtons
 * @function
 */

	
// Start of sap\m\ActionSelect.js
/* =========================================================== */
/* Internal methods and properties                             */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* Private methods                                             */
/* ----------------------------------------------------------- */

/**
 * Determines whether the ActionSelect has content or not.
 *
 * @return {boolean}
 * @override
 * @private
 */
sap.m.ActionSelect.prototype.hasContent = function() {
	return sap.m.Select.prototype.hasContent.call(this) || !!this.getButtons().length;
};

/**
 * Add additional content.
 *
 * @override
 * @private
 * @name sap.m.ActionSelect#addContent
 */
sap.m.ActionSelect.prototype.addContent = function() {
	var oCore = sap.ui.getCore(),
		oPopup = this.getPopup();

	this.getButtons().forEach(function(sButtonId) {
		oPopup.addContent(oCore.byId(sButtonId));
	});
};

/* =========================================================== */
/* Lifecycle methods                                           */
/* =========================================================== */

/**
 * Called after the ActionSelect pop-up is render.
 *
 * @override
 * @protected
 * @name sap.m.ActionSelect#onAfterRenderingPopup
 */
sap.m.ActionSelect.prototype.onAfterRenderingPopup = function() {
	sap.m.Select.prototype.onAfterRenderingPopup.call(this);

	this.getPopup().addStyleClass(sap.m.ActionSelectRenderer.CSS_CLASS + "Popup");
};

/* =========================================================== */
/* API methods                                                 */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* Public methods                                              */
/* ----------------------------------------------------------- */

/**
 * Button to be removed from the ActionSelect content.
 *
 * @param {int | string | sap.m.Button} vButton The button to remove or its index or id.
 * @returns {string} The id of the removed button or null.
 * @public
 * @name sap.m.ActionSelect#removeButton
 * @function
 */
sap.m.ActionSelect.prototype.removeButton = function(vButton) {
	var oPopup = this.getPopup();

	if (oPopup) {

		if (typeof vButton === "number") {
			vButton = this.getButtons()[vButton];
		}

		oPopup.removeContent(vButton);
	}

	return this.removeAssociation("buttons", vButton);
};

/**
 * Remove all buttons from the ActionSelect.
 *
 * @returns {string[]} An array with the ids of the removed elements (might be empty).
 * @public
 * @name sap.m.ActionSelect#removeAllButtons
 * @function
 */
sap.m.ActionSelect.prototype.removeAllButtons = function() {
	var oPopup = this.getPopup();

	if (oPopup) {
		this.getButtons().forEach(function(sButtonId) {
			oPopup.removeContent(sButtonId);
		});
	}

	return this.removeAllAssociation("buttons");
};
}; // end of sap/m/ActionSelect.js
