// Generated by CoffeeScript 1.6.3
(function() {
  ' Loads a template from the name of a zip that lives on the server.';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ServerTemplateModel = (function(_super) {
    __extends(ServerTemplateModel, _super);

    function ServerTemplateModel() {
      this.handleTemplate = __bind(this.handleTemplate, this);
      _ref = ServerTemplateModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ServerTemplateModel.prototype.initialize = function(options) {
      this.handleZipFcn = options.handleZipFcn;
      this.templateUri = options.templateUri;
      if (this.templateUri !== "blank") {
        return this.handleTemplate();
      }
    };

    ServerTemplateModel.prototype.handleTemplate = function() {
      var request, _this;
      request = new XMLHttpRequest();
      request.open("GET", "/template/" + this.templateUri, true);
      request.responseType = 'blob';
      _this = this;
      request.onreadystatechange = function(evt) {
        if (this.readyState === 4 && this.status === 200) {
          _this.handleZipFcn(this.response);
        }
        if (this.readyState === 4 && this.status === 404) {
          return console.error("Error loading template.");
        }
      };
      return request.send();
    };

    return ServerTemplateModel;

  })(Backbone.Model);

}).call(this);
