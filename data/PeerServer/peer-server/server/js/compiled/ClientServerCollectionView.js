// Generated by CoffeeScript 1.6.3
(function() {
  'Display and organization of the user-uploaded file collection.\nEdit/Done modes for saving.';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ClientServerCollectionView = (function(_super) {
    __extends(ClientServerCollectionView, _super);

    function ClientServerCollectionView() {
      this.selectRoute = __bind(this.selectRoute, this);
      this.selectServerFile = __bind(this.selectServerFile, this);
      this.select = __bind(this.select, this);
      this.appendServerFileToFileList = __bind(this.appendServerFileToFileList, this);
      this.editableFileName = __bind(this.editableFileName, this);
      this.eventKeypressWhileRenaming = __bind(this.eventKeypressWhileRenaming, this);
      this.eventDoneNamingFile = __bind(this.eventDoneNamingFile, this);
      this.eventCreateDynamic = __bind(this.eventCreateDynamic, this);
      this.createFile = __bind(this.createFile, this);
      this.eventCreateTemplate = __bind(this.eventCreateTemplate, this);
      this.eventCreateCSS = __bind(this.eventCreateCSS, this);
      this.eventCreateJS = __bind(this.eventCreateJS, this);
      this.eventCreateHTML = __bind(this.eventCreateHTML, this);
      this.handleFileDeleted = __bind(this.handleFileDeleted, this);
      this.handleRouteNameChange = __bind(this.handleRouteNameChange, this);
      this.handleFileChanged = __bind(this.handleFileChanged, this);
      this.handleFile = __bind(this.handleFile, this);
      this.eventDropFiles = __bind(this.eventDropFiles, this);
      this.eventUploadFiles = __bind(this.eventUploadFiles, this);
      this.preventDefault = __bind(this.preventDefault, this);
      this.eventSaveChanges = __bind(this.eventSaveChanges, this);
      this.eventKeyDown = __bind(this.eventKeyDown, this);
      this.clearAll = __bind(this.clearAll, this);
      this.eventDeleteFileConfirmed = __bind(this.eventDeleteFileConfirmed, this);
      this.eventRenameFile = __bind(this.eventRenameFile, this);
      this.eventDeleteClicked = __bind(this.eventDeleteClicked, this);
      this.eventMouseLeaveFile = __bind(this.eventMouseLeaveFile, this);
      this.eventMouseEnterFile = __bind(this.eventMouseEnterFile, this);
      this.eventSelectFile = __bind(this.eventSelectFile, this);
      this.resetClicksOnFileList = __bind(this.resetClicksOnFileList, this);
      this.setupConfirm = __bind(this.setupConfirm, this);
      this.addOneRoute = __bind(this.addOneRoute, this);
      this.addOneServerFile = __bind(this.addOneServerFile, this);
      this.addAll = __bind(this.addAll, this);
      this.showInitialSaveNotification = __bind(this.showInitialSaveNotification, this);
      this.renderFileLists = __bind(this.renderFileLists, this);
      this.render = __bind(this.render, this);
      _ref = ClientServerCollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ClientServerCollectionView.prototype.el = "#client-server-collection-view";

    ClientServerCollectionView.prototype.initialize = function(options) {
      this.serverFileCollection = options.serverFileCollection;
      this.routeCollection = options.routeCollection;
      this.userDatabase = options.userDatabase;
      this.handleZipFcn = options.handleZipFcn;
      this.activeView = null;
      this.fileViewContainer = this.$("#file-view-container");
      this.routeViewContainer = this.$("#route-view-container");
      this.uploadFilesRegion = this.$(".file-drop");
      this.saveNotificationContainer = this.$("#save-notification-container");
      this.saveNotification = this.$("#save-notification").miniNotification({
        show: false,
        hideOnClick: false
      });
      this.mainPane = this.$(".main-pane");
      this.leftSidebarContainer = this.$(".left-sidebar-container");
      this.leftSidebar = this.$(".left-sidebar");
      this.clearAllButton = this.$(".clear-all");
      this.fileListContainer = this.$(".file-list-container");
      this.tmplServerFileListItem = Handlebars.templates["file-list-item"];
      this.tmplRouteListItem = Handlebars.templates["route-list-item"];
      this.tmplEditableFileListItem = Handlebars.templates["editable-file-list-item"];
      this.tmplFileLists = Handlebars.templates["file-lists"];
      this.render();
      this.addAll();
      this.serverFileCollection.bind("add", this.addOneServerFile);
      this.serverFileCollection.bind("reset", this.addAll);
      this.serverFileCollection.bind("change:contents", this.handleFileChanged);
      this.serverFileCollection.bind("destroy", this.handleFileDeleted);
      this.routeCollection.bind("add", this.addOneRoute);
      this.routeCollection.bind("reset", this.addAll);
      this.routeCollection.bind("change:routePath", this.handleFileChanged);
      this.routeCollection.bind("change:routeCode", this.handleFileChanged);
      this.routeCollection.bind("change:name", this.handleFileChanged);
      this.routeCollection.bind("change:name", this.handleRouteNameChange);
      this.routeCollection.bind("destroy", this.handleFileDeleted);
      $(window).keydown(this.eventKeyDown);
      $("a[href=#]").attr("href", "javascript:void(0)");
      return this.showInitialSaveNotification();
    };

    ClientServerCollectionView.prototype.events = {
      "dragover .file-drop": "preventDefault",
      "drop .file-drop": "eventDropFiles",
      "click .file-list li[data-cid] input": "preventDefault",
      "blur .file-list li[data-cid] input": "eventDoneNamingFile",
      "keypress .file-list li[data-cid] input": "eventKeypressWhileRenaming",
      "click .file-list li[data-cid]": "eventSelectFile",
      "dblclick .file-list li[data-cid]": "eventRenameFile",
      "mouseenter .file-list li[data-cid]": "eventMouseEnterFile",
      "mouseleave .file-list li[data-cid]": "eventMouseLeaveFile",
      "click .file-list li[data-cid] .delete": "eventDeleteClicked",
      "click .upload-files": "eventUploadFiles",
      "click .save-changes": "eventSaveChanges",
      "click .create-menu .html": "eventCreateHTML",
      "click .create-menu .js": "eventCreateJS",
      "click .create-menu .css": "eventCreateCSS",
      "click .create-menu .template": "eventCreateTemplate",
      "click .create-menu .dynamic": "eventCreateDynamic"
    };

    ClientServerCollectionView.prototype.render = function() {
      this.routeViewContainer.hide();
      this.fileViewContainer.hide();
      this.uploadFilesRegion.show();
      $(this.clearAllButton).confirmDialog({
        message: "Are you sure?",
        confirmButton: "Clear All",
        cancelButton: "Cancel",
        onConfirmCallback: this.clearAll
      });
      return this.renderFileLists();
    };

    ClientServerCollectionView.prototype.renderFileLists = function() {
      this.fileListContainer.html(this.tmplFileLists);
      this.fileLists = this.$(".file-list");
      this.requiredFileList = this.$(".file-list.required");
      this.htmlFileList = this.$(".file-list.html");
      this.cssFileList = this.$(".file-list.css");
      this.jsFileList = this.$(".file-list.js");
      this.imageFileList = this.$(".file-list.img");
      this.templateFileList = this.$(".file-list.template");
      return this.dynamicFileList = this.$(".file-list.dynamic");
    };

    ClientServerCollectionView.prototype.showInitialSaveNotification = function() {
      var shouldShow;
      shouldShow = false;
      this.serverFileCollection.forEachDevelopmentFile(function(devFile) {
        if (devFile.get("hasBeenEdited") && devFile.isValid()) {
          return shouldShow = true;
        }
      });
      this.routeCollection.each(function(route) {
        if (!route.get("isProductionVersion") && route.get("hasBeenEdited") && route.isValid()) {
          return shouldShow = true;
        }
      });
      if (shouldShow) {
        return this.saveNotification.show();
      } else {
        return this.saveNotification.hide();
      }
    };

    ClientServerCollectionView.prototype.addAll = function() {
      this.renderFileLists();
      this.routeViewContainer.hide();
      this.fileViewContainer.hide();
      this.serverFileCollection.each(this.addOneServerFile);
      return this.routeCollection.each(this.addOneRoute);
    };

    ClientServerCollectionView.prototype.addOneServerFile = function(serverFile) {
      var listEl;
      if (serverFile.get("isProductionVersion")) {
        return;
      }
      listEl = this.tmplServerFileListItem({
        cid: serverFile.cid,
        name: serverFile.get("name"),
        isRequired: serverFile.get("isRequired")
      });
      this.appendServerFileToFileList(serverFile, listEl);
      this.$("li[data-cid] .delete").addClass("hide");
      return this.setupConfirm(serverFile);
    };

    ClientServerCollectionView.prototype.addOneRoute = function(route) {
      var listEl;
      if (route.get("isProductionVersion")) {
        return;
      }
      listEl = this.tmplRouteListItem({
        cid: route.cid,
        name: route.get("name")
      });
      this.dynamicFileList.append(listEl);
      this.$("li[data-cid] .delete").addClass("hide");
      return this.setupConfirm(route);
    };

    ClientServerCollectionView.prototype.setupConfirm = function(resource) {
      var _this = this;
      return $("li[data-cid=" + resource.cid + "] .delete").confirmDialog({
        message: "Are you sure?",
        confirmButton: "Delete",
        cancelButton: "Cancel",
        onConfirmCallback: function() {
          return _this.eventDeleteFileConfirmed(resource);
        }
      });
    };

    ClientServerCollectionView.prototype.resetClicksOnFileList = function() {
      this.fileLists.find("li").removeClass("active");
      return this.fileLists.find("li .delete").addClass("hide");
    };

    ClientServerCollectionView.prototype.eventSelectFile = function(event) {
      var cid, resource, route, serverFile, target;
      target = $(event.currentTarget);
      cid = target.attr("data-cid");
      serverFile = this.serverFileCollection.get(cid);
      route = this.routeCollection.get(cid);
      resource = serverFile || route;
      if (resource && (!this.activeView || this.activeView.model !== resource)) {
        this.uploadFilesRegion.hide();
        this.routeViewContainer.hide();
        this.fileViewContainer.hide();
        this.resetClicksOnFileList();
        target.find(".delete").removeClass("hide");
        if (serverFile) {
          this.selectServerFile(serverFile, target);
        } else if (route) {
          this.selectRoute(route, target);
        }
      }
      return false;
    };

    ClientServerCollectionView.prototype.eventMouseEnterFile = function(event) {
      var target;
      target = $(event.currentTarget);
      return target.find(".delete").removeClass("hide");
    };

    ClientServerCollectionView.prototype.eventMouseLeaveFile = function(event) {
      var target;
      target = $(event.currentTarget);
      return target.find(".delete").addClass("hide");
    };

    ClientServerCollectionView.prototype.eventDeleteClicked = function(event) {
      return event.stopPropagation();
    };

    ClientServerCollectionView.prototype.eventRenameFile = function(event) {
      var serverFile, target;
      target = $(event.currentTarget);
      serverFile = this.serverFileCollection.get(target.attr("data-cid"));
      if (!serverFile) {
        return;
      }
      return this.editableFileName(serverFile, target);
    };

    ClientServerCollectionView.prototype.eventDeleteFileConfirmed = function(resource) {
      resource.destroy();
      if (this.activeView && this.activeView.model === resource) {
        this.activeView.remove();
        return this.activeView = null;
      }
    };

    ClientServerCollectionView.prototype.clearAll = function() {
      var model;
      while (model = this.serverFileCollection.first()) {
        model.destroy();
      }
      while (model = this.routeCollection.first()) {
        model.destroy();
      }
      this.serverFileCollection.reset();
      this.routeCollection.reset();
      return this.userDatabase.clear();
    };

    ClientServerCollectionView.prototype.eventKeyDown = function(event) {
      if (event.which === 83 && (event.ctrlKey || event.metaKey)) {
        this.eventSaveChanges();
        return false;
      }
    };

    ClientServerCollectionView.prototype.eventSaveChanges = function() {
      var allAreValid;
      allAreValid = true;
      this.serverFileCollection.forEachDevelopmentFile(function(devFile) {
        if (devFile.isValid()) {
          return devFile.save({
            hasBeenEdited: false
          });
        } else {
          return allAreValid = false;
        }
      });
      this.routeCollection.each(function(route) {
        if (route.isValid()) {
          return route.save({
            hasBeenEdited: false
          });
        } else {
          return allAreValid = false;
        }
      });
      if (allAreValid) {
        this.saveNotification.hide();
        this.serverFileCollection.createProductionVersion();
        return this.routeCollection.createProductionVersion();
      }
    };

    ClientServerCollectionView.prototype.preventDefault = function(event) {
      event.preventDefault();
      return false;
    };

    ClientServerCollectionView.prototype.eventUploadFiles = function() {
      if (this.activeView) {
        this.activeView.remove();
      }
      this.activeView = null;
      this.resetClicksOnFileList();
      this.fileViewContainer.hide();
      this.routeViewContainer.hide();
      return this.uploadFilesRegion.show();
    };

    ClientServerCollectionView.prototype.eventDropFiles = function(event) {
      var droppedFiles, file, _i, _len;
      event.preventDefault();
      droppedFiles = event.originalEvent.dataTransfer.files;
      for (_i = 0, _len = droppedFiles.length; _i < _len; _i++) {
        file = droppedFiles[_i];
        this.handleFile(file);
      }
      return false;
    };

    ClientServerCollectionView.prototype.handleFile = function(file) {
      var fileType, reader,
        _this = this;
      if (file.type === "application/zip" || file.type === "application/x-zip") {
        this.handleZipFcn(file);
        return;
      }
      reader = new FileReader();
      fileType = ServerFile.rawTypeToFileType(file.type);
      if (fileType === ServerFile.fileTypeEnum.IMG) {
        reader.readAsDataURL(file);
      } else {
        reader.readAsText(file);
      }
      return reader.onload = function(evt) {
        var contents, serverFile;
        contents = evt.target.result;
        serverFile = new ServerFile({
          name: file.name,
          size: file.size,
          type: file.type,
          contents: contents
        });
        _this.serverFileCollection.add(serverFile);
        return serverFile.save();
      };
    };

    ClientServerCollectionView.prototype.handleFileChanged = function(model) {
      model.save({
        hasBeenEdited: true
      });
      return this.showInitialSaveNotification();
    };

    ClientServerCollectionView.prototype.handleRouteNameChange = function(route) {
      return this.$("li[data-cid=" + route.cid + "] > a").text(route.get("name"));
    };

    ClientServerCollectionView.prototype.handleFileDeleted = function(model) {
      return this.$("[data-cid=" + model.cid + "]").remove();
    };

    ClientServerCollectionView.prototype.eventCreateHTML = function() {
      var serverFile;
      serverFile = new ServerFile({
        type: "text/html"
      });
      return this.createFile(serverFile);
    };

    ClientServerCollectionView.prototype.eventCreateJS = function() {
      var serverFile;
      serverFile = new ServerFile({
        type: "application/x-javascript"
      });
      return this.createFile(serverFile);
    };

    ClientServerCollectionView.prototype.eventCreateCSS = function() {
      var serverFile;
      serverFile = new ServerFile({
        type: "text/css"
      });
      return this.createFile(serverFile);
    };

    ClientServerCollectionView.prototype.eventCreateTemplate = function() {
      var serverFile;
      serverFile = new ServerFile({
        type: "text/x-handlebars-template"
      });
      return this.createFile(serverFile);
    };

    ClientServerCollectionView.prototype.createFile = function(serverFile) {
      this.resetClicksOnFileList();
      this.serverFileCollection.add(serverFile, {
        silent: true
      });
      return this.editableFileName(serverFile, null);
    };

    ClientServerCollectionView.prototype.eventCreateDynamic = function() {
      var listEl, route;
      this.resetClicksOnFileList();
      route = new Route();
      this.routeCollection.add(route);
      route.save();
      listEl = this.$("li[data-cid=" + route.cid + "]");
      return this.selectRoute(route, listEl);
    };

    ClientServerCollectionView.prototype.eventDoneNamingFile = function(event) {
      var listEl, newListEl, serverFile, target;
      target = $(event.currentTarget);
      listEl = target.parents("li[data-cid]");
      serverFile = this.serverFileCollection.get(listEl.attr("data-cid"));
      serverFile.save({
        name: target.val()
      });
      newListEl = this.tmplServerFileListItem({
        cid: serverFile.cid,
        name: serverFile.get("name"),
        isRequired: serverFile.get("isRequired")
      });
      newListEl = $($.parseHTML(newListEl));
      listEl.replaceWith(newListEl);
      this.setupConfirm(serverFile);
      return this.selectServerFile(serverFile, newListEl);
    };

    ClientServerCollectionView.prototype.eventKeypressWhileRenaming = function(event) {
      if (event.keyCode === 13) {
        return this.eventDoneNamingFile(event);
      }
    };

    ClientServerCollectionView.prototype.editableFileName = function(serverFile, listElToReplace) {
      var listEl, listElTop;
      listEl = this.tmplEditableFileListItem({
        cid: serverFile.cid,
        name: serverFile.get("name")
      });
      if (listElToReplace) {
        listEl = $($.parseHTML(listEl));
        listElToReplace.replaceWith(listEl);
      } else {
        this.appendServerFileToFileList(serverFile, listEl);
      }
      listEl = $("li[data-cid=" + serverFile.cid + "]");
      listElTop = listEl.offset().top;
      if ($(window).scrollTop() < listElTop) {
        $(window).scrollTop(listElTop - 60);
      }
      return listEl.find("input").focus();
    };

    ClientServerCollectionView.prototype.appendServerFileToFileList = function(serverFile, listEl) {
      var section;
      section = null;
      if (serverFile.get("isRequired")) {
        section = this.requiredFileList;
      } else {
        switch (serverFile.get("fileType")) {
          case ServerFile.fileTypeEnum.HTML:
            section = this.htmlFileList;
            break;
          case ServerFile.fileTypeEnum.CSS:
            section = this.cssFileList;
            break;
          case ServerFile.fileTypeEnum.JS:
            section = this.jsFileList;
            break;
          case ServerFile.fileTypeEnum.IMG:
            section = this.imageFileList;
            break;
          case ServerFile.fileTypeEnum.TEMPLATE:
            section = this.templateFileList;
            break;
          default:
            console.error("Error: Could not find proper place for file. " + serverFile.get("name"));
        }
      }
      if (section) {
        return section.append(listEl);
      }
    };

    ClientServerCollectionView.prototype.select = function(listEl, view) {
      listEl.addClass("active");
      if (this.activeView) {
        this.activeView.remove();
      }
      return this.activeView = view;
    };

    ClientServerCollectionView.prototype.selectServerFile = function(serverFile, listEl) {
      var serverFileView;
      serverFileView = new ServerFileView({
        model: serverFile
      });
      this.select(listEl, serverFileView);
      this.fileViewContainer.html(serverFileView.render().el);
      this.uploadFilesRegion.hide();
      this.routeViewContainer.hide();
      return this.fileViewContainer.show();
    };

    ClientServerCollectionView.prototype.selectRoute = function(route, listEl) {
      var routeView;
      routeView = new RouteView({
        model: route
      });
      this.select(listEl, routeView);
      this.routeViewContainer.html(routeView.render().el);
      this.uploadFilesRegion.hide();
      this.fileViewContainer.hide();
      this.routeViewContainer.show();
      return routeView.focus();
    };

    return ClientServerCollectionView;

  })(Backbone.View);

}).call(this);
