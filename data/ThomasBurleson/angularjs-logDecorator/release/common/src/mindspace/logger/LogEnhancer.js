// Generated by uRequire v0.6.14 - template: 'UMD' 
(function (window, global) {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;

"use strict";
(function (factory) {
  if (typeof exports === 'object') {
    var nr = new (require('urequire').NodeRequirer) ('mindspace/logger/LogEnhancer', module, __dirname, '.');
    module.exports = factory(nr.require, exports, module, nr.require('../utils/supplant'), nr.require('../utils/makeTryCatch'), nr.require('../utils/DateTime'), nr.require('../utils/BrowserDetect'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', '../utils/supplant', '../utils/makeTryCatch', '../utils/DateTime', '../utils/BrowserDetect'], factory) } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, supplant, makeTryCatch, DateTime, BrowserDetect) {
  

var enhanceLogger = function ($log) {
    var separator = "::", _$log = function ($log) {
        return {
          log: $log.log,
          info: $log.info,
          warn: $log.warn,
          debug: $log.debug,
          error: $log.error
        };
      }($log), colorify = function (message, colorCSS) {
        var isChrome = BrowserDetect.browser == "Chrome" || BrowserDetect.browser == "PhantomJS", canColorize = isChrome && colorCSS !== undefined;
        return canColorize ? [
          "%c" + message,
          colorCSS
        ] : [message];
      }, prepareLogFn = function (logFn, className, colorCSS) {
        var enhancedLogFn = function () {
          try {
            var args = Array.prototype.slice.call(arguments), now = DateTime.formattedNow();
            args[0] = supplant("{0} - {1}{2}", [
              now,
              className,
              args[0]
            ]);
            args = colorify(supplant.apply(null, args), colorCSS);
            logFn.apply(null, args);
          } catch (error) {
            $log.error("LogEnhancer ERROR: " + error);
          }
        };
        enhancedLogFn.logs = [];
        return enhancedLogFn;
      }, getInstance = function (className, colorCSS, customSeparator) {
        className = className !== undefined ? className + (customSeparator || separator) : "";
        var instance = {
            log: prepareLogFn(_$log.log, className, colorCSS),
            info: prepareLogFn(_$log.info, className, colorCSS),
            warn: prepareLogFn(_$log.warn, className, colorCSS),
            debug: prepareLogFn(_$log.debug, className, colorCSS),
            error: prepareLogFn(_$log.error, className)
          };
        if (angular.isDefined(angular.makeTryCatch)) {
          instance.tryCatch = angular.makeTryCatch(instance.error, instance);
        }
        return instance;
      };
    $log.getInstance = getInstance;
    return $log;
  };
  return enhanceLogger;


})
}).call(this, (typeof exports === 'object' ? global : window), (typeof exports === 'object' ? global : window))