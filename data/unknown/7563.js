! âœ– / env;
node;
var fs = require("fs");
var UglifyJS = require("uglify-js");
var moment = require("moment");
var version = require("./version.json");
var baseUrl = "html/src/";
var outputUrl = "build/";
var addToChangeLog = function(m)  {
   var log = "
";
   log = "##### v" + version.version + " b " + version.build + "
";
   log = "*" + version.date + "*

";
   log = m + "

";
   fs.appendFileSync("./CHANGELOG.md", log);
}
;
var updateVersionFile = function()  {
   var jsHeader = "/**
";
   jsHeader = " *	@property Version - autogenerated with build script, holds current verison info
";
   jsHeader = " */
";
   jsHeader = "// DO NOT EDIT. Updated from version.json
SQR.Version = ";
   fs.writeFileSync("./version.json", JSON.stringify(version));
   fs.writeFileSync(baseUrl + "Version.js", jsHeader + JSON.stringify(version) + ";");
}
;
var walk = function(dir, filelist)  {
   var files = fs.readdirSync(dir);
   var filelist = filelist || [];
   files.forEach(function(file)  {
         if (fs.statSync(dir + file).isDirectory())  {
            filelist = walk(dir + file + "/", filelist);
         }
          else  {
            if (file.indexOf(".") != 0) filelist.push(dir + file)         }
      }
   );
   return filelist;
}
;
var minify = function(set)  {
   var includes = [];
   for (var i = 0; i < set.length; i++)  {
         includes.push(set[i]);
      }
   var result = "";
   try {
      result = UglifyJS.minify(includes);
   }
   catch (e) {
      console.log(e);
   }
   return result.code;
}
;
var concat = function(set)  {
   var concatFile = "";
   for (var i = 0; i < set.length; i++)  {
         var f = set[i];
         var name = f.substring(baseUrl.length);
         concatFile = "/* --- --- [" + name + "] --- --- */

";
         concatFile = fs.readFileSync(f);
         concatFile = "

";
      }
   return concatFile;
}
;
var createBucket = function(folder, files)  {
   files = files || [];
   if (folder instanceof Array)  {
      folder.forEach(function(f)  {
            files = files.concat(walk(baseUrl + f + "/"));
         }
      );
   }
    else  {
      files = files.concat(walk(baseUrl + folder + "/"));
   }
   var result =  {} ;
   result.concat = concat(files);
   result.mini = minify(files);
   return result;
}
;
var saveBucket = function(bucket, fileBase)  {
   var cf = outputUrl + fileBase + ".js";
   var mf = outputUrl + fileBase + ".min.js";
   fs.writeFileSync(cf, bucket.concat);
   fs.writeFileSync(mf, bucket.mini);
   var cs = fs.statSync(cf).size;
   var ms = fs.statSync(mf).size;
   var cks = cs / 1024 | 0;
   var mks = ms / 1024 | 0;
   console.log("[ " + cf + "	" + cs + " bytes	" + cks + " kb ]");
   console.log("[ " + mf + "	" + ms + " bytes	" + mks + " kb ]");
}
;
var jsifyShaders = function(folder)  {
   var set = walk(baseUrl + folder + "/");
   var concatFile = "SQR.GLSL = {
";
   for (var i = 0; i < set.length; i++)  {
         var f = set[i];
         var name = f.substring(baseUrl + "glsl/".length);
         concatFile = "	/* --- --- [" + name + "] --- --- */
";
         concatFile = "	"" + name + "": "";
         var file = fs.readFileSync(f).toString().split("
");
         for (var j = 0; j < file.length; j++)  {
               var l = file[j];
               if (l.indexOf("//") > - 1 && l.indexOf("//#") == - 1) l = l.substring(0, l.indexOf("//"))               if (l.match(/^([\s\t]*)$/)) continue               concatFile = l + "\n";
            }
         concatFile = "",
";
      }
   concatFile = "};
";
   var result =  {} ;
   result.concat = concatFile;
   result.mini = UglifyJS.minify(concatFile,  {
         fromString:true      }
   ).code;
   return result;
}
;
var logMessage = process.argv[2];
if (! logMessage)  {
   console.error("ABORT. Please provide a log message for this build.");
   return ;
}
version.build++;
version.date = moment().format("MMM Do YYYY");
console.log("[ Squareroot.js v" + version.version + " build " + version.build + " ]");
addToChangeLog(logMessage);
updateVersionFile();
var core = createBucket(["common", "math", "two"], [baseUrl + "SQR.js", baseUrl + "Version.js"]);
saveBucket(core, "sqr");
saveBucket(jsifyShaders("glsl"), "sqr-glsl");
saveBucket(createBucket("primitives"), "sqr-primitives");
saveBucket(createBucket("extras"), "sqr-extras");
