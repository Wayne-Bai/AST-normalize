/**
 * @fileOverview Batch script that updates the regexes.js file from the
 * regexes.yaml and regexes-custom.yaml files
 */
/*global process, __dirname, console*/

var yaml = require('yamlparser');
var path = require('path');
var fs = require('fs');

var uaParsers = [];
var osParsers = [];
var deviceParsers = [];


/**
 * Parses the yaml file and adds to our ua / os parser array
 *
 * @param {String} yamlstring The string that needs to be extracted
 * @returns {Boolean} Success
 * @api private
 */

function convert (yamlstring) {
  // try to see if we can parse the yaml
  var parsed;

  try {
    parsed = yaml.eval(yamlstring);
  }
  catch (err) {
    console.error('Could not parse content as YAML', err);
    process.exit(1);
  }

  // make sure we have a correct structure because we are reading this from
  // a remote resource, they might change the structure of the JSON
  if ((!parsed.user_agents_parsers ||
      (parsed.user_agents_parsers.length === 0)) &&
      (!parsed.device_parsers ||
      (parsed.device_parsers.length === 0))) {
    console.error('Weird YAML structure');
    process.exit(1);
  }

  // \o/ working, now to create pre-compiled version of the regexps
  // now we can try to generate a smaller file so it will take less memory
  // once we load thing in memory
  var agents = parsed.user_agent_parsers || [];
  var os = parsed.os_parsers || [];
  var devices = parsed.device_parsers || [];
  var i = 0;
  var l = 0;
  var parser = null;

  // small note about the odd syntax here, we need to JSON.stringify the
  // regexp to ensure we are storing it as a valid escaped string

  // generate array of user agent parsers
  for (i = 0, l = agents.length; i < l; i++) {
    parser = '    r: new RegExp(' +
      JSON.stringify(agents[i].regex) +
      ')';
    if (agents[i].family_replacement) {
      parser += ',\n    family: ' +
        JSON.stringify(agents[i].family_replacement);
    }
    if (agents[i].v1_replacement) {
      parser += ',\n    major: ' +
        JSON.stringify(agents[i].v1_replacement);
    }
    if (agents[i].v2_replacement) {
      parser += ',\n    minor: ' +
        JSON.stringify(agents[i].v2_replacement);
    }
    if (agents[i].v3_replacement) {
      parser += ',\n    patch: ' +
        JSON.stringify(agents[i].v3_replacement);
    }
    uaParsers.push('  {\n' + parser + '\n  }');
  }

  // generate array of OS parsers
  for (i = 0, l = os.length; i < l; i++) {
    parser = '    r: new RegExp(' +
      JSON.stringify(os[i].regex) +
      ')';
    if (os[i].os_replacement) {
      parser += ',\n    family: ' +
        JSON.stringify(os[i].family_replacement);
    }
    if (os[i].v1_replacement) {
      parser += ',\n    major: ' +
        JSON.stringify(os[i].v1_replacement);
    }
    if (os[i].v2_replacement) {
      parser += ',\n    minor: ' +
        JSON.stringify(os[i].v2_replacement);
    }
    if (os[i].v3_replacement) {
      parser += ',\n    patch: ' +
        JSON.stringify(os[i].v3_replacement);
    }
    if (os[i].v4_replacement) {
      parser += ',\n    patchMinor: ' +
        JSON.stringify(os[i].v4_replacement);
    }
    osParsers.push('  {\n' + parser + '\n  }');
  }

  // generate array of device parsers
  for (i = 0, l = devices.length; i < l; i++) {
    parser = '    r: new RegExp(' +
      JSON.stringify(devices[i].regex) + ')';
    if (devices[i].device_replacement) {
      parser += ',\n    device: ' +
        JSON.stringify(devices[i].device_replacement);
    }
    deviceParsers.push('  {\n' + parser + '\n  }');
  }

  return true;
}


/**
 * Writes the list of regexes to a file
 */
function output () {
  // now that we have generated arrays of parsers we are gonna build up the
  // file and make it happen.
  var contents = '/**\n' +
    ' * @fileOverview Regular expressions to use to parse user-agents.\n' +
    ' * This file is automatically generated by "update-regexes.js".\n' +
    ' *\n' +
    ' * DO NOT UPDATE THE FILE MANUALLY (see README.md)\n' +
    ' */\n' +
    '/*global exports*/\n';
  contents += 'exports.user_agents_parsers = [\n' +
    uaParsers.join(',\n') +
    '\n];\n\n';
  contents += 'exports.os_parsers = [\n' +
    osParsers.join(',\n') +
    '\n];\n\n';
  contents += 'exports.device_parsers = [\n' +
    deviceParsers.join(',\n') +
    '\n];\n';

  fs.writeFileSync(path.join(__dirname, 'regexes.js'), contents, 'utf8');
}

// Add our custom regexes to start with
console.log('read regexes-custom.yaml...');
yamlstring = fs.readFileSync(
  path.join(__dirname, 'regexes-custom.yaml'), 'utf8');
console.log('read regexes-custom.yaml... done');
if (yamlstring) {
  console.log('convert regexes-custom.yaml...');
  convert(yamlstring);
  console.log('convert regexes-custom.yaml... done');
}

// Complete with the ua-parser project's YAML file
console.log('read regexes.yaml...');
var yamlstring = fs.readFileSync(
  path.join(__dirname, 'regexes.yaml'), 'utf8');
console.log('read regexes.yaml... done');
console.log('convert regexes.yaml...');
convert(yamlstring);
console.log('convert regexes.yaml... done');

console.log('write regexes.js...');
output();
console.log('write regexes.js... done');
